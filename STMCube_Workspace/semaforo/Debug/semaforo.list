
semaforo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005804  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080059a4  080059a4  000159a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059e0  080059e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080059e0  080059e0  000159e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059e8  080059e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059e8  080059e8  000159e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059ec  080059ec  000159ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080059f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049f0  2000000c  080059fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200049fc  080059fc  000249fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016755  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002bde  00000000  00000000  00036791  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001270  00000000  00000000  00039370  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001138  00000000  00000000  0003a5e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003616  00000000  00000000  0003b718  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e22e  00000000  00000000  0003ed2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000957c6  00000000  00000000  0004cf5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e2722  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d78  00000000  00000000  000e27a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000000c 	.word	0x2000000c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800598c 	.word	0x0800598c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000010 	.word	0x20000010
 80001dc:	0800598c 	.word	0x0800598c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <Init_Semaphore>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int Init_Semaphore (void) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0

  sid_Semaphore = osSemaphoreNew(2U, 2U, NULL);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2102      	movs	r1, #2
 80004e8:	2002      	movs	r0, #2
 80004ea:	f002 f8d7 	bl	800269c <osSemaphoreNew>
 80004ee:	4602      	mov	r2, r0
 80004f0:	4b09      	ldr	r3, [pc, #36]	; (8000518 <Init_Semaphore+0x38>)
 80004f2:	601a      	str	r2, [r3, #0]
  if (sid_Semaphore == NULL) {
    ; // Semaphore object not created, handle failure
  }

  tid_Thread_Semaphore = osThreadNew(Thread_Semaphore, NULL, NULL);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2100      	movs	r1, #0
 80004f8:	4808      	ldr	r0, [pc, #32]	; (800051c <Init_Semaphore+0x3c>)
 80004fa:	f001 ffc5 	bl	8002488 <osThreadNew>
 80004fe:	4602      	mov	r2, r0
 8000500:	4b07      	ldr	r3, [pc, #28]	; (8000520 <Init_Semaphore+0x40>)
 8000502:	601a      	str	r2, [r3, #0]
  if (tid_Thread_Semaphore == NULL) {
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <Init_Semaphore+0x40>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d102      	bne.n	8000512 <Init_Semaphore+0x32>
    return(-1);
 800050c:	f04f 33ff 	mov.w	r3, #4294967295
 8000510:	e000      	b.n	8000514 <Init_Semaphore+0x34>
  }

  return(0);
 8000512:	2300      	movs	r3, #0
}
 8000514:	4618      	mov	r0, r3
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20004934 	.word	0x20004934
 800051c:	08000761 	.word	0x08000761
 8000520:	20004930 	.word	0x20004930

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b08e      	sub	sp, #56	; 0x38
 8000528:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052a:	f000 fab1 	bl	8000a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052e:	f000 f825 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000532:	f000 f8b5 	bl	80006a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000536:	f000 f889 	bl	800064c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  osKernelInitialize();
 800053a:	f001 ff3d 	bl	80023b8 <osKernelInitialize>
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */

  Init_Semaphore();
 800053e:	f7ff ffcf 	bl	80004e0 <Init_Semaphore>
  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */

    char txData[50]= "";;
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	f107 0308 	add.w	r3, r7, #8
 800054a:	222e      	movs	r2, #46	; 0x2e
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f005 fa13 	bl	800597a <memset>
    sprintf(txData, "%s", "inicio\r\n");
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	4a07      	ldr	r2, [pc, #28]	; (8000574 <main+0x50>)
 8000558:	ca07      	ldmia	r2, {r0, r1, r2}
 800055a:	c303      	stmia	r3!, {r0, r1}
 800055c:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t *) txData, sizeof(txData),1000);
 800055e:	1d39      	adds	r1, r7, #4
 8000560:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000564:	2232      	movs	r2, #50	; 0x32
 8000566:	4804      	ldr	r0, [pc, #16]	; (8000578 <main+0x54>)
 8000568:	f001 fc39 	bl	8001dde <HAL_UART_Transmit>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800056c:	f001 ff58 	bl	8002420 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000570:	e7fe      	b.n	8000570 <main+0x4c>
 8000572:	bf00      	nop
 8000574:	080059a4 	.word	0x080059a4
 8000578:	20004938 	.word	0x20004938

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	2230      	movs	r2, #48	; 0x30
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f005 f9f5 	bl	800597a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	4b27      	ldr	r3, [pc, #156]	; (8000644 <SystemClock_Config+0xc8>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a26      	ldr	r2, [pc, #152]	; (8000644 <SystemClock_Config+0xc8>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	4b24      	ldr	r3, [pc, #144]	; (8000644 <SystemClock_Config+0xc8>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	4b21      	ldr	r3, [pc, #132]	; (8000648 <SystemClock_Config+0xcc>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a20      	ldr	r2, [pc, #128]	; (8000648 <SystemClock_Config+0xcc>)
 80005c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b1e      	ldr	r3, [pc, #120]	; (8000648 <SystemClock_Config+0xcc>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d8:	2301      	movs	r3, #1
 80005da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e2:	2302      	movs	r3, #2
 80005e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ec:	2304      	movs	r3, #4
 80005ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80005f0:	2364      	movs	r3, #100	; 0x64
 80005f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005f8:	2304      	movs	r3, #4
 80005fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 0320 	add.w	r3, r7, #32
 8000600:	4618      	mov	r0, r3
 8000602:	f000 fd1f 	bl	8001044 <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800060c:	f000 f8e8 	bl	80007e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000614:	2302      	movs	r3, #2
 8000616:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000620:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	2103      	movs	r1, #3
 800062c:	4618      	mov	r0, r3
 800062e:	f000 ff4b 	bl	80014c8 <HAL_RCC_ClockConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000638:	f000 f8d2 	bl	80007e0 <Error_Handler>
  }
}
 800063c:	bf00      	nop
 800063e:	3750      	adds	r7, #80	; 0x50
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000652:	4a12      	ldr	r2, [pc, #72]	; (800069c <MX_USART2_UART_Init+0x50>)
 8000654:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800065c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000672:	220c      	movs	r2, #12
 8000674:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000684:	f001 fb5e 	bl	8001d44 <HAL_UART_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800068e:	f000 f8a7 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20004938 	.word	0x20004938
 800069c:	40004400 	.word	0x40004400

080006a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	4b26      	ldr	r3, [pc, #152]	; (8000754 <MX_GPIO_Init+0xb4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a25      	ldr	r2, [pc, #148]	; (8000754 <MX_GPIO_Init+0xb4>)
 80006c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b23      	ldr	r3, [pc, #140]	; (8000754 <MX_GPIO_Init+0xb4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <MX_GPIO_Init+0xb4>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a1e      	ldr	r2, [pc, #120]	; (8000754 <MX_GPIO_Init+0xb4>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <MX_GPIO_Init+0xb4>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	4b18      	ldr	r3, [pc, #96]	; (8000754 <MX_GPIO_Init+0xb4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a17      	ldr	r2, [pc, #92]	; (8000754 <MX_GPIO_Init+0xb4>)
 80006f8:	f043 0308 	orr.w	r3, r3, #8
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b15      	ldr	r3, [pc, #84]	; (8000754 <MX_GPIO_Init+0xb4>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0308 	and.w	r3, r3, #8
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000710:	4811      	ldr	r0, [pc, #68]	; (8000758 <MX_GPIO_Init+0xb8>)
 8000712:	f000 fc63 	bl	8000fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000716:	2301      	movs	r3, #1
 8000718:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	4619      	mov	r1, r3
 8000728:	480c      	ldr	r0, [pc, #48]	; (800075c <MX_GPIO_Init+0xbc>)
 800072a:	f000 fad5 	bl	8000cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800072e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000732:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000734:	2301      	movs	r3, #1
 8000736:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073c:	2300      	movs	r3, #0
 800073e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	4619      	mov	r1, r3
 8000746:	4804      	ldr	r0, [pc, #16]	; (8000758 <MX_GPIO_Init+0xb8>)
 8000748:	f000 fac6 	bl	8000cd8 <HAL_GPIO_Init>

}
 800074c:	bf00      	nop
 800074e:	3720      	adds	r7, #32
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40023800 	.word	0x40023800
 8000758:	40020c00 	.word	0x40020c00
 800075c:	40020000 	.word	0x40020000

08000760 <Thread_Semaphore>:

/* USER CODE BEGIN 4 */
void Thread_Semaphore (void *argument) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  osStatus_t val;

  while (1) {
    ; // Insert thread code here...

    val = osSemaphoreAcquire(sid_Semaphore, 10U);       // wait for max. 10 ticks for semaphore token to get available
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <Thread_Semaphore+0x54>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	210a      	movs	r1, #10
 800076e:	4618      	mov	r0, r3
 8000770:	f002 f832 	bl	80027d8 <osSemaphoreAcquire>
 8000774:	60f8      	str	r0, [r7, #12]
    switch (val) {
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	f113 0f03 	cmn.w	r3, #3
 800077c:	d013      	beq.n	80007a6 <Thread_Semaphore+0x46>
 800077e:	2b00      	cmp	r3, #0
 8000780:	d003      	beq.n	800078a <Thread_Semaphore+0x2a>
 8000782:	f113 0f04 	cmn.w	r3, #4
 8000786:	d010      	beq.n	80007aa <Thread_Semaphore+0x4a>
      case osErrorResource:
        break;
      case osErrorParameter:
        break;
      default:
        break;
 8000788:	e010      	b.n	80007ac <Thread_Semaphore+0x4c>
    	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800078a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800078e:	480a      	ldr	r0, [pc, #40]	; (80007b8 <Thread_Semaphore+0x58>)
 8000790:	f000 fc3d 	bl	800100e <HAL_GPIO_TogglePin>
    	  osDelay(100);
 8000794:	2064      	movs	r0, #100	; 0x64
 8000796:	f001 ff53 	bl	8002640 <osDelay>
    	  osSemaphoreRelease(sid_Semaphore);              // return a token back to a semaphore
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <Thread_Semaphore+0x54>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4618      	mov	r0, r3
 80007a0:	f002 f880 	bl	80028a4 <osSemaphoreRelease>
        break;
 80007a4:	e002      	b.n	80007ac <Thread_Semaphore+0x4c>
        break;
 80007a6:	bf00      	nop
 80007a8:	e000      	b.n	80007ac <Thread_Semaphore+0x4c>
        break;
 80007aa:	bf00      	nop
    }

    osThreadYield();                                    // suspend thread
 80007ac:	f001 ff16 	bl	80025dc <osThreadYield>
    val = osSemaphoreAcquire(sid_Semaphore, 10U);       // wait for max. 10 ticks for semaphore token to get available
 80007b0:	e7da      	b.n	8000768 <Thread_Semaphore+0x8>
 80007b2:	bf00      	nop
 80007b4:	20004934 	.word	0x20004934
 80007b8:	40020c00 	.word	0x40020c00

080007bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a04      	ldr	r2, [pc, #16]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d101      	bne.n	80007d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ce:	f000 f981 	bl	8000ad4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40010000 	.word	0x40010000

080007e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
	...

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b12      	ldr	r3, [pc, #72]	; (8000844 <HAL_MspInit+0x54>)
 80007fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fe:	4a11      	ldr	r2, [pc, #68]	; (8000844 <HAL_MspInit+0x54>)
 8000800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000804:	6453      	str	r3, [r2, #68]	; 0x44
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <HAL_MspInit+0x54>)
 8000808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	603b      	str	r3, [r7, #0]
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <HAL_MspInit+0x54>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081a:	4a0a      	ldr	r2, [pc, #40]	; (8000844 <HAL_MspInit+0x54>)
 800081c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000820:	6413      	str	r3, [r2, #64]	; 0x40
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <HAL_MspInit+0x54>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	210f      	movs	r1, #15
 8000832:	f06f 0001 	mvn.w	r0, #1
 8000836:	f000 fa25 	bl	8000c84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800

08000848 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a19      	ldr	r2, [pc, #100]	; (80008cc <HAL_UART_MspInit+0x84>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d12b      	bne.n	80008c2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <HAL_UART_MspInit+0x88>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	4a17      	ldr	r2, [pc, #92]	; (80008d0 <HAL_UART_MspInit+0x88>)
 8000874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000878:	6413      	str	r3, [r2, #64]	; 0x40
 800087a:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <HAL_UART_MspInit+0x88>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <HAL_UART_MspInit+0x88>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a10      	ldr	r2, [pc, #64]	; (80008d0 <HAL_UART_MspInit+0x88>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <HAL_UART_MspInit+0x88>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008a2:	230c      	movs	r3, #12
 80008a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ae:	2303      	movs	r3, #3
 80008b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008b2:	2307      	movs	r3, #7
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4619      	mov	r1, r3
 80008bc:	4805      	ldr	r0, [pc, #20]	; (80008d4 <HAL_UART_MspInit+0x8c>)
 80008be:	f000 fa0b 	bl	8000cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008c2:	bf00      	nop
 80008c4:	3728      	adds	r7, #40	; 0x28
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40004400 	.word	0x40004400
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40020000 	.word	0x40020000

080008d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08c      	sub	sp, #48	; 0x30
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80008e8:	2200      	movs	r2, #0
 80008ea:	6879      	ldr	r1, [r7, #4]
 80008ec:	2019      	movs	r0, #25
 80008ee:	f000 f9c9 	bl	8000c84 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80008f2:	2019      	movs	r0, #25
 80008f4:	f000 f9e2 	bl	8000cbc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008f8:	2300      	movs	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <HAL_InitTick+0xa0>)
 80008fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000900:	4a1d      	ldr	r2, [pc, #116]	; (8000978 <HAL_InitTick+0xa0>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	6453      	str	r3, [r2, #68]	; 0x44
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <HAL_InitTick+0xa0>)
 800090a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000914:	f107 0210 	add.w	r2, r7, #16
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4611      	mov	r1, r2
 800091e:	4618      	mov	r0, r3
 8000920:	f000 ffc0 	bl	80018a4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000924:	f000 ffaa 	bl	800187c <HAL_RCC_GetPCLK2Freq>
 8000928:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800092a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800092c:	4a13      	ldr	r2, [pc, #76]	; (800097c <HAL_InitTick+0xa4>)
 800092e:	fba2 2303 	umull	r2, r3, r2, r3
 8000932:	0c9b      	lsrs	r3, r3, #18
 8000934:	3b01      	subs	r3, #1
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <HAL_InitTick+0xa8>)
 800093a:	4a12      	ldr	r2, [pc, #72]	; (8000984 <HAL_InitTick+0xac>)
 800093c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <HAL_InitTick+0xa8>)
 8000940:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000944:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000946:	4a0e      	ldr	r2, [pc, #56]	; (8000980 <HAL_InitTick+0xa8>)
 8000948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800094a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <HAL_InitTick+0xa8>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <HAL_InitTick+0xa8>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000958:	4809      	ldr	r0, [pc, #36]	; (8000980 <HAL_InitTick+0xa8>)
 800095a:	f000 ffd5 	bl	8001908 <HAL_TIM_Base_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d104      	bne.n	800096e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000964:	4806      	ldr	r0, [pc, #24]	; (8000980 <HAL_InitTick+0xa8>)
 8000966:	f001 f804 	bl	8001972 <HAL_TIM_Base_Start_IT>
 800096a:	4603      	mov	r3, r0
 800096c:	e000      	b.n	8000970 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800096e:	2301      	movs	r3, #1
}
 8000970:	4618      	mov	r0, r3
 8000972:	3730      	adds	r7, #48	; 0x30
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40023800 	.word	0x40023800
 800097c:	431bde83 	.word	0x431bde83
 8000980:	20004978 	.word	0x20004978
 8000984:	40010000 	.word	0x40010000

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <HardFault_Handler+0x4>

0800099c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <MemManage_Handler+0x4>

080009a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a6:	e7fe      	b.n	80009a6 <BusFault_Handler+0x4>

080009a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ac:	e7fe      	b.n	80009ac <UsageFault_Handler+0x4>

080009ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009c0:	4802      	ldr	r0, [pc, #8]	; (80009cc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009c2:	f000 fffa 	bl	80019ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20004978 	.word	0x20004978

080009d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009d4:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <SystemInit+0x60>)
 80009d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009da:	4a15      	ldr	r2, [pc, #84]	; (8000a30 <SystemInit+0x60>)
 80009dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80009e4:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <SystemInit+0x64>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <SystemInit+0x64>)
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009f0:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <SystemInit+0x64>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <SystemInit+0x64>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <SystemInit+0x64>)
 80009fc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a04:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <SystemInit+0x64>)
 8000a08:	4a0b      	ldr	r2, [pc, #44]	; (8000a38 <SystemInit+0x68>)
 8000a0a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <SystemInit+0x64>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a08      	ldr	r2, [pc, #32]	; (8000a34 <SystemInit+0x64>)
 8000a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a16:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <SystemInit+0x64>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a1e:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <SystemInit+0x60>)
 8000a20:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a24:	609a      	str	r2, [r3, #8]
#endif
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	e000ed00 	.word	0xe000ed00
 8000a34:	40023800 	.word	0x40023800
 8000a38:	24003010 	.word	0x24003010

08000a3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a74 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a42:	e003      	b.n	8000a4c <LoopCopyDataInit>

08000a44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a4a:	3104      	adds	r1, #4

08000a4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a4c:	480b      	ldr	r0, [pc, #44]	; (8000a7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a54:	d3f6      	bcc.n	8000a44 <CopyDataInit>
  ldr  r2, =_sbss
 8000a56:	4a0b      	ldr	r2, [pc, #44]	; (8000a84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a58:	e002      	b.n	8000a60 <LoopFillZerobss>

08000a5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a5c:	f842 3b04 	str.w	r3, [r2], #4

08000a60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a64:	d3f9      	bcc.n	8000a5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a66:	f7ff ffb3 	bl	80009d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a6a:	f004 ff57 	bl	800591c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a6e:	f7ff fd59 	bl	8000524 <main>
  bx  lr    
 8000a72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a74:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a78:	080059f0 	.word	0x080059f0
  ldr  r0, =_sdata
 8000a7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a80:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000a84:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000a88:	200049fc 	.word	0x200049fc

08000a8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a8c:	e7fe      	b.n	8000a8c <ADC_IRQHandler>
	...

08000a90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a94:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <HAL_Init+0x40>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a0d      	ldr	r2, [pc, #52]	; (8000ad0 <HAL_Init+0x40>)
 8000a9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <HAL_Init+0x40>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a0a      	ldr	r2, [pc, #40]	; (8000ad0 <HAL_Init+0x40>)
 8000aa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <HAL_Init+0x40>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a07      	ldr	r2, [pc, #28]	; (8000ad0 <HAL_Init+0x40>)
 8000ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab8:	2003      	movs	r0, #3
 8000aba:	f000 f8d8 	bl	8000c6e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f7ff ff0a 	bl	80008d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac4:	f7ff fe94 	bl	80007f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023c00 	.word	0x40023c00

08000ad4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_IncTick+0x20>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_IncTick+0x24>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <HAL_IncTick+0x24>)
 8000ae6:	6013      	str	r3, [r2, #0]
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	20000004 	.word	0x20000004
 8000af8:	200049b8 	.word	0x200049b8

08000afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return uwTick;
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <HAL_GetTick+0x14>)
 8000b02:	681b      	ldr	r3, [r3, #0]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	200049b8 	.word	0x200049b8

08000b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2a:	68ba      	ldr	r2, [r7, #8]
 8000b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b30:	4013      	ands	r3, r2
 8000b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b46:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	60d3      	str	r3, [r2, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <__NVIC_GetPriorityGrouping+0x18>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	0a1b      	lsrs	r3, r3, #8
 8000b66:	f003 0307 	and.w	r3, r3, #7
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	db0b      	blt.n	8000ba2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	f003 021f 	and.w	r2, r3, #31
 8000b90:	4907      	ldr	r1, [pc, #28]	; (8000bb0 <__NVIC_EnableIRQ+0x38>)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	095b      	lsrs	r3, r3, #5
 8000b98:	2001      	movs	r0, #1
 8000b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000e100 	.word	0xe000e100

08000bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	6039      	str	r1, [r7, #0]
 8000bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	db0a      	blt.n	8000bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	490c      	ldr	r1, [pc, #48]	; (8000c00 <__NVIC_SetPriority+0x4c>)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	0112      	lsls	r2, r2, #4
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bdc:	e00a      	b.n	8000bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4908      	ldr	r1, [pc, #32]	; (8000c04 <__NVIC_SetPriority+0x50>)
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	f003 030f 	and.w	r3, r3, #15
 8000bea:	3b04      	subs	r3, #4
 8000bec:	0112      	lsls	r2, r2, #4
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	440b      	add	r3, r1
 8000bf2:	761a      	strb	r2, [r3, #24]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000e100 	.word	0xe000e100
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b089      	sub	sp, #36	; 0x24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	f1c3 0307 	rsb	r3, r3, #7
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	bf28      	it	cs
 8000c26:	2304      	movcs	r3, #4
 8000c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	2b06      	cmp	r3, #6
 8000c30:	d902      	bls.n	8000c38 <NVIC_EncodePriority+0x30>
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3b03      	subs	r3, #3
 8000c36:	e000      	b.n	8000c3a <NVIC_EncodePriority+0x32>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43da      	mvns	r2, r3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c50:	f04f 31ff 	mov.w	r1, #4294967295
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5a:	43d9      	mvns	r1, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	4313      	orrs	r3, r2
         );
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3724      	adds	r7, #36	; 0x24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff ff4c 	bl	8000b14 <__NVIC_SetPriorityGrouping>
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
 8000c90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c96:	f7ff ff61 	bl	8000b5c <__NVIC_GetPriorityGrouping>
 8000c9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	68b9      	ldr	r1, [r7, #8]
 8000ca0:	6978      	ldr	r0, [r7, #20]
 8000ca2:	f7ff ffb1 	bl	8000c08 <NVIC_EncodePriority>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cac:	4611      	mov	r1, r2
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ff80 	bl	8000bb4 <__NVIC_SetPriority>
}
 8000cb4:	bf00      	nop
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff ff54 	bl	8000b78 <__NVIC_EnableIRQ>
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b089      	sub	sp, #36	; 0x24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
 8000cf2:	e159      	b.n	8000fa8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	697a      	ldr	r2, [r7, #20]
 8000d04:	4013      	ands	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	f040 8148 	bne.w	8000fa2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d003      	beq.n	8000d22 <HAL_GPIO_Init+0x4a>
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	2b12      	cmp	r3, #18
 8000d20:	d123      	bne.n	8000d6a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	08da      	lsrs	r2, r3, #3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	3208      	adds	r2, #8
 8000d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	220f      	movs	r2, #15
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4013      	ands	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	691a      	ldr	r2, [r3, #16]
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	f003 0307 	and.w	r3, r3, #7
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	08da      	lsrs	r2, r3, #3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3208      	adds	r2, #8
 8000d64:	69b9      	ldr	r1, [r7, #24]
 8000d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	2203      	movs	r2, #3
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 0203 	and.w	r2, r3, #3
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d00b      	beq.n	8000dbe <HAL_GPIO_Init+0xe6>
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d007      	beq.n	8000dbe <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000db2:	2b11      	cmp	r3, #17
 8000db4:	d003      	beq.n	8000dbe <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	2b12      	cmp	r3, #18
 8000dbc:	d130      	bne.n	8000e20 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	2203      	movs	r2, #3
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	68da      	ldr	r2, [r3, #12]
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000df4:	2201      	movs	r2, #1
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	091b      	lsrs	r3, r3, #4
 8000e0a:	f003 0201 	and.w	r2, r3, #1
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	689a      	ldr	r2, [r3, #8]
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	f000 80a2 	beq.w	8000fa2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b56      	ldr	r3, [pc, #344]	; (8000fbc <HAL_GPIO_Init+0x2e4>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	4a55      	ldr	r2, [pc, #340]	; (8000fbc <HAL_GPIO_Init+0x2e4>)
 8000e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e6e:	4b53      	ldr	r3, [pc, #332]	; (8000fbc <HAL_GPIO_Init+0x2e4>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e7a:	4a51      	ldr	r2, [pc, #324]	; (8000fc0 <HAL_GPIO_Init+0x2e8>)
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	089b      	lsrs	r3, r3, #2
 8000e80:	3302      	adds	r3, #2
 8000e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f003 0303 	and.w	r3, r3, #3
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	220f      	movs	r2, #15
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a48      	ldr	r2, [pc, #288]	; (8000fc4 <HAL_GPIO_Init+0x2ec>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d019      	beq.n	8000eda <HAL_GPIO_Init+0x202>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a47      	ldr	r2, [pc, #284]	; (8000fc8 <HAL_GPIO_Init+0x2f0>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d013      	beq.n	8000ed6 <HAL_GPIO_Init+0x1fe>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a46      	ldr	r2, [pc, #280]	; (8000fcc <HAL_GPIO_Init+0x2f4>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d00d      	beq.n	8000ed2 <HAL_GPIO_Init+0x1fa>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a45      	ldr	r2, [pc, #276]	; (8000fd0 <HAL_GPIO_Init+0x2f8>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d007      	beq.n	8000ece <HAL_GPIO_Init+0x1f6>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a44      	ldr	r2, [pc, #272]	; (8000fd4 <HAL_GPIO_Init+0x2fc>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d101      	bne.n	8000eca <HAL_GPIO_Init+0x1f2>
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	e008      	b.n	8000edc <HAL_GPIO_Init+0x204>
 8000eca:	2307      	movs	r3, #7
 8000ecc:	e006      	b.n	8000edc <HAL_GPIO_Init+0x204>
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e004      	b.n	8000edc <HAL_GPIO_Init+0x204>
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	e002      	b.n	8000edc <HAL_GPIO_Init+0x204>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e000      	b.n	8000edc <HAL_GPIO_Init+0x204>
 8000eda:	2300      	movs	r3, #0
 8000edc:	69fa      	ldr	r2, [r7, #28]
 8000ede:	f002 0203 	and.w	r2, r2, #3
 8000ee2:	0092      	lsls	r2, r2, #2
 8000ee4:	4093      	lsls	r3, r2
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eec:	4934      	ldr	r1, [pc, #208]	; (8000fc0 <HAL_GPIO_Init+0x2e8>)
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	089b      	lsrs	r3, r3, #2
 8000ef2:	3302      	adds	r3, #2
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000efa:	4b37      	ldr	r3, [pc, #220]	; (8000fd8 <HAL_GPIO_Init+0x300>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	43db      	mvns	r3, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4013      	ands	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f1e:	4a2e      	ldr	r2, [pc, #184]	; (8000fd8 <HAL_GPIO_Init+0x300>)
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f24:	4b2c      	ldr	r3, [pc, #176]	; (8000fd8 <HAL_GPIO_Init+0x300>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f48:	4a23      	ldr	r2, [pc, #140]	; (8000fd8 <HAL_GPIO_Init+0x300>)
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f4e:	4b22      	ldr	r3, [pc, #136]	; (8000fd8 <HAL_GPIO_Init+0x300>)
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f72:	4a19      	ldr	r2, [pc, #100]	; (8000fd8 <HAL_GPIO_Init+0x300>)
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f78:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <HAL_GPIO_Init+0x300>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f9c:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <HAL_GPIO_Init+0x300>)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	61fb      	str	r3, [r7, #28]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	2b0f      	cmp	r3, #15
 8000fac:	f67f aea2 	bls.w	8000cf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	3724      	adds	r7, #36	; 0x24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40013800 	.word	0x40013800
 8000fc4:	40020000 	.word	0x40020000
 8000fc8:	40020400 	.word	0x40020400
 8000fcc:	40020800 	.word	0x40020800
 8000fd0:	40020c00 	.word	0x40020c00
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40013c00 	.word	0x40013c00

08000fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	807b      	strh	r3, [r7, #2]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fec:	787b      	ldrb	r3, [r7, #1]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ff2:	887a      	ldrh	r2, [r7, #2]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ff8:	e003      	b.n	8001002 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ffa:	887b      	ldrh	r3, [r7, #2]
 8000ffc:	041a      	lsls	r2, r3, #16
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	619a      	str	r2, [r3, #24]
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
 8001016:	460b      	mov	r3, r1
 8001018:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	695a      	ldr	r2, [r3, #20]
 800101e:	887b      	ldrh	r3, [r7, #2]
 8001020:	401a      	ands	r2, r3
 8001022:	887b      	ldrh	r3, [r7, #2]
 8001024:	429a      	cmp	r2, r3
 8001026:	d104      	bne.n	8001032 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001028:	887b      	ldrh	r3, [r7, #2]
 800102a:	041a      	lsls	r2, r3, #16
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001030:	e002      	b.n	8001038 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001032:	887a      	ldrh	r2, [r7, #2]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	619a      	str	r2, [r3, #24]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e22d      	b.n	80014b2 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	2b00      	cmp	r3, #0
 8001060:	d075      	beq.n	800114e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001062:	4ba3      	ldr	r3, [pc, #652]	; (80012f0 <HAL_RCC_OscConfig+0x2ac>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f003 030c 	and.w	r3, r3, #12
 800106a:	2b04      	cmp	r3, #4
 800106c:	d00c      	beq.n	8001088 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800106e:	4ba0      	ldr	r3, [pc, #640]	; (80012f0 <HAL_RCC_OscConfig+0x2ac>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001076:	2b08      	cmp	r3, #8
 8001078:	d112      	bne.n	80010a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800107a:	4b9d      	ldr	r3, [pc, #628]	; (80012f0 <HAL_RCC_OscConfig+0x2ac>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001082:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001086:	d10b      	bne.n	80010a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001088:	4b99      	ldr	r3, [pc, #612]	; (80012f0 <HAL_RCC_OscConfig+0x2ac>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d05b      	beq.n	800114c <HAL_RCC_OscConfig+0x108>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d157      	bne.n	800114c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e208      	b.n	80014b2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010a8:	d106      	bne.n	80010b8 <HAL_RCC_OscConfig+0x74>
 80010aa:	4b91      	ldr	r3, [pc, #580]	; (80012f0 <HAL_RCC_OscConfig+0x2ac>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a90      	ldr	r2, [pc, #576]	; (80012f0 <HAL_RCC_OscConfig+0x2ac>)
 80010b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b4:	6013      	str	r3, [r2, #0]
 80010b6:	e01d      	b.n	80010f4 <HAL_RCC_OscConfig+0xb0>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010c0:	d10c      	bne.n	80010dc <HAL_RCC_OscConfig+0x98>
 80010c2:	4b8b      	ldr	r3, [pc, #556]	; (80012f0 <HAL_RCC_OscConfig+0x2ac>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a8a      	ldr	r2, [pc, #552]	; (80012f0 <HAL_RCC_OscConfig+0x2ac>)
 80010c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	4b88      	ldr	r3, [pc, #544]	; (80012f0 <HAL_RCC_OscConfig+0x2ac>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a87      	ldr	r2, [pc, #540]	; (80012f0 <HAL_RCC_OscConfig+0x2ac>)
 80010d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	e00b      	b.n	80010f4 <HAL_RCC_OscConfig+0xb0>
 80010dc:	4b84      	ldr	r3, [pc, #528]	; (80012f0 <HAL_RCC_OscConfig+0x2ac>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a83      	ldr	r2, [pc, #524]	; (80012f0 <HAL_RCC_OscConfig+0x2ac>)
 80010e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	4b81      	ldr	r3, [pc, #516]	; (80012f0 <HAL_RCC_OscConfig+0x2ac>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a80      	ldr	r2, [pc, #512]	; (80012f0 <HAL_RCC_OscConfig+0x2ac>)
 80010ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d013      	beq.n	8001124 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fc:	f7ff fcfe 	bl	8000afc <HAL_GetTick>
 8001100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001104:	f7ff fcfa 	bl	8000afc <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b64      	cmp	r3, #100	; 0x64
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e1cd      	b.n	80014b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001116:	4b76      	ldr	r3, [pc, #472]	; (80012f0 <HAL_RCC_OscConfig+0x2ac>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d0f0      	beq.n	8001104 <HAL_RCC_OscConfig+0xc0>
 8001122:	e014      	b.n	800114e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001124:	f7ff fcea 	bl	8000afc <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800112c:	f7ff fce6 	bl	8000afc <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b64      	cmp	r3, #100	; 0x64
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e1b9      	b.n	80014b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800113e:	4b6c      	ldr	r3, [pc, #432]	; (80012f0 <HAL_RCC_OscConfig+0x2ac>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f0      	bne.n	800112c <HAL_RCC_OscConfig+0xe8>
 800114a:	e000      	b.n	800114e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800114c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d063      	beq.n	8001222 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800115a:	4b65      	ldr	r3, [pc, #404]	; (80012f0 <HAL_RCC_OscConfig+0x2ac>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f003 030c 	and.w	r3, r3, #12
 8001162:	2b00      	cmp	r3, #0
 8001164:	d00b      	beq.n	800117e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001166:	4b62      	ldr	r3, [pc, #392]	; (80012f0 <HAL_RCC_OscConfig+0x2ac>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800116e:	2b08      	cmp	r3, #8
 8001170:	d11c      	bne.n	80011ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001172:	4b5f      	ldr	r3, [pc, #380]	; (80012f0 <HAL_RCC_OscConfig+0x2ac>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d116      	bne.n	80011ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800117e:	4b5c      	ldr	r3, [pc, #368]	; (80012f0 <HAL_RCC_OscConfig+0x2ac>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d005      	beq.n	8001196 <HAL_RCC_OscConfig+0x152>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d001      	beq.n	8001196 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e18d      	b.n	80014b2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001196:	4b56      	ldr	r3, [pc, #344]	; (80012f0 <HAL_RCC_OscConfig+0x2ac>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	4952      	ldr	r1, [pc, #328]	; (80012f0 <HAL_RCC_OscConfig+0x2ac>)
 80011a6:	4313      	orrs	r3, r2
 80011a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011aa:	e03a      	b.n	8001222 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d020      	beq.n	80011f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011b4:	4b4f      	ldr	r3, [pc, #316]	; (80012f4 <HAL_RCC_OscConfig+0x2b0>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ba:	f7ff fc9f 	bl	8000afc <HAL_GetTick>
 80011be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c0:	e008      	b.n	80011d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011c2:	f7ff fc9b 	bl	8000afc <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d901      	bls.n	80011d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e16e      	b.n	80014b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d4:	4b46      	ldr	r3, [pc, #280]	; (80012f0 <HAL_RCC_OscConfig+0x2ac>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0f0      	beq.n	80011c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e0:	4b43      	ldr	r3, [pc, #268]	; (80012f0 <HAL_RCC_OscConfig+0x2ac>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	4940      	ldr	r1, [pc, #256]	; (80012f0 <HAL_RCC_OscConfig+0x2ac>)
 80011f0:	4313      	orrs	r3, r2
 80011f2:	600b      	str	r3, [r1, #0]
 80011f4:	e015      	b.n	8001222 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011f6:	4b3f      	ldr	r3, [pc, #252]	; (80012f4 <HAL_RCC_OscConfig+0x2b0>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011fc:	f7ff fc7e 	bl	8000afc <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001204:	f7ff fc7a 	bl	8000afc <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e14d      	b.n	80014b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001216:	4b36      	ldr	r3, [pc, #216]	; (80012f0 <HAL_RCC_OscConfig+0x2ac>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1f0      	bne.n	8001204 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	2b00      	cmp	r3, #0
 800122c:	d030      	beq.n	8001290 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d016      	beq.n	8001264 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001236:	4b30      	ldr	r3, [pc, #192]	; (80012f8 <HAL_RCC_OscConfig+0x2b4>)
 8001238:	2201      	movs	r2, #1
 800123a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800123c:	f7ff fc5e 	bl	8000afc <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001244:	f7ff fc5a 	bl	8000afc <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e12d      	b.n	80014b2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001256:	4b26      	ldr	r3, [pc, #152]	; (80012f0 <HAL_RCC_OscConfig+0x2ac>)
 8001258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0f0      	beq.n	8001244 <HAL_RCC_OscConfig+0x200>
 8001262:	e015      	b.n	8001290 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001264:	4b24      	ldr	r3, [pc, #144]	; (80012f8 <HAL_RCC_OscConfig+0x2b4>)
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126a:	f7ff fc47 	bl	8000afc <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001270:	e008      	b.n	8001284 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001272:	f7ff fc43 	bl	8000afc <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e116      	b.n	80014b2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001284:	4b1a      	ldr	r3, [pc, #104]	; (80012f0 <HAL_RCC_OscConfig+0x2ac>)
 8001286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d1f0      	bne.n	8001272 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0304 	and.w	r3, r3, #4
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 80a0 	beq.w	80013de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800129e:	2300      	movs	r3, #0
 80012a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <HAL_RCC_OscConfig+0x2ac>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d10f      	bne.n	80012ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <HAL_RCC_OscConfig+0x2ac>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	4a0e      	ldr	r2, [pc, #56]	; (80012f0 <HAL_RCC_OscConfig+0x2ac>)
 80012b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012bc:	6413      	str	r3, [r2, #64]	; 0x40
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <HAL_RCC_OscConfig+0x2ac>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80012ca:	2301      	movs	r3, #1
 80012cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ce:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <HAL_RCC_OscConfig+0x2b8>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d121      	bne.n	800131e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <HAL_RCC_OscConfig+0x2b8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a07      	ldr	r2, [pc, #28]	; (80012fc <HAL_RCC_OscConfig+0x2b8>)
 80012e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012e6:	f7ff fc09 	bl	8000afc <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ec:	e011      	b.n	8001312 <HAL_RCC_OscConfig+0x2ce>
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800
 80012f4:	42470000 	.word	0x42470000
 80012f8:	42470e80 	.word	0x42470e80
 80012fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001300:	f7ff fbfc 	bl	8000afc <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e0cf      	b.n	80014b2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001312:	4b6a      	ldr	r3, [pc, #424]	; (80014bc <HAL_RCC_OscConfig+0x478>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f0      	beq.n	8001300 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d106      	bne.n	8001334 <HAL_RCC_OscConfig+0x2f0>
 8001326:	4b66      	ldr	r3, [pc, #408]	; (80014c0 <HAL_RCC_OscConfig+0x47c>)
 8001328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800132a:	4a65      	ldr	r2, [pc, #404]	; (80014c0 <HAL_RCC_OscConfig+0x47c>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6713      	str	r3, [r2, #112]	; 0x70
 8001332:	e01c      	b.n	800136e <HAL_RCC_OscConfig+0x32a>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	2b05      	cmp	r3, #5
 800133a:	d10c      	bne.n	8001356 <HAL_RCC_OscConfig+0x312>
 800133c:	4b60      	ldr	r3, [pc, #384]	; (80014c0 <HAL_RCC_OscConfig+0x47c>)
 800133e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001340:	4a5f      	ldr	r2, [pc, #380]	; (80014c0 <HAL_RCC_OscConfig+0x47c>)
 8001342:	f043 0304 	orr.w	r3, r3, #4
 8001346:	6713      	str	r3, [r2, #112]	; 0x70
 8001348:	4b5d      	ldr	r3, [pc, #372]	; (80014c0 <HAL_RCC_OscConfig+0x47c>)
 800134a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800134c:	4a5c      	ldr	r2, [pc, #368]	; (80014c0 <HAL_RCC_OscConfig+0x47c>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	6713      	str	r3, [r2, #112]	; 0x70
 8001354:	e00b      	b.n	800136e <HAL_RCC_OscConfig+0x32a>
 8001356:	4b5a      	ldr	r3, [pc, #360]	; (80014c0 <HAL_RCC_OscConfig+0x47c>)
 8001358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800135a:	4a59      	ldr	r2, [pc, #356]	; (80014c0 <HAL_RCC_OscConfig+0x47c>)
 800135c:	f023 0301 	bic.w	r3, r3, #1
 8001360:	6713      	str	r3, [r2, #112]	; 0x70
 8001362:	4b57      	ldr	r3, [pc, #348]	; (80014c0 <HAL_RCC_OscConfig+0x47c>)
 8001364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001366:	4a56      	ldr	r2, [pc, #344]	; (80014c0 <HAL_RCC_OscConfig+0x47c>)
 8001368:	f023 0304 	bic.w	r3, r3, #4
 800136c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d015      	beq.n	80013a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001376:	f7ff fbc1 	bl	8000afc <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800137c:	e00a      	b.n	8001394 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800137e:	f7ff fbbd 	bl	8000afc <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	f241 3288 	movw	r2, #5000	; 0x1388
 800138c:	4293      	cmp	r3, r2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e08e      	b.n	80014b2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001394:	4b4a      	ldr	r3, [pc, #296]	; (80014c0 <HAL_RCC_OscConfig+0x47c>)
 8001396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0ee      	beq.n	800137e <HAL_RCC_OscConfig+0x33a>
 80013a0:	e014      	b.n	80013cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a2:	f7ff fbab 	bl	8000afc <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a8:	e00a      	b.n	80013c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013aa:	f7ff fba7 	bl	8000afc <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e078      	b.n	80014b2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c0:	4b3f      	ldr	r3, [pc, #252]	; (80014c0 <HAL_RCC_OscConfig+0x47c>)
 80013c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1ee      	bne.n	80013aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013cc:	7dfb      	ldrb	r3, [r7, #23]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d105      	bne.n	80013de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013d2:	4b3b      	ldr	r3, [pc, #236]	; (80014c0 <HAL_RCC_OscConfig+0x47c>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	4a3a      	ldr	r2, [pc, #232]	; (80014c0 <HAL_RCC_OscConfig+0x47c>)
 80013d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d064      	beq.n	80014b0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013e6:	4b36      	ldr	r3, [pc, #216]	; (80014c0 <HAL_RCC_OscConfig+0x47c>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 030c 	and.w	r3, r3, #12
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d05c      	beq.n	80014ac <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d141      	bne.n	800147e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013fa:	4b32      	ldr	r3, [pc, #200]	; (80014c4 <HAL_RCC_OscConfig+0x480>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001400:	f7ff fb7c 	bl	8000afc <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001408:	f7ff fb78 	bl	8000afc <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e04b      	b.n	80014b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800141a:	4b29      	ldr	r3, [pc, #164]	; (80014c0 <HAL_RCC_OscConfig+0x47c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f0      	bne.n	8001408 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	69da      	ldr	r2, [r3, #28]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a1b      	ldr	r3, [r3, #32]
 800142e:	431a      	orrs	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001434:	019b      	lsls	r3, r3, #6
 8001436:	431a      	orrs	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143c:	085b      	lsrs	r3, r3, #1
 800143e:	3b01      	subs	r3, #1
 8001440:	041b      	lsls	r3, r3, #16
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001448:	061b      	lsls	r3, r3, #24
 800144a:	491d      	ldr	r1, [pc, #116]	; (80014c0 <HAL_RCC_OscConfig+0x47c>)
 800144c:	4313      	orrs	r3, r2
 800144e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001450:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <HAL_RCC_OscConfig+0x480>)
 8001452:	2201      	movs	r2, #1
 8001454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001456:	f7ff fb51 	bl	8000afc <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800145e:	f7ff fb4d 	bl	8000afc <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e020      	b.n	80014b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001470:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <HAL_RCC_OscConfig+0x47c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0f0      	beq.n	800145e <HAL_RCC_OscConfig+0x41a>
 800147c:	e018      	b.n	80014b0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <HAL_RCC_OscConfig+0x480>)
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001484:	f7ff fb3a 	bl	8000afc <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800148c:	f7ff fb36 	bl	8000afc <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e009      	b.n	80014b2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <HAL_RCC_OscConfig+0x47c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0x448>
 80014aa:	e001      	b.n	80014b0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e000      	b.n	80014b2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40007000 	.word	0x40007000
 80014c0:	40023800 	.word	0x40023800
 80014c4:	42470060 	.word	0x42470060

080014c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d101      	bne.n	80014dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e0ca      	b.n	8001672 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014dc:	4b67      	ldr	r3, [pc, #412]	; (800167c <HAL_RCC_ClockConfig+0x1b4>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 030f 	and.w	r3, r3, #15
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d90c      	bls.n	8001504 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ea:	4b64      	ldr	r3, [pc, #400]	; (800167c <HAL_RCC_ClockConfig+0x1b4>)
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014f2:	4b62      	ldr	r3, [pc, #392]	; (800167c <HAL_RCC_ClockConfig+0x1b4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d001      	beq.n	8001504 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e0b6      	b.n	8001672 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d020      	beq.n	8001552 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	d005      	beq.n	8001528 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800151c:	4b58      	ldr	r3, [pc, #352]	; (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	4a57      	ldr	r2, [pc, #348]	; (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 8001522:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001526:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0308 	and.w	r3, r3, #8
 8001530:	2b00      	cmp	r3, #0
 8001532:	d005      	beq.n	8001540 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001534:	4b52      	ldr	r3, [pc, #328]	; (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	4a51      	ldr	r2, [pc, #324]	; (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 800153a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800153e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001540:	4b4f      	ldr	r3, [pc, #316]	; (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	494c      	ldr	r1, [pc, #304]	; (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 800154e:	4313      	orrs	r3, r2
 8001550:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	d044      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d107      	bne.n	8001576 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001566:	4b46      	ldr	r3, [pc, #280]	; (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d119      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e07d      	b.n	8001672 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b02      	cmp	r3, #2
 800157c:	d003      	beq.n	8001586 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001582:	2b03      	cmp	r3, #3
 8001584:	d107      	bne.n	8001596 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001586:	4b3e      	ldr	r3, [pc, #248]	; (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d109      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e06d      	b.n	8001672 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001596:	4b3a      	ldr	r3, [pc, #232]	; (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e065      	b.n	8001672 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015a6:	4b36      	ldr	r3, [pc, #216]	; (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f023 0203 	bic.w	r2, r3, #3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	4933      	ldr	r1, [pc, #204]	; (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015b8:	f7ff faa0 	bl	8000afc <HAL_GetTick>
 80015bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015be:	e00a      	b.n	80015d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c0:	f7ff fa9c 	bl	8000afc <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e04d      	b.n	8001672 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015d6:	4b2a      	ldr	r3, [pc, #168]	; (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 020c 	and.w	r2, r3, #12
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d1eb      	bne.n	80015c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015e8:	4b24      	ldr	r3, [pc, #144]	; (800167c <HAL_RCC_ClockConfig+0x1b4>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 030f 	and.w	r3, r3, #15
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d20c      	bcs.n	8001610 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015f6:	4b21      	ldr	r3, [pc, #132]	; (800167c <HAL_RCC_ClockConfig+0x1b4>)
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015fe:	4b1f      	ldr	r3, [pc, #124]	; (800167c <HAL_RCC_ClockConfig+0x1b4>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	429a      	cmp	r2, r3
 800160a:	d001      	beq.n	8001610 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e030      	b.n	8001672 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	d008      	beq.n	800162e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800161c:	4b18      	ldr	r3, [pc, #96]	; (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	4915      	ldr	r1, [pc, #84]	; (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 800162a:	4313      	orrs	r3, r2
 800162c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0308 	and.w	r3, r3, #8
 8001636:	2b00      	cmp	r3, #0
 8001638:	d009      	beq.n	800164e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	490d      	ldr	r1, [pc, #52]	; (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 800164a:	4313      	orrs	r3, r2
 800164c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800164e:	f000 f81d 	bl	800168c <HAL_RCC_GetSysClockFreq>
 8001652:	4601      	mov	r1, r0
 8001654:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	091b      	lsrs	r3, r3, #4
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	4a09      	ldr	r2, [pc, #36]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 8001660:	5cd3      	ldrb	r3, [r2, r3]
 8001662:	fa21 f303 	lsr.w	r3, r1, r3
 8001666:	4a08      	ldr	r2, [pc, #32]	; (8001688 <HAL_RCC_ClockConfig+0x1c0>)
 8001668:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800166a:	2000      	movs	r0, #0
 800166c:	f7ff f934 	bl	80008d8 <HAL_InitTick>

  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40023c00 	.word	0x40023c00
 8001680:	40023800 	.word	0x40023800
 8001684:	080059c8 	.word	0x080059c8
 8001688:	20000000 	.word	0x20000000

0800168c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800168c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001692:	2300      	movs	r3, #0
 8001694:	607b      	str	r3, [r7, #4]
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	2300      	movs	r3, #0
 800169c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800169e:	2300      	movs	r3, #0
 80016a0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016a2:	4b63      	ldr	r3, [pc, #396]	; (8001830 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 030c 	and.w	r3, r3, #12
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	d007      	beq.n	80016be <HAL_RCC_GetSysClockFreq+0x32>
 80016ae:	2b08      	cmp	r3, #8
 80016b0:	d008      	beq.n	80016c4 <HAL_RCC_GetSysClockFreq+0x38>
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f040 80b4 	bne.w	8001820 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016b8:	4b5e      	ldr	r3, [pc, #376]	; (8001834 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80016ba:	60bb      	str	r3, [r7, #8]
       break;
 80016bc:	e0b3      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016be:	4b5e      	ldr	r3, [pc, #376]	; (8001838 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80016c0:	60bb      	str	r3, [r7, #8]
      break;
 80016c2:	e0b0      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016c4:	4b5a      	ldr	r3, [pc, #360]	; (8001830 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016ce:	4b58      	ldr	r3, [pc, #352]	; (8001830 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d04a      	beq.n	8001770 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016da:	4b55      	ldr	r3, [pc, #340]	; (8001830 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	099b      	lsrs	r3, r3, #6
 80016e0:	f04f 0400 	mov.w	r4, #0
 80016e4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	ea03 0501 	and.w	r5, r3, r1
 80016f0:	ea04 0602 	and.w	r6, r4, r2
 80016f4:	4629      	mov	r1, r5
 80016f6:	4632      	mov	r2, r6
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	f04f 0400 	mov.w	r4, #0
 8001700:	0154      	lsls	r4, r2, #5
 8001702:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001706:	014b      	lsls	r3, r1, #5
 8001708:	4619      	mov	r1, r3
 800170a:	4622      	mov	r2, r4
 800170c:	1b49      	subs	r1, r1, r5
 800170e:	eb62 0206 	sbc.w	r2, r2, r6
 8001712:	f04f 0300 	mov.w	r3, #0
 8001716:	f04f 0400 	mov.w	r4, #0
 800171a:	0194      	lsls	r4, r2, #6
 800171c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001720:	018b      	lsls	r3, r1, #6
 8001722:	1a5b      	subs	r3, r3, r1
 8001724:	eb64 0402 	sbc.w	r4, r4, r2
 8001728:	f04f 0100 	mov.w	r1, #0
 800172c:	f04f 0200 	mov.w	r2, #0
 8001730:	00e2      	lsls	r2, r4, #3
 8001732:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001736:	00d9      	lsls	r1, r3, #3
 8001738:	460b      	mov	r3, r1
 800173a:	4614      	mov	r4, r2
 800173c:	195b      	adds	r3, r3, r5
 800173e:	eb44 0406 	adc.w	r4, r4, r6
 8001742:	f04f 0100 	mov.w	r1, #0
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	0262      	lsls	r2, r4, #9
 800174c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001750:	0259      	lsls	r1, r3, #9
 8001752:	460b      	mov	r3, r1
 8001754:	4614      	mov	r4, r2
 8001756:	4618      	mov	r0, r3
 8001758:	4621      	mov	r1, r4
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f04f 0400 	mov.w	r4, #0
 8001760:	461a      	mov	r2, r3
 8001762:	4623      	mov	r3, r4
 8001764:	f7fe fd3c 	bl	80001e0 <__aeabi_uldivmod>
 8001768:	4603      	mov	r3, r0
 800176a:	460c      	mov	r4, r1
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	e049      	b.n	8001804 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001770:	4b2f      	ldr	r3, [pc, #188]	; (8001830 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	099b      	lsrs	r3, r3, #6
 8001776:	f04f 0400 	mov.w	r4, #0
 800177a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	ea03 0501 	and.w	r5, r3, r1
 8001786:	ea04 0602 	and.w	r6, r4, r2
 800178a:	4629      	mov	r1, r5
 800178c:	4632      	mov	r2, r6
 800178e:	f04f 0300 	mov.w	r3, #0
 8001792:	f04f 0400 	mov.w	r4, #0
 8001796:	0154      	lsls	r4, r2, #5
 8001798:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800179c:	014b      	lsls	r3, r1, #5
 800179e:	4619      	mov	r1, r3
 80017a0:	4622      	mov	r2, r4
 80017a2:	1b49      	subs	r1, r1, r5
 80017a4:	eb62 0206 	sbc.w	r2, r2, r6
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	f04f 0400 	mov.w	r4, #0
 80017b0:	0194      	lsls	r4, r2, #6
 80017b2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80017b6:	018b      	lsls	r3, r1, #6
 80017b8:	1a5b      	subs	r3, r3, r1
 80017ba:	eb64 0402 	sbc.w	r4, r4, r2
 80017be:	f04f 0100 	mov.w	r1, #0
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	00e2      	lsls	r2, r4, #3
 80017c8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80017cc:	00d9      	lsls	r1, r3, #3
 80017ce:	460b      	mov	r3, r1
 80017d0:	4614      	mov	r4, r2
 80017d2:	195b      	adds	r3, r3, r5
 80017d4:	eb44 0406 	adc.w	r4, r4, r6
 80017d8:	f04f 0100 	mov.w	r1, #0
 80017dc:	f04f 0200 	mov.w	r2, #0
 80017e0:	02a2      	lsls	r2, r4, #10
 80017e2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80017e6:	0299      	lsls	r1, r3, #10
 80017e8:	460b      	mov	r3, r1
 80017ea:	4614      	mov	r4, r2
 80017ec:	4618      	mov	r0, r3
 80017ee:	4621      	mov	r1, r4
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f04f 0400 	mov.w	r4, #0
 80017f6:	461a      	mov	r2, r3
 80017f8:	4623      	mov	r3, r4
 80017fa:	f7fe fcf1 	bl	80001e0 <__aeabi_uldivmod>
 80017fe:	4603      	mov	r3, r0
 8001800:	460c      	mov	r4, r1
 8001802:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001804:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	0c1b      	lsrs	r3, r3, #16
 800180a:	f003 0303 	and.w	r3, r3, #3
 800180e:	3301      	adds	r3, #1
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	fbb2 f3f3 	udiv	r3, r2, r3
 800181c:	60bb      	str	r3, [r7, #8]
      break;
 800181e:	e002      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001822:	60bb      	str	r3, [r7, #8]
      break;
 8001824:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001826:	68bb      	ldr	r3, [r7, #8]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001830:	40023800 	.word	0x40023800
 8001834:	00f42400 	.word	0x00f42400
 8001838:	007a1200 	.word	0x007a1200

0800183c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001840:	4b03      	ldr	r3, [pc, #12]	; (8001850 <HAL_RCC_GetHCLKFreq+0x14>)
 8001842:	681b      	ldr	r3, [r3, #0]
}
 8001844:	4618      	mov	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	20000000 	.word	0x20000000

08001854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001858:	f7ff fff0 	bl	800183c <HAL_RCC_GetHCLKFreq>
 800185c:	4601      	mov	r1, r0
 800185e:	4b05      	ldr	r3, [pc, #20]	; (8001874 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	0a9b      	lsrs	r3, r3, #10
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	4a03      	ldr	r2, [pc, #12]	; (8001878 <HAL_RCC_GetPCLK1Freq+0x24>)
 800186a:	5cd3      	ldrb	r3, [r2, r3]
 800186c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001870:	4618      	mov	r0, r3
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40023800 	.word	0x40023800
 8001878:	080059d8 	.word	0x080059d8

0800187c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001880:	f7ff ffdc 	bl	800183c <HAL_RCC_GetHCLKFreq>
 8001884:	4601      	mov	r1, r0
 8001886:	4b05      	ldr	r3, [pc, #20]	; (800189c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	0b5b      	lsrs	r3, r3, #13
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	4a03      	ldr	r2, [pc, #12]	; (80018a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001892:	5cd3      	ldrb	r3, [r2, r3]
 8001894:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001898:	4618      	mov	r0, r3
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40023800 	.word	0x40023800
 80018a0:	080059d8 	.word	0x080059d8

080018a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	220f      	movs	r2, #15
 80018b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_RCC_GetClockConfig+0x5c>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 0203 	and.w	r2, r3, #3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <HAL_RCC_GetClockConfig+0x5c>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <HAL_RCC_GetClockConfig+0x5c>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80018d8:	4b09      	ldr	r3, [pc, #36]	; (8001900 <HAL_RCC_GetClockConfig+0x5c>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	08db      	lsrs	r3, r3, #3
 80018de:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018e6:	4b07      	ldr	r3, [pc, #28]	; (8001904 <HAL_RCC_GetClockConfig+0x60>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 020f 	and.w	r2, r3, #15
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	601a      	str	r2, [r3, #0]
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800
 8001904:	40023c00 	.word	0x40023c00

08001908 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e01d      	b.n	8001956 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d106      	bne.n	8001934 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f815 	bl	800195e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2202      	movs	r2, #2
 8001938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3304      	adds	r3, #4
 8001944:	4619      	mov	r1, r3
 8001946:	4610      	mov	r0, r2
 8001948:	f000 f968 	bl	8001c1c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001972:	b480      	push	{r7}
 8001974:	b085      	sub	sp, #20
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f042 0201 	orr.w	r2, r2, #1
 8001988:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2b06      	cmp	r3, #6
 800199a:	d007      	beq.n	80019ac <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f042 0201 	orr.w	r2, r2, #1
 80019aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d122      	bne.n	8001a16 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d11b      	bne.n	8001a16 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f06f 0202 	mvn.w	r2, #2
 80019e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 f8ee 	bl	8001bde <HAL_TIM_IC_CaptureCallback>
 8001a02:	e005      	b.n	8001a10 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 f8e0 	bl	8001bca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f8f1 	bl	8001bf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d122      	bne.n	8001a6a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	f003 0304 	and.w	r3, r3, #4
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	d11b      	bne.n	8001a6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f06f 0204 	mvn.w	r2, #4
 8001a3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 f8c4 	bl	8001bde <HAL_TIM_IC_CaptureCallback>
 8001a56:	e005      	b.n	8001a64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 f8b6 	bl	8001bca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f8c7 	bl	8001bf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	f003 0308 	and.w	r3, r3, #8
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d122      	bne.n	8001abe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b08      	cmp	r3, #8
 8001a84:	d11b      	bne.n	8001abe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f06f 0208 	mvn.w	r2, #8
 8001a8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2204      	movs	r2, #4
 8001a94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f89a 	bl	8001bde <HAL_TIM_IC_CaptureCallback>
 8001aaa:	e005      	b.n	8001ab8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 f88c 	bl	8001bca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 f89d 	bl	8001bf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	f003 0310 	and.w	r3, r3, #16
 8001ac8:	2b10      	cmp	r3, #16
 8001aca:	d122      	bne.n	8001b12 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	2b10      	cmp	r3, #16
 8001ad8:	d11b      	bne.n	8001b12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f06f 0210 	mvn.w	r2, #16
 8001ae2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2208      	movs	r2, #8
 8001ae8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	69db      	ldr	r3, [r3, #28]
 8001af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f870 	bl	8001bde <HAL_TIM_IC_CaptureCallback>
 8001afe:	e005      	b.n	8001b0c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 f862 	bl	8001bca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f873 	bl	8001bf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d10e      	bne.n	8001b3e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d107      	bne.n	8001b3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f06f 0201 	mvn.w	r2, #1
 8001b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7fe fe3f 	bl	80007bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b48:	2b80      	cmp	r3, #128	; 0x80
 8001b4a:	d10e      	bne.n	8001b6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b56:	2b80      	cmp	r3, #128	; 0x80
 8001b58:	d107      	bne.n	8001b6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f8e3 	bl	8001d30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b74:	2b40      	cmp	r3, #64	; 0x40
 8001b76:	d10e      	bne.n	8001b96 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b82:	2b40      	cmp	r3, #64	; 0x40
 8001b84:	d107      	bne.n	8001b96 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 f838 	bl	8001c06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	f003 0320 	and.w	r3, r3, #32
 8001ba0:	2b20      	cmp	r3, #32
 8001ba2:	d10e      	bne.n	8001bc2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	f003 0320 	and.w	r3, r3, #32
 8001bae:	2b20      	cmp	r3, #32
 8001bb0:	d107      	bne.n	8001bc2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f06f 0220 	mvn.w	r2, #32
 8001bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f8ad 	bl	8001d1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a34      	ldr	r2, [pc, #208]	; (8001d00 <TIM_Base_SetConfig+0xe4>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d00f      	beq.n	8001c54 <TIM_Base_SetConfig+0x38>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c3a:	d00b      	beq.n	8001c54 <TIM_Base_SetConfig+0x38>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a31      	ldr	r2, [pc, #196]	; (8001d04 <TIM_Base_SetConfig+0xe8>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d007      	beq.n	8001c54 <TIM_Base_SetConfig+0x38>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a30      	ldr	r2, [pc, #192]	; (8001d08 <TIM_Base_SetConfig+0xec>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d003      	beq.n	8001c54 <TIM_Base_SetConfig+0x38>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a2f      	ldr	r2, [pc, #188]	; (8001d0c <TIM_Base_SetConfig+0xf0>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d108      	bne.n	8001c66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a25      	ldr	r2, [pc, #148]	; (8001d00 <TIM_Base_SetConfig+0xe4>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d01b      	beq.n	8001ca6 <TIM_Base_SetConfig+0x8a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c74:	d017      	beq.n	8001ca6 <TIM_Base_SetConfig+0x8a>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a22      	ldr	r2, [pc, #136]	; (8001d04 <TIM_Base_SetConfig+0xe8>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d013      	beq.n	8001ca6 <TIM_Base_SetConfig+0x8a>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a21      	ldr	r2, [pc, #132]	; (8001d08 <TIM_Base_SetConfig+0xec>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d00f      	beq.n	8001ca6 <TIM_Base_SetConfig+0x8a>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a20      	ldr	r2, [pc, #128]	; (8001d0c <TIM_Base_SetConfig+0xf0>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d00b      	beq.n	8001ca6 <TIM_Base_SetConfig+0x8a>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a1f      	ldr	r2, [pc, #124]	; (8001d10 <TIM_Base_SetConfig+0xf4>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d007      	beq.n	8001ca6 <TIM_Base_SetConfig+0x8a>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a1e      	ldr	r2, [pc, #120]	; (8001d14 <TIM_Base_SetConfig+0xf8>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d003      	beq.n	8001ca6 <TIM_Base_SetConfig+0x8a>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a1d      	ldr	r2, [pc, #116]	; (8001d18 <TIM_Base_SetConfig+0xfc>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d108      	bne.n	8001cb8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a08      	ldr	r2, [pc, #32]	; (8001d00 <TIM_Base_SetConfig+0xe4>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d103      	bne.n	8001cec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	691a      	ldr	r2, [r3, #16]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	615a      	str	r2, [r3, #20]
}
 8001cf2:	bf00      	nop
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40010000 	.word	0x40010000
 8001d04:	40000400 	.word	0x40000400
 8001d08:	40000800 	.word	0x40000800
 8001d0c:	40000c00 	.word	0x40000c00
 8001d10:	40014000 	.word	0x40014000
 8001d14:	40014400 	.word	0x40014400
 8001d18:	40014800 	.word	0x40014800

08001d1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e03f      	b.n	8001dd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d106      	bne.n	8001d70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7fe fd6c 	bl	8000848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2224      	movs	r2, #36	; 0x24
 8001d74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f90b 	bl	8001fa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	691a      	ldr	r2, [r3, #16]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	695a      	ldr	r2, [r3, #20]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001dac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2220      	movs	r2, #32
 8001dd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b088      	sub	sp, #32
 8001de2:	af02      	add	r7, sp, #8
 8001de4:	60f8      	str	r0, [r7, #12]
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	603b      	str	r3, [r7, #0]
 8001dea:	4613      	mov	r3, r2
 8001dec:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b20      	cmp	r3, #32
 8001dfc:	f040 8083 	bne.w	8001f06 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d002      	beq.n	8001e0c <HAL_UART_Transmit+0x2e>
 8001e06:	88fb      	ldrh	r3, [r7, #6]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e07b      	b.n	8001f08 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d101      	bne.n	8001e1e <HAL_UART_Transmit+0x40>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e074      	b.n	8001f08 <HAL_UART_Transmit+0x12a>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2221      	movs	r2, #33	; 0x21
 8001e30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001e34:	f7fe fe62 	bl	8000afc <HAL_GetTick>
 8001e38:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	88fa      	ldrh	r2, [r7, #6]
 8001e3e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	88fa      	ldrh	r2, [r7, #6]
 8001e44:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001e46:	e042      	b.n	8001ece <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e5e:	d122      	bne.n	8001ea6 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	2200      	movs	r2, #0
 8001e68:	2180      	movs	r1, #128	; 0x80
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f000 f850 	bl	8001f10 <UART_WaitOnFlagUntilTimeout>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e046      	b.n	8001f08 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	881b      	ldrh	r3, [r3, #0]
 8001e82:	461a      	mov	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e8c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d103      	bne.n	8001e9e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	3302      	adds	r3, #2
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	e017      	b.n	8001ece <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	60bb      	str	r3, [r7, #8]
 8001ea4:	e013      	b.n	8001ece <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	2200      	movs	r2, #0
 8001eae:	2180      	movs	r1, #128	; 0x80
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f000 f82d 	bl	8001f10 <UART_WaitOnFlagUntilTimeout>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e023      	b.n	8001f08 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	1c5a      	adds	r2, r3, #1
 8001ec4:	60ba      	str	r2, [r7, #8]
 8001ec6:	781a      	ldrb	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1b7      	bne.n	8001e48 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2140      	movs	r1, #64	; 0x40
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 f814 	bl	8001f10 <UART_WaitOnFlagUntilTimeout>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e00a      	b.n	8001f08 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	e000      	b.n	8001f08 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001f06:	2302      	movs	r3, #2
  }
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	603b      	str	r3, [r7, #0]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f20:	e02c      	b.n	8001f7c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f28:	d028      	beq.n	8001f7c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d007      	beq.n	8001f40 <UART_WaitOnFlagUntilTimeout+0x30>
 8001f30:	f7fe fde4 	bl	8000afc <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d21d      	bcs.n	8001f7c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001f4e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	695a      	ldr	r2, [r3, #20]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0201 	bic.w	r2, r2, #1
 8001f5e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2220      	movs	r2, #32
 8001f64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e00f      	b.n	8001f9c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	4013      	ands	r3, r2
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	bf0c      	ite	eq
 8001f8c:	2301      	moveq	r3, #1
 8001f8e:	2300      	movne	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	461a      	mov	r2, r3
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d0c3      	beq.n	8001f22 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fa4:	b5b0      	push	{r4, r5, r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001fe4:	f023 030c 	bic.w	r3, r3, #12
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	68f9      	ldr	r1, [r7, #12]
 8001fee:	430b      	orrs	r3, r1
 8001ff0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	699a      	ldr	r2, [r3, #24]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	430a      	orrs	r2, r1
 8002006:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002010:	f040 80e4 	bne.w	80021dc <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4aab      	ldr	r2, [pc, #684]	; (80022c8 <UART_SetConfig+0x324>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d004      	beq.n	8002028 <UART_SetConfig+0x84>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4aaa      	ldr	r2, [pc, #680]	; (80022cc <UART_SetConfig+0x328>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d16c      	bne.n	8002102 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002028:	f7ff fc28 	bl	800187c <HAL_RCC_GetPCLK2Freq>
 800202c:	4602      	mov	r2, r0
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	009a      	lsls	r2, r3, #2
 8002036:	441a      	add	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002042:	4aa3      	ldr	r2, [pc, #652]	; (80022d0 <UART_SetConfig+0x32c>)
 8002044:	fba2 2303 	umull	r2, r3, r2, r3
 8002048:	095b      	lsrs	r3, r3, #5
 800204a:	011c      	lsls	r4, r3, #4
 800204c:	f7ff fc16 	bl	800187c <HAL_RCC_GetPCLK2Freq>
 8002050:	4602      	mov	r2, r0
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	009a      	lsls	r2, r3, #2
 800205a:	441a      	add	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	fbb2 f5f3 	udiv	r5, r2, r3
 8002066:	f7ff fc09 	bl	800187c <HAL_RCC_GetPCLK2Freq>
 800206a:	4602      	mov	r2, r0
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	009a      	lsls	r2, r3, #2
 8002074:	441a      	add	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002080:	4a93      	ldr	r2, [pc, #588]	; (80022d0 <UART_SetConfig+0x32c>)
 8002082:	fba2 2303 	umull	r2, r3, r2, r3
 8002086:	095b      	lsrs	r3, r3, #5
 8002088:	2264      	movs	r2, #100	; 0x64
 800208a:	fb02 f303 	mul.w	r3, r2, r3
 800208e:	1aeb      	subs	r3, r5, r3
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	3332      	adds	r3, #50	; 0x32
 8002094:	4a8e      	ldr	r2, [pc, #568]	; (80022d0 <UART_SetConfig+0x32c>)
 8002096:	fba2 2303 	umull	r2, r3, r2, r3
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020a2:	441c      	add	r4, r3
 80020a4:	f7ff fbea 	bl	800187c <HAL_RCC_GetPCLK2Freq>
 80020a8:	4602      	mov	r2, r0
 80020aa:	4613      	mov	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	009a      	lsls	r2, r3, #2
 80020b2:	441a      	add	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	fbb2 f5f3 	udiv	r5, r2, r3
 80020be:	f7ff fbdd 	bl	800187c <HAL_RCC_GetPCLK2Freq>
 80020c2:	4602      	mov	r2, r0
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	009a      	lsls	r2, r3, #2
 80020cc:	441a      	add	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d8:	4a7d      	ldr	r2, [pc, #500]	; (80022d0 <UART_SetConfig+0x32c>)
 80020da:	fba2 2303 	umull	r2, r3, r2, r3
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	2264      	movs	r2, #100	; 0x64
 80020e2:	fb02 f303 	mul.w	r3, r2, r3
 80020e6:	1aeb      	subs	r3, r5, r3
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	3332      	adds	r3, #50	; 0x32
 80020ec:	4a78      	ldr	r2, [pc, #480]	; (80022d0 <UART_SetConfig+0x32c>)
 80020ee:	fba2 2303 	umull	r2, r3, r2, r3
 80020f2:	095b      	lsrs	r3, r3, #5
 80020f4:	f003 0207 	and.w	r2, r3, #7
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4422      	add	r2, r4
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	e154      	b.n	80023ac <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002102:	f7ff fba7 	bl	8001854 <HAL_RCC_GetPCLK1Freq>
 8002106:	4602      	mov	r2, r0
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	009a      	lsls	r2, r3, #2
 8002110:	441a      	add	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	fbb2 f3f3 	udiv	r3, r2, r3
 800211c:	4a6c      	ldr	r2, [pc, #432]	; (80022d0 <UART_SetConfig+0x32c>)
 800211e:	fba2 2303 	umull	r2, r3, r2, r3
 8002122:	095b      	lsrs	r3, r3, #5
 8002124:	011c      	lsls	r4, r3, #4
 8002126:	f7ff fb95 	bl	8001854 <HAL_RCC_GetPCLK1Freq>
 800212a:	4602      	mov	r2, r0
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	009a      	lsls	r2, r3, #2
 8002134:	441a      	add	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002140:	f7ff fb88 	bl	8001854 <HAL_RCC_GetPCLK1Freq>
 8002144:	4602      	mov	r2, r0
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	009a      	lsls	r2, r3, #2
 800214e:	441a      	add	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	fbb2 f3f3 	udiv	r3, r2, r3
 800215a:	4a5d      	ldr	r2, [pc, #372]	; (80022d0 <UART_SetConfig+0x32c>)
 800215c:	fba2 2303 	umull	r2, r3, r2, r3
 8002160:	095b      	lsrs	r3, r3, #5
 8002162:	2264      	movs	r2, #100	; 0x64
 8002164:	fb02 f303 	mul.w	r3, r2, r3
 8002168:	1aeb      	subs	r3, r5, r3
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	3332      	adds	r3, #50	; 0x32
 800216e:	4a58      	ldr	r2, [pc, #352]	; (80022d0 <UART_SetConfig+0x32c>)
 8002170:	fba2 2303 	umull	r2, r3, r2, r3
 8002174:	095b      	lsrs	r3, r3, #5
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800217c:	441c      	add	r4, r3
 800217e:	f7ff fb69 	bl	8001854 <HAL_RCC_GetPCLK1Freq>
 8002182:	4602      	mov	r2, r0
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	009a      	lsls	r2, r3, #2
 800218c:	441a      	add	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	fbb2 f5f3 	udiv	r5, r2, r3
 8002198:	f7ff fb5c 	bl	8001854 <HAL_RCC_GetPCLK1Freq>
 800219c:	4602      	mov	r2, r0
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	009a      	lsls	r2, r3, #2
 80021a6:	441a      	add	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b2:	4a47      	ldr	r2, [pc, #284]	; (80022d0 <UART_SetConfig+0x32c>)
 80021b4:	fba2 2303 	umull	r2, r3, r2, r3
 80021b8:	095b      	lsrs	r3, r3, #5
 80021ba:	2264      	movs	r2, #100	; 0x64
 80021bc:	fb02 f303 	mul.w	r3, r2, r3
 80021c0:	1aeb      	subs	r3, r5, r3
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	3332      	adds	r3, #50	; 0x32
 80021c6:	4a42      	ldr	r2, [pc, #264]	; (80022d0 <UART_SetConfig+0x32c>)
 80021c8:	fba2 2303 	umull	r2, r3, r2, r3
 80021cc:	095b      	lsrs	r3, r3, #5
 80021ce:	f003 0207 	and.w	r2, r3, #7
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4422      	add	r2, r4
 80021d8:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80021da:	e0e7      	b.n	80023ac <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a39      	ldr	r2, [pc, #228]	; (80022c8 <UART_SetConfig+0x324>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d004      	beq.n	80021f0 <UART_SetConfig+0x24c>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a38      	ldr	r2, [pc, #224]	; (80022cc <UART_SetConfig+0x328>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d171      	bne.n	80022d4 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80021f0:	f7ff fb44 	bl	800187c <HAL_RCC_GetPCLK2Freq>
 80021f4:	4602      	mov	r2, r0
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	009a      	lsls	r2, r3, #2
 80021fe:	441a      	add	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	fbb2 f3f3 	udiv	r3, r2, r3
 800220a:	4a31      	ldr	r2, [pc, #196]	; (80022d0 <UART_SetConfig+0x32c>)
 800220c:	fba2 2303 	umull	r2, r3, r2, r3
 8002210:	095b      	lsrs	r3, r3, #5
 8002212:	011c      	lsls	r4, r3, #4
 8002214:	f7ff fb32 	bl	800187c <HAL_RCC_GetPCLK2Freq>
 8002218:	4602      	mov	r2, r0
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	009a      	lsls	r2, r3, #2
 8002222:	441a      	add	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	fbb2 f5f3 	udiv	r5, r2, r3
 800222e:	f7ff fb25 	bl	800187c <HAL_RCC_GetPCLK2Freq>
 8002232:	4602      	mov	r2, r0
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	009a      	lsls	r2, r3, #2
 800223c:	441a      	add	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	fbb2 f3f3 	udiv	r3, r2, r3
 8002248:	4a21      	ldr	r2, [pc, #132]	; (80022d0 <UART_SetConfig+0x32c>)
 800224a:	fba2 2303 	umull	r2, r3, r2, r3
 800224e:	095b      	lsrs	r3, r3, #5
 8002250:	2264      	movs	r2, #100	; 0x64
 8002252:	fb02 f303 	mul.w	r3, r2, r3
 8002256:	1aeb      	subs	r3, r5, r3
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	3332      	adds	r3, #50	; 0x32
 800225c:	4a1c      	ldr	r2, [pc, #112]	; (80022d0 <UART_SetConfig+0x32c>)
 800225e:	fba2 2303 	umull	r2, r3, r2, r3
 8002262:	095b      	lsrs	r3, r3, #5
 8002264:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002268:	441c      	add	r4, r3
 800226a:	f7ff fb07 	bl	800187c <HAL_RCC_GetPCLK2Freq>
 800226e:	4602      	mov	r2, r0
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	009a      	lsls	r2, r3, #2
 8002278:	441a      	add	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	fbb2 f5f3 	udiv	r5, r2, r3
 8002284:	f7ff fafa 	bl	800187c <HAL_RCC_GetPCLK2Freq>
 8002288:	4602      	mov	r2, r0
 800228a:	4613      	mov	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	009a      	lsls	r2, r3, #2
 8002292:	441a      	add	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	fbb2 f3f3 	udiv	r3, r2, r3
 800229e:	4a0c      	ldr	r2, [pc, #48]	; (80022d0 <UART_SetConfig+0x32c>)
 80022a0:	fba2 2303 	umull	r2, r3, r2, r3
 80022a4:	095b      	lsrs	r3, r3, #5
 80022a6:	2264      	movs	r2, #100	; 0x64
 80022a8:	fb02 f303 	mul.w	r3, r2, r3
 80022ac:	1aeb      	subs	r3, r5, r3
 80022ae:	011b      	lsls	r3, r3, #4
 80022b0:	3332      	adds	r3, #50	; 0x32
 80022b2:	4a07      	ldr	r2, [pc, #28]	; (80022d0 <UART_SetConfig+0x32c>)
 80022b4:	fba2 2303 	umull	r2, r3, r2, r3
 80022b8:	095b      	lsrs	r3, r3, #5
 80022ba:	f003 020f 	and.w	r2, r3, #15
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4422      	add	r2, r4
 80022c4:	609a      	str	r2, [r3, #8]
 80022c6:	e071      	b.n	80023ac <UART_SetConfig+0x408>
 80022c8:	40011000 	.word	0x40011000
 80022cc:	40011400 	.word	0x40011400
 80022d0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80022d4:	f7ff fabe 	bl	8001854 <HAL_RCC_GetPCLK1Freq>
 80022d8:	4602      	mov	r2, r0
 80022da:	4613      	mov	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	009a      	lsls	r2, r3, #2
 80022e2:	441a      	add	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ee:	4a31      	ldr	r2, [pc, #196]	; (80023b4 <UART_SetConfig+0x410>)
 80022f0:	fba2 2303 	umull	r2, r3, r2, r3
 80022f4:	095b      	lsrs	r3, r3, #5
 80022f6:	011c      	lsls	r4, r3, #4
 80022f8:	f7ff faac 	bl	8001854 <HAL_RCC_GetPCLK1Freq>
 80022fc:	4602      	mov	r2, r0
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	009a      	lsls	r2, r3, #2
 8002306:	441a      	add	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	fbb2 f5f3 	udiv	r5, r2, r3
 8002312:	f7ff fa9f 	bl	8001854 <HAL_RCC_GetPCLK1Freq>
 8002316:	4602      	mov	r2, r0
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	009a      	lsls	r2, r3, #2
 8002320:	441a      	add	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	fbb2 f3f3 	udiv	r3, r2, r3
 800232c:	4a21      	ldr	r2, [pc, #132]	; (80023b4 <UART_SetConfig+0x410>)
 800232e:	fba2 2303 	umull	r2, r3, r2, r3
 8002332:	095b      	lsrs	r3, r3, #5
 8002334:	2264      	movs	r2, #100	; 0x64
 8002336:	fb02 f303 	mul.w	r3, r2, r3
 800233a:	1aeb      	subs	r3, r5, r3
 800233c:	011b      	lsls	r3, r3, #4
 800233e:	3332      	adds	r3, #50	; 0x32
 8002340:	4a1c      	ldr	r2, [pc, #112]	; (80023b4 <UART_SetConfig+0x410>)
 8002342:	fba2 2303 	umull	r2, r3, r2, r3
 8002346:	095b      	lsrs	r3, r3, #5
 8002348:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800234c:	441c      	add	r4, r3
 800234e:	f7ff fa81 	bl	8001854 <HAL_RCC_GetPCLK1Freq>
 8002352:	4602      	mov	r2, r0
 8002354:	4613      	mov	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	009a      	lsls	r2, r3, #2
 800235c:	441a      	add	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	fbb2 f5f3 	udiv	r5, r2, r3
 8002368:	f7ff fa74 	bl	8001854 <HAL_RCC_GetPCLK1Freq>
 800236c:	4602      	mov	r2, r0
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	009a      	lsls	r2, r3, #2
 8002376:	441a      	add	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002382:	4a0c      	ldr	r2, [pc, #48]	; (80023b4 <UART_SetConfig+0x410>)
 8002384:	fba2 2303 	umull	r2, r3, r2, r3
 8002388:	095b      	lsrs	r3, r3, #5
 800238a:	2264      	movs	r2, #100	; 0x64
 800238c:	fb02 f303 	mul.w	r3, r2, r3
 8002390:	1aeb      	subs	r3, r5, r3
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	3332      	adds	r3, #50	; 0x32
 8002396:	4a07      	ldr	r2, [pc, #28]	; (80023b4 <UART_SetConfig+0x410>)
 8002398:	fba2 2303 	umull	r2, r3, r2, r3
 800239c:	095b      	lsrs	r3, r3, #5
 800239e:	f003 020f 	and.w	r2, r3, #15
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4422      	add	r2, r4
 80023a8:	609a      	str	r2, [r3, #8]
}
 80023aa:	e7ff      	b.n	80023ac <UART_SetConfig+0x408>
 80023ac:	bf00      	nop
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bdb0      	pop	{r4, r5, r7, pc}
 80023b4:	51eb851f 	.word	0x51eb851f

080023b8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023be:	f3ef 8305 	mrs	r3, IPSR
 80023c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80023c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10f      	bne.n	80023ea <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023ca:	f3ef 8310 	mrs	r3, PRIMASK
 80023ce:	607b      	str	r3, [r7, #4]
  return(result);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d109      	bne.n	80023ea <osKernelInitialize+0x32>
 80023d6:	4b11      	ldr	r3, [pc, #68]	; (800241c <osKernelInitialize+0x64>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d109      	bne.n	80023f2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80023de:	f3ef 8311 	mrs	r3, BASEPRI
 80023e2:	603b      	str	r3, [r7, #0]
  return(result);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80023ea:	f06f 0305 	mvn.w	r3, #5
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	e00c      	b.n	800240c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80023f2:	4b0a      	ldr	r3, [pc, #40]	; (800241c <osKernelInitialize+0x64>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d105      	bne.n	8002406 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80023fa:	4b08      	ldr	r3, [pc, #32]	; (800241c <osKernelInitialize+0x64>)
 80023fc:	2201      	movs	r2, #1
 80023fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002400:	2300      	movs	r3, #0
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	e002      	b.n	800240c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002406:	f04f 33ff 	mov.w	r3, #4294967295
 800240a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800240c:	68fb      	ldr	r3, [r7, #12]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	20000028 	.word	0x20000028

08002420 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002426:	f3ef 8305 	mrs	r3, IPSR
 800242a:	60bb      	str	r3, [r7, #8]
  return(result);
 800242c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10f      	bne.n	8002452 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002432:	f3ef 8310 	mrs	r3, PRIMASK
 8002436:	607b      	str	r3, [r7, #4]
  return(result);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d109      	bne.n	8002452 <osKernelStart+0x32>
 800243e:	4b11      	ldr	r3, [pc, #68]	; (8002484 <osKernelStart+0x64>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d109      	bne.n	800245a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002446:	f3ef 8311 	mrs	r3, BASEPRI
 800244a:	603b      	str	r3, [r7, #0]
  return(result);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <osKernelStart+0x3a>
    stat = osErrorISR;
 8002452:	f06f 0305 	mvn.w	r3, #5
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	e00e      	b.n	8002478 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800245a:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <osKernelStart+0x64>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d107      	bne.n	8002472 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002462:	4b08      	ldr	r3, [pc, #32]	; (8002484 <osKernelStart+0x64>)
 8002464:	2202      	movs	r2, #2
 8002466:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002468:	f001 fd0e 	bl	8003e88 <vTaskStartScheduler>
      stat = osOK;
 800246c:	2300      	movs	r3, #0
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	e002      	b.n	8002478 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002472:	f04f 33ff 	mov.w	r3, #4294967295
 8002476:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002478:	68fb      	ldr	r3, [r7, #12]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000028 	.word	0x20000028

08002488 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002488:	b580      	push	{r7, lr}
 800248a:	b092      	sub	sp, #72	; 0x48
 800248c:	af04      	add	r7, sp, #16
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002498:	f3ef 8305 	mrs	r3, IPSR
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f040 8094 	bne.w	80025ce <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024a6:	f3ef 8310 	mrs	r3, PRIMASK
 80024aa:	623b      	str	r3, [r7, #32]
  return(result);
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f040 808d 	bne.w	80025ce <osThreadNew+0x146>
 80024b4:	4b48      	ldr	r3, [pc, #288]	; (80025d8 <osThreadNew+0x150>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d106      	bne.n	80024ca <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80024bc:	f3ef 8311 	mrs	r3, BASEPRI
 80024c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f040 8082 	bne.w	80025ce <osThreadNew+0x146>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d07e      	beq.n	80025ce <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80024d0:	2380      	movs	r3, #128	; 0x80
 80024d2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80024d4:	2318      	movs	r3, #24
 80024d6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80024d8:	2300      	movs	r3, #0
 80024da:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80024dc:	f107 031b 	add.w	r3, r7, #27
 80024e0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80024e2:	f04f 33ff 	mov.w	r3, #4294967295
 80024e6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d045      	beq.n	800257a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d002      	beq.n	80024fc <osThreadNew+0x74>
        name = attr->name;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d002      	beq.n	800250a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800250a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <osThreadNew+0x9a>
 8002510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002512:	2b38      	cmp	r3, #56	; 0x38
 8002514:	d805      	bhi.n	8002522 <osThreadNew+0x9a>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <osThreadNew+0x9e>
        return (NULL);
 8002522:	2300      	movs	r3, #0
 8002524:	e054      	b.n	80025d0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	089b      	lsrs	r3, r3, #2
 8002534:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00e      	beq.n	800255c <osThreadNew+0xd4>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	2b5b      	cmp	r3, #91	; 0x5b
 8002544:	d90a      	bls.n	800255c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800254a:	2b00      	cmp	r3, #0
 800254c:	d006      	beq.n	800255c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <osThreadNew+0xd4>
        mem = 1;
 8002556:	2301      	movs	r3, #1
 8002558:	62bb      	str	r3, [r7, #40]	; 0x28
 800255a:	e010      	b.n	800257e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10c      	bne.n	800257e <osThreadNew+0xf6>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d108      	bne.n	800257e <osThreadNew+0xf6>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d104      	bne.n	800257e <osThreadNew+0xf6>
          mem = 0;
 8002574:	2300      	movs	r3, #0
 8002576:	62bb      	str	r3, [r7, #40]	; 0x28
 8002578:	e001      	b.n	800257e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800257e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002580:	2b01      	cmp	r3, #1
 8002582:	d110      	bne.n	80025a6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800258c:	9202      	str	r2, [sp, #8]
 800258e:	9301      	str	r3, [sp, #4]
 8002590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002598:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f001 faac 	bl	8003af8 <xTaskCreateStatic>
 80025a0:	4603      	mov	r3, r0
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	e013      	b.n	80025ce <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80025a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d110      	bne.n	80025ce <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80025ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	f107 0314 	add.w	r3, r7, #20
 80025b4:	9301      	str	r3, [sp, #4]
 80025b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f001 faf3 	bl	8003baa <xTaskCreate>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d001      	beq.n	80025ce <osThreadNew+0x146>
          hTask = NULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80025ce:	697b      	ldr	r3, [r7, #20]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3738      	adds	r7, #56	; 0x38
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20000028 	.word	0x20000028

080025dc <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025e2:	f3ef 8305 	mrs	r3, IPSR
 80025e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80025e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10f      	bne.n	800260e <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025ee:	f3ef 8310 	mrs	r3, PRIMASK
 80025f2:	607b      	str	r3, [r7, #4]
  return(result);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d109      	bne.n	800260e <osThreadYield+0x32>
 80025fa:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <osThreadYield+0x5c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d109      	bne.n	8002616 <osThreadYield+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002602:	f3ef 8311 	mrs	r3, BASEPRI
 8002606:	603b      	str	r3, [r7, #0]
  return(result);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <osThreadYield+0x3a>
    stat = osErrorISR;
 800260e:	f06f 0305 	mvn.w	r3, #5
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	e009      	b.n	800262a <osThreadYield+0x4e>
  } else {
    stat = osOK;
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 800261a:	4b08      	ldr	r3, [pc, #32]	; (800263c <osThreadYield+0x60>)
 800261c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	f3bf 8f4f 	dsb	sy
 8002626:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800262a:	68fb      	ldr	r3, [r7, #12]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	20000028 	.word	0x20000028
 800263c:	e000ed04 	.word	0xe000ed04

08002640 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002648:	f3ef 8305 	mrs	r3, IPSR
 800264c:	613b      	str	r3, [r7, #16]
  return(result);
 800264e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10f      	bne.n	8002674 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002654:	f3ef 8310 	mrs	r3, PRIMASK
 8002658:	60fb      	str	r3, [r7, #12]
  return(result);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d109      	bne.n	8002674 <osDelay+0x34>
 8002660:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <osDelay+0x58>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d109      	bne.n	800267c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002668:	f3ef 8311 	mrs	r3, BASEPRI
 800266c:	60bb      	str	r3, [r7, #8]
  return(result);
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <osDelay+0x3c>
    stat = osErrorISR;
 8002674:	f06f 0305 	mvn.w	r3, #5
 8002678:	617b      	str	r3, [r7, #20]
 800267a:	e007      	b.n	800268c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <osDelay+0x4c>
      vTaskDelay(ticks);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f001 fbca 	bl	8003e20 <vTaskDelay>
    }
  }

  return (stat);
 800268c:	697b      	ldr	r3, [r7, #20]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20000028 	.word	0x20000028

0800269c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800269c:	b580      	push	{r7, lr}
 800269e:	b08c      	sub	sp, #48	; 0x30
 80026a0:	af02      	add	r7, sp, #8
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026ac:	f3ef 8305 	mrs	r3, IPSR
 80026b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80026b2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f040 8088 	bne.w	80027ca <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026ba:	f3ef 8310 	mrs	r3, PRIMASK
 80026be:	617b      	str	r3, [r7, #20]
  return(result);
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f040 8081 	bne.w	80027ca <osSemaphoreNew+0x12e>
 80026c8:	4b42      	ldr	r3, [pc, #264]	; (80027d4 <osSemaphoreNew+0x138>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d105      	bne.n	80026dc <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80026d0:	f3ef 8311 	mrs	r3, BASEPRI
 80026d4:	613b      	str	r3, [r7, #16]
  return(result);
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d176      	bne.n	80027ca <osSemaphoreNew+0x12e>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d073      	beq.n	80027ca <osSemaphoreNew+0x12e>
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d86f      	bhi.n	80027ca <osSemaphoreNew+0x12e>
    mem = -1;
 80026ea:	f04f 33ff 	mov.w	r3, #4294967295
 80026ee:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d015      	beq.n	8002722 <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d006      	beq.n	800270c <osSemaphoreNew+0x70>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	2b4f      	cmp	r3, #79	; 0x4f
 8002704:	d902      	bls.n	800270c <osSemaphoreNew+0x70>
        mem = 1;
 8002706:	2301      	movs	r3, #1
 8002708:	623b      	str	r3, [r7, #32]
 800270a:	e00c      	b.n	8002726 <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d108      	bne.n	8002726 <osSemaphoreNew+0x8a>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d104      	bne.n	8002726 <osSemaphoreNew+0x8a>
          mem = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	623b      	str	r3, [r7, #32]
 8002720:	e001      	b.n	8002726 <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 8002722:	2300      	movs	r3, #0
 8002724:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800272c:	d04d      	beq.n	80027ca <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d129      	bne.n	8002788 <osSemaphoreNew+0xec>
        if (mem == 1) {
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d10b      	bne.n	8002752 <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	2303      	movs	r3, #3
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	4613      	mov	r3, r2
 8002744:	2200      	movs	r2, #0
 8002746:	2100      	movs	r1, #0
 8002748:	2001      	movs	r0, #1
 800274a:	f000 fa53 	bl	8002bf4 <xQueueGenericCreateStatic>
 800274e:	6278      	str	r0, [r7, #36]	; 0x24
 8002750:	e005      	b.n	800275e <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8002752:	2203      	movs	r2, #3
 8002754:	2100      	movs	r1, #0
 8002756:	2001      	movs	r0, #1
 8002758:	f000 fabe 	bl	8002cd8 <xQueueGenericCreate>
 800275c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	2b00      	cmp	r3, #0
 8002762:	d022      	beq.n	80027aa <osSemaphoreNew+0x10e>
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d01f      	beq.n	80027aa <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800276a:	2300      	movs	r3, #0
 800276c:	2200      	movs	r2, #0
 800276e:	2100      	movs	r1, #0
 8002770:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002772:	f000 fb77 	bl	8002e64 <xQueueGenericSend>
 8002776:	4603      	mov	r3, r0
 8002778:	2b01      	cmp	r3, #1
 800277a:	d016      	beq.n	80027aa <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 800277c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800277e:	f000 ffea 	bl	8003756 <vQueueDelete>
            hSemaphore = NULL;
 8002782:	2300      	movs	r3, #0
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
 8002786:	e010      	b.n	80027aa <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 8002788:	6a3b      	ldr	r3, [r7, #32]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d108      	bne.n	80027a0 <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	461a      	mov	r2, r3
 8002794:	68b9      	ldr	r1, [r7, #8]
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 fafe 	bl	8002d98 <xQueueCreateCountingSemaphoreStatic>
 800279c:	6278      	str	r0, [r7, #36]	; 0x24
 800279e:	e004      	b.n	80027aa <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80027a0:	68b9      	ldr	r1, [r7, #8]
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 fb2d 	bl	8002e02 <xQueueCreateCountingSemaphore>
 80027a8:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00c      	beq.n	80027ca <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <osSemaphoreNew+0x122>
          name = attr->name;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	61fb      	str	r3, [r7, #28]
 80027bc:	e001      	b.n	80027c2 <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80027c2:	69f9      	ldr	r1, [r7, #28]
 80027c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027c6:	f001 f911 	bl	80039ec <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3728      	adds	r7, #40	; 0x28
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	20000028 	.word	0x20000028

080027d8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80027d8:	b580      	push	{r7, lr}
 80027da:	b088      	sub	sp, #32
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d103      	bne.n	80027f8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80027f0:	f06f 0303 	mvn.w	r3, #3
 80027f4:	61fb      	str	r3, [r7, #28]
 80027f6:	e04b      	b.n	8002890 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027f8:	f3ef 8305 	mrs	r3, IPSR
 80027fc:	617b      	str	r3, [r7, #20]
  return(result);
 80027fe:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10f      	bne.n	8002824 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002804:	f3ef 8310 	mrs	r3, PRIMASK
 8002808:	613b      	str	r3, [r7, #16]
  return(result);
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d109      	bne.n	8002824 <osSemaphoreAcquire+0x4c>
 8002810:	4b22      	ldr	r3, [pc, #136]	; (800289c <osSemaphoreAcquire+0xc4>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b02      	cmp	r3, #2
 8002816:	d128      	bne.n	800286a <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002818:	f3ef 8311 	mrs	r3, BASEPRI
 800281c:	60fb      	str	r3, [r7, #12]
  return(result);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d022      	beq.n	800286a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800282a:	f06f 0303 	mvn.w	r3, #3
 800282e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8002830:	e02d      	b.n	800288e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8002832:	2300      	movs	r3, #0
 8002834:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8002836:	f107 0308 	add.w	r3, r7, #8
 800283a:	461a      	mov	r2, r3
 800283c:	2100      	movs	r1, #0
 800283e:	69b8      	ldr	r0, [r7, #24]
 8002840:	f000 ff0c 	bl	800365c <xQueueReceiveFromISR>
 8002844:	4603      	mov	r3, r0
 8002846:	2b01      	cmp	r3, #1
 8002848:	d003      	beq.n	8002852 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800284a:	f06f 0302 	mvn.w	r3, #2
 800284e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8002850:	e01d      	b.n	800288e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d01a      	beq.n	800288e <osSemaphoreAcquire+0xb6>
 8002858:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <osSemaphoreAcquire+0xc8>)
 800285a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	f3bf 8f4f 	dsb	sy
 8002864:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8002868:	e011      	b.n	800288e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800286a:	6839      	ldr	r1, [r7, #0]
 800286c:	69b8      	ldr	r0, [r7, #24]
 800286e:	f000 fded 	bl	800344c <xQueueSemaphoreTake>
 8002872:	4603      	mov	r3, r0
 8002874:	2b01      	cmp	r3, #1
 8002876:	d00b      	beq.n	8002890 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800287e:	f06f 0301 	mvn.w	r3, #1
 8002882:	61fb      	str	r3, [r7, #28]
 8002884:	e004      	b.n	8002890 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8002886:	f06f 0302 	mvn.w	r3, #2
 800288a:	61fb      	str	r3, [r7, #28]
 800288c:	e000      	b.n	8002890 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800288e:	bf00      	nop
      }
    }
  }

  return (stat);
 8002890:	69fb      	ldr	r3, [r7, #28]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3720      	adds	r7, #32
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	20000028 	.word	0x20000028
 80028a0:	e000ed04 	.word	0xe000ed04

080028a4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b088      	sub	sp, #32
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d103      	bne.n	80028c2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80028ba:	f06f 0303 	mvn.w	r3, #3
 80028be:	61fb      	str	r3, [r7, #28]
 80028c0:	e03e      	b.n	8002940 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028c2:	f3ef 8305 	mrs	r3, IPSR
 80028c6:	617b      	str	r3, [r7, #20]
  return(result);
 80028c8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10f      	bne.n	80028ee <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028ce:	f3ef 8310 	mrs	r3, PRIMASK
 80028d2:	613b      	str	r3, [r7, #16]
  return(result);
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d109      	bne.n	80028ee <osSemaphoreRelease+0x4a>
 80028da:	4b1c      	ldr	r3, [pc, #112]	; (800294c <osSemaphoreRelease+0xa8>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d120      	bne.n	8002924 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80028e2:	f3ef 8311 	mrs	r3, BASEPRI
 80028e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d01a      	beq.n	8002924 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80028ee:	2300      	movs	r3, #0
 80028f0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80028f2:	f107 0308 	add.w	r3, r7, #8
 80028f6:	4619      	mov	r1, r3
 80028f8:	69b8      	ldr	r0, [r7, #24]
 80028fa:	f000 fc41 	bl	8003180 <xQueueGiveFromISR>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b01      	cmp	r3, #1
 8002902:	d003      	beq.n	800290c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8002904:	f06f 0302 	mvn.w	r3, #2
 8002908:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800290a:	e018      	b.n	800293e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d015      	beq.n	800293e <osSemaphoreRelease+0x9a>
 8002912:	4b0f      	ldr	r3, [pc, #60]	; (8002950 <osSemaphoreRelease+0xac>)
 8002914:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	f3bf 8f4f 	dsb	sy
 800291e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8002922:	e00c      	b.n	800293e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002924:	2300      	movs	r3, #0
 8002926:	2200      	movs	r2, #0
 8002928:	2100      	movs	r1, #0
 800292a:	69b8      	ldr	r0, [r7, #24]
 800292c:	f000 fa9a 	bl	8002e64 <xQueueGenericSend>
 8002930:	4603      	mov	r3, r0
 8002932:	2b01      	cmp	r3, #1
 8002934:	d004      	beq.n	8002940 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8002936:	f06f 0302 	mvn.w	r3, #2
 800293a:	61fb      	str	r3, [r7, #28]
 800293c:	e000      	b.n	8002940 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800293e:	bf00      	nop
    }
  }

  return (stat);
 8002940:	69fb      	ldr	r3, [r7, #28]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3720      	adds	r7, #32
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000028 	.word	0x20000028
 8002950:	e000ed04 	.word	0xe000ed04

08002954 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4a07      	ldr	r2, [pc, #28]	; (8002980 <vApplicationGetIdleTaskMemory+0x2c>)
 8002964:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	4a06      	ldr	r2, [pc, #24]	; (8002984 <vApplicationGetIdleTaskMemory+0x30>)
 800296a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2280      	movs	r2, #128	; 0x80
 8002970:	601a      	str	r2, [r3, #0]
}
 8002972:	bf00      	nop
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	2000002c 	.word	0x2000002c
 8002984:	20000088 	.word	0x20000088

08002988 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4a07      	ldr	r2, [pc, #28]	; (80029b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8002998:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	4a06      	ldr	r2, [pc, #24]	; (80029b8 <vApplicationGetTimerTaskMemory+0x30>)
 800299e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029a6:	601a      	str	r2, [r3, #0]
}
 80029a8:	bf00      	nop
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	20000288 	.word	0x20000288
 80029b8:	200002e4 	.word	0x200002e4

080029bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f103 0208 	add.w	r2, r3, #8
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f04f 32ff 	mov.w	r2, #4294967295
 80029d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f103 0208 	add.w	r2, r3, #8
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f103 0208 	add.w	r2, r3, #8
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a16:	b480      	push	{r7}
 8002a18:	b085      	sub	sp, #20
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	601a      	str	r2, [r3, #0]
}
 8002a52:	bf00      	nop
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b085      	sub	sp, #20
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a74:	d103      	bne.n	8002a7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	e00c      	b.n	8002a98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3308      	adds	r3, #8
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	e002      	b.n	8002a8c <vListInsert+0x2e>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d2f6      	bcs.n	8002a86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	1c5a      	adds	r2, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	601a      	str	r2, [r3, #0]
}
 8002ac4:	bf00      	nop
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6892      	ldr	r2, [r2, #8]
 8002ae6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6852      	ldr	r2, [r2, #4]
 8002af0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d103      	bne.n	8002b04 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	1e5a      	subs	r2, r3, #1
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d109      	bne.n	8002b4c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3c:	f383 8811 	msr	BASEPRI, r3
 8002b40:	f3bf 8f6f 	isb	sy
 8002b44:	f3bf 8f4f 	dsb	sy
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	e7fe      	b.n	8002b4a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002b4c:	f002 fbf6 	bl	800533c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b58:	68f9      	ldr	r1, [r7, #12]
 8002b5a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b5c:	fb01 f303 	mul.w	r3, r1, r3
 8002b60:	441a      	add	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	68f9      	ldr	r1, [r7, #12]
 8002b80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	441a      	add	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	22ff      	movs	r2, #255	; 0xff
 8002b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	22ff      	movs	r2, #255	; 0xff
 8002b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d114      	bne.n	8002bcc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d01a      	beq.n	8002be0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	3310      	adds	r3, #16
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f001 fbf0 	bl	8004394 <xTaskRemoveFromEventList>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d012      	beq.n	8002be0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002bba:	4b0d      	ldr	r3, [pc, #52]	; (8002bf0 <xQueueGenericReset+0xcc>)
 8002bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	f3bf 8f4f 	dsb	sy
 8002bc6:	f3bf 8f6f 	isb	sy
 8002bca:	e009      	b.n	8002be0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	3310      	adds	r3, #16
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff fef3 	bl	80029bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	3324      	adds	r3, #36	; 0x24
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff feee 	bl	80029bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002be0:	f002 fbda 	bl	8005398 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002be4:	2301      	movs	r3, #1
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	e000ed04 	.word	0xe000ed04

08002bf4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08e      	sub	sp, #56	; 0x38
 8002bf8:	af02      	add	r7, sp, #8
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d109      	bne.n	8002c1c <xQueueGenericCreateStatic+0x28>
 8002c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0c:	f383 8811 	msr	BASEPRI, r3
 8002c10:	f3bf 8f6f 	isb	sy
 8002c14:	f3bf 8f4f 	dsb	sy
 8002c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c1a:	e7fe      	b.n	8002c1a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d109      	bne.n	8002c36 <xQueueGenericCreateStatic+0x42>
 8002c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c26:	f383 8811 	msr	BASEPRI, r3
 8002c2a:	f3bf 8f6f 	isb	sy
 8002c2e:	f3bf 8f4f 	dsb	sy
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
 8002c34:	e7fe      	b.n	8002c34 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d002      	beq.n	8002c42 <xQueueGenericCreateStatic+0x4e>
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <xQueueGenericCreateStatic+0x52>
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <xQueueGenericCreateStatic+0x54>
 8002c46:	2300      	movs	r3, #0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d109      	bne.n	8002c60 <xQueueGenericCreateStatic+0x6c>
 8002c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c50:	f383 8811 	msr	BASEPRI, r3
 8002c54:	f3bf 8f6f 	isb	sy
 8002c58:	f3bf 8f4f 	dsb	sy
 8002c5c:	623b      	str	r3, [r7, #32]
 8002c5e:	e7fe      	b.n	8002c5e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d102      	bne.n	8002c6c <xQueueGenericCreateStatic+0x78>
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <xQueueGenericCreateStatic+0x7c>
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e000      	b.n	8002c72 <xQueueGenericCreateStatic+0x7e>
 8002c70:	2300      	movs	r3, #0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d109      	bne.n	8002c8a <xQueueGenericCreateStatic+0x96>
 8002c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7a:	f383 8811 	msr	BASEPRI, r3
 8002c7e:	f3bf 8f6f 	isb	sy
 8002c82:	f3bf 8f4f 	dsb	sy
 8002c86:	61fb      	str	r3, [r7, #28]
 8002c88:	e7fe      	b.n	8002c88 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c8a:	2350      	movs	r3, #80	; 0x50
 8002c8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2b50      	cmp	r3, #80	; 0x50
 8002c92:	d009      	beq.n	8002ca8 <xQueueGenericCreateStatic+0xb4>
 8002c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c98:	f383 8811 	msr	BASEPRI, r3
 8002c9c:	f3bf 8f6f 	isb	sy
 8002ca0:	f3bf 8f4f 	dsb	sy
 8002ca4:	61bb      	str	r3, [r7, #24]
 8002ca6:	e7fe      	b.n	8002ca6 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00d      	beq.n	8002cce <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	68b9      	ldr	r1, [r7, #8]
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 f842 	bl	8002d52 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3730      	adds	r7, #48	; 0x30
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08a      	sub	sp, #40	; 0x28
 8002cdc:	af02      	add	r7, sp, #8
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d109      	bne.n	8002d00 <xQueueGenericCreate+0x28>
 8002cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf0:	f383 8811 	msr	BASEPRI, r3
 8002cf4:	f3bf 8f6f 	isb	sy
 8002cf8:	f3bf 8f4f 	dsb	sy
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	e7fe      	b.n	8002cfe <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d102      	bne.n	8002d0c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61fb      	str	r3, [r7, #28]
 8002d0a:	e004      	b.n	8002d16 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	fb02 f303 	mul.w	r3, r2, r3
 8002d14:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	3350      	adds	r3, #80	; 0x50
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f002 fc28 	bl	8005570 <pvPortMalloc>
 8002d20:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00f      	beq.n	8002d48 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	3350      	adds	r3, #80	; 0x50
 8002d2c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d36:	79fa      	ldrb	r2, [r7, #7]
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 f805 	bl	8002d52 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002d48:	69bb      	ldr	r3, [r7, #24]
	}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b084      	sub	sp, #16
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	60f8      	str	r0, [r7, #12]
 8002d5a:	60b9      	str	r1, [r7, #8]
 8002d5c:	607a      	str	r2, [r7, #4]
 8002d5e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d103      	bne.n	8002d6e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	e002      	b.n	8002d74 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d80:	2101      	movs	r1, #1
 8002d82:	69b8      	ldr	r0, [r7, #24]
 8002d84:	f7ff fece 	bl	8002b24 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	78fa      	ldrb	r2, [r7, #3]
 8002d8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d90:	bf00      	nop
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08a      	sub	sp, #40	; 0x28
 8002d9c:	af02      	add	r7, sp, #8
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d109      	bne.n	8002dbe <xQueueCreateCountingSemaphoreStatic+0x26>
 8002daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dae:	f383 8811 	msr	BASEPRI, r3
 8002db2:	f3bf 8f6f 	isb	sy
 8002db6:	f3bf 8f4f 	dsb	sy
 8002dba:	61bb      	str	r3, [r7, #24]
 8002dbc:	e7fe      	b.n	8002dbc <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d909      	bls.n	8002dda <xQueueCreateCountingSemaphoreStatic+0x42>
 8002dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dca:	f383 8811 	msr	BASEPRI, r3
 8002dce:	f3bf 8f6f 	isb	sy
 8002dd2:	f3bf 8f4f 	dsb	sy
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	e7fe      	b.n	8002dd8 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002dda:	2302      	movs	r3, #2
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	2100      	movs	r1, #0
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f7ff ff05 	bl	8002bf4 <xQueueGenericCreateStatic>
 8002dea:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d002      	beq.n	8002df8 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002df8:	69fb      	ldr	r3, [r7, #28]
	}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3720      	adds	r7, #32
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b086      	sub	sp, #24
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
 8002e0a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d109      	bne.n	8002e26 <xQueueCreateCountingSemaphore+0x24>
 8002e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e16:	f383 8811 	msr	BASEPRI, r3
 8002e1a:	f3bf 8f6f 	isb	sy
 8002e1e:	f3bf 8f4f 	dsb	sy
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	e7fe      	b.n	8002e24 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d909      	bls.n	8002e42 <xQueueCreateCountingSemaphore+0x40>
 8002e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e32:	f383 8811 	msr	BASEPRI, r3
 8002e36:	f3bf 8f6f 	isb	sy
 8002e3a:	f3bf 8f4f 	dsb	sy
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	e7fe      	b.n	8002e40 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002e42:	2202      	movs	r2, #2
 8002e44:	2100      	movs	r1, #0
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7ff ff46 	bl	8002cd8 <xQueueGenericCreate>
 8002e4c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d002      	beq.n	8002e5a <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002e5a:	697b      	ldr	r3, [r7, #20]
	}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08e      	sub	sp, #56	; 0x38
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
 8002e70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e72:	2300      	movs	r3, #0
 8002e74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d109      	bne.n	8002e94 <xQueueGenericSend+0x30>
 8002e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e84:	f383 8811 	msr	BASEPRI, r3
 8002e88:	f3bf 8f6f 	isb	sy
 8002e8c:	f3bf 8f4f 	dsb	sy
 8002e90:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e92:	e7fe      	b.n	8002e92 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d103      	bne.n	8002ea2 <xQueueGenericSend+0x3e>
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <xQueueGenericSend+0x42>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <xQueueGenericSend+0x44>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d109      	bne.n	8002ec0 <xQueueGenericSend+0x5c>
 8002eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb0:	f383 8811 	msr	BASEPRI, r3
 8002eb4:	f3bf 8f6f 	isb	sy
 8002eb8:	f3bf 8f4f 	dsb	sy
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ebe:	e7fe      	b.n	8002ebe <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d103      	bne.n	8002ece <xQueueGenericSend+0x6a>
 8002ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d101      	bne.n	8002ed2 <xQueueGenericSend+0x6e>
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <xQueueGenericSend+0x70>
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d109      	bne.n	8002eec <xQueueGenericSend+0x88>
 8002ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002edc:	f383 8811 	msr	BASEPRI, r3
 8002ee0:	f3bf 8f6f 	isb	sy
 8002ee4:	f3bf 8f4f 	dsb	sy
 8002ee8:	623b      	str	r3, [r7, #32]
 8002eea:	e7fe      	b.n	8002eea <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002eec:	f001 fc0e 	bl	800470c <xTaskGetSchedulerState>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d102      	bne.n	8002efc <xQueueGenericSend+0x98>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <xQueueGenericSend+0x9c>
 8002efc:	2301      	movs	r3, #1
 8002efe:	e000      	b.n	8002f02 <xQueueGenericSend+0x9e>
 8002f00:	2300      	movs	r3, #0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d109      	bne.n	8002f1a <xQueueGenericSend+0xb6>
 8002f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0a:	f383 8811 	msr	BASEPRI, r3
 8002f0e:	f3bf 8f6f 	isb	sy
 8002f12:	f3bf 8f4f 	dsb	sy
 8002f16:	61fb      	str	r3, [r7, #28]
 8002f18:	e7fe      	b.n	8002f18 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f1a:	f002 fa0f 	bl	800533c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d302      	bcc.n	8002f30 <xQueueGenericSend+0xcc>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d129      	bne.n	8002f84 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	68b9      	ldr	r1, [r7, #8]
 8002f34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f36:	f000 fc48 	bl	80037ca <prvCopyDataToQueue>
 8002f3a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d010      	beq.n	8002f66 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f46:	3324      	adds	r3, #36	; 0x24
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f001 fa23 	bl	8004394 <xTaskRemoveFromEventList>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d013      	beq.n	8002f7c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f54:	4b3f      	ldr	r3, [pc, #252]	; (8003054 <xQueueGenericSend+0x1f0>)
 8002f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	f3bf 8f4f 	dsb	sy
 8002f60:	f3bf 8f6f 	isb	sy
 8002f64:	e00a      	b.n	8002f7c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d007      	beq.n	8002f7c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002f6c:	4b39      	ldr	r3, [pc, #228]	; (8003054 <xQueueGenericSend+0x1f0>)
 8002f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	f3bf 8f4f 	dsb	sy
 8002f78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f7c:	f002 fa0c 	bl	8005398 <vPortExitCritical>
				return pdPASS;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e063      	b.n	800304c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d103      	bne.n	8002f92 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f8a:	f002 fa05 	bl	8005398 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e05c      	b.n	800304c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d106      	bne.n	8002fa6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f98:	f107 0314 	add.w	r3, r7, #20
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f001 fa5b 	bl	8004458 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002fa6:	f002 f9f7 	bl	8005398 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002faa:	f000 ffd1 	bl	8003f50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fae:	f002 f9c5 	bl	800533c <vPortEnterCritical>
 8002fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fb8:	b25b      	sxtb	r3, r3
 8002fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fbe:	d103      	bne.n	8002fc8 <xQueueGenericSend+0x164>
 8002fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fce:	b25b      	sxtb	r3, r3
 8002fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd4:	d103      	bne.n	8002fde <xQueueGenericSend+0x17a>
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fde:	f002 f9db 	bl	8005398 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fe2:	1d3a      	adds	r2, r7, #4
 8002fe4:	f107 0314 	add.w	r3, r7, #20
 8002fe8:	4611      	mov	r1, r2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f001 fa4a 	bl	8004484 <xTaskCheckForTimeOut>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d124      	bne.n	8003040 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ff6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ff8:	f000 fcdf 	bl	80039ba <prvIsQueueFull>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d018      	beq.n	8003034 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	3310      	adds	r3, #16
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	4611      	mov	r1, r2
 800300a:	4618      	mov	r0, r3
 800300c:	f001 f974 	bl	80042f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003012:	f000 fc6a 	bl	80038ea <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003016:	f000 ffa9 	bl	8003f6c <xTaskResumeAll>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	f47f af7c 	bne.w	8002f1a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003022:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <xQueueGenericSend+0x1f0>)
 8003024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	f3bf 8f6f 	isb	sy
 8003032:	e772      	b.n	8002f1a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003036:	f000 fc58 	bl	80038ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800303a:	f000 ff97 	bl	8003f6c <xTaskResumeAll>
 800303e:	e76c      	b.n	8002f1a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003040:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003042:	f000 fc52 	bl	80038ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003046:	f000 ff91 	bl	8003f6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800304a:	2300      	movs	r3, #0
		}
	}
}
 800304c:	4618      	mov	r0, r3
 800304e:	3738      	adds	r7, #56	; 0x38
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	e000ed04 	.word	0xe000ed04

08003058 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b08e      	sub	sp, #56	; 0x38
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
 8003064:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800306a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306c:	2b00      	cmp	r3, #0
 800306e:	d109      	bne.n	8003084 <xQueueGenericSendFromISR+0x2c>
 8003070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003074:	f383 8811 	msr	BASEPRI, r3
 8003078:	f3bf 8f6f 	isb	sy
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	627b      	str	r3, [r7, #36]	; 0x24
 8003082:	e7fe      	b.n	8003082 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d103      	bne.n	8003092 <xQueueGenericSendFromISR+0x3a>
 800308a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <xQueueGenericSendFromISR+0x3e>
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <xQueueGenericSendFromISR+0x40>
 8003096:	2300      	movs	r3, #0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d109      	bne.n	80030b0 <xQueueGenericSendFromISR+0x58>
 800309c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a0:	f383 8811 	msr	BASEPRI, r3
 80030a4:	f3bf 8f6f 	isb	sy
 80030a8:	f3bf 8f4f 	dsb	sy
 80030ac:	623b      	str	r3, [r7, #32]
 80030ae:	e7fe      	b.n	80030ae <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d103      	bne.n	80030be <xQueueGenericSendFromISR+0x66>
 80030b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d101      	bne.n	80030c2 <xQueueGenericSendFromISR+0x6a>
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <xQueueGenericSendFromISR+0x6c>
 80030c2:	2300      	movs	r3, #0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d109      	bne.n	80030dc <xQueueGenericSendFromISR+0x84>
 80030c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030cc:	f383 8811 	msr	BASEPRI, r3
 80030d0:	f3bf 8f6f 	isb	sy
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	61fb      	str	r3, [r7, #28]
 80030da:	e7fe      	b.n	80030da <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030dc:	f002 fa0a 	bl	80054f4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80030e0:	f3ef 8211 	mrs	r2, BASEPRI
 80030e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e8:	f383 8811 	msr	BASEPRI, r3
 80030ec:	f3bf 8f6f 	isb	sy
 80030f0:	f3bf 8f4f 	dsb	sy
 80030f4:	61ba      	str	r2, [r7, #24]
 80030f6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80030f8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80030fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003104:	429a      	cmp	r2, r3
 8003106:	d302      	bcc.n	800310e <xQueueGenericSendFromISR+0xb6>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d12c      	bne.n	8003168 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800310e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003110:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003114:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	68b9      	ldr	r1, [r7, #8]
 800311c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800311e:	f000 fb54 	bl	80037ca <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003122:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312a:	d112      	bne.n	8003152 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800312c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	2b00      	cmp	r3, #0
 8003132:	d016      	beq.n	8003162 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003136:	3324      	adds	r3, #36	; 0x24
 8003138:	4618      	mov	r0, r3
 800313a:	f001 f92b 	bl	8004394 <xTaskRemoveFromEventList>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00e      	beq.n	8003162 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00b      	beq.n	8003162 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	e007      	b.n	8003162 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003152:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003156:	3301      	adds	r3, #1
 8003158:	b2db      	uxtb	r3, r3
 800315a:	b25a      	sxtb	r2, r3
 800315c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003162:	2301      	movs	r3, #1
 8003164:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003166:	e001      	b.n	800316c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003168:	2300      	movs	r3, #0
 800316a:	637b      	str	r3, [r7, #52]	; 0x34
 800316c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003178:	4618      	mov	r0, r3
 800317a:	3738      	adds	r7, #56	; 0x38
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b08e      	sub	sp, #56	; 0x38
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800318e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003190:	2b00      	cmp	r3, #0
 8003192:	d109      	bne.n	80031a8 <xQueueGiveFromISR+0x28>
	__asm volatile
 8003194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003198:	f383 8811 	msr	BASEPRI, r3
 800319c:	f3bf 8f6f 	isb	sy
 80031a0:	f3bf 8f4f 	dsb	sy
 80031a4:	623b      	str	r3, [r7, #32]
 80031a6:	e7fe      	b.n	80031a6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80031a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d009      	beq.n	80031c4 <xQueueGiveFromISR+0x44>
 80031b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b4:	f383 8811 	msr	BASEPRI, r3
 80031b8:	f3bf 8f6f 	isb	sy
 80031bc:	f3bf 8f4f 	dsb	sy
 80031c0:	61fb      	str	r3, [r7, #28]
 80031c2:	e7fe      	b.n	80031c2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80031c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d103      	bne.n	80031d4 <xQueueGiveFromISR+0x54>
 80031cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <xQueueGiveFromISR+0x58>
 80031d4:	2301      	movs	r3, #1
 80031d6:	e000      	b.n	80031da <xQueueGiveFromISR+0x5a>
 80031d8:	2300      	movs	r3, #0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d109      	bne.n	80031f2 <xQueueGiveFromISR+0x72>
 80031de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e2:	f383 8811 	msr	BASEPRI, r3
 80031e6:	f3bf 8f6f 	isb	sy
 80031ea:	f3bf 8f4f 	dsb	sy
 80031ee:	61bb      	str	r3, [r7, #24]
 80031f0:	e7fe      	b.n	80031f0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031f2:	f002 f97f 	bl	80054f4 <vPortValidateInterruptPriority>
	__asm volatile
 80031f6:	f3ef 8211 	mrs	r2, BASEPRI
 80031fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fe:	f383 8811 	msr	BASEPRI, r3
 8003202:	f3bf 8f6f 	isb	sy
 8003206:	f3bf 8f4f 	dsb	sy
 800320a:	617a      	str	r2, [r7, #20]
 800320c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800320e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003210:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003216:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800321e:	429a      	cmp	r2, r3
 8003220:	d22b      	bcs.n	800327a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003224:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003228:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800322c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003232:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003234:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323c:	d112      	bne.n	8003264 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800323e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	2b00      	cmp	r3, #0
 8003244:	d016      	beq.n	8003274 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003248:	3324      	adds	r3, #36	; 0x24
 800324a:	4618      	mov	r0, r3
 800324c:	f001 f8a2 	bl	8004394 <xTaskRemoveFromEventList>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00e      	beq.n	8003274 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00b      	beq.n	8003274 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	2201      	movs	r2, #1
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	e007      	b.n	8003274 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003268:	3301      	adds	r3, #1
 800326a:	b2db      	uxtb	r3, r3
 800326c:	b25a      	sxtb	r2, r3
 800326e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003274:	2301      	movs	r3, #1
 8003276:	637b      	str	r3, [r7, #52]	; 0x34
 8003278:	e001      	b.n	800327e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800327a:	2300      	movs	r3, #0
 800327c:	637b      	str	r3, [r7, #52]	; 0x34
 800327e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003280:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800328a:	4618      	mov	r0, r3
 800328c:	3738      	adds	r7, #56	; 0x38
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b08c      	sub	sp, #48	; 0x30
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80032a0:	2300      	movs	r3, #0
 80032a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80032a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d109      	bne.n	80032c2 <xQueueReceive+0x2e>
	__asm volatile
 80032ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b2:	f383 8811 	msr	BASEPRI, r3
 80032b6:	f3bf 8f6f 	isb	sy
 80032ba:	f3bf 8f4f 	dsb	sy
 80032be:	623b      	str	r3, [r7, #32]
 80032c0:	e7fe      	b.n	80032c0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d103      	bne.n	80032d0 <xQueueReceive+0x3c>
 80032c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <xQueueReceive+0x40>
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <xQueueReceive+0x42>
 80032d4:	2300      	movs	r3, #0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d109      	bne.n	80032ee <xQueueReceive+0x5a>
 80032da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032de:	f383 8811 	msr	BASEPRI, r3
 80032e2:	f3bf 8f6f 	isb	sy
 80032e6:	f3bf 8f4f 	dsb	sy
 80032ea:	61fb      	str	r3, [r7, #28]
 80032ec:	e7fe      	b.n	80032ec <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032ee:	f001 fa0d 	bl	800470c <xTaskGetSchedulerState>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d102      	bne.n	80032fe <xQueueReceive+0x6a>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <xQueueReceive+0x6e>
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <xQueueReceive+0x70>
 8003302:	2300      	movs	r3, #0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d109      	bne.n	800331c <xQueueReceive+0x88>
 8003308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330c:	f383 8811 	msr	BASEPRI, r3
 8003310:	f3bf 8f6f 	isb	sy
 8003314:	f3bf 8f4f 	dsb	sy
 8003318:	61bb      	str	r3, [r7, #24]
 800331a:	e7fe      	b.n	800331a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800331c:	f002 f80e 	bl	800533c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	2b00      	cmp	r3, #0
 800332a:	d01f      	beq.n	800336c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800332c:	68b9      	ldr	r1, [r7, #8]
 800332e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003330:	f000 fab5 	bl	800389e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	1e5a      	subs	r2, r3, #1
 8003338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800333c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00f      	beq.n	8003364 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003346:	3310      	adds	r3, #16
 8003348:	4618      	mov	r0, r3
 800334a:	f001 f823 	bl	8004394 <xTaskRemoveFromEventList>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d007      	beq.n	8003364 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003354:	4b3c      	ldr	r3, [pc, #240]	; (8003448 <xQueueReceive+0x1b4>)
 8003356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	f3bf 8f4f 	dsb	sy
 8003360:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003364:	f002 f818 	bl	8005398 <vPortExitCritical>
				return pdPASS;
 8003368:	2301      	movs	r3, #1
 800336a:	e069      	b.n	8003440 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d103      	bne.n	800337a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003372:	f002 f811 	bl	8005398 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003376:	2300      	movs	r3, #0
 8003378:	e062      	b.n	8003440 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800337a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337c:	2b00      	cmp	r3, #0
 800337e:	d106      	bne.n	800338e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003380:	f107 0310 	add.w	r3, r7, #16
 8003384:	4618      	mov	r0, r3
 8003386:	f001 f867 	bl	8004458 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800338a:	2301      	movs	r3, #1
 800338c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800338e:	f002 f803 	bl	8005398 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003392:	f000 fddd 	bl	8003f50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003396:	f001 ffd1 	bl	800533c <vPortEnterCritical>
 800339a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033a0:	b25b      	sxtb	r3, r3
 80033a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a6:	d103      	bne.n	80033b0 <xQueueReceive+0x11c>
 80033a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033b6:	b25b      	sxtb	r3, r3
 80033b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033bc:	d103      	bne.n	80033c6 <xQueueReceive+0x132>
 80033be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033c6:	f001 ffe7 	bl	8005398 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033ca:	1d3a      	adds	r2, r7, #4
 80033cc:	f107 0310 	add.w	r3, r7, #16
 80033d0:	4611      	mov	r1, r2
 80033d2:	4618      	mov	r0, r3
 80033d4:	f001 f856 	bl	8004484 <xTaskCheckForTimeOut>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d123      	bne.n	8003426 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033e0:	f000 fad5 	bl	800398e <prvIsQueueEmpty>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d017      	beq.n	800341a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80033ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ec:	3324      	adds	r3, #36	; 0x24
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	4611      	mov	r1, r2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 ff80 	bl	80042f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80033f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033fa:	f000 fa76 	bl	80038ea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80033fe:	f000 fdb5 	bl	8003f6c <xTaskResumeAll>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d189      	bne.n	800331c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003408:	4b0f      	ldr	r3, [pc, #60]	; (8003448 <xQueueReceive+0x1b4>)
 800340a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	f3bf 8f4f 	dsb	sy
 8003414:	f3bf 8f6f 	isb	sy
 8003418:	e780      	b.n	800331c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800341a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800341c:	f000 fa65 	bl	80038ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003420:	f000 fda4 	bl	8003f6c <xTaskResumeAll>
 8003424:	e77a      	b.n	800331c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003426:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003428:	f000 fa5f 	bl	80038ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800342c:	f000 fd9e 	bl	8003f6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003432:	f000 faac 	bl	800398e <prvIsQueueEmpty>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	f43f af6f 	beq.w	800331c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800343e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003440:	4618      	mov	r0, r3
 8003442:	3730      	adds	r7, #48	; 0x30
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	e000ed04 	.word	0xe000ed04

0800344c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b08e      	sub	sp, #56	; 0x38
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003456:	2300      	movs	r3, #0
 8003458:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800345e:	2300      	movs	r3, #0
 8003460:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003464:	2b00      	cmp	r3, #0
 8003466:	d109      	bne.n	800347c <xQueueSemaphoreTake+0x30>
 8003468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346c:	f383 8811 	msr	BASEPRI, r3
 8003470:	f3bf 8f6f 	isb	sy
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	623b      	str	r3, [r7, #32]
 800347a:	e7fe      	b.n	800347a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800347c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	2b00      	cmp	r3, #0
 8003482:	d009      	beq.n	8003498 <xQueueSemaphoreTake+0x4c>
 8003484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003488:	f383 8811 	msr	BASEPRI, r3
 800348c:	f3bf 8f6f 	isb	sy
 8003490:	f3bf 8f4f 	dsb	sy
 8003494:	61fb      	str	r3, [r7, #28]
 8003496:	e7fe      	b.n	8003496 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003498:	f001 f938 	bl	800470c <xTaskGetSchedulerState>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d102      	bne.n	80034a8 <xQueueSemaphoreTake+0x5c>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <xQueueSemaphoreTake+0x60>
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <xQueueSemaphoreTake+0x62>
 80034ac:	2300      	movs	r3, #0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d109      	bne.n	80034c6 <xQueueSemaphoreTake+0x7a>
 80034b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b6:	f383 8811 	msr	BASEPRI, r3
 80034ba:	f3bf 8f6f 	isb	sy
 80034be:	f3bf 8f4f 	dsb	sy
 80034c2:	61bb      	str	r3, [r7, #24]
 80034c4:	e7fe      	b.n	80034c4 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80034c6:	f001 ff39 	bl	800533c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80034ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ce:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80034d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d024      	beq.n	8003520 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80034d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d8:	1e5a      	subs	r2, r3, #1
 80034da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034dc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d104      	bne.n	80034f0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80034e6:	f001 fa8d 	bl	8004a04 <pvTaskIncrementMutexHeldCount>
 80034ea:	4602      	mov	r2, r0
 80034ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ee:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f2:	691b      	ldr	r3, [r3, #16]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00f      	beq.n	8003518 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fa:	3310      	adds	r3, #16
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 ff49 	bl	8004394 <xTaskRemoveFromEventList>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d007      	beq.n	8003518 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003508:	4b53      	ldr	r3, [pc, #332]	; (8003658 <xQueueSemaphoreTake+0x20c>)
 800350a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	f3bf 8f4f 	dsb	sy
 8003514:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003518:	f001 ff3e 	bl	8005398 <vPortExitCritical>
				return pdPASS;
 800351c:	2301      	movs	r3, #1
 800351e:	e096      	b.n	800364e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d110      	bne.n	8003548 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003528:	2b00      	cmp	r3, #0
 800352a:	d009      	beq.n	8003540 <xQueueSemaphoreTake+0xf4>
 800352c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003530:	f383 8811 	msr	BASEPRI, r3
 8003534:	f3bf 8f6f 	isb	sy
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	e7fe      	b.n	800353e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003540:	f001 ff2a 	bl	8005398 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003544:	2300      	movs	r3, #0
 8003546:	e082      	b.n	800364e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800354a:	2b00      	cmp	r3, #0
 800354c:	d106      	bne.n	800355c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800354e:	f107 030c 	add.w	r3, r7, #12
 8003552:	4618      	mov	r0, r3
 8003554:	f000 ff80 	bl	8004458 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003558:	2301      	movs	r3, #1
 800355a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800355c:	f001 ff1c 	bl	8005398 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003560:	f000 fcf6 	bl	8003f50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003564:	f001 feea 	bl	800533c <vPortEnterCritical>
 8003568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800356e:	b25b      	sxtb	r3, r3
 8003570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003574:	d103      	bne.n	800357e <xQueueSemaphoreTake+0x132>
 8003576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800357e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003580:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003584:	b25b      	sxtb	r3, r3
 8003586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358a:	d103      	bne.n	8003594 <xQueueSemaphoreTake+0x148>
 800358c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003594:	f001 ff00 	bl	8005398 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003598:	463a      	mov	r2, r7
 800359a:	f107 030c 	add.w	r3, r7, #12
 800359e:	4611      	mov	r1, r2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 ff6f 	bl	8004484 <xTaskCheckForTimeOut>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d132      	bne.n	8003612 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035ae:	f000 f9ee 	bl	800398e <prvIsQueueEmpty>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d026      	beq.n	8003606 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d109      	bne.n	80035d4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80035c0:	f001 febc 	bl	800533c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80035c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f001 f8bd 	bl	8004748 <xTaskPriorityInherit>
 80035ce:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80035d0:	f001 fee2 	bl	8005398 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d6:	3324      	adds	r3, #36	; 0x24
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	4611      	mov	r1, r2
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 fe8b 	bl	80042f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80035e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035e4:	f000 f981 	bl	80038ea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80035e8:	f000 fcc0 	bl	8003f6c <xTaskResumeAll>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f47f af69 	bne.w	80034c6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80035f4:	4b18      	ldr	r3, [pc, #96]	; (8003658 <xQueueSemaphoreTake+0x20c>)
 80035f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	f3bf 8f4f 	dsb	sy
 8003600:	f3bf 8f6f 	isb	sy
 8003604:	e75f      	b.n	80034c6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003606:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003608:	f000 f96f 	bl	80038ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800360c:	f000 fcae 	bl	8003f6c <xTaskResumeAll>
 8003610:	e759      	b.n	80034c6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003612:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003614:	f000 f969 	bl	80038ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003618:	f000 fca8 	bl	8003f6c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800361c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800361e:	f000 f9b6 	bl	800398e <prvIsQueueEmpty>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	f43f af4e 	beq.w	80034c6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800362a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00d      	beq.n	800364c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8003630:	f001 fe84 	bl	800533c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003634:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003636:	f000 f8b0 	bl	800379a <prvGetDisinheritPriorityAfterTimeout>
 800363a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800363c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003642:	4618      	mov	r0, r3
 8003644:	f001 f95a 	bl	80048fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003648:	f001 fea6 	bl	8005398 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800364c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800364e:	4618      	mov	r0, r3
 8003650:	3738      	adds	r7, #56	; 0x38
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	e000ed04 	.word	0xe000ed04

0800365c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08e      	sub	sp, #56	; 0x38
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800366c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366e:	2b00      	cmp	r3, #0
 8003670:	d109      	bne.n	8003686 <xQueueReceiveFromISR+0x2a>
 8003672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003676:	f383 8811 	msr	BASEPRI, r3
 800367a:	f3bf 8f6f 	isb	sy
 800367e:	f3bf 8f4f 	dsb	sy
 8003682:	623b      	str	r3, [r7, #32]
 8003684:	e7fe      	b.n	8003684 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d103      	bne.n	8003694 <xQueueReceiveFromISR+0x38>
 800368c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <xQueueReceiveFromISR+0x3c>
 8003694:	2301      	movs	r3, #1
 8003696:	e000      	b.n	800369a <xQueueReceiveFromISR+0x3e>
 8003698:	2300      	movs	r3, #0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d109      	bne.n	80036b2 <xQueueReceiveFromISR+0x56>
 800369e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a2:	f383 8811 	msr	BASEPRI, r3
 80036a6:	f3bf 8f6f 	isb	sy
 80036aa:	f3bf 8f4f 	dsb	sy
 80036ae:	61fb      	str	r3, [r7, #28]
 80036b0:	e7fe      	b.n	80036b0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036b2:	f001 ff1f 	bl	80054f4 <vPortValidateInterruptPriority>
	__asm volatile
 80036b6:	f3ef 8211 	mrs	r2, BASEPRI
 80036ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036be:	f383 8811 	msr	BASEPRI, r3
 80036c2:	f3bf 8f6f 	isb	sy
 80036c6:	f3bf 8f4f 	dsb	sy
 80036ca:	61ba      	str	r2, [r7, #24]
 80036cc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80036ce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80036d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d02f      	beq.n	800373e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80036de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80036e8:	68b9      	ldr	r1, [r7, #8]
 80036ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036ec:	f000 f8d7 	bl	800389e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80036f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f2:	1e5a      	subs	r2, r3, #1
 80036f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80036f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80036fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003700:	d112      	bne.n	8003728 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d016      	beq.n	8003738 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800370a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370c:	3310      	adds	r3, #16
 800370e:	4618      	mov	r0, r3
 8003710:	f000 fe40 	bl	8004394 <xTaskRemoveFromEventList>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00e      	beq.n	8003738 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00b      	beq.n	8003738 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	e007      	b.n	8003738 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800372c:	3301      	adds	r3, #1
 800372e:	b2db      	uxtb	r3, r3
 8003730:	b25a      	sxtb	r2, r3
 8003732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003738:	2301      	movs	r3, #1
 800373a:	637b      	str	r3, [r7, #52]	; 0x34
 800373c:	e001      	b.n	8003742 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800373e:	2300      	movs	r3, #0
 8003740:	637b      	str	r3, [r7, #52]	; 0x34
 8003742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003744:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800374c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800374e:	4618      	mov	r0, r3
 8003750:	3738      	adds	r7, #56	; 0x38
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b084      	sub	sp, #16
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d109      	bne.n	800377c <vQueueDelete+0x26>
	__asm volatile
 8003768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376c:	f383 8811 	msr	BASEPRI, r3
 8003770:	f3bf 8f6f 	isb	sy
 8003774:	f3bf 8f4f 	dsb	sy
 8003778:	60bb      	str	r3, [r7, #8]
 800377a:	e7fe      	b.n	800377a <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f000 f95d 	bl	8003a3c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003788:	2b00      	cmp	r3, #0
 800378a:	d102      	bne.n	8003792 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f001 ffb1 	bl	80056f4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003792:	bf00      	nop
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800379a:	b480      	push	{r7}
 800379c:	b085      	sub	sp, #20
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d006      	beq.n	80037b8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	e001      	b.n	80037bc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80037b8:	2300      	movs	r3, #0
 80037ba:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80037bc:	68fb      	ldr	r3, [r7, #12]
	}
 80037be:	4618      	mov	r0, r3
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b086      	sub	sp, #24
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	60f8      	str	r0, [r7, #12]
 80037d2:	60b9      	str	r1, [r7, #8]
 80037d4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80037d6:	2300      	movs	r3, #0
 80037d8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037de:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10d      	bne.n	8003804 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d14d      	bne.n	800388c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f001 f815 	bl	8004824 <xTaskPriorityDisinherit>
 80037fa:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	605a      	str	r2, [r3, #4]
 8003802:	e043      	b.n	800388c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d119      	bne.n	800383e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6898      	ldr	r0, [r3, #8]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	461a      	mov	r2, r3
 8003814:	68b9      	ldr	r1, [r7, #8]
 8003816:	f002 f8a5 	bl	8005964 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	441a      	add	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	429a      	cmp	r2, r3
 8003832:	d32b      	bcc.n	800388c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	609a      	str	r2, [r3, #8]
 800383c:	e026      	b.n	800388c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	68d8      	ldr	r0, [r3, #12]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	461a      	mov	r2, r3
 8003848:	68b9      	ldr	r1, [r7, #8]
 800384a:	f002 f88b 	bl	8005964 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	425b      	negs	r3, r3
 8003858:	441a      	add	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	68da      	ldr	r2, [r3, #12]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	429a      	cmp	r2, r3
 8003868:	d207      	bcs.n	800387a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	425b      	negs	r3, r3
 8003874:	441a      	add	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b02      	cmp	r3, #2
 800387e:	d105      	bne.n	800388c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	3b01      	subs	r3, #1
 800388a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003894:	697b      	ldr	r3, [r7, #20]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b082      	sub	sp, #8
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
 80038a6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d018      	beq.n	80038e2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b8:	441a      	add	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68da      	ldr	r2, [r3, #12]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d303      	bcc.n	80038d2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68d9      	ldr	r1, [r3, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	461a      	mov	r2, r3
 80038dc:	6838      	ldr	r0, [r7, #0]
 80038de:	f002 f841 	bl	8005964 <memcpy>
	}
}
 80038e2:	bf00      	nop
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b084      	sub	sp, #16
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80038f2:	f001 fd23 	bl	800533c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038fc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80038fe:	e011      	b.n	8003924 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	2b00      	cmp	r3, #0
 8003906:	d012      	beq.n	800392e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3324      	adds	r3, #36	; 0x24
 800390c:	4618      	mov	r0, r3
 800390e:	f000 fd41 	bl	8004394 <xTaskRemoveFromEventList>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003918:	f000 fe14 	bl	8004544 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800391c:	7bfb      	ldrb	r3, [r7, #15]
 800391e:	3b01      	subs	r3, #1
 8003920:	b2db      	uxtb	r3, r3
 8003922:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003924:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003928:	2b00      	cmp	r3, #0
 800392a:	dce9      	bgt.n	8003900 <prvUnlockQueue+0x16>
 800392c:	e000      	b.n	8003930 <prvUnlockQueue+0x46>
					break;
 800392e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	22ff      	movs	r2, #255	; 0xff
 8003934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003938:	f001 fd2e 	bl	8005398 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800393c:	f001 fcfe 	bl	800533c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003946:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003948:	e011      	b.n	800396e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d012      	beq.n	8003978 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	3310      	adds	r3, #16
 8003956:	4618      	mov	r0, r3
 8003958:	f000 fd1c 	bl	8004394 <xTaskRemoveFromEventList>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003962:	f000 fdef 	bl	8004544 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003966:	7bbb      	ldrb	r3, [r7, #14]
 8003968:	3b01      	subs	r3, #1
 800396a:	b2db      	uxtb	r3, r3
 800396c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800396e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003972:	2b00      	cmp	r3, #0
 8003974:	dce9      	bgt.n	800394a <prvUnlockQueue+0x60>
 8003976:	e000      	b.n	800397a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003978:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	22ff      	movs	r2, #255	; 0xff
 800397e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003982:	f001 fd09 	bl	8005398 <vPortExitCritical>
}
 8003986:	bf00      	nop
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b084      	sub	sp, #16
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003996:	f001 fcd1 	bl	800533c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d102      	bne.n	80039a8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80039a2:	2301      	movs	r3, #1
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	e001      	b.n	80039ac <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80039ac:	f001 fcf4 	bl	8005398 <vPortExitCritical>

	return xReturn;
 80039b0:	68fb      	ldr	r3, [r7, #12]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b084      	sub	sp, #16
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80039c2:	f001 fcbb 	bl	800533c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d102      	bne.n	80039d8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80039d2:	2301      	movs	r3, #1
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	e001      	b.n	80039dc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80039d8:	2300      	movs	r3, #0
 80039da:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80039dc:	f001 fcdc 	bl	8005398 <vPortExitCritical>

	return xReturn;
 80039e0:	68fb      	ldr	r3, [r7, #12]
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
	...

080039ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039f6:	2300      	movs	r3, #0
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	e014      	b.n	8003a26 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80039fc:	4a0e      	ldr	r2, [pc, #56]	; (8003a38 <vQueueAddToRegistry+0x4c>)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10b      	bne.n	8003a20 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003a08:	490b      	ldr	r1, [pc, #44]	; (8003a38 <vQueueAddToRegistry+0x4c>)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003a12:	4a09      	ldr	r2, [pc, #36]	; (8003a38 <vQueueAddToRegistry+0x4c>)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	4413      	add	r3, r2
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003a1e:	e005      	b.n	8003a2c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	3301      	adds	r3, #1
 8003a24:	60fb      	str	r3, [r7, #12]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2b07      	cmp	r3, #7
 8003a2a:	d9e7      	bls.n	80039fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003a2c:	bf00      	nop
 8003a2e:	3714      	adds	r7, #20
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr
 8003a38:	200049bc 	.word	0x200049bc

08003a3c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a44:	2300      	movs	r3, #0
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	e016      	b.n	8003a78 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003a4a:	4a10      	ldr	r2, [pc, #64]	; (8003a8c <vQueueUnregisterQueue+0x50>)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	4413      	add	r3, r2
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d10b      	bne.n	8003a72 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8003a5a:	4a0c      	ldr	r2, [pc, #48]	; (8003a8c <vQueueUnregisterQueue+0x50>)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2100      	movs	r1, #0
 8003a60:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003a64:	4a09      	ldr	r2, [pc, #36]	; (8003a8c <vQueueUnregisterQueue+0x50>)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	4413      	add	r3, r2
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	605a      	str	r2, [r3, #4]
				break;
 8003a70:	e005      	b.n	8003a7e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	3301      	adds	r3, #1
 8003a76:	60fb      	str	r3, [r7, #12]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2b07      	cmp	r3, #7
 8003a7c:	d9e5      	bls.n	8003a4a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003a7e:	bf00      	nop
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	200049bc 	.word	0x200049bc

08003a90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003aa0:	f001 fc4c 	bl	800533c <vPortEnterCritical>
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003aaa:	b25b      	sxtb	r3, r3
 8003aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab0:	d103      	bne.n	8003aba <vQueueWaitForMessageRestricted+0x2a>
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ac0:	b25b      	sxtb	r3, r3
 8003ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac6:	d103      	bne.n	8003ad0 <vQueueWaitForMessageRestricted+0x40>
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ad0:	f001 fc62 	bl	8005398 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d106      	bne.n	8003aea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	3324      	adds	r3, #36	; 0x24
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	68b9      	ldr	r1, [r7, #8]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fc2b 	bl	8004340 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003aea:	6978      	ldr	r0, [r7, #20]
 8003aec:	f7ff fefd 	bl	80038ea <prvUnlockQueue>
	}
 8003af0:	bf00      	nop
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08e      	sub	sp, #56	; 0x38
 8003afc:	af04      	add	r7, sp, #16
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
 8003b04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d109      	bne.n	8003b20 <xTaskCreateStatic+0x28>
 8003b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b10:	f383 8811 	msr	BASEPRI, r3
 8003b14:	f3bf 8f6f 	isb	sy
 8003b18:	f3bf 8f4f 	dsb	sy
 8003b1c:	623b      	str	r3, [r7, #32]
 8003b1e:	e7fe      	b.n	8003b1e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d109      	bne.n	8003b3a <xTaskCreateStatic+0x42>
 8003b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2a:	f383 8811 	msr	BASEPRI, r3
 8003b2e:	f3bf 8f6f 	isb	sy
 8003b32:	f3bf 8f4f 	dsb	sy
 8003b36:	61fb      	str	r3, [r7, #28]
 8003b38:	e7fe      	b.n	8003b38 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003b3a:	235c      	movs	r3, #92	; 0x5c
 8003b3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	2b5c      	cmp	r3, #92	; 0x5c
 8003b42:	d009      	beq.n	8003b58 <xTaskCreateStatic+0x60>
 8003b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b48:	f383 8811 	msr	BASEPRI, r3
 8003b4c:	f3bf 8f6f 	isb	sy
 8003b50:	f3bf 8f4f 	dsb	sy
 8003b54:	61bb      	str	r3, [r7, #24]
 8003b56:	e7fe      	b.n	8003b56 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d01e      	beq.n	8003b9c <xTaskCreateStatic+0xa4>
 8003b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d01b      	beq.n	8003b9c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	2202      	movs	r2, #2
 8003b72:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003b76:	2300      	movs	r3, #0
 8003b78:	9303      	str	r3, [sp, #12]
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	9302      	str	r3, [sp, #8]
 8003b7e:	f107 0314 	add.w	r3, r7, #20
 8003b82:	9301      	str	r3, [sp, #4]
 8003b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	68b9      	ldr	r1, [r7, #8]
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 f850 	bl	8003c34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b96:	f000 f8d3 	bl	8003d40 <prvAddNewTaskToReadyList>
 8003b9a:	e001      	b.n	8003ba0 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003ba0:	697b      	ldr	r3, [r7, #20]
	}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3728      	adds	r7, #40	; 0x28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b08c      	sub	sp, #48	; 0x30
 8003bae:	af04      	add	r7, sp, #16
 8003bb0:	60f8      	str	r0, [r7, #12]
 8003bb2:	60b9      	str	r1, [r7, #8]
 8003bb4:	603b      	str	r3, [r7, #0]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bba:	88fb      	ldrh	r3, [r7, #6]
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f001 fcd6 	bl	8005570 <pvPortMalloc>
 8003bc4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00e      	beq.n	8003bea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003bcc:	205c      	movs	r0, #92	; 0x5c
 8003bce:	f001 fccf 	bl	8005570 <pvPortMalloc>
 8003bd2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	631a      	str	r2, [r3, #48]	; 0x30
 8003be0:	e005      	b.n	8003bee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003be2:	6978      	ldr	r0, [r7, #20]
 8003be4:	f001 fd86 	bl	80056f4 <vPortFree>
 8003be8:	e001      	b.n	8003bee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d017      	beq.n	8003c24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003bfc:	88fa      	ldrh	r2, [r7, #6]
 8003bfe:	2300      	movs	r3, #0
 8003c00:	9303      	str	r3, [sp, #12]
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	9302      	str	r3, [sp, #8]
 8003c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c08:	9301      	str	r3, [sp, #4]
 8003c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	68b9      	ldr	r1, [r7, #8]
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 f80e 	bl	8003c34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c18:	69f8      	ldr	r0, [r7, #28]
 8003c1a:	f000 f891 	bl	8003d40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	61bb      	str	r3, [r7, #24]
 8003c22:	e002      	b.n	8003c2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c24:	f04f 33ff 	mov.w	r3, #4294967295
 8003c28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c2a:	69bb      	ldr	r3, [r7, #24]
	}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3720      	adds	r7, #32
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b088      	sub	sp, #32
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	21a5      	movs	r1, #165	; 0xa5
 8003c4e:	f001 fe94 	bl	800597a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	f023 0307 	bic.w	r3, r3, #7
 8003c6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d009      	beq.n	8003c8a <prvInitialiseNewTask+0x56>
 8003c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7a:	f383 8811 	msr	BASEPRI, r3
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	617b      	str	r3, [r7, #20]
 8003c88:	e7fe      	b.n	8003c88 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61fb      	str	r3, [r7, #28]
 8003c8e:	e012      	b.n	8003cb6 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	4413      	add	r3, r2
 8003c96:	7819      	ldrb	r1, [r3, #0]
 8003c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	3334      	adds	r3, #52	; 0x34
 8003ca0:	460a      	mov	r2, r1
 8003ca2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	4413      	add	r3, r2
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d006      	beq.n	8003cbe <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	61fb      	str	r3, [r7, #28]
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	2b0f      	cmp	r3, #15
 8003cba:	d9e9      	bls.n	8003c90 <prvInitialiseNewTask+0x5c>
 8003cbc:	e000      	b.n	8003cc0 <prvInitialiseNewTask+0x8c>
		{
			break;
 8003cbe:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cca:	2b37      	cmp	r3, #55	; 0x37
 8003ccc:	d901      	bls.n	8003cd2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003cce:	2337      	movs	r3, #55	; 0x37
 8003cd0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cd6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cdc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7fe fe87 	bl	80029fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf0:	3318      	adds	r3, #24
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fe fe82 	bl	80029fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cfc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d06:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d0c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d10:	2200      	movs	r2, #0
 8003d12:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	68f9      	ldr	r1, [r7, #12]
 8003d20:	69b8      	ldr	r0, [r7, #24]
 8003d22:	f001 f9e1 	bl	80050e8 <pxPortInitialiseStack>
 8003d26:	4602      	mov	r2, r0
 8003d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d36:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d38:	bf00      	nop
 8003d3a:	3720      	adds	r7, #32
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d48:	f001 faf8 	bl	800533c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d4c:	4b2d      	ldr	r3, [pc, #180]	; (8003e04 <prvAddNewTaskToReadyList+0xc4>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	3301      	adds	r3, #1
 8003d52:	4a2c      	ldr	r2, [pc, #176]	; (8003e04 <prvAddNewTaskToReadyList+0xc4>)
 8003d54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003d56:	4b2c      	ldr	r3, [pc, #176]	; (8003e08 <prvAddNewTaskToReadyList+0xc8>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d109      	bne.n	8003d72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d5e:	4a2a      	ldr	r2, [pc, #168]	; (8003e08 <prvAddNewTaskToReadyList+0xc8>)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d64:	4b27      	ldr	r3, [pc, #156]	; (8003e04 <prvAddNewTaskToReadyList+0xc4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d110      	bne.n	8003d8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d6c:	f000 fc0e 	bl	800458c <prvInitialiseTaskLists>
 8003d70:	e00d      	b.n	8003d8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d72:	4b26      	ldr	r3, [pc, #152]	; (8003e0c <prvAddNewTaskToReadyList+0xcc>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d109      	bne.n	8003d8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d7a:	4b23      	ldr	r3, [pc, #140]	; (8003e08 <prvAddNewTaskToReadyList+0xc8>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d802      	bhi.n	8003d8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d88:	4a1f      	ldr	r2, [pc, #124]	; (8003e08 <prvAddNewTaskToReadyList+0xc8>)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d8e:	4b20      	ldr	r3, [pc, #128]	; (8003e10 <prvAddNewTaskToReadyList+0xd0>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	3301      	adds	r3, #1
 8003d94:	4a1e      	ldr	r2, [pc, #120]	; (8003e10 <prvAddNewTaskToReadyList+0xd0>)
 8003d96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003d98:	4b1d      	ldr	r3, [pc, #116]	; (8003e10 <prvAddNewTaskToReadyList+0xd0>)
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da4:	4b1b      	ldr	r3, [pc, #108]	; (8003e14 <prvAddNewTaskToReadyList+0xd4>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d903      	bls.n	8003db4 <prvAddNewTaskToReadyList+0x74>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	4a18      	ldr	r2, [pc, #96]	; (8003e14 <prvAddNewTaskToReadyList+0xd4>)
 8003db2:	6013      	str	r3, [r2, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db8:	4613      	mov	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4a15      	ldr	r2, [pc, #84]	; (8003e18 <prvAddNewTaskToReadyList+0xd8>)
 8003dc2:	441a      	add	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4610      	mov	r0, r2
 8003dcc:	f7fe fe23 	bl	8002a16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003dd0:	f001 fae2 	bl	8005398 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003dd4:	4b0d      	ldr	r3, [pc, #52]	; (8003e0c <prvAddNewTaskToReadyList+0xcc>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00e      	beq.n	8003dfa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ddc:	4b0a      	ldr	r3, [pc, #40]	; (8003e08 <prvAddNewTaskToReadyList+0xc8>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d207      	bcs.n	8003dfa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003dea:	4b0c      	ldr	r3, [pc, #48]	; (8003e1c <prvAddNewTaskToReadyList+0xdc>)
 8003dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	f3bf 8f4f 	dsb	sy
 8003df6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003dfa:	bf00      	nop
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	20000bb8 	.word	0x20000bb8
 8003e08:	200006e4 	.word	0x200006e4
 8003e0c:	20000bc4 	.word	0x20000bc4
 8003e10:	20000bd4 	.word	0x20000bd4
 8003e14:	20000bc0 	.word	0x20000bc0
 8003e18:	200006e8 	.word	0x200006e8
 8003e1c:	e000ed04 	.word	0xe000ed04

08003e20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d016      	beq.n	8003e60 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003e32:	4b13      	ldr	r3, [pc, #76]	; (8003e80 <vTaskDelay+0x60>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d009      	beq.n	8003e4e <vTaskDelay+0x2e>
 8003e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3e:	f383 8811 	msr	BASEPRI, r3
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	f3bf 8f4f 	dsb	sy
 8003e4a:	60bb      	str	r3, [r7, #8]
 8003e4c:	e7fe      	b.n	8003e4c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003e4e:	f000 f87f 	bl	8003f50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e52:	2100      	movs	r1, #0
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 fde9 	bl	8004a2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003e5a:	f000 f887 	bl	8003f6c <xTaskResumeAll>
 8003e5e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d107      	bne.n	8003e76 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003e66:	4b07      	ldr	r3, [pc, #28]	; (8003e84 <vTaskDelay+0x64>)
 8003e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	f3bf 8f4f 	dsb	sy
 8003e72:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e76:	bf00      	nop
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	20000be0 	.word	0x20000be0
 8003e84:	e000ed04 	.word	0xe000ed04

08003e88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08a      	sub	sp, #40	; 0x28
 8003e8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003e92:	2300      	movs	r3, #0
 8003e94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003e96:	463a      	mov	r2, r7
 8003e98:	1d39      	adds	r1, r7, #4
 8003e9a:	f107 0308 	add.w	r3, r7, #8
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fe fd58 	bl	8002954 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ea4:	6839      	ldr	r1, [r7, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	9202      	str	r2, [sp, #8]
 8003eac:	9301      	str	r3, [sp, #4]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	460a      	mov	r2, r1
 8003eb6:	4920      	ldr	r1, [pc, #128]	; (8003f38 <vTaskStartScheduler+0xb0>)
 8003eb8:	4820      	ldr	r0, [pc, #128]	; (8003f3c <vTaskStartScheduler+0xb4>)
 8003eba:	f7ff fe1d 	bl	8003af8 <xTaskCreateStatic>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	4b1f      	ldr	r3, [pc, #124]	; (8003f40 <vTaskStartScheduler+0xb8>)
 8003ec2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ec4:	4b1e      	ldr	r3, [pc, #120]	; (8003f40 <vTaskStartScheduler+0xb8>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	617b      	str	r3, [r7, #20]
 8003ed0:	e001      	b.n	8003ed6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d102      	bne.n	8003ee2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003edc:	f000 fdfa 	bl	8004ad4 <xTimerCreateTimerTask>
 8003ee0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d115      	bne.n	8003f14 <vTaskStartScheduler+0x8c>
 8003ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003efa:	4b12      	ldr	r3, [pc, #72]	; (8003f44 <vTaskStartScheduler+0xbc>)
 8003efc:	f04f 32ff 	mov.w	r2, #4294967295
 8003f00:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f02:	4b11      	ldr	r3, [pc, #68]	; (8003f48 <vTaskStartScheduler+0xc0>)
 8003f04:	2201      	movs	r2, #1
 8003f06:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003f08:	4b10      	ldr	r3, [pc, #64]	; (8003f4c <vTaskStartScheduler+0xc4>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f0e:	f001 f977 	bl	8005200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f12:	e00d      	b.n	8003f30 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1a:	d109      	bne.n	8003f30 <vTaskStartScheduler+0xa8>
 8003f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f20:	f383 8811 	msr	BASEPRI, r3
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	e7fe      	b.n	8003f2e <vTaskStartScheduler+0xa6>
}
 8003f30:	bf00      	nop
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	080059b0 	.word	0x080059b0
 8003f3c:	0800455d 	.word	0x0800455d
 8003f40:	20000bdc 	.word	0x20000bdc
 8003f44:	20000bd8 	.word	0x20000bd8
 8003f48:	20000bc4 	.word	0x20000bc4
 8003f4c:	20000bbc 	.word	0x20000bbc

08003f50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003f54:	4b04      	ldr	r3, [pc, #16]	; (8003f68 <vTaskSuspendAll+0x18>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	4a03      	ldr	r2, [pc, #12]	; (8003f68 <vTaskSuspendAll+0x18>)
 8003f5c:	6013      	str	r3, [r2, #0]
}
 8003f5e:	bf00      	nop
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	20000be0 	.word	0x20000be0

08003f6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003f72:	2300      	movs	r3, #0
 8003f74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003f76:	2300      	movs	r3, #0
 8003f78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003f7a:	4b41      	ldr	r3, [pc, #260]	; (8004080 <xTaskResumeAll+0x114>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d109      	bne.n	8003f96 <xTaskResumeAll+0x2a>
 8003f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f86:	f383 8811 	msr	BASEPRI, r3
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	603b      	str	r3, [r7, #0]
 8003f94:	e7fe      	b.n	8003f94 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003f96:	f001 f9d1 	bl	800533c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003f9a:	4b39      	ldr	r3, [pc, #228]	; (8004080 <xTaskResumeAll+0x114>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	4a37      	ldr	r2, [pc, #220]	; (8004080 <xTaskResumeAll+0x114>)
 8003fa2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fa4:	4b36      	ldr	r3, [pc, #216]	; (8004080 <xTaskResumeAll+0x114>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d162      	bne.n	8004072 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003fac:	4b35      	ldr	r3, [pc, #212]	; (8004084 <xTaskResumeAll+0x118>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d05e      	beq.n	8004072 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003fb4:	e02f      	b.n	8004016 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003fb6:	4b34      	ldr	r3, [pc, #208]	; (8004088 <xTaskResumeAll+0x11c>)
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	3318      	adds	r3, #24
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fe fd84 	bl	8002ad0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	3304      	adds	r3, #4
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7fe fd7f 	bl	8002ad0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd6:	4b2d      	ldr	r3, [pc, #180]	; (800408c <xTaskResumeAll+0x120>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d903      	bls.n	8003fe6 <xTaskResumeAll+0x7a>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe2:	4a2a      	ldr	r2, [pc, #168]	; (800408c <xTaskResumeAll+0x120>)
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fea:	4613      	mov	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4413      	add	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4a27      	ldr	r2, [pc, #156]	; (8004090 <xTaskResumeAll+0x124>)
 8003ff4:	441a      	add	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	f7fe fd0a 	bl	8002a16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004006:	4b23      	ldr	r3, [pc, #140]	; (8004094 <xTaskResumeAll+0x128>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	429a      	cmp	r2, r3
 800400e:	d302      	bcc.n	8004016 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004010:	4b21      	ldr	r3, [pc, #132]	; (8004098 <xTaskResumeAll+0x12c>)
 8004012:	2201      	movs	r2, #1
 8004014:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004016:	4b1c      	ldr	r3, [pc, #112]	; (8004088 <xTaskResumeAll+0x11c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1cb      	bne.n	8003fb6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004024:	f000 fb4c 	bl	80046c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004028:	4b1c      	ldr	r3, [pc, #112]	; (800409c <xTaskResumeAll+0x130>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d010      	beq.n	8004056 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004034:	f000 f846 	bl	80040c4 <xTaskIncrementTick>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800403e:	4b16      	ldr	r3, [pc, #88]	; (8004098 <xTaskResumeAll+0x12c>)
 8004040:	2201      	movs	r2, #1
 8004042:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3b01      	subs	r3, #1
 8004048:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1f1      	bne.n	8004034 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004050:	4b12      	ldr	r3, [pc, #72]	; (800409c <xTaskResumeAll+0x130>)
 8004052:	2200      	movs	r2, #0
 8004054:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004056:	4b10      	ldr	r3, [pc, #64]	; (8004098 <xTaskResumeAll+0x12c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d009      	beq.n	8004072 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800405e:	2301      	movs	r3, #1
 8004060:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004062:	4b0f      	ldr	r3, [pc, #60]	; (80040a0 <xTaskResumeAll+0x134>)
 8004064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004072:	f001 f991 	bl	8005398 <vPortExitCritical>

	return xAlreadyYielded;
 8004076:	68bb      	ldr	r3, [r7, #8]
}
 8004078:	4618      	mov	r0, r3
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	20000be0 	.word	0x20000be0
 8004084:	20000bb8 	.word	0x20000bb8
 8004088:	20000b78 	.word	0x20000b78
 800408c:	20000bc0 	.word	0x20000bc0
 8004090:	200006e8 	.word	0x200006e8
 8004094:	200006e4 	.word	0x200006e4
 8004098:	20000bcc 	.word	0x20000bcc
 800409c:	20000bc8 	.word	0x20000bc8
 80040a0:	e000ed04 	.word	0xe000ed04

080040a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80040aa:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <xTaskGetTickCount+0x1c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80040b0:	687b      	ldr	r3, [r7, #4]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	20000bbc 	.word	0x20000bbc

080040c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80040ca:	2300      	movs	r3, #0
 80040cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040ce:	4b51      	ldr	r3, [pc, #324]	; (8004214 <xTaskIncrementTick+0x150>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f040 808d 	bne.w	80041f2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80040d8:	4b4f      	ldr	r3, [pc, #316]	; (8004218 <xTaskIncrementTick+0x154>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3301      	adds	r3, #1
 80040de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80040e0:	4a4d      	ldr	r2, [pc, #308]	; (8004218 <xTaskIncrementTick+0x154>)
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d11f      	bne.n	800412c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80040ec:	4b4b      	ldr	r3, [pc, #300]	; (800421c <xTaskIncrementTick+0x158>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d009      	beq.n	800410a <xTaskIncrementTick+0x46>
 80040f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fa:	f383 8811 	msr	BASEPRI, r3
 80040fe:	f3bf 8f6f 	isb	sy
 8004102:	f3bf 8f4f 	dsb	sy
 8004106:	603b      	str	r3, [r7, #0]
 8004108:	e7fe      	b.n	8004108 <xTaskIncrementTick+0x44>
 800410a:	4b44      	ldr	r3, [pc, #272]	; (800421c <xTaskIncrementTick+0x158>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	4b43      	ldr	r3, [pc, #268]	; (8004220 <xTaskIncrementTick+0x15c>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a41      	ldr	r2, [pc, #260]	; (800421c <xTaskIncrementTick+0x158>)
 8004116:	6013      	str	r3, [r2, #0]
 8004118:	4a41      	ldr	r2, [pc, #260]	; (8004220 <xTaskIncrementTick+0x15c>)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	4b41      	ldr	r3, [pc, #260]	; (8004224 <xTaskIncrementTick+0x160>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	3301      	adds	r3, #1
 8004124:	4a3f      	ldr	r2, [pc, #252]	; (8004224 <xTaskIncrementTick+0x160>)
 8004126:	6013      	str	r3, [r2, #0]
 8004128:	f000 faca 	bl	80046c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800412c:	4b3e      	ldr	r3, [pc, #248]	; (8004228 <xTaskIncrementTick+0x164>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	429a      	cmp	r2, r3
 8004134:	d34e      	bcc.n	80041d4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004136:	4b39      	ldr	r3, [pc, #228]	; (800421c <xTaskIncrementTick+0x158>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <xTaskIncrementTick+0x80>
 8004140:	2301      	movs	r3, #1
 8004142:	e000      	b.n	8004146 <xTaskIncrementTick+0x82>
 8004144:	2300      	movs	r3, #0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d004      	beq.n	8004154 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800414a:	4b37      	ldr	r3, [pc, #220]	; (8004228 <xTaskIncrementTick+0x164>)
 800414c:	f04f 32ff 	mov.w	r2, #4294967295
 8004150:	601a      	str	r2, [r3, #0]
					break;
 8004152:	e03f      	b.n	80041d4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004154:	4b31      	ldr	r3, [pc, #196]	; (800421c <xTaskIncrementTick+0x158>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	429a      	cmp	r2, r3
 800416a:	d203      	bcs.n	8004174 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800416c:	4a2e      	ldr	r2, [pc, #184]	; (8004228 <xTaskIncrementTick+0x164>)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6013      	str	r3, [r2, #0]
						break;
 8004172:	e02f      	b.n	80041d4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	3304      	adds	r3, #4
 8004178:	4618      	mov	r0, r3
 800417a:	f7fe fca9 	bl	8002ad0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004182:	2b00      	cmp	r3, #0
 8004184:	d004      	beq.n	8004190 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	3318      	adds	r3, #24
 800418a:	4618      	mov	r0, r3
 800418c:	f7fe fca0 	bl	8002ad0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004194:	4b25      	ldr	r3, [pc, #148]	; (800422c <xTaskIncrementTick+0x168>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	429a      	cmp	r2, r3
 800419a:	d903      	bls.n	80041a4 <xTaskIncrementTick+0xe0>
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	4a22      	ldr	r2, [pc, #136]	; (800422c <xTaskIncrementTick+0x168>)
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a8:	4613      	mov	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4a1f      	ldr	r2, [pc, #124]	; (8004230 <xTaskIncrementTick+0x16c>)
 80041b2:	441a      	add	r2, r3
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	3304      	adds	r3, #4
 80041b8:	4619      	mov	r1, r3
 80041ba:	4610      	mov	r0, r2
 80041bc:	f7fe fc2b 	bl	8002a16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c4:	4b1b      	ldr	r3, [pc, #108]	; (8004234 <xTaskIncrementTick+0x170>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d3b3      	bcc.n	8004136 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80041ce:	2301      	movs	r3, #1
 80041d0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041d2:	e7b0      	b.n	8004136 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80041d4:	4b17      	ldr	r3, [pc, #92]	; (8004234 <xTaskIncrementTick+0x170>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041da:	4915      	ldr	r1, [pc, #84]	; (8004230 <xTaskIncrementTick+0x16c>)
 80041dc:	4613      	mov	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d907      	bls.n	80041fc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80041ec:	2301      	movs	r3, #1
 80041ee:	617b      	str	r3, [r7, #20]
 80041f0:	e004      	b.n	80041fc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80041f2:	4b11      	ldr	r3, [pc, #68]	; (8004238 <xTaskIncrementTick+0x174>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	3301      	adds	r3, #1
 80041f8:	4a0f      	ldr	r2, [pc, #60]	; (8004238 <xTaskIncrementTick+0x174>)
 80041fa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80041fc:	4b0f      	ldr	r3, [pc, #60]	; (800423c <xTaskIncrementTick+0x178>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004204:	2301      	movs	r3, #1
 8004206:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004208:	697b      	ldr	r3, [r7, #20]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	20000be0 	.word	0x20000be0
 8004218:	20000bbc 	.word	0x20000bbc
 800421c:	20000b70 	.word	0x20000b70
 8004220:	20000b74 	.word	0x20000b74
 8004224:	20000bd0 	.word	0x20000bd0
 8004228:	20000bd8 	.word	0x20000bd8
 800422c:	20000bc0 	.word	0x20000bc0
 8004230:	200006e8 	.word	0x200006e8
 8004234:	200006e4 	.word	0x200006e4
 8004238:	20000bc8 	.word	0x20000bc8
 800423c:	20000bcc 	.word	0x20000bcc

08004240 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004246:	4b27      	ldr	r3, [pc, #156]	; (80042e4 <vTaskSwitchContext+0xa4>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800424e:	4b26      	ldr	r3, [pc, #152]	; (80042e8 <vTaskSwitchContext+0xa8>)
 8004250:	2201      	movs	r2, #1
 8004252:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004254:	e040      	b.n	80042d8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004256:	4b24      	ldr	r3, [pc, #144]	; (80042e8 <vTaskSwitchContext+0xa8>)
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800425c:	4b23      	ldr	r3, [pc, #140]	; (80042ec <vTaskSwitchContext+0xac>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	e00f      	b.n	8004284 <vTaskSwitchContext+0x44>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d109      	bne.n	800427e <vTaskSwitchContext+0x3e>
 800426a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426e:	f383 8811 	msr	BASEPRI, r3
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	607b      	str	r3, [r7, #4]
 800427c:	e7fe      	b.n	800427c <vTaskSwitchContext+0x3c>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	3b01      	subs	r3, #1
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	491a      	ldr	r1, [pc, #104]	; (80042f0 <vTaskSwitchContext+0xb0>)
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	4613      	mov	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	440b      	add	r3, r1
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0e5      	beq.n	8004264 <vTaskSwitchContext+0x24>
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	4613      	mov	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4413      	add	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4a13      	ldr	r2, [pc, #76]	; (80042f0 <vTaskSwitchContext+0xb0>)
 80042a4:	4413      	add	r3, r2
 80042a6:	60bb      	str	r3, [r7, #8]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	605a      	str	r2, [r3, #4]
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	3308      	adds	r3, #8
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d104      	bne.n	80042c8 <vTaskSwitchContext+0x88>
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	605a      	str	r2, [r3, #4]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	4a09      	ldr	r2, [pc, #36]	; (80042f4 <vTaskSwitchContext+0xb4>)
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	4a06      	ldr	r2, [pc, #24]	; (80042ec <vTaskSwitchContext+0xac>)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6013      	str	r3, [r2, #0]
}
 80042d8:	bf00      	nop
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	20000be0 	.word	0x20000be0
 80042e8:	20000bcc 	.word	0x20000bcc
 80042ec:	20000bc0 	.word	0x20000bc0
 80042f0:	200006e8 	.word	0x200006e8
 80042f4:	200006e4 	.word	0x200006e4

080042f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d109      	bne.n	800431c <vTaskPlaceOnEventList+0x24>
 8004308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	60fb      	str	r3, [r7, #12]
 800431a:	e7fe      	b.n	800431a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800431c:	4b07      	ldr	r3, [pc, #28]	; (800433c <vTaskPlaceOnEventList+0x44>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	3318      	adds	r3, #24
 8004322:	4619      	mov	r1, r3
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7fe fb9a 	bl	8002a5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800432a:	2101      	movs	r1, #1
 800432c:	6838      	ldr	r0, [r7, #0]
 800432e:	f000 fb7d 	bl	8004a2c <prvAddCurrentTaskToDelayedList>
}
 8004332:	bf00      	nop
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	200006e4 	.word	0x200006e4

08004340 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d109      	bne.n	8004366 <vTaskPlaceOnEventListRestricted+0x26>
 8004352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004356:	f383 8811 	msr	BASEPRI, r3
 800435a:	f3bf 8f6f 	isb	sy
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	e7fe      	b.n	8004364 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004366:	4b0a      	ldr	r3, [pc, #40]	; (8004390 <vTaskPlaceOnEventListRestricted+0x50>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	3318      	adds	r3, #24
 800436c:	4619      	mov	r1, r3
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f7fe fb51 	bl	8002a16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800437a:	f04f 33ff 	mov.w	r3, #4294967295
 800437e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004380:	6879      	ldr	r1, [r7, #4]
 8004382:	68b8      	ldr	r0, [r7, #8]
 8004384:	f000 fb52 	bl	8004a2c <prvAddCurrentTaskToDelayedList>
	}
 8004388:	bf00      	nop
 800438a:	3718      	adds	r7, #24
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	200006e4 	.word	0x200006e4

08004394 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d109      	bne.n	80043be <xTaskRemoveFromEventList+0x2a>
 80043aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	e7fe      	b.n	80043bc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	3318      	adds	r3, #24
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fe fb84 	bl	8002ad0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043c8:	4b1d      	ldr	r3, [pc, #116]	; (8004440 <xTaskRemoveFromEventList+0xac>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d11d      	bne.n	800440c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	3304      	adds	r3, #4
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7fe fb7b 	bl	8002ad0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043de:	4b19      	ldr	r3, [pc, #100]	; (8004444 <xTaskRemoveFromEventList+0xb0>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d903      	bls.n	80043ee <xTaskRemoveFromEventList+0x5a>
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ea:	4a16      	ldr	r2, [pc, #88]	; (8004444 <xTaskRemoveFromEventList+0xb0>)
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f2:	4613      	mov	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4a13      	ldr	r2, [pc, #76]	; (8004448 <xTaskRemoveFromEventList+0xb4>)
 80043fc:	441a      	add	r2, r3
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	3304      	adds	r3, #4
 8004402:	4619      	mov	r1, r3
 8004404:	4610      	mov	r0, r2
 8004406:	f7fe fb06 	bl	8002a16 <vListInsertEnd>
 800440a:	e005      	b.n	8004418 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	3318      	adds	r3, #24
 8004410:	4619      	mov	r1, r3
 8004412:	480e      	ldr	r0, [pc, #56]	; (800444c <xTaskRemoveFromEventList+0xb8>)
 8004414:	f7fe faff 	bl	8002a16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800441c:	4b0c      	ldr	r3, [pc, #48]	; (8004450 <xTaskRemoveFromEventList+0xbc>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004422:	429a      	cmp	r2, r3
 8004424:	d905      	bls.n	8004432 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004426:	2301      	movs	r3, #1
 8004428:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800442a:	4b0a      	ldr	r3, [pc, #40]	; (8004454 <xTaskRemoveFromEventList+0xc0>)
 800442c:	2201      	movs	r2, #1
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	e001      	b.n	8004436 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004432:	2300      	movs	r3, #0
 8004434:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004436:	697b      	ldr	r3, [r7, #20]
}
 8004438:	4618      	mov	r0, r3
 800443a:	3718      	adds	r7, #24
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	20000be0 	.word	0x20000be0
 8004444:	20000bc0 	.word	0x20000bc0
 8004448:	200006e8 	.word	0x200006e8
 800444c:	20000b78 	.word	0x20000b78
 8004450:	200006e4 	.word	0x200006e4
 8004454:	20000bcc 	.word	0x20000bcc

08004458 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004460:	4b06      	ldr	r3, [pc, #24]	; (800447c <vTaskInternalSetTimeOutState+0x24>)
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004468:	4b05      	ldr	r3, [pc, #20]	; (8004480 <vTaskInternalSetTimeOutState+0x28>)
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	605a      	str	r2, [r3, #4]
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	20000bd0 	.word	0x20000bd0
 8004480:	20000bbc 	.word	0x20000bbc

08004484 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b088      	sub	sp, #32
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d109      	bne.n	80044a8 <xTaskCheckForTimeOut+0x24>
 8004494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004498:	f383 8811 	msr	BASEPRI, r3
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f3bf 8f4f 	dsb	sy
 80044a4:	613b      	str	r3, [r7, #16]
 80044a6:	e7fe      	b.n	80044a6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d109      	bne.n	80044c2 <xTaskCheckForTimeOut+0x3e>
 80044ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	60fb      	str	r3, [r7, #12]
 80044c0:	e7fe      	b.n	80044c0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80044c2:	f000 ff3b 	bl	800533c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80044c6:	4b1d      	ldr	r3, [pc, #116]	; (800453c <xTaskCheckForTimeOut+0xb8>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044de:	d102      	bne.n	80044e6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80044e0:	2300      	movs	r3, #0
 80044e2:	61fb      	str	r3, [r7, #28]
 80044e4:	e023      	b.n	800452e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	4b15      	ldr	r3, [pc, #84]	; (8004540 <xTaskCheckForTimeOut+0xbc>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d007      	beq.n	8004502 <xTaskCheckForTimeOut+0x7e>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d302      	bcc.n	8004502 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80044fc:	2301      	movs	r3, #1
 80044fe:	61fb      	str	r3, [r7, #28]
 8004500:	e015      	b.n	800452e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	429a      	cmp	r2, r3
 800450a:	d20b      	bcs.n	8004524 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	1ad2      	subs	r2, r2, r3
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f7ff ff9d 	bl	8004458 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800451e:	2300      	movs	r3, #0
 8004520:	61fb      	str	r3, [r7, #28]
 8004522:	e004      	b.n	800452e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	2200      	movs	r2, #0
 8004528:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800452a:	2301      	movs	r3, #1
 800452c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800452e:	f000 ff33 	bl	8005398 <vPortExitCritical>

	return xReturn;
 8004532:	69fb      	ldr	r3, [r7, #28]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3720      	adds	r7, #32
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	20000bbc 	.word	0x20000bbc
 8004540:	20000bd0 	.word	0x20000bd0

08004544 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004548:	4b03      	ldr	r3, [pc, #12]	; (8004558 <vTaskMissedYield+0x14>)
 800454a:	2201      	movs	r2, #1
 800454c:	601a      	str	r2, [r3, #0]
}
 800454e:	bf00      	nop
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	20000bcc 	.word	0x20000bcc

0800455c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004564:	f000 f852 	bl	800460c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004568:	4b06      	ldr	r3, [pc, #24]	; (8004584 <prvIdleTask+0x28>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d9f9      	bls.n	8004564 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004570:	4b05      	ldr	r3, [pc, #20]	; (8004588 <prvIdleTask+0x2c>)
 8004572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004580:	e7f0      	b.n	8004564 <prvIdleTask+0x8>
 8004582:	bf00      	nop
 8004584:	200006e8 	.word	0x200006e8
 8004588:	e000ed04 	.word	0xe000ed04

0800458c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004592:	2300      	movs	r3, #0
 8004594:	607b      	str	r3, [r7, #4]
 8004596:	e00c      	b.n	80045b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	4613      	mov	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4a12      	ldr	r2, [pc, #72]	; (80045ec <prvInitialiseTaskLists+0x60>)
 80045a4:	4413      	add	r3, r2
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fe fa08 	bl	80029bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3301      	adds	r3, #1
 80045b0:	607b      	str	r3, [r7, #4]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b37      	cmp	r3, #55	; 0x37
 80045b6:	d9ef      	bls.n	8004598 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80045b8:	480d      	ldr	r0, [pc, #52]	; (80045f0 <prvInitialiseTaskLists+0x64>)
 80045ba:	f7fe f9ff 	bl	80029bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80045be:	480d      	ldr	r0, [pc, #52]	; (80045f4 <prvInitialiseTaskLists+0x68>)
 80045c0:	f7fe f9fc 	bl	80029bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80045c4:	480c      	ldr	r0, [pc, #48]	; (80045f8 <prvInitialiseTaskLists+0x6c>)
 80045c6:	f7fe f9f9 	bl	80029bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80045ca:	480c      	ldr	r0, [pc, #48]	; (80045fc <prvInitialiseTaskLists+0x70>)
 80045cc:	f7fe f9f6 	bl	80029bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80045d0:	480b      	ldr	r0, [pc, #44]	; (8004600 <prvInitialiseTaskLists+0x74>)
 80045d2:	f7fe f9f3 	bl	80029bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80045d6:	4b0b      	ldr	r3, [pc, #44]	; (8004604 <prvInitialiseTaskLists+0x78>)
 80045d8:	4a05      	ldr	r2, [pc, #20]	; (80045f0 <prvInitialiseTaskLists+0x64>)
 80045da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80045dc:	4b0a      	ldr	r3, [pc, #40]	; (8004608 <prvInitialiseTaskLists+0x7c>)
 80045de:	4a05      	ldr	r2, [pc, #20]	; (80045f4 <prvInitialiseTaskLists+0x68>)
 80045e0:	601a      	str	r2, [r3, #0]
}
 80045e2:	bf00      	nop
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	200006e8 	.word	0x200006e8
 80045f0:	20000b48 	.word	0x20000b48
 80045f4:	20000b5c 	.word	0x20000b5c
 80045f8:	20000b78 	.word	0x20000b78
 80045fc:	20000b8c 	.word	0x20000b8c
 8004600:	20000ba4 	.word	0x20000ba4
 8004604:	20000b70 	.word	0x20000b70
 8004608:	20000b74 	.word	0x20000b74

0800460c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004612:	e019      	b.n	8004648 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004614:	f000 fe92 	bl	800533c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004618:	4b0f      	ldr	r3, [pc, #60]	; (8004658 <prvCheckTasksWaitingTermination+0x4c>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3304      	adds	r3, #4
 8004624:	4618      	mov	r0, r3
 8004626:	f7fe fa53 	bl	8002ad0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800462a:	4b0c      	ldr	r3, [pc, #48]	; (800465c <prvCheckTasksWaitingTermination+0x50>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3b01      	subs	r3, #1
 8004630:	4a0a      	ldr	r2, [pc, #40]	; (800465c <prvCheckTasksWaitingTermination+0x50>)
 8004632:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004634:	4b0a      	ldr	r3, [pc, #40]	; (8004660 <prvCheckTasksWaitingTermination+0x54>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3b01      	subs	r3, #1
 800463a:	4a09      	ldr	r2, [pc, #36]	; (8004660 <prvCheckTasksWaitingTermination+0x54>)
 800463c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800463e:	f000 feab 	bl	8005398 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f80e 	bl	8004664 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004648:	4b05      	ldr	r3, [pc, #20]	; (8004660 <prvCheckTasksWaitingTermination+0x54>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1e1      	bne.n	8004614 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004650:	bf00      	nop
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	20000b8c 	.word	0x20000b8c
 800465c:	20000bb8 	.word	0x20000bb8
 8004660:	20000ba0 	.word	0x20000ba0

08004664 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004672:	2b00      	cmp	r3, #0
 8004674:	d108      	bne.n	8004688 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467a:	4618      	mov	r0, r3
 800467c:	f001 f83a 	bl	80056f4 <vPortFree>
				vPortFree( pxTCB );
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f001 f837 	bl	80056f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004686:	e017      	b.n	80046b8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800468e:	2b01      	cmp	r3, #1
 8004690:	d103      	bne.n	800469a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f001 f82e 	bl	80056f4 <vPortFree>
	}
 8004698:	e00e      	b.n	80046b8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d009      	beq.n	80046b8 <prvDeleteTCB+0x54>
 80046a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a8:	f383 8811 	msr	BASEPRI, r3
 80046ac:	f3bf 8f6f 	isb	sy
 80046b0:	f3bf 8f4f 	dsb	sy
 80046b4:	60fb      	str	r3, [r7, #12]
 80046b6:	e7fe      	b.n	80046b6 <prvDeleteTCB+0x52>
	}
 80046b8:	bf00      	nop
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046c6:	4b0f      	ldr	r3, [pc, #60]	; (8004704 <prvResetNextTaskUnblockTime+0x44>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <prvResetNextTaskUnblockTime+0x14>
 80046d0:	2301      	movs	r3, #1
 80046d2:	e000      	b.n	80046d6 <prvResetNextTaskUnblockTime+0x16>
 80046d4:	2300      	movs	r3, #0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d004      	beq.n	80046e4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80046da:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <prvResetNextTaskUnblockTime+0x48>)
 80046dc:	f04f 32ff 	mov.w	r2, #4294967295
 80046e0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80046e2:	e008      	b.n	80046f6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80046e4:	4b07      	ldr	r3, [pc, #28]	; (8004704 <prvResetNextTaskUnblockTime+0x44>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	4a05      	ldr	r2, [pc, #20]	; (8004708 <prvResetNextTaskUnblockTime+0x48>)
 80046f4:	6013      	str	r3, [r2, #0]
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	20000b70 	.word	0x20000b70
 8004708:	20000bd8 	.word	0x20000bd8

0800470c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004712:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <xTaskGetSchedulerState+0x34>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d102      	bne.n	8004720 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800471a:	2301      	movs	r3, #1
 800471c:	607b      	str	r3, [r7, #4]
 800471e:	e008      	b.n	8004732 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004720:	4b08      	ldr	r3, [pc, #32]	; (8004744 <xTaskGetSchedulerState+0x38>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d102      	bne.n	800472e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004728:	2302      	movs	r3, #2
 800472a:	607b      	str	r3, [r7, #4]
 800472c:	e001      	b.n	8004732 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800472e:	2300      	movs	r3, #0
 8004730:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004732:	687b      	ldr	r3, [r7, #4]
	}
 8004734:	4618      	mov	r0, r3
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	20000bc4 	.word	0x20000bc4
 8004744:	20000be0 	.word	0x20000be0

08004748 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004754:	2300      	movs	r3, #0
 8004756:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d056      	beq.n	800480c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004762:	4b2d      	ldr	r3, [pc, #180]	; (8004818 <xTaskPriorityInherit+0xd0>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004768:	429a      	cmp	r2, r3
 800476a:	d246      	bcs.n	80047fa <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	2b00      	cmp	r3, #0
 8004772:	db06      	blt.n	8004782 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004774:	4b28      	ldr	r3, [pc, #160]	; (8004818 <xTaskPriorityInherit+0xd0>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	6959      	ldr	r1, [r3, #20]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800478a:	4613      	mov	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4a22      	ldr	r2, [pc, #136]	; (800481c <xTaskPriorityInherit+0xd4>)
 8004794:	4413      	add	r3, r2
 8004796:	4299      	cmp	r1, r3
 8004798:	d101      	bne.n	800479e <xTaskPriorityInherit+0x56>
 800479a:	2301      	movs	r3, #1
 800479c:	e000      	b.n	80047a0 <xTaskPriorityInherit+0x58>
 800479e:	2300      	movs	r3, #0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d022      	beq.n	80047ea <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	3304      	adds	r3, #4
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7fe f991 	bl	8002ad0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80047ae:	4b1a      	ldr	r3, [pc, #104]	; (8004818 <xTaskPriorityInherit+0xd0>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047bc:	4b18      	ldr	r3, [pc, #96]	; (8004820 <xTaskPriorityInherit+0xd8>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d903      	bls.n	80047cc <xTaskPriorityInherit+0x84>
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c8:	4a15      	ldr	r2, [pc, #84]	; (8004820 <xTaskPriorityInherit+0xd8>)
 80047ca:	6013      	str	r3, [r2, #0]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d0:	4613      	mov	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4a10      	ldr	r2, [pc, #64]	; (800481c <xTaskPriorityInherit+0xd4>)
 80047da:	441a      	add	r2, r3
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	3304      	adds	r3, #4
 80047e0:	4619      	mov	r1, r3
 80047e2:	4610      	mov	r0, r2
 80047e4:	f7fe f917 	bl	8002a16 <vListInsertEnd>
 80047e8:	e004      	b.n	80047f4 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80047ea:	4b0b      	ldr	r3, [pc, #44]	; (8004818 <xTaskPriorityInherit+0xd0>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80047f4:	2301      	movs	r3, #1
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	e008      	b.n	800480c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047fe:	4b06      	ldr	r3, [pc, #24]	; (8004818 <xTaskPriorityInherit+0xd0>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004804:	429a      	cmp	r2, r3
 8004806:	d201      	bcs.n	800480c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004808:	2301      	movs	r3, #1
 800480a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800480c:	68fb      	ldr	r3, [r7, #12]
	}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	200006e4 	.word	0x200006e4
 800481c:	200006e8 	.word	0x200006e8
 8004820:	20000bc0 	.word	0x20000bc0

08004824 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004830:	2300      	movs	r3, #0
 8004832:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d054      	beq.n	80048e4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800483a:	4b2d      	ldr	r3, [pc, #180]	; (80048f0 <xTaskPriorityDisinherit+0xcc>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	429a      	cmp	r2, r3
 8004842:	d009      	beq.n	8004858 <xTaskPriorityDisinherit+0x34>
 8004844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004848:	f383 8811 	msr	BASEPRI, r3
 800484c:	f3bf 8f6f 	isb	sy
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	60fb      	str	r3, [r7, #12]
 8004856:	e7fe      	b.n	8004856 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800485c:	2b00      	cmp	r3, #0
 800485e:	d109      	bne.n	8004874 <xTaskPriorityDisinherit+0x50>
 8004860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004864:	f383 8811 	msr	BASEPRI, r3
 8004868:	f3bf 8f6f 	isb	sy
 800486c:	f3bf 8f4f 	dsb	sy
 8004870:	60bb      	str	r3, [r7, #8]
 8004872:	e7fe      	b.n	8004872 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004878:	1e5a      	subs	r2, r3, #1
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004886:	429a      	cmp	r2, r3
 8004888:	d02c      	beq.n	80048e4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800488e:	2b00      	cmp	r3, #0
 8004890:	d128      	bne.n	80048e4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	3304      	adds	r3, #4
 8004896:	4618      	mov	r0, r3
 8004898:	f7fe f91a 	bl	8002ad0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b4:	4b0f      	ldr	r3, [pc, #60]	; (80048f4 <xTaskPriorityDisinherit+0xd0>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d903      	bls.n	80048c4 <xTaskPriorityDisinherit+0xa0>
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c0:	4a0c      	ldr	r2, [pc, #48]	; (80048f4 <xTaskPriorityDisinherit+0xd0>)
 80048c2:	6013      	str	r3, [r2, #0]
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c8:	4613      	mov	r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4413      	add	r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4a09      	ldr	r2, [pc, #36]	; (80048f8 <xTaskPriorityDisinherit+0xd4>)
 80048d2:	441a      	add	r2, r3
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	3304      	adds	r3, #4
 80048d8:	4619      	mov	r1, r3
 80048da:	4610      	mov	r0, r2
 80048dc:	f7fe f89b 	bl	8002a16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80048e0:	2301      	movs	r3, #1
 80048e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80048e4:	697b      	ldr	r3, [r7, #20]
	}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3718      	adds	r7, #24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	200006e4 	.word	0x200006e4
 80048f4:	20000bc0 	.word	0x20000bc0
 80048f8:	200006e8 	.word	0x200006e8

080048fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b088      	sub	sp, #32
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800490a:	2301      	movs	r3, #1
 800490c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d06d      	beq.n	80049f0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004918:	2b00      	cmp	r3, #0
 800491a:	d109      	bne.n	8004930 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	e7fe      	b.n	800492e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	429a      	cmp	r2, r3
 8004938:	d902      	bls.n	8004940 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	61fb      	str	r3, [r7, #28]
 800493e:	e002      	b.n	8004946 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004944:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494a:	69fa      	ldr	r2, [r7, #28]
 800494c:	429a      	cmp	r2, r3
 800494e:	d04f      	beq.n	80049f0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	429a      	cmp	r2, r3
 8004958:	d14a      	bne.n	80049f0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800495a:	4b27      	ldr	r3, [pc, #156]	; (80049f8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	69ba      	ldr	r2, [r7, #24]
 8004960:	429a      	cmp	r2, r3
 8004962:	d109      	bne.n	8004978 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8004964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004968:	f383 8811 	msr	BASEPRI, r3
 800496c:	f3bf 8f6f 	isb	sy
 8004970:	f3bf 8f4f 	dsb	sy
 8004974:	60bb      	str	r3, [r7, #8]
 8004976:	e7fe      	b.n	8004976 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	69fa      	ldr	r2, [r7, #28]
 8004982:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	2b00      	cmp	r3, #0
 800498a:	db04      	blt.n	8004996 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	6959      	ldr	r1, [r3, #20]
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	4613      	mov	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4a15      	ldr	r2, [pc, #84]	; (80049fc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80049a6:	4413      	add	r3, r2
 80049a8:	4299      	cmp	r1, r3
 80049aa:	d101      	bne.n	80049b0 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 80049ac:	2301      	movs	r3, #1
 80049ae:	e000      	b.n	80049b2 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 80049b0:	2300      	movs	r3, #0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d01c      	beq.n	80049f0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	3304      	adds	r3, #4
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fe f888 	bl	8002ad0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c4:	4b0e      	ldr	r3, [pc, #56]	; (8004a00 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d903      	bls.n	80049d4 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d0:	4a0b      	ldr	r2, [pc, #44]	; (8004a00 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d8:	4613      	mov	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4a06      	ldr	r2, [pc, #24]	; (80049fc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80049e2:	441a      	add	r2, r3
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	3304      	adds	r3, #4
 80049e8:	4619      	mov	r1, r3
 80049ea:	4610      	mov	r0, r2
 80049ec:	f7fe f813 	bl	8002a16 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80049f0:	bf00      	nop
 80049f2:	3720      	adds	r7, #32
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	200006e4 	.word	0x200006e4
 80049fc:	200006e8 	.word	0x200006e8
 8004a00:	20000bc0 	.word	0x20000bc0

08004a04 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004a08:	4b07      	ldr	r3, [pc, #28]	; (8004a28 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d004      	beq.n	8004a1a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004a10:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a16:	3201      	adds	r2, #1
 8004a18:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004a1a:	4b03      	ldr	r3, [pc, #12]	; (8004a28 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
	}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	200006e4 	.word	0x200006e4

08004a2c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a36:	4b21      	ldr	r3, [pc, #132]	; (8004abc <prvAddCurrentTaskToDelayedList+0x90>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a3c:	4b20      	ldr	r3, [pc, #128]	; (8004ac0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3304      	adds	r3, #4
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fe f844 	bl	8002ad0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4e:	d10a      	bne.n	8004a66 <prvAddCurrentTaskToDelayedList+0x3a>
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d007      	beq.n	8004a66 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a56:	4b1a      	ldr	r3, [pc, #104]	; (8004ac0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	3304      	adds	r3, #4
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	4819      	ldr	r0, [pc, #100]	; (8004ac4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004a60:	f7fd ffd9 	bl	8002a16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004a64:	e026      	b.n	8004ab4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a6e:	4b14      	ldr	r3, [pc, #80]	; (8004ac0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d209      	bcs.n	8004a92 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a7e:	4b12      	ldr	r3, [pc, #72]	; (8004ac8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	4b0f      	ldr	r3, [pc, #60]	; (8004ac0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3304      	adds	r3, #4
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	f7fd ffe7 	bl	8002a5e <vListInsert>
}
 8004a90:	e010      	b.n	8004ab4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a92:	4b0e      	ldr	r3, [pc, #56]	; (8004acc <prvAddCurrentTaskToDelayedList+0xa0>)
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	4b0a      	ldr	r3, [pc, #40]	; (8004ac0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	3304      	adds	r3, #4
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	4610      	mov	r0, r2
 8004aa0:	f7fd ffdd 	bl	8002a5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004aa4:	4b0a      	ldr	r3, [pc, #40]	; (8004ad0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d202      	bcs.n	8004ab4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004aae:	4a08      	ldr	r2, [pc, #32]	; (8004ad0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	6013      	str	r3, [r2, #0]
}
 8004ab4:	bf00      	nop
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	20000bbc 	.word	0x20000bbc
 8004ac0:	200006e4 	.word	0x200006e4
 8004ac4:	20000ba4 	.word	0x20000ba4
 8004ac8:	20000b74 	.word	0x20000b74
 8004acc:	20000b70 	.word	0x20000b70
 8004ad0:	20000bd8 	.word	0x20000bd8

08004ad4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b08a      	sub	sp, #40	; 0x28
 8004ad8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004ada:	2300      	movs	r3, #0
 8004adc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004ade:	f000 fac3 	bl	8005068 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004ae2:	4b1c      	ldr	r3, [pc, #112]	; (8004b54 <xTimerCreateTimerTask+0x80>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d021      	beq.n	8004b2e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004aea:	2300      	movs	r3, #0
 8004aec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004aee:	2300      	movs	r3, #0
 8004af0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004af2:	1d3a      	adds	r2, r7, #4
 8004af4:	f107 0108 	add.w	r1, r7, #8
 8004af8:	f107 030c 	add.w	r3, r7, #12
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7fd ff43 	bl	8002988 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	9202      	str	r2, [sp, #8]
 8004b0a:	9301      	str	r3, [sp, #4]
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	2300      	movs	r3, #0
 8004b12:	460a      	mov	r2, r1
 8004b14:	4910      	ldr	r1, [pc, #64]	; (8004b58 <xTimerCreateTimerTask+0x84>)
 8004b16:	4811      	ldr	r0, [pc, #68]	; (8004b5c <xTimerCreateTimerTask+0x88>)
 8004b18:	f7fe ffee 	bl	8003af8 <xTaskCreateStatic>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	4b10      	ldr	r3, [pc, #64]	; (8004b60 <xTimerCreateTimerTask+0x8c>)
 8004b20:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004b22:	4b0f      	ldr	r3, [pc, #60]	; (8004b60 <xTimerCreateTimerTask+0x8c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d109      	bne.n	8004b48 <xTimerCreateTimerTask+0x74>
 8004b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b38:	f383 8811 	msr	BASEPRI, r3
 8004b3c:	f3bf 8f6f 	isb	sy
 8004b40:	f3bf 8f4f 	dsb	sy
 8004b44:	613b      	str	r3, [r7, #16]
 8004b46:	e7fe      	b.n	8004b46 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004b48:	697b      	ldr	r3, [r7, #20]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	20000c14 	.word	0x20000c14
 8004b58:	080059b8 	.word	0x080059b8
 8004b5c:	08004c7d 	.word	0x08004c7d
 8004b60:	20000c18 	.word	0x20000c18

08004b64 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08a      	sub	sp, #40	; 0x28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
 8004b70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004b72:	2300      	movs	r3, #0
 8004b74:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d109      	bne.n	8004b90 <xTimerGenericCommand+0x2c>
 8004b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b80:	f383 8811 	msr	BASEPRI, r3
 8004b84:	f3bf 8f6f 	isb	sy
 8004b88:	f3bf 8f4f 	dsb	sy
 8004b8c:	623b      	str	r3, [r7, #32]
 8004b8e:	e7fe      	b.n	8004b8e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004b90:	4b19      	ldr	r3, [pc, #100]	; (8004bf8 <xTimerGenericCommand+0x94>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d02a      	beq.n	8004bee <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2b05      	cmp	r3, #5
 8004ba8:	dc18      	bgt.n	8004bdc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004baa:	f7ff fdaf 	bl	800470c <xTaskGetSchedulerState>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d109      	bne.n	8004bc8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004bb4:	4b10      	ldr	r3, [pc, #64]	; (8004bf8 <xTimerGenericCommand+0x94>)
 8004bb6:	6818      	ldr	r0, [r3, #0]
 8004bb8:	f107 0110 	add.w	r1, r7, #16
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bc0:	f7fe f950 	bl	8002e64 <xQueueGenericSend>
 8004bc4:	6278      	str	r0, [r7, #36]	; 0x24
 8004bc6:	e012      	b.n	8004bee <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004bc8:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <xTimerGenericCommand+0x94>)
 8004bca:	6818      	ldr	r0, [r3, #0]
 8004bcc:	f107 0110 	add.w	r1, r7, #16
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f7fe f946 	bl	8002e64 <xQueueGenericSend>
 8004bd8:	6278      	str	r0, [r7, #36]	; 0x24
 8004bda:	e008      	b.n	8004bee <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004bdc:	4b06      	ldr	r3, [pc, #24]	; (8004bf8 <xTimerGenericCommand+0x94>)
 8004bde:	6818      	ldr	r0, [r3, #0]
 8004be0:	f107 0110 	add.w	r1, r7, #16
 8004be4:	2300      	movs	r3, #0
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	f7fe fa36 	bl	8003058 <xQueueGenericSendFromISR>
 8004bec:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3728      	adds	r7, #40	; 0x28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	20000c14 	.word	0x20000c14

08004bfc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b088      	sub	sp, #32
 8004c00:	af02      	add	r7, sp, #8
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c06:	4b1c      	ldr	r3, [pc, #112]	; (8004c78 <prvProcessExpiredTimer+0x7c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	3304      	adds	r3, #4
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7fd ff5b 	bl	8002ad0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d121      	bne.n	8004c66 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	699a      	ldr	r2, [r3, #24]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	18d1      	adds	r1, r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	6978      	ldr	r0, [r7, #20]
 8004c30:	f000 f8c8 	bl	8004dc4 <prvInsertTimerInActiveList>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d015      	beq.n	8004c66 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	2300      	movs	r3, #0
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	2100      	movs	r1, #0
 8004c44:	6978      	ldr	r0, [r7, #20]
 8004c46:	f7ff ff8d 	bl	8004b64 <xTimerGenericCommand>
 8004c4a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d109      	bne.n	8004c66 <prvProcessExpiredTimer+0x6a>
 8004c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c56:	f383 8811 	msr	BASEPRI, r3
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	e7fe      	b.n	8004c64 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	6978      	ldr	r0, [r7, #20]
 8004c6c:	4798      	blx	r3
}
 8004c6e:	bf00      	nop
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	20000c0c 	.word	0x20000c0c

08004c7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c84:	f107 0308 	add.w	r3, r7, #8
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f000 f857 	bl	8004d3c <prvGetNextExpireTime>
 8004c8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	4619      	mov	r1, r3
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 f803 	bl	8004ca0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004c9a:	f000 f8d5 	bl	8004e48 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c9e:	e7f1      	b.n	8004c84 <prvTimerTask+0x8>

08004ca0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004caa:	f7ff f951 	bl	8003f50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004cae:	f107 0308 	add.w	r3, r7, #8
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 f866 	bl	8004d84 <prvSampleTimeNow>
 8004cb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d130      	bne.n	8004d22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10a      	bne.n	8004cdc <prvProcessTimerOrBlockTask+0x3c>
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d806      	bhi.n	8004cdc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004cce:	f7ff f94d 	bl	8003f6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004cd2:	68f9      	ldr	r1, [r7, #12]
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7ff ff91 	bl	8004bfc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004cda:	e024      	b.n	8004d26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d008      	beq.n	8004cf4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004ce2:	4b13      	ldr	r3, [pc, #76]	; (8004d30 <prvProcessTimerOrBlockTask+0x90>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	bf0c      	ite	eq
 8004cec:	2301      	moveq	r3, #1
 8004cee:	2300      	movne	r3, #0
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004cf4:	4b0f      	ldr	r3, [pc, #60]	; (8004d34 <prvProcessTimerOrBlockTask+0x94>)
 8004cf6:	6818      	ldr	r0, [r3, #0]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	4619      	mov	r1, r3
 8004d02:	f7fe fec5 	bl	8003a90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004d06:	f7ff f931 	bl	8003f6c <xTaskResumeAll>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10a      	bne.n	8004d26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004d10:	4b09      	ldr	r3, [pc, #36]	; (8004d38 <prvProcessTimerOrBlockTask+0x98>)
 8004d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d16:	601a      	str	r2, [r3, #0]
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	f3bf 8f6f 	isb	sy
}
 8004d20:	e001      	b.n	8004d26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004d22:	f7ff f923 	bl	8003f6c <xTaskResumeAll>
}
 8004d26:	bf00      	nop
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	20000c10 	.word	0x20000c10
 8004d34:	20000c14 	.word	0x20000c14
 8004d38:	e000ed04 	.word	0xe000ed04

08004d3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004d44:	4b0e      	ldr	r3, [pc, #56]	; (8004d80 <prvGetNextExpireTime+0x44>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	bf0c      	ite	eq
 8004d4e:	2301      	moveq	r3, #1
 8004d50:	2300      	movne	r3, #0
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	461a      	mov	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d105      	bne.n	8004d6e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d62:	4b07      	ldr	r3, [pc, #28]	; (8004d80 <prvGetNextExpireTime+0x44>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	e001      	b.n	8004d72 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004d72:	68fb      	ldr	r3, [r7, #12]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	20000c0c 	.word	0x20000c0c

08004d84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004d8c:	f7ff f98a 	bl	80040a4 <xTaskGetTickCount>
 8004d90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004d92:	4b0b      	ldr	r3, [pc, #44]	; (8004dc0 <prvSampleTimeNow+0x3c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d205      	bcs.n	8004da8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004d9c:	f000 f904 	bl	8004fa8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	e002      	b.n	8004dae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004dae:	4a04      	ldr	r2, [pc, #16]	; (8004dc0 <prvSampleTimeNow+0x3c>)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004db4:	68fb      	ldr	r3, [r7, #12]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	20000c1c 	.word	0x20000c1c

08004dc4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
 8004dd0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d812      	bhi.n	8004e10 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	1ad2      	subs	r2, r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d302      	bcc.n	8004dfe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	e01b      	b.n	8004e36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004dfe:	4b10      	ldr	r3, [pc, #64]	; (8004e40 <prvInsertTimerInActiveList+0x7c>)
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	3304      	adds	r3, #4
 8004e06:	4619      	mov	r1, r3
 8004e08:	4610      	mov	r0, r2
 8004e0a:	f7fd fe28 	bl	8002a5e <vListInsert>
 8004e0e:	e012      	b.n	8004e36 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d206      	bcs.n	8004e26 <prvInsertTimerInActiveList+0x62>
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d302      	bcc.n	8004e26 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004e20:	2301      	movs	r3, #1
 8004e22:	617b      	str	r3, [r7, #20]
 8004e24:	e007      	b.n	8004e36 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e26:	4b07      	ldr	r3, [pc, #28]	; (8004e44 <prvInsertTimerInActiveList+0x80>)
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	3304      	adds	r3, #4
 8004e2e:	4619      	mov	r1, r3
 8004e30:	4610      	mov	r0, r2
 8004e32:	f7fd fe14 	bl	8002a5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004e36:	697b      	ldr	r3, [r7, #20]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3718      	adds	r7, #24
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	20000c10 	.word	0x20000c10
 8004e44:	20000c0c 	.word	0x20000c0c

08004e48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b08e      	sub	sp, #56	; 0x38
 8004e4c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e4e:	e099      	b.n	8004f84 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	da17      	bge.n	8004e86 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004e56:	1d3b      	adds	r3, r7, #4
 8004e58:	3304      	adds	r3, #4
 8004e5a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d109      	bne.n	8004e76 <prvProcessReceivedCommands+0x2e>
 8004e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	61fb      	str	r3, [r7, #28]
 8004e74:	e7fe      	b.n	8004e74 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e7c:	6850      	ldr	r0, [r2, #4]
 8004e7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e80:	6892      	ldr	r2, [r2, #8]
 8004e82:	4611      	mov	r1, r2
 8004e84:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	db7a      	blt.n	8004f82 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d004      	beq.n	8004ea2 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fd fe17 	bl	8002ad0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ea2:	463b      	mov	r3, r7
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7ff ff6d 	bl	8004d84 <prvSampleTimeNow>
 8004eaa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b09      	cmp	r3, #9
 8004eb0:	d868      	bhi.n	8004f84 <prvProcessReceivedCommands+0x13c>
 8004eb2:	a201      	add	r2, pc, #4	; (adr r2, 8004eb8 <prvProcessReceivedCommands+0x70>)
 8004eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb8:	08004ee1 	.word	0x08004ee1
 8004ebc:	08004ee1 	.word	0x08004ee1
 8004ec0:	08004ee1 	.word	0x08004ee1
 8004ec4:	08004f85 	.word	0x08004f85
 8004ec8:	08004f3b 	.word	0x08004f3b
 8004ecc:	08004f71 	.word	0x08004f71
 8004ed0:	08004ee1 	.word	0x08004ee1
 8004ed4:	08004ee1 	.word	0x08004ee1
 8004ed8:	08004f85 	.word	0x08004f85
 8004edc:	08004f3b 	.word	0x08004f3b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	18d1      	adds	r1, r2, r3
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eee:	f7ff ff69 	bl	8004dc4 <prvInsertTimerInActiveList>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d045      	beq.n	8004f84 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004efe:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f02:	69db      	ldr	r3, [r3, #28]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d13d      	bne.n	8004f84 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	441a      	add	r2, r3
 8004f10:	2300      	movs	r3, #0
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	2300      	movs	r3, #0
 8004f16:	2100      	movs	r1, #0
 8004f18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f1a:	f7ff fe23 	bl	8004b64 <xTimerGenericCommand>
 8004f1e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004f20:	6a3b      	ldr	r3, [r7, #32]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d12e      	bne.n	8004f84 <prvProcessReceivedCommands+0x13c>
 8004f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	61bb      	str	r3, [r7, #24]
 8004f38:	e7fe      	b.n	8004f38 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d109      	bne.n	8004f5c <prvProcessReceivedCommands+0x114>
 8004f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4c:	f383 8811 	msr	BASEPRI, r3
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	617b      	str	r3, [r7, #20]
 8004f5a:	e7fe      	b.n	8004f5a <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5e:	699a      	ldr	r2, [r3, #24]
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	18d1      	adds	r1, r2, r3
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f6a:	f7ff ff2b 	bl	8004dc4 <prvInsertTimerInActiveList>
					break;
 8004f6e:	e009      	b.n	8004f84 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f72:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d104      	bne.n	8004f84 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8004f7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f7c:	f000 fbba 	bl	80056f4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004f80:	e000      	b.n	8004f84 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004f82:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f84:	4b07      	ldr	r3, [pc, #28]	; (8004fa4 <prvProcessReceivedCommands+0x15c>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	1d39      	adds	r1, r7, #4
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7fe f981 	bl	8003294 <xQueueReceive>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f47f af5b 	bne.w	8004e50 <prvProcessReceivedCommands+0x8>
	}
}
 8004f9a:	bf00      	nop
 8004f9c:	3730      	adds	r7, #48	; 0x30
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20000c14 	.word	0x20000c14

08004fa8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b088      	sub	sp, #32
 8004fac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004fae:	e044      	b.n	800503a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fb0:	4b2b      	ldr	r3, [pc, #172]	; (8005060 <prvSwitchTimerLists+0xb8>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fba:	4b29      	ldr	r3, [pc, #164]	; (8005060 <prvSwitchTimerLists+0xb8>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7fd fd81 	bl	8002ad0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d12d      	bne.n	800503a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d90e      	bls.n	800500e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ffc:	4b18      	ldr	r3, [pc, #96]	; (8005060 <prvSwitchTimerLists+0xb8>)
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	3304      	adds	r3, #4
 8005004:	4619      	mov	r1, r3
 8005006:	4610      	mov	r0, r2
 8005008:	f7fd fd29 	bl	8002a5e <vListInsert>
 800500c:	e015      	b.n	800503a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800500e:	2300      	movs	r3, #0
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	2300      	movs	r3, #0
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	2100      	movs	r1, #0
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f7ff fda3 	bl	8004b64 <xTimerGenericCommand>
 800501e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d109      	bne.n	800503a <prvSwitchTimerLists+0x92>
 8005026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502a:	f383 8811 	msr	BASEPRI, r3
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	603b      	str	r3, [r7, #0]
 8005038:	e7fe      	b.n	8005038 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800503a:	4b09      	ldr	r3, [pc, #36]	; (8005060 <prvSwitchTimerLists+0xb8>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1b5      	bne.n	8004fb0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005044:	4b06      	ldr	r3, [pc, #24]	; (8005060 <prvSwitchTimerLists+0xb8>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800504a:	4b06      	ldr	r3, [pc, #24]	; (8005064 <prvSwitchTimerLists+0xbc>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a04      	ldr	r2, [pc, #16]	; (8005060 <prvSwitchTimerLists+0xb8>)
 8005050:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005052:	4a04      	ldr	r2, [pc, #16]	; (8005064 <prvSwitchTimerLists+0xbc>)
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	6013      	str	r3, [r2, #0]
}
 8005058:	bf00      	nop
 800505a:	3718      	adds	r7, #24
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	20000c0c 	.word	0x20000c0c
 8005064:	20000c10 	.word	0x20000c10

08005068 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800506e:	f000 f965 	bl	800533c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005072:	4b15      	ldr	r3, [pc, #84]	; (80050c8 <prvCheckForValidListAndQueue+0x60>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d120      	bne.n	80050bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800507a:	4814      	ldr	r0, [pc, #80]	; (80050cc <prvCheckForValidListAndQueue+0x64>)
 800507c:	f7fd fc9e 	bl	80029bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005080:	4813      	ldr	r0, [pc, #76]	; (80050d0 <prvCheckForValidListAndQueue+0x68>)
 8005082:	f7fd fc9b 	bl	80029bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005086:	4b13      	ldr	r3, [pc, #76]	; (80050d4 <prvCheckForValidListAndQueue+0x6c>)
 8005088:	4a10      	ldr	r2, [pc, #64]	; (80050cc <prvCheckForValidListAndQueue+0x64>)
 800508a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800508c:	4b12      	ldr	r3, [pc, #72]	; (80050d8 <prvCheckForValidListAndQueue+0x70>)
 800508e:	4a10      	ldr	r2, [pc, #64]	; (80050d0 <prvCheckForValidListAndQueue+0x68>)
 8005090:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005092:	2300      	movs	r3, #0
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	4b11      	ldr	r3, [pc, #68]	; (80050dc <prvCheckForValidListAndQueue+0x74>)
 8005098:	4a11      	ldr	r2, [pc, #68]	; (80050e0 <prvCheckForValidListAndQueue+0x78>)
 800509a:	2110      	movs	r1, #16
 800509c:	200a      	movs	r0, #10
 800509e:	f7fd fda9 	bl	8002bf4 <xQueueGenericCreateStatic>
 80050a2:	4602      	mov	r2, r0
 80050a4:	4b08      	ldr	r3, [pc, #32]	; (80050c8 <prvCheckForValidListAndQueue+0x60>)
 80050a6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80050a8:	4b07      	ldr	r3, [pc, #28]	; (80050c8 <prvCheckForValidListAndQueue+0x60>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d005      	beq.n	80050bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80050b0:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <prvCheckForValidListAndQueue+0x60>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	490b      	ldr	r1, [pc, #44]	; (80050e4 <prvCheckForValidListAndQueue+0x7c>)
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7fe fc98 	bl	80039ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050bc:	f000 f96c 	bl	8005398 <vPortExitCritical>
}
 80050c0:	bf00      	nop
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	20000c14 	.word	0x20000c14
 80050cc:	20000be4 	.word	0x20000be4
 80050d0:	20000bf8 	.word	0x20000bf8
 80050d4:	20000c0c 	.word	0x20000c0c
 80050d8:	20000c10 	.word	0x20000c10
 80050dc:	20000cc0 	.word	0x20000cc0
 80050e0:	20000c20 	.word	0x20000c20
 80050e4:	080059c0 	.word	0x080059c0

080050e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	3b04      	subs	r3, #4
 80050f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005100:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	3b04      	subs	r3, #4
 8005106:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	f023 0201 	bic.w	r2, r3, #1
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	3b04      	subs	r3, #4
 8005116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005118:	4a0c      	ldr	r2, [pc, #48]	; (800514c <pxPortInitialiseStack+0x64>)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	3b14      	subs	r3, #20
 8005122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	3b04      	subs	r3, #4
 800512e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f06f 0202 	mvn.w	r2, #2
 8005136:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	3b20      	subs	r3, #32
 800513c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800513e:	68fb      	ldr	r3, [r7, #12]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	08005151 	.word	0x08005151

08005150 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005156:	2300      	movs	r3, #0
 8005158:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800515a:	4b11      	ldr	r3, [pc, #68]	; (80051a0 <prvTaskExitError+0x50>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005162:	d009      	beq.n	8005178 <prvTaskExitError+0x28>
 8005164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	60fb      	str	r3, [r7, #12]
 8005176:	e7fe      	b.n	8005176 <prvTaskExitError+0x26>
 8005178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517c:	f383 8811 	msr	BASEPRI, r3
 8005180:	f3bf 8f6f 	isb	sy
 8005184:	f3bf 8f4f 	dsb	sy
 8005188:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800518a:	bf00      	nop
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d0fc      	beq.n	800518c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005192:	bf00      	nop
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	20000008 	.word	0x20000008
	...

080051b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80051b0:	4b07      	ldr	r3, [pc, #28]	; (80051d0 <pxCurrentTCBConst2>)
 80051b2:	6819      	ldr	r1, [r3, #0]
 80051b4:	6808      	ldr	r0, [r1, #0]
 80051b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ba:	f380 8809 	msr	PSP, r0
 80051be:	f3bf 8f6f 	isb	sy
 80051c2:	f04f 0000 	mov.w	r0, #0
 80051c6:	f380 8811 	msr	BASEPRI, r0
 80051ca:	4770      	bx	lr
 80051cc:	f3af 8000 	nop.w

080051d0 <pxCurrentTCBConst2>:
 80051d0:	200006e4 	.word	0x200006e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80051d4:	bf00      	nop
 80051d6:	bf00      	nop

080051d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80051d8:	4808      	ldr	r0, [pc, #32]	; (80051fc <prvPortStartFirstTask+0x24>)
 80051da:	6800      	ldr	r0, [r0, #0]
 80051dc:	6800      	ldr	r0, [r0, #0]
 80051de:	f380 8808 	msr	MSP, r0
 80051e2:	f04f 0000 	mov.w	r0, #0
 80051e6:	f380 8814 	msr	CONTROL, r0
 80051ea:	b662      	cpsie	i
 80051ec:	b661      	cpsie	f
 80051ee:	f3bf 8f4f 	dsb	sy
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	df00      	svc	0
 80051f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80051fa:	bf00      	nop
 80051fc:	e000ed08 	.word	0xe000ed08

08005200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005206:	4b44      	ldr	r3, [pc, #272]	; (8005318 <xPortStartScheduler+0x118>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a44      	ldr	r2, [pc, #272]	; (800531c <xPortStartScheduler+0x11c>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d109      	bne.n	8005224 <xPortStartScheduler+0x24>
 8005210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	613b      	str	r3, [r7, #16]
 8005222:	e7fe      	b.n	8005222 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005224:	4b3c      	ldr	r3, [pc, #240]	; (8005318 <xPortStartScheduler+0x118>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a3d      	ldr	r2, [pc, #244]	; (8005320 <xPortStartScheduler+0x120>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d109      	bne.n	8005242 <xPortStartScheduler+0x42>
 800522e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	60fb      	str	r3, [r7, #12]
 8005240:	e7fe      	b.n	8005240 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005242:	4b38      	ldr	r3, [pc, #224]	; (8005324 <xPortStartScheduler+0x124>)
 8005244:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	b2db      	uxtb	r3, r3
 800524c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	22ff      	movs	r2, #255	; 0xff
 8005252:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	b2db      	uxtb	r3, r3
 800525a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800525c:	78fb      	ldrb	r3, [r7, #3]
 800525e:	b2db      	uxtb	r3, r3
 8005260:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005264:	b2da      	uxtb	r2, r3
 8005266:	4b30      	ldr	r3, [pc, #192]	; (8005328 <xPortStartScheduler+0x128>)
 8005268:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800526a:	4b30      	ldr	r3, [pc, #192]	; (800532c <xPortStartScheduler+0x12c>)
 800526c:	2207      	movs	r2, #7
 800526e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005270:	e009      	b.n	8005286 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005272:	4b2e      	ldr	r3, [pc, #184]	; (800532c <xPortStartScheduler+0x12c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	3b01      	subs	r3, #1
 8005278:	4a2c      	ldr	r2, [pc, #176]	; (800532c <xPortStartScheduler+0x12c>)
 800527a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800527c:	78fb      	ldrb	r3, [r7, #3]
 800527e:	b2db      	uxtb	r3, r3
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	b2db      	uxtb	r3, r3
 8005284:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005286:	78fb      	ldrb	r3, [r7, #3]
 8005288:	b2db      	uxtb	r3, r3
 800528a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528e:	2b80      	cmp	r3, #128	; 0x80
 8005290:	d0ef      	beq.n	8005272 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005292:	4b26      	ldr	r3, [pc, #152]	; (800532c <xPortStartScheduler+0x12c>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f1c3 0307 	rsb	r3, r3, #7
 800529a:	2b04      	cmp	r3, #4
 800529c:	d009      	beq.n	80052b2 <xPortStartScheduler+0xb2>
 800529e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	60bb      	str	r3, [r7, #8]
 80052b0:	e7fe      	b.n	80052b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80052b2:	4b1e      	ldr	r3, [pc, #120]	; (800532c <xPortStartScheduler+0x12c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	021b      	lsls	r3, r3, #8
 80052b8:	4a1c      	ldr	r2, [pc, #112]	; (800532c <xPortStartScheduler+0x12c>)
 80052ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80052bc:	4b1b      	ldr	r3, [pc, #108]	; (800532c <xPortStartScheduler+0x12c>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052c4:	4a19      	ldr	r2, [pc, #100]	; (800532c <xPortStartScheduler+0x12c>)
 80052c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	b2da      	uxtb	r2, r3
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80052d0:	4b17      	ldr	r3, [pc, #92]	; (8005330 <xPortStartScheduler+0x130>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a16      	ldr	r2, [pc, #88]	; (8005330 <xPortStartScheduler+0x130>)
 80052d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80052da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80052dc:	4b14      	ldr	r3, [pc, #80]	; (8005330 <xPortStartScheduler+0x130>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a13      	ldr	r2, [pc, #76]	; (8005330 <xPortStartScheduler+0x130>)
 80052e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80052e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80052e8:	f000 f8d6 	bl	8005498 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80052ec:	4b11      	ldr	r3, [pc, #68]	; (8005334 <xPortStartScheduler+0x134>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80052f2:	f000 f8f5 	bl	80054e0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80052f6:	4b10      	ldr	r3, [pc, #64]	; (8005338 <xPortStartScheduler+0x138>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a0f      	ldr	r2, [pc, #60]	; (8005338 <xPortStartScheduler+0x138>)
 80052fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005300:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005302:	f7ff ff69 	bl	80051d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005306:	f7fe ff9b 	bl	8004240 <vTaskSwitchContext>
	prvTaskExitError();
 800530a:	f7ff ff21 	bl	8005150 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3718      	adds	r7, #24
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	e000ed00 	.word	0xe000ed00
 800531c:	410fc271 	.word	0x410fc271
 8005320:	410fc270 	.word	0x410fc270
 8005324:	e000e400 	.word	0xe000e400
 8005328:	20000d10 	.word	0x20000d10
 800532c:	20000d14 	.word	0x20000d14
 8005330:	e000ed20 	.word	0xe000ed20
 8005334:	20000008 	.word	0x20000008
 8005338:	e000ef34 	.word	0xe000ef34

0800533c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005354:	4b0e      	ldr	r3, [pc, #56]	; (8005390 <vPortEnterCritical+0x54>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	3301      	adds	r3, #1
 800535a:	4a0d      	ldr	r2, [pc, #52]	; (8005390 <vPortEnterCritical+0x54>)
 800535c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800535e:	4b0c      	ldr	r3, [pc, #48]	; (8005390 <vPortEnterCritical+0x54>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d10e      	bne.n	8005384 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005366:	4b0b      	ldr	r3, [pc, #44]	; (8005394 <vPortEnterCritical+0x58>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b00      	cmp	r3, #0
 800536e:	d009      	beq.n	8005384 <vPortEnterCritical+0x48>
 8005370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005374:	f383 8811 	msr	BASEPRI, r3
 8005378:	f3bf 8f6f 	isb	sy
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	603b      	str	r3, [r7, #0]
 8005382:	e7fe      	b.n	8005382 <vPortEnterCritical+0x46>
	}
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	20000008 	.word	0x20000008
 8005394:	e000ed04 	.word	0xe000ed04

08005398 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800539e:	4b11      	ldr	r3, [pc, #68]	; (80053e4 <vPortExitCritical+0x4c>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d109      	bne.n	80053ba <vPortExitCritical+0x22>
 80053a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	607b      	str	r3, [r7, #4]
 80053b8:	e7fe      	b.n	80053b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80053ba:	4b0a      	ldr	r3, [pc, #40]	; (80053e4 <vPortExitCritical+0x4c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	3b01      	subs	r3, #1
 80053c0:	4a08      	ldr	r2, [pc, #32]	; (80053e4 <vPortExitCritical+0x4c>)
 80053c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80053c4:	4b07      	ldr	r3, [pc, #28]	; (80053e4 <vPortExitCritical+0x4c>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d104      	bne.n	80053d6 <vPortExitCritical+0x3e>
 80053cc:	2300      	movs	r3, #0
 80053ce:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80053d6:	bf00      	nop
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	20000008 	.word	0x20000008
	...

080053f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80053f0:	f3ef 8009 	mrs	r0, PSP
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	4b15      	ldr	r3, [pc, #84]	; (8005450 <pxCurrentTCBConst>)
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	f01e 0f10 	tst.w	lr, #16
 8005400:	bf08      	it	eq
 8005402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800540a:	6010      	str	r0, [r2, #0]
 800540c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005410:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005414:	f380 8811 	msr	BASEPRI, r0
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f7fe ff0e 	bl	8004240 <vTaskSwitchContext>
 8005424:	f04f 0000 	mov.w	r0, #0
 8005428:	f380 8811 	msr	BASEPRI, r0
 800542c:	bc09      	pop	{r0, r3}
 800542e:	6819      	ldr	r1, [r3, #0]
 8005430:	6808      	ldr	r0, [r1, #0]
 8005432:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005436:	f01e 0f10 	tst.w	lr, #16
 800543a:	bf08      	it	eq
 800543c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005440:	f380 8809 	msr	PSP, r0
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	f3af 8000 	nop.w

08005450 <pxCurrentTCBConst>:
 8005450:	200006e4 	.word	0x200006e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005454:	bf00      	nop
 8005456:	bf00      	nop

08005458 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
	__asm volatile
 800545e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005470:	f7fe fe28 	bl	80040c4 <xTaskIncrementTick>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800547a:	4b06      	ldr	r3, [pc, #24]	; (8005494 <SysTick_Handler+0x3c>)
 800547c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	2300      	movs	r3, #0
 8005484:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800548c:	bf00      	nop
 800548e:	3708      	adds	r7, #8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	e000ed04 	.word	0xe000ed04

08005498 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005498:	b480      	push	{r7}
 800549a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800549c:	4b0b      	ldr	r3, [pc, #44]	; (80054cc <vPortSetupTimerInterrupt+0x34>)
 800549e:	2200      	movs	r2, #0
 80054a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80054a2:	4b0b      	ldr	r3, [pc, #44]	; (80054d0 <vPortSetupTimerInterrupt+0x38>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80054a8:	4b0a      	ldr	r3, [pc, #40]	; (80054d4 <vPortSetupTimerInterrupt+0x3c>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a0a      	ldr	r2, [pc, #40]	; (80054d8 <vPortSetupTimerInterrupt+0x40>)
 80054ae:	fba2 2303 	umull	r2, r3, r2, r3
 80054b2:	099b      	lsrs	r3, r3, #6
 80054b4:	4a09      	ldr	r2, [pc, #36]	; (80054dc <vPortSetupTimerInterrupt+0x44>)
 80054b6:	3b01      	subs	r3, #1
 80054b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80054ba:	4b04      	ldr	r3, [pc, #16]	; (80054cc <vPortSetupTimerInterrupt+0x34>)
 80054bc:	2207      	movs	r2, #7
 80054be:	601a      	str	r2, [r3, #0]
}
 80054c0:	bf00      	nop
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	e000e010 	.word	0xe000e010
 80054d0:	e000e018 	.word	0xe000e018
 80054d4:	20000000 	.word	0x20000000
 80054d8:	10624dd3 	.word	0x10624dd3
 80054dc:	e000e014 	.word	0xe000e014

080054e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80054e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80054f0 <vPortEnableVFP+0x10>
 80054e4:	6801      	ldr	r1, [r0, #0]
 80054e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80054ea:	6001      	str	r1, [r0, #0]
 80054ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80054ee:	bf00      	nop
 80054f0:	e000ed88 	.word	0xe000ed88

080054f4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80054fa:	f3ef 8305 	mrs	r3, IPSR
 80054fe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2b0f      	cmp	r3, #15
 8005504:	d913      	bls.n	800552e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005506:	4a16      	ldr	r2, [pc, #88]	; (8005560 <vPortValidateInterruptPriority+0x6c>)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4413      	add	r3, r2
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005510:	4b14      	ldr	r3, [pc, #80]	; (8005564 <vPortValidateInterruptPriority+0x70>)
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	7afa      	ldrb	r2, [r7, #11]
 8005516:	429a      	cmp	r2, r3
 8005518:	d209      	bcs.n	800552e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800551a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551e:	f383 8811 	msr	BASEPRI, r3
 8005522:	f3bf 8f6f 	isb	sy
 8005526:	f3bf 8f4f 	dsb	sy
 800552a:	607b      	str	r3, [r7, #4]
 800552c:	e7fe      	b.n	800552c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800552e:	4b0e      	ldr	r3, [pc, #56]	; (8005568 <vPortValidateInterruptPriority+0x74>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005536:	4b0d      	ldr	r3, [pc, #52]	; (800556c <vPortValidateInterruptPriority+0x78>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	429a      	cmp	r2, r3
 800553c:	d909      	bls.n	8005552 <vPortValidateInterruptPriority+0x5e>
 800553e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	603b      	str	r3, [r7, #0]
 8005550:	e7fe      	b.n	8005550 <vPortValidateInterruptPriority+0x5c>
	}
 8005552:	bf00      	nop
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	e000e3f0 	.word	0xe000e3f0
 8005564:	20000d10 	.word	0x20000d10
 8005568:	e000ed0c 	.word	0xe000ed0c
 800556c:	20000d14 	.word	0x20000d14

08005570 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b08a      	sub	sp, #40	; 0x28
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005578:	2300      	movs	r3, #0
 800557a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800557c:	f7fe fce8 	bl	8003f50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005580:	4b57      	ldr	r3, [pc, #348]	; (80056e0 <pvPortMalloc+0x170>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005588:	f000 f90c 	bl	80057a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800558c:	4b55      	ldr	r3, [pc, #340]	; (80056e4 <pvPortMalloc+0x174>)
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4013      	ands	r3, r2
 8005594:	2b00      	cmp	r3, #0
 8005596:	f040 808c 	bne.w	80056b2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d01c      	beq.n	80055da <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80055a0:	2208      	movs	r2, #8
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4413      	add	r3, r2
 80055a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d013      	beq.n	80055da <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f023 0307 	bic.w	r3, r3, #7
 80055b8:	3308      	adds	r3, #8
 80055ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f003 0307 	and.w	r3, r3, #7
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d009      	beq.n	80055da <pvPortMalloc+0x6a>
 80055c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ca:	f383 8811 	msr	BASEPRI, r3
 80055ce:	f3bf 8f6f 	isb	sy
 80055d2:	f3bf 8f4f 	dsb	sy
 80055d6:	617b      	str	r3, [r7, #20]
 80055d8:	e7fe      	b.n	80055d8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d068      	beq.n	80056b2 <pvPortMalloc+0x142>
 80055e0:	4b41      	ldr	r3, [pc, #260]	; (80056e8 <pvPortMalloc+0x178>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d863      	bhi.n	80056b2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80055ea:	4b40      	ldr	r3, [pc, #256]	; (80056ec <pvPortMalloc+0x17c>)
 80055ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80055ee:	4b3f      	ldr	r3, [pc, #252]	; (80056ec <pvPortMalloc+0x17c>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055f4:	e004      	b.n	8005600 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	429a      	cmp	r2, r3
 8005608:	d903      	bls.n	8005612 <pvPortMalloc+0xa2>
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1f1      	bne.n	80055f6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005612:	4b33      	ldr	r3, [pc, #204]	; (80056e0 <pvPortMalloc+0x170>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005618:	429a      	cmp	r2, r3
 800561a:	d04a      	beq.n	80056b2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2208      	movs	r2, #8
 8005622:	4413      	add	r3, r2
 8005624:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	6a3b      	ldr	r3, [r7, #32]
 800562c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	1ad2      	subs	r2, r2, r3
 8005636:	2308      	movs	r3, #8
 8005638:	005b      	lsls	r3, r3, #1
 800563a:	429a      	cmp	r2, r3
 800563c:	d91e      	bls.n	800567c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800563e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4413      	add	r3, r2
 8005644:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	f003 0307 	and.w	r3, r3, #7
 800564c:	2b00      	cmp	r3, #0
 800564e:	d009      	beq.n	8005664 <pvPortMalloc+0xf4>
 8005650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005654:	f383 8811 	msr	BASEPRI, r3
 8005658:	f3bf 8f6f 	isb	sy
 800565c:	f3bf 8f4f 	dsb	sy
 8005660:	613b      	str	r3, [r7, #16]
 8005662:	e7fe      	b.n	8005662 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	1ad2      	subs	r2, r2, r3
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005676:	69b8      	ldr	r0, [r7, #24]
 8005678:	f000 f8f6 	bl	8005868 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800567c:	4b1a      	ldr	r3, [pc, #104]	; (80056e8 <pvPortMalloc+0x178>)
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	4a18      	ldr	r2, [pc, #96]	; (80056e8 <pvPortMalloc+0x178>)
 8005688:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800568a:	4b17      	ldr	r3, [pc, #92]	; (80056e8 <pvPortMalloc+0x178>)
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	4b18      	ldr	r3, [pc, #96]	; (80056f0 <pvPortMalloc+0x180>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	429a      	cmp	r2, r3
 8005694:	d203      	bcs.n	800569e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005696:	4b14      	ldr	r3, [pc, #80]	; (80056e8 <pvPortMalloc+0x178>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a15      	ldr	r2, [pc, #84]	; (80056f0 <pvPortMalloc+0x180>)
 800569c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	685a      	ldr	r2, [r3, #4]
 80056a2:	4b10      	ldr	r3, [pc, #64]	; (80056e4 <pvPortMalloc+0x174>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	431a      	orrs	r2, r3
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	2200      	movs	r2, #0
 80056b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80056b2:	f7fe fc5b 	bl	8003f6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	f003 0307 	and.w	r3, r3, #7
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d009      	beq.n	80056d4 <pvPortMalloc+0x164>
 80056c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c4:	f383 8811 	msr	BASEPRI, r3
 80056c8:	f3bf 8f6f 	isb	sy
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	e7fe      	b.n	80056d2 <pvPortMalloc+0x162>
	return pvReturn;
 80056d4:	69fb      	ldr	r3, [r7, #28]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3728      	adds	r7, #40	; 0x28
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	20004920 	.word	0x20004920
 80056e4:	2000492c 	.word	0x2000492c
 80056e8:	20004924 	.word	0x20004924
 80056ec:	20004918 	.word	0x20004918
 80056f0:	20004928 	.word	0x20004928

080056f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d046      	beq.n	8005794 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005706:	2308      	movs	r3, #8
 8005708:	425b      	negs	r3, r3
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	4413      	add	r3, r2
 800570e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	4b20      	ldr	r3, [pc, #128]	; (800579c <vPortFree+0xa8>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4013      	ands	r3, r2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d109      	bne.n	8005736 <vPortFree+0x42>
 8005722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005726:	f383 8811 	msr	BASEPRI, r3
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	60fb      	str	r3, [r7, #12]
 8005734:	e7fe      	b.n	8005734 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d009      	beq.n	8005752 <vPortFree+0x5e>
 800573e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	60bb      	str	r3, [r7, #8]
 8005750:	e7fe      	b.n	8005750 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	4b11      	ldr	r3, [pc, #68]	; (800579c <vPortFree+0xa8>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4013      	ands	r3, r2
 800575c:	2b00      	cmp	r3, #0
 800575e:	d019      	beq.n	8005794 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d115      	bne.n	8005794 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	4b0b      	ldr	r3, [pc, #44]	; (800579c <vPortFree+0xa8>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	43db      	mvns	r3, r3
 8005772:	401a      	ands	r2, r3
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005778:	f7fe fbea 	bl	8003f50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	4b07      	ldr	r3, [pc, #28]	; (80057a0 <vPortFree+0xac>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4413      	add	r3, r2
 8005786:	4a06      	ldr	r2, [pc, #24]	; (80057a0 <vPortFree+0xac>)
 8005788:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800578a:	6938      	ldr	r0, [r7, #16]
 800578c:	f000 f86c 	bl	8005868 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005790:	f7fe fbec 	bl	8003f6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005794:	bf00      	nop
 8005796:	3718      	adds	r7, #24
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	2000492c 	.word	0x2000492c
 80057a0:	20004924 	.word	0x20004924

080057a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80057aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80057ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80057b0:	4b27      	ldr	r3, [pc, #156]	; (8005850 <prvHeapInit+0xac>)
 80057b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f003 0307 	and.w	r3, r3, #7
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00c      	beq.n	80057d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	3307      	adds	r3, #7
 80057c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f023 0307 	bic.w	r3, r3, #7
 80057ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	4a1f      	ldr	r2, [pc, #124]	; (8005850 <prvHeapInit+0xac>)
 80057d4:	4413      	add	r3, r2
 80057d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80057dc:	4a1d      	ldr	r2, [pc, #116]	; (8005854 <prvHeapInit+0xb0>)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80057e2:	4b1c      	ldr	r3, [pc, #112]	; (8005854 <prvHeapInit+0xb0>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	4413      	add	r3, r2
 80057ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80057f0:	2208      	movs	r2, #8
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	1a9b      	subs	r3, r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f023 0307 	bic.w	r3, r3, #7
 80057fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4a15      	ldr	r2, [pc, #84]	; (8005858 <prvHeapInit+0xb4>)
 8005804:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005806:	4b14      	ldr	r3, [pc, #80]	; (8005858 <prvHeapInit+0xb4>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2200      	movs	r2, #0
 800580c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800580e:	4b12      	ldr	r3, [pc, #72]	; (8005858 <prvHeapInit+0xb4>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2200      	movs	r2, #0
 8005814:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	1ad2      	subs	r2, r2, r3
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005824:	4b0c      	ldr	r3, [pc, #48]	; (8005858 <prvHeapInit+0xb4>)
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	4a0a      	ldr	r2, [pc, #40]	; (800585c <prvHeapInit+0xb8>)
 8005832:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	4a09      	ldr	r2, [pc, #36]	; (8005860 <prvHeapInit+0xbc>)
 800583a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800583c:	4b09      	ldr	r3, [pc, #36]	; (8005864 <prvHeapInit+0xc0>)
 800583e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005842:	601a      	str	r2, [r3, #0]
}
 8005844:	bf00      	nop
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	20000d18 	.word	0x20000d18
 8005854:	20004918 	.word	0x20004918
 8005858:	20004920 	.word	0x20004920
 800585c:	20004928 	.word	0x20004928
 8005860:	20004924 	.word	0x20004924
 8005864:	2000492c 	.word	0x2000492c

08005868 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005870:	4b28      	ldr	r3, [pc, #160]	; (8005914 <prvInsertBlockIntoFreeList+0xac>)
 8005872:	60fb      	str	r3, [r7, #12]
 8005874:	e002      	b.n	800587c <prvInsertBlockIntoFreeList+0x14>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	429a      	cmp	r2, r3
 8005884:	d8f7      	bhi.n	8005876 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	4413      	add	r3, r2
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	429a      	cmp	r2, r3
 8005896:	d108      	bne.n	80058aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	441a      	add	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	441a      	add	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d118      	bne.n	80058f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	4b15      	ldr	r3, [pc, #84]	; (8005918 <prvInsertBlockIntoFreeList+0xb0>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d00d      	beq.n	80058e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685a      	ldr	r2, [r3, #4]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	441a      	add	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	601a      	str	r2, [r3, #0]
 80058e4:	e008      	b.n	80058f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80058e6:	4b0c      	ldr	r3, [pc, #48]	; (8005918 <prvInsertBlockIntoFreeList+0xb0>)
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	601a      	str	r2, [r3, #0]
 80058ee:	e003      	b.n	80058f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d002      	beq.n	8005906 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005906:	bf00      	nop
 8005908:	3714      	adds	r7, #20
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	20004918 	.word	0x20004918
 8005918:	20004920 	.word	0x20004920

0800591c <__libc_init_array>:
 800591c:	b570      	push	{r4, r5, r6, lr}
 800591e:	4e0d      	ldr	r6, [pc, #52]	; (8005954 <__libc_init_array+0x38>)
 8005920:	4c0d      	ldr	r4, [pc, #52]	; (8005958 <__libc_init_array+0x3c>)
 8005922:	1ba4      	subs	r4, r4, r6
 8005924:	10a4      	asrs	r4, r4, #2
 8005926:	2500      	movs	r5, #0
 8005928:	42a5      	cmp	r5, r4
 800592a:	d109      	bne.n	8005940 <__libc_init_array+0x24>
 800592c:	4e0b      	ldr	r6, [pc, #44]	; (800595c <__libc_init_array+0x40>)
 800592e:	4c0c      	ldr	r4, [pc, #48]	; (8005960 <__libc_init_array+0x44>)
 8005930:	f000 f82c 	bl	800598c <_init>
 8005934:	1ba4      	subs	r4, r4, r6
 8005936:	10a4      	asrs	r4, r4, #2
 8005938:	2500      	movs	r5, #0
 800593a:	42a5      	cmp	r5, r4
 800593c:	d105      	bne.n	800594a <__libc_init_array+0x2e>
 800593e:	bd70      	pop	{r4, r5, r6, pc}
 8005940:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005944:	4798      	blx	r3
 8005946:	3501      	adds	r5, #1
 8005948:	e7ee      	b.n	8005928 <__libc_init_array+0xc>
 800594a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800594e:	4798      	blx	r3
 8005950:	3501      	adds	r5, #1
 8005952:	e7f2      	b.n	800593a <__libc_init_array+0x1e>
 8005954:	080059e8 	.word	0x080059e8
 8005958:	080059e8 	.word	0x080059e8
 800595c:	080059e8 	.word	0x080059e8
 8005960:	080059ec 	.word	0x080059ec

08005964 <memcpy>:
 8005964:	b510      	push	{r4, lr}
 8005966:	1e43      	subs	r3, r0, #1
 8005968:	440a      	add	r2, r1
 800596a:	4291      	cmp	r1, r2
 800596c:	d100      	bne.n	8005970 <memcpy+0xc>
 800596e:	bd10      	pop	{r4, pc}
 8005970:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005974:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005978:	e7f7      	b.n	800596a <memcpy+0x6>

0800597a <memset>:
 800597a:	4402      	add	r2, r0
 800597c:	4603      	mov	r3, r0
 800597e:	4293      	cmp	r3, r2
 8005980:	d100      	bne.n	8005984 <memset+0xa>
 8005982:	4770      	bx	lr
 8005984:	f803 1b01 	strb.w	r1, [r3], #1
 8005988:	e7f9      	b.n	800597e <memset+0x4>
	...

0800598c <_init>:
 800598c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598e:	bf00      	nop
 8005990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005992:	bc08      	pop	{r3}
 8005994:	469e      	mov	lr, r3
 8005996:	4770      	bx	lr

08005998 <_fini>:
 8005998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800599a:	bf00      	nop
 800599c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800599e:	bc08      	pop	{r3}
 80059a0:	469e      	mov	lr, r3
 80059a2:	4770      	bx	lr
