
Thread.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d34  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004ed4  08004ed4  00014ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f3c  08004f3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004f3c  08004f3c  00014f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f44  08004f44  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f44  08004f44  00014f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f48  08004f48  00014f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004f4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049ec  2000000c  08004f58  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200049f8  08004f58  000249f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b9d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c39  00000000  00000000  00036bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001280  00000000  00000000  00039818  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001148  00000000  00000000  0003aa98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003610  00000000  00000000  0003bbe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e28b  00000000  00000000  0003f1f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009584d  00000000  00000000  0004d47b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e2cc8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dc8  00000000  00000000  000e2d44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000000c 	.word	0x2000000c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004ebc 	.word	0x08004ebc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000010 	.word	0x20000010
 80001dc:	08004ebc 	.word	0x08004ebc

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b0a0      	sub	sp, #128	; 0x80
 80004e4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e6:	f000 fb15 	bl	8000b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ea:	f000 f85d 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ee:	f000 f8ed 	bl	80006cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004f2:	f000 f8c1 	bl	8000678 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  osKernelInitialize();
 80004f6:	f001 ffa1 	bl	800243c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  const osThreadAttr_t blinky1Task_attributes = {
 80004fa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004fe:	2224      	movs	r2, #36	; 0x24
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f004 fcd1 	bl	8004eaa <memset>
 8000508:	4b20      	ldr	r3, [pc, #128]	; (800058c <main+0xac>)
 800050a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800050c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000510:	673b      	str	r3, [r7, #112]	; 0x70
 8000512:	2318      	movs	r3, #24
 8000514:	677b      	str	r3, [r7, #116]	; 0x74
    .name = "blinky1",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 4096
  };
  defaultTaskHandle = osThreadNew(StartBlinky1Task, NULL, &blinky1Task_attributes);
 8000516:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800051a:	461a      	mov	r2, r3
 800051c:	2100      	movs	r1, #0
 800051e:	481c      	ldr	r0, [pc, #112]	; (8000590 <main+0xb0>)
 8000520:	f001 fff4 	bl	800250c <osThreadNew>
 8000524:	4602      	mov	r2, r0
 8000526:	4b1b      	ldr	r3, [pc, #108]	; (8000594 <main+0xb4>)
 8000528:	601a      	str	r2, [r3, #0]

  const osThreadAttr_t blinky2Task_attributes = {
 800052a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800052e:	2224      	movs	r2, #36	; 0x24
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f004 fcb9 	bl	8004eaa <memset>
 8000538:	4b17      	ldr	r3, [pc, #92]	; (8000598 <main+0xb8>)
 800053a:	63bb      	str	r3, [r7, #56]	; 0x38
 800053c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000540:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000542:	2310      	movs	r3, #16
 8000544:	653b      	str	r3, [r7, #80]	; 0x50
      .name = "blinky2",
      .priority = (osPriority_t) osPriorityBelowNormal,
      .stack_size = 4096
    };
    defaultTaskHandle = osThreadNew(StartBlinky2Task, NULL, &blinky2Task_attributes);
 8000546:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800054a:	461a      	mov	r2, r3
 800054c:	2100      	movs	r1, #0
 800054e:	4813      	ldr	r0, [pc, #76]	; (800059c <main+0xbc>)
 8000550:	f001 ffdc 	bl	800250c <osThreadNew>
 8000554:	4602      	mov	r2, r0
 8000556:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <main+0xb4>)
 8000558:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
    char txData[50]= "";;
 800055a:	2300      	movs	r3, #0
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	f107 0308 	add.w	r3, r7, #8
 8000562:	222e      	movs	r2, #46	; 0x2e
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f004 fc9f 	bl	8004eaa <memset>
    sprintf(txData, "%s", "inicio\r\n");
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	4a0c      	ldr	r2, [pc, #48]	; (80005a0 <main+0xc0>)
 8000570:	ca07      	ldmia	r2, {r0, r1, r2}
 8000572:	c303      	stmia	r3!, {r0, r1}
 8000574:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t *) txData, sizeof(txData),1000);
 8000576:	1d39      	adds	r1, r7, #4
 8000578:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057c:	2232      	movs	r2, #50	; 0x32
 800057e:	4809      	ldr	r0, [pc, #36]	; (80005a4 <main+0xc4>)
 8000580:	f001 fc6f 	bl	8001e62 <HAL_UART_Transmit>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000584:	f001 ff8e 	bl	80024a4 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000588:	e7fe      	b.n	8000588 <main+0xa8>
 800058a:	bf00      	nop
 800058c:	08004ed4 	.word	0x08004ed4
 8000590:	0800078d 	.word	0x0800078d
 8000594:	20004930 	.word	0x20004930
 8000598:	08004edc 	.word	0x08004edc
 800059c:	080007e5 	.word	0x080007e5
 80005a0:	08004ee4 	.word	0x08004ee4
 80005a4:	20004934 	.word	0x20004934

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	; 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	2230      	movs	r2, #48	; 0x30
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f004 fc77 	bl	8004eaa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005cc:	2300      	movs	r3, #0
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	4b27      	ldr	r3, [pc, #156]	; (8000670 <SystemClock_Config+0xc8>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	4a26      	ldr	r2, [pc, #152]	; (8000670 <SystemClock_Config+0xc8>)
 80005d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005da:	6413      	str	r3, [r2, #64]	; 0x40
 80005dc:	4b24      	ldr	r3, [pc, #144]	; (8000670 <SystemClock_Config+0xc8>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e8:	2300      	movs	r3, #0
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	4b21      	ldr	r3, [pc, #132]	; (8000674 <SystemClock_Config+0xcc>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a20      	ldr	r2, [pc, #128]	; (8000674 <SystemClock_Config+0xcc>)
 80005f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <SystemClock_Config+0xcc>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000604:	2301      	movs	r3, #1
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000608:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	2302      	movs	r3, #2
 8000610:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000612:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000618:	2304      	movs	r3, #4
 800061a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800061c:	2364      	movs	r3, #100	; 0x64
 800061e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000624:	2304      	movs	r3, #4
 8000626:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0320 	add.w	r3, r7, #32
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fd4b 	bl	80010c8 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000638:	f000 f914 	bl	8000864 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2302      	movs	r3, #2
 8000642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	2103      	movs	r1, #3
 8000658:	4618      	mov	r0, r3
 800065a:	f000 ff77 	bl	800154c <HAL_RCC_ClockConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000664:	f000 f8fe 	bl	8000864 <Error_Handler>
  }
}
 8000668:	bf00      	nop
 800066a:	3750      	adds	r7, #80	; 0x50
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800067e:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <MX_USART2_UART_Init+0x50>)
 8000680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006b0:	f001 fb8a 	bl	8001dc8 <HAL_UART_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ba:	f000 f8d3 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20004934 	.word	0x20004934
 80006c8:	40004400 	.word	0x40004400

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	4b26      	ldr	r3, [pc, #152]	; (8000780 <MX_GPIO_Init+0xb4>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a25      	ldr	r2, [pc, #148]	; (8000780 <MX_GPIO_Init+0xb4>)
 80006ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b23      	ldr	r3, [pc, #140]	; (8000780 <MX_GPIO_Init+0xb4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <MX_GPIO_Init+0xb4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a1e      	ldr	r2, [pc, #120]	; (8000780 <MX_GPIO_Init+0xb4>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <MX_GPIO_Init+0xb4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	4b18      	ldr	r3, [pc, #96]	; (8000780 <MX_GPIO_Init+0xb4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a17      	ldr	r2, [pc, #92]	; (8000780 <MX_GPIO_Init+0xb4>)
 8000724:	f043 0308 	orr.w	r3, r3, #8
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <MX_GPIO_Init+0xb4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0308 	and.w	r3, r3, #8
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800073c:	4811      	ldr	r0, [pc, #68]	; (8000784 <MX_GPIO_Init+0xb8>)
 800073e:	f000 fc8f 	bl	8001060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000742:	2301      	movs	r3, #1
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	4619      	mov	r1, r3
 8000754:	480c      	ldr	r0, [pc, #48]	; (8000788 <MX_GPIO_Init+0xbc>)
 8000756:	f000 fb01 	bl	8000d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800075a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800075e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000760:	2301      	movs	r3, #1
 8000762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	4619      	mov	r1, r3
 8000772:	4804      	ldr	r0, [pc, #16]	; (8000784 <MX_GPIO_Init+0xb8>)
 8000774:	f000 faf2 	bl	8000d5c <HAL_GPIO_Init>

}
 8000778:	bf00      	nop
 800077a:	3720      	adds	r7, #32
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40023800 	.word	0x40023800
 8000784:	40020c00 	.word	0x40020c00
 8000788:	40020000 	.word	0x40020000

0800078c <StartBlinky1Task>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartBlinky1Task(void *argument)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b090      	sub	sp, #64	; 0x40
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	char txData[50]= "";;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	f107 0310 	add.w	r3, r7, #16
 800079c:	222e      	movs	r2, #46	; 0x2e
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f004 fb82 	bl	8004eaa <memset>
	sprintf(txData, "%s", "led verde\r\n");
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	4a0b      	ldr	r2, [pc, #44]	; (80007d8 <StartBlinky1Task+0x4c>)
 80007ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80007ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80007b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007b6:	4809      	ldr	r0, [pc, #36]	; (80007dc <StartBlinky1Task+0x50>)
 80007b8:	f000 fc6b 	bl	8001092 <HAL_GPIO_TogglePin>
	  HAL_UART_Transmit(&huart2, (uint8_t *) txData, sizeof(txData),1000);
 80007bc:	f107 010c 	add.w	r1, r7, #12
 80007c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c4:	2232      	movs	r2, #50	; 0x32
 80007c6:	4806      	ldr	r0, [pc, #24]	; (80007e0 <StartBlinky1Task+0x54>)
 80007c8:	f001 fb4b 	bl	8001e62 <HAL_UART_Transmit>
	  osDelay(1000);
 80007cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007d0:	f001 ff46 	bl	8002660 <osDelay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80007d4:	e7ed      	b.n	80007b2 <StartBlinky1Task+0x26>
 80007d6:	bf00      	nop
 80007d8:	08004ef0 	.word	0x08004ef0
 80007dc:	40020c00 	.word	0x40020c00
 80007e0:	20004934 	.word	0x20004934

080007e4 <StartBlinky2Task>:
  }
  /* USER CODE END 5 */
}

void StartBlinky2Task(void *argument)
{
 80007e4:	b590      	push	{r4, r7, lr}
 80007e6:	b091      	sub	sp, #68	; 0x44
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	char txData[50]= "";;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	f107 0310 	add.w	r3, r7, #16
 80007f4:	222e      	movs	r2, #46	; 0x2e
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f004 fb56 	bl	8004eaa <memset>
	sprintf(txData, "%s", "led naranja\r\n");
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	4a0c      	ldr	r2, [pc, #48]	; (8000834 <StartBlinky2Task+0x50>)
 8000804:	461c      	mov	r4, r3
 8000806:	4613      	mov	r3, r2
 8000808:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800080a:	c407      	stmia	r4!, {r0, r1, r2}
 800080c:	8023      	strh	r3, [r4, #0]
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800080e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000812:	4809      	ldr	r0, [pc, #36]	; (8000838 <StartBlinky2Task+0x54>)
 8000814:	f000 fc3d 	bl	8001092 <HAL_GPIO_TogglePin>
	  HAL_UART_Transmit(&huart2, (uint8_t *) txData, sizeof(txData),1000);
 8000818:	f107 010c 	add.w	r1, r7, #12
 800081c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000820:	2232      	movs	r2, #50	; 0x32
 8000822:	4806      	ldr	r0, [pc, #24]	; (800083c <StartBlinky2Task+0x58>)
 8000824:	f001 fb1d 	bl	8001e62 <HAL_UART_Transmit>
	  osDelay(500);
 8000828:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800082c:	f001 ff18 	bl	8002660 <osDelay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000830:	e7ed      	b.n	800080e <StartBlinky2Task+0x2a>
 8000832:	bf00      	nop
 8000834:	08004efc 	.word	0x08004efc
 8000838:	40020c00 	.word	0x40020c00
 800083c:	20004934 	.word	0x20004934

08000840 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a04      	ldr	r2, [pc, #16]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d101      	bne.n	8000856 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000852:	f000 f981 	bl	8000b58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40010000 	.word	0x40010000

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
	...

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <HAL_MspInit+0x54>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000882:	4a11      	ldr	r2, [pc, #68]	; (80008c8 <HAL_MspInit+0x54>)
 8000884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000888:	6453      	str	r3, [r2, #68]	; 0x44
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <HAL_MspInit+0x54>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <HAL_MspInit+0x54>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <HAL_MspInit+0x54>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a4:	6413      	str	r3, [r2, #64]	; 0x40
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <HAL_MspInit+0x54>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	210f      	movs	r1, #15
 80008b6:	f06f 0001 	mvn.w	r0, #1
 80008ba:	f000 fa25 	bl	8000d08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800

080008cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	; 0x28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a19      	ldr	r2, [pc, #100]	; (8000950 <HAL_UART_MspInit+0x84>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d12b      	bne.n	8000946 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <HAL_UART_MspInit+0x88>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	4a17      	ldr	r2, [pc, #92]	; (8000954 <HAL_UART_MspInit+0x88>)
 80008f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008fc:	6413      	str	r3, [r2, #64]	; 0x40
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <HAL_UART_MspInit+0x88>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <HAL_UART_MspInit+0x88>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a10      	ldr	r2, [pc, #64]	; (8000954 <HAL_UART_MspInit+0x88>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <HAL_UART_MspInit+0x88>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000926:	230c      	movs	r3, #12
 8000928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800092e:	2301      	movs	r3, #1
 8000930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000932:	2303      	movs	r3, #3
 8000934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000936:	2307      	movs	r3, #7
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4619      	mov	r1, r3
 8000940:	4805      	ldr	r0, [pc, #20]	; (8000958 <HAL_UART_MspInit+0x8c>)
 8000942:	f000 fa0b 	bl	8000d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000946:	bf00      	nop
 8000948:	3728      	adds	r7, #40	; 0x28
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40004400 	.word	0x40004400
 8000954:	40023800 	.word	0x40023800
 8000958:	40020000 	.word	0x40020000

0800095c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08c      	sub	sp, #48	; 0x30
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800096c:	2200      	movs	r2, #0
 800096e:	6879      	ldr	r1, [r7, #4]
 8000970:	2019      	movs	r0, #25
 8000972:	f000 f9c9 	bl	8000d08 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000976:	2019      	movs	r0, #25
 8000978:	f000 f9e2 	bl	8000d40 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <HAL_InitTick+0xa0>)
 8000982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000984:	4a1d      	ldr	r2, [pc, #116]	; (80009fc <HAL_InitTick+0xa0>)
 8000986:	f043 0301 	orr.w	r3, r3, #1
 800098a:	6453      	str	r3, [r2, #68]	; 0x44
 800098c:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <HAL_InitTick+0xa0>)
 800098e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000990:	f003 0301 	and.w	r3, r3, #1
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000998:	f107 0210 	add.w	r2, r7, #16
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4611      	mov	r1, r2
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 ffc0 	bl	8001928 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009a8:	f000 ffaa 	bl	8001900 <HAL_RCC_GetPCLK2Freq>
 80009ac:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80009ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009b0:	4a13      	ldr	r2, [pc, #76]	; (8000a00 <HAL_InitTick+0xa4>)
 80009b2:	fba2 2303 	umull	r2, r3, r2, r3
 80009b6:	0c9b      	lsrs	r3, r3, #18
 80009b8:	3b01      	subs	r3, #1
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <HAL_InitTick+0xa8>)
 80009be:	4a12      	ldr	r2, [pc, #72]	; (8000a08 <HAL_InitTick+0xac>)
 80009c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <HAL_InitTick+0xa8>)
 80009c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009c8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009ca:	4a0e      	ldr	r2, [pc, #56]	; (8000a04 <HAL_InitTick+0xa8>)
 80009cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ce:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <HAL_InitTick+0xa8>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <HAL_InitTick+0xa8>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80009dc:	4809      	ldr	r0, [pc, #36]	; (8000a04 <HAL_InitTick+0xa8>)
 80009de:	f000 ffd5 	bl	800198c <HAL_TIM_Base_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d104      	bne.n	80009f2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80009e8:	4806      	ldr	r0, [pc, #24]	; (8000a04 <HAL_InitTick+0xa8>)
 80009ea:	f001 f804 	bl	80019f6 <HAL_TIM_Base_Start_IT>
 80009ee:	4603      	mov	r3, r0
 80009f0:	e000      	b.n	80009f4 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3730      	adds	r7, #48	; 0x30
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40023800 	.word	0x40023800
 8000a00:	431bde83 	.word	0x431bde83
 8000a04:	20004974 	.word	0x20004974
 8000a08:	40010000 	.word	0x40010000

08000a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <HardFault_Handler+0x4>

08000a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <MemManage_Handler+0x4>

08000a26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <BusFault_Handler+0x4>

08000a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <UsageFault_Handler+0x4>

08000a32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a44:	4802      	ldr	r0, [pc, #8]	; (8000a50 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000a46:	f000 fffa 	bl	8001a3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20004974 	.word	0x20004974

08000a54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a58:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <SystemInit+0x60>)
 8000a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a5e:	4a15      	ldr	r2, [pc, #84]	; (8000ab4 <SystemInit+0x60>)
 8000a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <SystemInit+0x64>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <SystemInit+0x64>)
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a74:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <SystemInit+0x64>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <SystemInit+0x64>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <SystemInit+0x64>)
 8000a80:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a88:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <SystemInit+0x64>)
 8000a8c:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <SystemInit+0x68>)
 8000a8e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <SystemInit+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <SystemInit+0x64>)
 8000a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a9a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <SystemInit+0x64>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000aa2:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <SystemInit+0x60>)
 8000aa4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aa8:	609a      	str	r2, [r3, #8]
#endif
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000ed00 	.word	0xe000ed00
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	24003010 	.word	0x24003010

08000ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ac0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ac4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ac6:	e003      	b.n	8000ad0 <LoopCopyDataInit>

08000ac8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000aca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000acc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ace:	3104      	adds	r1, #4

08000ad0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ad0:	480b      	ldr	r0, [pc, #44]	; (8000b00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ad4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ad6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ad8:	d3f6      	bcc.n	8000ac8 <CopyDataInit>
  ldr  r2, =_sbss
 8000ada:	4a0b      	ldr	r2, [pc, #44]	; (8000b08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000adc:	e002      	b.n	8000ae4 <LoopFillZerobss>

08000ade <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ade:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ae0:	f842 3b04 	str.w	r3, [r2], #4

08000ae4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ae6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ae8:	d3f9      	bcc.n	8000ade <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000aea:	f7ff ffb3 	bl	8000a54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aee:	f004 f9ad 	bl	8004e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000af2:	f7ff fcf5 	bl	80004e0 <main>
  bx  lr    
 8000af6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000af8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000afc:	08004f4c 	.word	0x08004f4c
  ldr  r0, =_sdata
 8000b00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b04:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000b08:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000b0c:	200049f8 	.word	0x200049f8

08000b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b10:	e7fe      	b.n	8000b10 <ADC_IRQHandler>
	...

08000b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b18:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <HAL_Init+0x40>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a0d      	ldr	r2, [pc, #52]	; (8000b54 <HAL_Init+0x40>)
 8000b1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b24:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <HAL_Init+0x40>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <HAL_Init+0x40>)
 8000b2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <HAL_Init+0x40>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a07      	ldr	r2, [pc, #28]	; (8000b54 <HAL_Init+0x40>)
 8000b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b3c:	2003      	movs	r0, #3
 8000b3e:	f000 f8d8 	bl	8000cf2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b42:	2000      	movs	r0, #0
 8000b44:	f7ff ff0a 	bl	800095c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b48:	f7ff fe94 	bl	8000874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40023c00 	.word	0x40023c00

08000b58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_IncTick+0x20>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_IncTick+0x24>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4413      	add	r3, r2
 8000b68:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <HAL_IncTick+0x24>)
 8000b6a:	6013      	str	r3, [r2, #0]
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20000004 	.word	0x20000004
 8000b7c:	200049b4 	.word	0x200049b4

08000b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return uwTick;
 8000b84:	4b03      	ldr	r3, [pc, #12]	; (8000b94 <HAL_GetTick+0x14>)
 8000b86:	681b      	ldr	r3, [r3, #0]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	200049b4 	.word	0x200049b4

08000b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <__NVIC_SetPriorityGrouping+0x44>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bca:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <__NVIC_SetPriorityGrouping+0x44>)
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	60d3      	str	r3, [r2, #12]
}
 8000bd0:	bf00      	nop
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	0a1b      	lsrs	r3, r3, #8
 8000bea:	f003 0307 	and.w	r3, r3, #7
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	db0b      	blt.n	8000c26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	f003 021f 	and.w	r2, r3, #31
 8000c14:	4907      	ldr	r1, [pc, #28]	; (8000c34 <__NVIC_EnableIRQ+0x38>)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	095b      	lsrs	r3, r3, #5
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000e100 	.word	0xe000e100

08000c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	6039      	str	r1, [r7, #0]
 8000c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	db0a      	blt.n	8000c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	490c      	ldr	r1, [pc, #48]	; (8000c84 <__NVIC_SetPriority+0x4c>)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	0112      	lsls	r2, r2, #4
 8000c58:	b2d2      	uxtb	r2, r2
 8000c5a:	440b      	add	r3, r1
 8000c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c60:	e00a      	b.n	8000c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4908      	ldr	r1, [pc, #32]	; (8000c88 <__NVIC_SetPriority+0x50>)
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	f003 030f 	and.w	r3, r3, #15
 8000c6e:	3b04      	subs	r3, #4
 8000c70:	0112      	lsls	r2, r2, #4
 8000c72:	b2d2      	uxtb	r2, r2
 8000c74:	440b      	add	r3, r1
 8000c76:	761a      	strb	r2, [r3, #24]
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000e100 	.word	0xe000e100
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b089      	sub	sp, #36	; 0x24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	f1c3 0307 	rsb	r3, r3, #7
 8000ca6:	2b04      	cmp	r3, #4
 8000ca8:	bf28      	it	cs
 8000caa:	2304      	movcs	r3, #4
 8000cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	2b06      	cmp	r3, #6
 8000cb4:	d902      	bls.n	8000cbc <NVIC_EncodePriority+0x30>
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3b03      	subs	r3, #3
 8000cba:	e000      	b.n	8000cbe <NVIC_EncodePriority+0x32>
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43da      	mvns	r2, r3
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	401a      	ands	r2, r3
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	fa01 f303 	lsl.w	r3, r1, r3
 8000cde:	43d9      	mvns	r1, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	4313      	orrs	r3, r2
         );
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3724      	adds	r7, #36	; 0x24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff ff4c 	bl	8000b98 <__NVIC_SetPriorityGrouping>
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
 8000d14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d1a:	f7ff ff61 	bl	8000be0 <__NVIC_GetPriorityGrouping>
 8000d1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	68b9      	ldr	r1, [r7, #8]
 8000d24:	6978      	ldr	r0, [r7, #20]
 8000d26:	f7ff ffb1 	bl	8000c8c <NVIC_EncodePriority>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d30:	4611      	mov	r1, r2
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff ff80 	bl	8000c38 <__NVIC_SetPriority>
}
 8000d38:	bf00      	nop
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff ff54 	bl	8000bfc <__NVIC_EnableIRQ>
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b089      	sub	sp, #36	; 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
 8000d76:	e159      	b.n	800102c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d78:	2201      	movs	r2, #1
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	f040 8148 	bne.w	8001026 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d003      	beq.n	8000da6 <HAL_GPIO_Init+0x4a>
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	2b12      	cmp	r3, #18
 8000da4:	d123      	bne.n	8000dee <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	08da      	lsrs	r2, r3, #3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	3208      	adds	r2, #8
 8000dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	220f      	movs	r2, #15
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	691a      	ldr	r2, [r3, #16]
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	f003 0307 	and.w	r3, r3, #7
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	08da      	lsrs	r2, r3, #3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3208      	adds	r2, #8
 8000de8:	69b9      	ldr	r1, [r7, #24]
 8000dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	2203      	movs	r2, #3
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4013      	ands	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 0203 	and.w	r2, r3, #3
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d00b      	beq.n	8000e42 <HAL_GPIO_Init+0xe6>
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d007      	beq.n	8000e42 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e36:	2b11      	cmp	r3, #17
 8000e38:	d003      	beq.n	8000e42 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	2b12      	cmp	r3, #18
 8000e40:	d130      	bne.n	8000ea4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4013      	ands	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	68da      	ldr	r2, [r3, #12]
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e78:	2201      	movs	r2, #1
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	091b      	lsrs	r3, r3, #4
 8000e8e:	f003 0201 	and.w	r2, r3, #1
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	2203      	movs	r2, #3
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	689a      	ldr	r2, [r3, #8]
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	f000 80a2 	beq.w	8001026 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b56      	ldr	r3, [pc, #344]	; (8001040 <HAL_GPIO_Init+0x2e4>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	4a55      	ldr	r2, [pc, #340]	; (8001040 <HAL_GPIO_Init+0x2e4>)
 8000eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef2:	4b53      	ldr	r3, [pc, #332]	; (8001040 <HAL_GPIO_Init+0x2e4>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000efe:	4a51      	ldr	r2, [pc, #324]	; (8001044 <HAL_GPIO_Init+0x2e8>)
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	089b      	lsrs	r3, r3, #2
 8000f04:	3302      	adds	r3, #2
 8000f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f003 0303 	and.w	r3, r3, #3
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	220f      	movs	r2, #15
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a48      	ldr	r2, [pc, #288]	; (8001048 <HAL_GPIO_Init+0x2ec>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d019      	beq.n	8000f5e <HAL_GPIO_Init+0x202>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a47      	ldr	r2, [pc, #284]	; (800104c <HAL_GPIO_Init+0x2f0>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d013      	beq.n	8000f5a <HAL_GPIO_Init+0x1fe>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a46      	ldr	r2, [pc, #280]	; (8001050 <HAL_GPIO_Init+0x2f4>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d00d      	beq.n	8000f56 <HAL_GPIO_Init+0x1fa>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a45      	ldr	r2, [pc, #276]	; (8001054 <HAL_GPIO_Init+0x2f8>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d007      	beq.n	8000f52 <HAL_GPIO_Init+0x1f6>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a44      	ldr	r2, [pc, #272]	; (8001058 <HAL_GPIO_Init+0x2fc>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d101      	bne.n	8000f4e <HAL_GPIO_Init+0x1f2>
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	e008      	b.n	8000f60 <HAL_GPIO_Init+0x204>
 8000f4e:	2307      	movs	r3, #7
 8000f50:	e006      	b.n	8000f60 <HAL_GPIO_Init+0x204>
 8000f52:	2303      	movs	r3, #3
 8000f54:	e004      	b.n	8000f60 <HAL_GPIO_Init+0x204>
 8000f56:	2302      	movs	r3, #2
 8000f58:	e002      	b.n	8000f60 <HAL_GPIO_Init+0x204>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e000      	b.n	8000f60 <HAL_GPIO_Init+0x204>
 8000f5e:	2300      	movs	r3, #0
 8000f60:	69fa      	ldr	r2, [r7, #28]
 8000f62:	f002 0203 	and.w	r2, r2, #3
 8000f66:	0092      	lsls	r2, r2, #2
 8000f68:	4093      	lsls	r3, r2
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f70:	4934      	ldr	r1, [pc, #208]	; (8001044 <HAL_GPIO_Init+0x2e8>)
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	089b      	lsrs	r3, r3, #2
 8000f76:	3302      	adds	r3, #2
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f7e:	4b37      	ldr	r3, [pc, #220]	; (800105c <HAL_GPIO_Init+0x300>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	43db      	mvns	r3, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fa2:	4a2e      	ldr	r2, [pc, #184]	; (800105c <HAL_GPIO_Init+0x300>)
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fa8:	4b2c      	ldr	r3, [pc, #176]	; (800105c <HAL_GPIO_Init+0x300>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d003      	beq.n	8000fcc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fcc:	4a23      	ldr	r2, [pc, #140]	; (800105c <HAL_GPIO_Init+0x300>)
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fd2:	4b22      	ldr	r3, [pc, #136]	; (800105c <HAL_GPIO_Init+0x300>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ff6:	4a19      	ldr	r2, [pc, #100]	; (800105c <HAL_GPIO_Init+0x300>)
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <HAL_GPIO_Init+0x300>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001020:	4a0e      	ldr	r2, [pc, #56]	; (800105c <HAL_GPIO_Init+0x300>)
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3301      	adds	r3, #1
 800102a:	61fb      	str	r3, [r7, #28]
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	2b0f      	cmp	r3, #15
 8001030:	f67f aea2 	bls.w	8000d78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001034:	bf00      	nop
 8001036:	3724      	adds	r7, #36	; 0x24
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	40023800 	.word	0x40023800
 8001044:	40013800 	.word	0x40013800
 8001048:	40020000 	.word	0x40020000
 800104c:	40020400 	.word	0x40020400
 8001050:	40020800 	.word	0x40020800
 8001054:	40020c00 	.word	0x40020c00
 8001058:	40021000 	.word	0x40021000
 800105c:	40013c00 	.word	0x40013c00

08001060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	807b      	strh	r3, [r7, #2]
 800106c:	4613      	mov	r3, r2
 800106e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001070:	787b      	ldrb	r3, [r7, #1]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001076:	887a      	ldrh	r2, [r7, #2]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800107c:	e003      	b.n	8001086 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800107e:	887b      	ldrh	r3, [r7, #2]
 8001080:	041a      	lsls	r2, r3, #16
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	619a      	str	r2, [r3, #24]
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	460b      	mov	r3, r1
 800109c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	695a      	ldr	r2, [r3, #20]
 80010a2:	887b      	ldrh	r3, [r7, #2]
 80010a4:	401a      	ands	r2, r3
 80010a6:	887b      	ldrh	r3, [r7, #2]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d104      	bne.n	80010b6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80010ac:	887b      	ldrh	r3, [r7, #2]
 80010ae:	041a      	lsls	r2, r3, #16
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80010b4:	e002      	b.n	80010bc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80010b6:	887a      	ldrh	r2, [r7, #2]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	619a      	str	r2, [r3, #24]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e22d      	b.n	8001536 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d075      	beq.n	80011d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010e6:	4ba3      	ldr	r3, [pc, #652]	; (8001374 <HAL_RCC_OscConfig+0x2ac>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f003 030c 	and.w	r3, r3, #12
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	d00c      	beq.n	800110c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010f2:	4ba0      	ldr	r3, [pc, #640]	; (8001374 <HAL_RCC_OscConfig+0x2ac>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010fa:	2b08      	cmp	r3, #8
 80010fc:	d112      	bne.n	8001124 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010fe:	4b9d      	ldr	r3, [pc, #628]	; (8001374 <HAL_RCC_OscConfig+0x2ac>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001106:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800110a:	d10b      	bne.n	8001124 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800110c:	4b99      	ldr	r3, [pc, #612]	; (8001374 <HAL_RCC_OscConfig+0x2ac>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d05b      	beq.n	80011d0 <HAL_RCC_OscConfig+0x108>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d157      	bne.n	80011d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e208      	b.n	8001536 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800112c:	d106      	bne.n	800113c <HAL_RCC_OscConfig+0x74>
 800112e:	4b91      	ldr	r3, [pc, #580]	; (8001374 <HAL_RCC_OscConfig+0x2ac>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a90      	ldr	r2, [pc, #576]	; (8001374 <HAL_RCC_OscConfig+0x2ac>)
 8001134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	e01d      	b.n	8001178 <HAL_RCC_OscConfig+0xb0>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001144:	d10c      	bne.n	8001160 <HAL_RCC_OscConfig+0x98>
 8001146:	4b8b      	ldr	r3, [pc, #556]	; (8001374 <HAL_RCC_OscConfig+0x2ac>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a8a      	ldr	r2, [pc, #552]	; (8001374 <HAL_RCC_OscConfig+0x2ac>)
 800114c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	4b88      	ldr	r3, [pc, #544]	; (8001374 <HAL_RCC_OscConfig+0x2ac>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a87      	ldr	r2, [pc, #540]	; (8001374 <HAL_RCC_OscConfig+0x2ac>)
 8001158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	e00b      	b.n	8001178 <HAL_RCC_OscConfig+0xb0>
 8001160:	4b84      	ldr	r3, [pc, #528]	; (8001374 <HAL_RCC_OscConfig+0x2ac>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a83      	ldr	r2, [pc, #524]	; (8001374 <HAL_RCC_OscConfig+0x2ac>)
 8001166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	4b81      	ldr	r3, [pc, #516]	; (8001374 <HAL_RCC_OscConfig+0x2ac>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a80      	ldr	r2, [pc, #512]	; (8001374 <HAL_RCC_OscConfig+0x2ac>)
 8001172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001176:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d013      	beq.n	80011a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001180:	f7ff fcfe 	bl	8000b80 <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001188:	f7ff fcfa 	bl	8000b80 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b64      	cmp	r3, #100	; 0x64
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e1cd      	b.n	8001536 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119a:	4b76      	ldr	r3, [pc, #472]	; (8001374 <HAL_RCC_OscConfig+0x2ac>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d0f0      	beq.n	8001188 <HAL_RCC_OscConfig+0xc0>
 80011a6:	e014      	b.n	80011d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a8:	f7ff fcea 	bl	8000b80 <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b0:	f7ff fce6 	bl	8000b80 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b64      	cmp	r3, #100	; 0x64
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e1b9      	b.n	8001536 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c2:	4b6c      	ldr	r3, [pc, #432]	; (8001374 <HAL_RCC_OscConfig+0x2ac>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1f0      	bne.n	80011b0 <HAL_RCC_OscConfig+0xe8>
 80011ce:	e000      	b.n	80011d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d063      	beq.n	80012a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011de:	4b65      	ldr	r3, [pc, #404]	; (8001374 <HAL_RCC_OscConfig+0x2ac>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 030c 	and.w	r3, r3, #12
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d00b      	beq.n	8001202 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ea:	4b62      	ldr	r3, [pc, #392]	; (8001374 <HAL_RCC_OscConfig+0x2ac>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011f2:	2b08      	cmp	r3, #8
 80011f4:	d11c      	bne.n	8001230 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011f6:	4b5f      	ldr	r3, [pc, #380]	; (8001374 <HAL_RCC_OscConfig+0x2ac>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d116      	bne.n	8001230 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001202:	4b5c      	ldr	r3, [pc, #368]	; (8001374 <HAL_RCC_OscConfig+0x2ac>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d005      	beq.n	800121a <HAL_RCC_OscConfig+0x152>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d001      	beq.n	800121a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e18d      	b.n	8001536 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800121a:	4b56      	ldr	r3, [pc, #344]	; (8001374 <HAL_RCC_OscConfig+0x2ac>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	4952      	ldr	r1, [pc, #328]	; (8001374 <HAL_RCC_OscConfig+0x2ac>)
 800122a:	4313      	orrs	r3, r2
 800122c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122e:	e03a      	b.n	80012a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d020      	beq.n	800127a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001238:	4b4f      	ldr	r3, [pc, #316]	; (8001378 <HAL_RCC_OscConfig+0x2b0>)
 800123a:	2201      	movs	r2, #1
 800123c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800123e:	f7ff fc9f 	bl	8000b80 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001246:	f7ff fc9b 	bl	8000b80 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e16e      	b.n	8001536 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001258:	4b46      	ldr	r3, [pc, #280]	; (8001374 <HAL_RCC_OscConfig+0x2ac>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0f0      	beq.n	8001246 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001264:	4b43      	ldr	r3, [pc, #268]	; (8001374 <HAL_RCC_OscConfig+0x2ac>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	4940      	ldr	r1, [pc, #256]	; (8001374 <HAL_RCC_OscConfig+0x2ac>)
 8001274:	4313      	orrs	r3, r2
 8001276:	600b      	str	r3, [r1, #0]
 8001278:	e015      	b.n	80012a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800127a:	4b3f      	ldr	r3, [pc, #252]	; (8001378 <HAL_RCC_OscConfig+0x2b0>)
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001280:	f7ff fc7e 	bl	8000b80 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001288:	f7ff fc7a 	bl	8000b80 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e14d      	b.n	8001536 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800129a:	4b36      	ldr	r3, [pc, #216]	; (8001374 <HAL_RCC_OscConfig+0x2ac>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f0      	bne.n	8001288 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d030      	beq.n	8001314 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d016      	beq.n	80012e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ba:	4b30      	ldr	r3, [pc, #192]	; (800137c <HAL_RCC_OscConfig+0x2b4>)
 80012bc:	2201      	movs	r2, #1
 80012be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c0:	f7ff fc5e 	bl	8000b80 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012c8:	f7ff fc5a 	bl	8000b80 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e12d      	b.n	8001536 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012da:	4b26      	ldr	r3, [pc, #152]	; (8001374 <HAL_RCC_OscConfig+0x2ac>)
 80012dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0f0      	beq.n	80012c8 <HAL_RCC_OscConfig+0x200>
 80012e6:	e015      	b.n	8001314 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012e8:	4b24      	ldr	r3, [pc, #144]	; (800137c <HAL_RCC_OscConfig+0x2b4>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ee:	f7ff fc47 	bl	8000b80 <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012f6:	f7ff fc43 	bl	8000b80 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e116      	b.n	8001536 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001308:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <HAL_RCC_OscConfig+0x2ac>)
 800130a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1f0      	bne.n	80012f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	2b00      	cmp	r3, #0
 800131e:	f000 80a0 	beq.w	8001462 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001322:	2300      	movs	r3, #0
 8001324:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001326:	4b13      	ldr	r3, [pc, #76]	; (8001374 <HAL_RCC_OscConfig+0x2ac>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d10f      	bne.n	8001352 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <HAL_RCC_OscConfig+0x2ac>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <HAL_RCC_OscConfig+0x2ac>)
 800133c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001340:	6413      	str	r3, [r2, #64]	; 0x40
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <HAL_RCC_OscConfig+0x2ac>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800134e:	2301      	movs	r3, #1
 8001350:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001352:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <HAL_RCC_OscConfig+0x2b8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800135a:	2b00      	cmp	r3, #0
 800135c:	d121      	bne.n	80013a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800135e:	4b08      	ldr	r3, [pc, #32]	; (8001380 <HAL_RCC_OscConfig+0x2b8>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a07      	ldr	r2, [pc, #28]	; (8001380 <HAL_RCC_OscConfig+0x2b8>)
 8001364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001368:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800136a:	f7ff fc09 	bl	8000b80 <HAL_GetTick>
 800136e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001370:	e011      	b.n	8001396 <HAL_RCC_OscConfig+0x2ce>
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800
 8001378:	42470000 	.word	0x42470000
 800137c:	42470e80 	.word	0x42470e80
 8001380:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001384:	f7ff fbfc 	bl	8000b80 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e0cf      	b.n	8001536 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001396:	4b6a      	ldr	r3, [pc, #424]	; (8001540 <HAL_RCC_OscConfig+0x478>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f0      	beq.n	8001384 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d106      	bne.n	80013b8 <HAL_RCC_OscConfig+0x2f0>
 80013aa:	4b66      	ldr	r3, [pc, #408]	; (8001544 <HAL_RCC_OscConfig+0x47c>)
 80013ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ae:	4a65      	ldr	r2, [pc, #404]	; (8001544 <HAL_RCC_OscConfig+0x47c>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6713      	str	r3, [r2, #112]	; 0x70
 80013b6:	e01c      	b.n	80013f2 <HAL_RCC_OscConfig+0x32a>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	2b05      	cmp	r3, #5
 80013be:	d10c      	bne.n	80013da <HAL_RCC_OscConfig+0x312>
 80013c0:	4b60      	ldr	r3, [pc, #384]	; (8001544 <HAL_RCC_OscConfig+0x47c>)
 80013c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c4:	4a5f      	ldr	r2, [pc, #380]	; (8001544 <HAL_RCC_OscConfig+0x47c>)
 80013c6:	f043 0304 	orr.w	r3, r3, #4
 80013ca:	6713      	str	r3, [r2, #112]	; 0x70
 80013cc:	4b5d      	ldr	r3, [pc, #372]	; (8001544 <HAL_RCC_OscConfig+0x47c>)
 80013ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d0:	4a5c      	ldr	r2, [pc, #368]	; (8001544 <HAL_RCC_OscConfig+0x47c>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6713      	str	r3, [r2, #112]	; 0x70
 80013d8:	e00b      	b.n	80013f2 <HAL_RCC_OscConfig+0x32a>
 80013da:	4b5a      	ldr	r3, [pc, #360]	; (8001544 <HAL_RCC_OscConfig+0x47c>)
 80013dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013de:	4a59      	ldr	r2, [pc, #356]	; (8001544 <HAL_RCC_OscConfig+0x47c>)
 80013e0:	f023 0301 	bic.w	r3, r3, #1
 80013e4:	6713      	str	r3, [r2, #112]	; 0x70
 80013e6:	4b57      	ldr	r3, [pc, #348]	; (8001544 <HAL_RCC_OscConfig+0x47c>)
 80013e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ea:	4a56      	ldr	r2, [pc, #344]	; (8001544 <HAL_RCC_OscConfig+0x47c>)
 80013ec:	f023 0304 	bic.w	r3, r3, #4
 80013f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d015      	beq.n	8001426 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013fa:	f7ff fbc1 	bl	8000b80 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001400:	e00a      	b.n	8001418 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001402:	f7ff fbbd 	bl	8000b80 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001410:	4293      	cmp	r3, r2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e08e      	b.n	8001536 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001418:	4b4a      	ldr	r3, [pc, #296]	; (8001544 <HAL_RCC_OscConfig+0x47c>)
 800141a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0ee      	beq.n	8001402 <HAL_RCC_OscConfig+0x33a>
 8001424:	e014      	b.n	8001450 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001426:	f7ff fbab 	bl	8000b80 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800142c:	e00a      	b.n	8001444 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800142e:	f7ff fba7 	bl	8000b80 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	f241 3288 	movw	r2, #5000	; 0x1388
 800143c:	4293      	cmp	r3, r2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e078      	b.n	8001536 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001444:	4b3f      	ldr	r3, [pc, #252]	; (8001544 <HAL_RCC_OscConfig+0x47c>)
 8001446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1ee      	bne.n	800142e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001450:	7dfb      	ldrb	r3, [r7, #23]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d105      	bne.n	8001462 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001456:	4b3b      	ldr	r3, [pc, #236]	; (8001544 <HAL_RCC_OscConfig+0x47c>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	4a3a      	ldr	r2, [pc, #232]	; (8001544 <HAL_RCC_OscConfig+0x47c>)
 800145c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001460:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d064      	beq.n	8001534 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800146a:	4b36      	ldr	r3, [pc, #216]	; (8001544 <HAL_RCC_OscConfig+0x47c>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f003 030c 	and.w	r3, r3, #12
 8001472:	2b08      	cmp	r3, #8
 8001474:	d05c      	beq.n	8001530 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d141      	bne.n	8001502 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800147e:	4b32      	ldr	r3, [pc, #200]	; (8001548 <HAL_RCC_OscConfig+0x480>)
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001484:	f7ff fb7c 	bl	8000b80 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800148c:	f7ff fb78 	bl	8000b80 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e04b      	b.n	8001536 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800149e:	4b29      	ldr	r3, [pc, #164]	; (8001544 <HAL_RCC_OscConfig+0x47c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69da      	ldr	r2, [r3, #28]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a1b      	ldr	r3, [r3, #32]
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b8:	019b      	lsls	r3, r3, #6
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c0:	085b      	lsrs	r3, r3, #1
 80014c2:	3b01      	subs	r3, #1
 80014c4:	041b      	lsls	r3, r3, #16
 80014c6:	431a      	orrs	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014cc:	061b      	lsls	r3, r3, #24
 80014ce:	491d      	ldr	r1, [pc, #116]	; (8001544 <HAL_RCC_OscConfig+0x47c>)
 80014d0:	4313      	orrs	r3, r2
 80014d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014d4:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <HAL_RCC_OscConfig+0x480>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014da:	f7ff fb51 	bl	8000b80 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e2:	f7ff fb4d 	bl	8000b80 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e020      	b.n	8001536 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014f4:	4b13      	ldr	r3, [pc, #76]	; (8001544 <HAL_RCC_OscConfig+0x47c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0f0      	beq.n	80014e2 <HAL_RCC_OscConfig+0x41a>
 8001500:	e018      	b.n	8001534 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <HAL_RCC_OscConfig+0x480>)
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001508:	f7ff fb3a 	bl	8000b80 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001510:	f7ff fb36 	bl	8000b80 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e009      	b.n	8001536 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <HAL_RCC_OscConfig+0x47c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0x448>
 800152e:	e001      	b.n	8001534 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e000      	b.n	8001536 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40007000 	.word	0x40007000
 8001544:	40023800 	.word	0x40023800
 8001548:	42470060 	.word	0x42470060

0800154c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e0ca      	b.n	80016f6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001560:	4b67      	ldr	r3, [pc, #412]	; (8001700 <HAL_RCC_ClockConfig+0x1b4>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 030f 	and.w	r3, r3, #15
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d90c      	bls.n	8001588 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156e:	4b64      	ldr	r3, [pc, #400]	; (8001700 <HAL_RCC_ClockConfig+0x1b4>)
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001576:	4b62      	ldr	r3, [pc, #392]	; (8001700 <HAL_RCC_ClockConfig+0x1b4>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	429a      	cmp	r2, r3
 8001582:	d001      	beq.n	8001588 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e0b6      	b.n	80016f6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d020      	beq.n	80015d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b00      	cmp	r3, #0
 800159e:	d005      	beq.n	80015ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015a0:	4b58      	ldr	r3, [pc, #352]	; (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	4a57      	ldr	r2, [pc, #348]	; (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 80015a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0308 	and.w	r3, r3, #8
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d005      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015b8:	4b52      	ldr	r3, [pc, #328]	; (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	4a51      	ldr	r2, [pc, #324]	; (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 80015be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015c4:	4b4f      	ldr	r3, [pc, #316]	; (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	494c      	ldr	r1, [pc, #304]	; (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d044      	beq.n	800166c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d107      	bne.n	80015fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ea:	4b46      	ldr	r3, [pc, #280]	; (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d119      	bne.n	800162a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e07d      	b.n	80016f6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d003      	beq.n	800160a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001606:	2b03      	cmp	r3, #3
 8001608:	d107      	bne.n	800161a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800160a:	4b3e      	ldr	r3, [pc, #248]	; (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d109      	bne.n	800162a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e06d      	b.n	80016f6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161a:	4b3a      	ldr	r3, [pc, #232]	; (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e065      	b.n	80016f6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800162a:	4b36      	ldr	r3, [pc, #216]	; (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f023 0203 	bic.w	r2, r3, #3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	4933      	ldr	r1, [pc, #204]	; (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 8001638:	4313      	orrs	r3, r2
 800163a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800163c:	f7ff faa0 	bl	8000b80 <HAL_GetTick>
 8001640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001642:	e00a      	b.n	800165a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001644:	f7ff fa9c 	bl	8000b80 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001652:	4293      	cmp	r3, r2
 8001654:	d901      	bls.n	800165a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e04d      	b.n	80016f6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165a:	4b2a      	ldr	r3, [pc, #168]	; (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 020c 	and.w	r2, r3, #12
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	429a      	cmp	r2, r3
 800166a:	d1eb      	bne.n	8001644 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800166c:	4b24      	ldr	r3, [pc, #144]	; (8001700 <HAL_RCC_ClockConfig+0x1b4>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 030f 	and.w	r3, r3, #15
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d20c      	bcs.n	8001694 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167a:	4b21      	ldr	r3, [pc, #132]	; (8001700 <HAL_RCC_ClockConfig+0x1b4>)
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001682:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <HAL_RCC_ClockConfig+0x1b4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	429a      	cmp	r2, r3
 800168e:	d001      	beq.n	8001694 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e030      	b.n	80016f6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	2b00      	cmp	r3, #0
 800169e:	d008      	beq.n	80016b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016a0:	4b18      	ldr	r3, [pc, #96]	; (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	4915      	ldr	r1, [pc, #84]	; (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d009      	beq.n	80016d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	490d      	ldr	r1, [pc, #52]	; (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016d2:	f000 f81d 	bl	8001710 <HAL_RCC_GetSysClockFreq>
 80016d6:	4601      	mov	r1, r0
 80016d8:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <HAL_RCC_ClockConfig+0x1b8>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	091b      	lsrs	r3, r3, #4
 80016de:	f003 030f 	and.w	r3, r3, #15
 80016e2:	4a09      	ldr	r2, [pc, #36]	; (8001708 <HAL_RCC_ClockConfig+0x1bc>)
 80016e4:	5cd3      	ldrb	r3, [r2, r3]
 80016e6:	fa21 f303 	lsr.w	r3, r1, r3
 80016ea:	4a08      	ldr	r2, [pc, #32]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 80016ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80016ee:	2000      	movs	r0, #0
 80016f0:	f7ff f934 	bl	800095c <HAL_InitTick>

  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40023c00 	.word	0x40023c00
 8001704:	40023800 	.word	0x40023800
 8001708:	08004f24 	.word	0x08004f24
 800170c:	20000000 	.word	0x20000000

08001710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001716:	2300      	movs	r3, #0
 8001718:	607b      	str	r3, [r7, #4]
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	2300      	movs	r3, #0
 8001720:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001722:	2300      	movs	r3, #0
 8001724:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001726:	4b63      	ldr	r3, [pc, #396]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 030c 	and.w	r3, r3, #12
 800172e:	2b04      	cmp	r3, #4
 8001730:	d007      	beq.n	8001742 <HAL_RCC_GetSysClockFreq+0x32>
 8001732:	2b08      	cmp	r3, #8
 8001734:	d008      	beq.n	8001748 <HAL_RCC_GetSysClockFreq+0x38>
 8001736:	2b00      	cmp	r3, #0
 8001738:	f040 80b4 	bne.w	80018a4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800173c:	4b5e      	ldr	r3, [pc, #376]	; (80018b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800173e:	60bb      	str	r3, [r7, #8]
       break;
 8001740:	e0b3      	b.n	80018aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001742:	4b5e      	ldr	r3, [pc, #376]	; (80018bc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001744:	60bb      	str	r3, [r7, #8]
      break;
 8001746:	e0b0      	b.n	80018aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001748:	4b5a      	ldr	r3, [pc, #360]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001750:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001752:	4b58      	ldr	r3, [pc, #352]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d04a      	beq.n	80017f4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800175e:	4b55      	ldr	r3, [pc, #340]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	099b      	lsrs	r3, r3, #6
 8001764:	f04f 0400 	mov.w	r4, #0
 8001768:	f240 11ff 	movw	r1, #511	; 0x1ff
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	ea03 0501 	and.w	r5, r3, r1
 8001774:	ea04 0602 	and.w	r6, r4, r2
 8001778:	4629      	mov	r1, r5
 800177a:	4632      	mov	r2, r6
 800177c:	f04f 0300 	mov.w	r3, #0
 8001780:	f04f 0400 	mov.w	r4, #0
 8001784:	0154      	lsls	r4, r2, #5
 8001786:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800178a:	014b      	lsls	r3, r1, #5
 800178c:	4619      	mov	r1, r3
 800178e:	4622      	mov	r2, r4
 8001790:	1b49      	subs	r1, r1, r5
 8001792:	eb62 0206 	sbc.w	r2, r2, r6
 8001796:	f04f 0300 	mov.w	r3, #0
 800179a:	f04f 0400 	mov.w	r4, #0
 800179e:	0194      	lsls	r4, r2, #6
 80017a0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80017a4:	018b      	lsls	r3, r1, #6
 80017a6:	1a5b      	subs	r3, r3, r1
 80017a8:	eb64 0402 	sbc.w	r4, r4, r2
 80017ac:	f04f 0100 	mov.w	r1, #0
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	00e2      	lsls	r2, r4, #3
 80017b6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80017ba:	00d9      	lsls	r1, r3, #3
 80017bc:	460b      	mov	r3, r1
 80017be:	4614      	mov	r4, r2
 80017c0:	195b      	adds	r3, r3, r5
 80017c2:	eb44 0406 	adc.w	r4, r4, r6
 80017c6:	f04f 0100 	mov.w	r1, #0
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	0262      	lsls	r2, r4, #9
 80017d0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80017d4:	0259      	lsls	r1, r3, #9
 80017d6:	460b      	mov	r3, r1
 80017d8:	4614      	mov	r4, r2
 80017da:	4618      	mov	r0, r3
 80017dc:	4621      	mov	r1, r4
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f04f 0400 	mov.w	r4, #0
 80017e4:	461a      	mov	r2, r3
 80017e6:	4623      	mov	r3, r4
 80017e8:	f7fe fcfa 	bl	80001e0 <__aeabi_uldivmod>
 80017ec:	4603      	mov	r3, r0
 80017ee:	460c      	mov	r4, r1
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	e049      	b.n	8001888 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017f4:	4b2f      	ldr	r3, [pc, #188]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	099b      	lsrs	r3, r3, #6
 80017fa:	f04f 0400 	mov.w	r4, #0
 80017fe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	ea03 0501 	and.w	r5, r3, r1
 800180a:	ea04 0602 	and.w	r6, r4, r2
 800180e:	4629      	mov	r1, r5
 8001810:	4632      	mov	r2, r6
 8001812:	f04f 0300 	mov.w	r3, #0
 8001816:	f04f 0400 	mov.w	r4, #0
 800181a:	0154      	lsls	r4, r2, #5
 800181c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001820:	014b      	lsls	r3, r1, #5
 8001822:	4619      	mov	r1, r3
 8001824:	4622      	mov	r2, r4
 8001826:	1b49      	subs	r1, r1, r5
 8001828:	eb62 0206 	sbc.w	r2, r2, r6
 800182c:	f04f 0300 	mov.w	r3, #0
 8001830:	f04f 0400 	mov.w	r4, #0
 8001834:	0194      	lsls	r4, r2, #6
 8001836:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800183a:	018b      	lsls	r3, r1, #6
 800183c:	1a5b      	subs	r3, r3, r1
 800183e:	eb64 0402 	sbc.w	r4, r4, r2
 8001842:	f04f 0100 	mov.w	r1, #0
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	00e2      	lsls	r2, r4, #3
 800184c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001850:	00d9      	lsls	r1, r3, #3
 8001852:	460b      	mov	r3, r1
 8001854:	4614      	mov	r4, r2
 8001856:	195b      	adds	r3, r3, r5
 8001858:	eb44 0406 	adc.w	r4, r4, r6
 800185c:	f04f 0100 	mov.w	r1, #0
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	02a2      	lsls	r2, r4, #10
 8001866:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800186a:	0299      	lsls	r1, r3, #10
 800186c:	460b      	mov	r3, r1
 800186e:	4614      	mov	r4, r2
 8001870:	4618      	mov	r0, r3
 8001872:	4621      	mov	r1, r4
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f04f 0400 	mov.w	r4, #0
 800187a:	461a      	mov	r2, r3
 800187c:	4623      	mov	r3, r4
 800187e:	f7fe fcaf 	bl	80001e0 <__aeabi_uldivmod>
 8001882:	4603      	mov	r3, r0
 8001884:	460c      	mov	r4, r1
 8001886:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001888:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	f003 0303 	and.w	r3, r3, #3
 8001892:	3301      	adds	r3, #1
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a0:	60bb      	str	r3, [r7, #8]
      break;
 80018a2:	e002      	b.n	80018aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018a4:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80018a6:	60bb      	str	r3, [r7, #8]
      break;
 80018a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018aa:	68bb      	ldr	r3, [r7, #8]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018b4:	40023800 	.word	0x40023800
 80018b8:	00f42400 	.word	0x00f42400
 80018bc:	007a1200 	.word	0x007a1200

080018c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018c4:	4b03      	ldr	r3, [pc, #12]	; (80018d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80018c6:	681b      	ldr	r3, [r3, #0]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	20000000 	.word	0x20000000

080018d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018dc:	f7ff fff0 	bl	80018c0 <HAL_RCC_GetHCLKFreq>
 80018e0:	4601      	mov	r1, r0
 80018e2:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	0a9b      	lsrs	r3, r3, #10
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	4a03      	ldr	r2, [pc, #12]	; (80018fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80018ee:	5cd3      	ldrb	r3, [r2, r3]
 80018f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40023800 	.word	0x40023800
 80018fc:	08004f34 	.word	0x08004f34

08001900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001904:	f7ff ffdc 	bl	80018c0 <HAL_RCC_GetHCLKFreq>
 8001908:	4601      	mov	r1, r0
 800190a:	4b05      	ldr	r3, [pc, #20]	; (8001920 <HAL_RCC_GetPCLK2Freq+0x20>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	0b5b      	lsrs	r3, r3, #13
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	4a03      	ldr	r2, [pc, #12]	; (8001924 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001916:	5cd3      	ldrb	r3, [r2, r3]
 8001918:	fa21 f303 	lsr.w	r3, r1, r3
}
 800191c:	4618      	mov	r0, r3
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40023800 	.word	0x40023800
 8001924:	08004f34 	.word	0x08004f34

08001928 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	220f      	movs	r2, #15
 8001936:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001938:	4b12      	ldr	r3, [pc, #72]	; (8001984 <HAL_RCC_GetClockConfig+0x5c>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 0203 	and.w	r2, r3, #3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001944:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <HAL_RCC_GetClockConfig+0x5c>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <HAL_RCC_GetClockConfig+0x5c>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800195c:	4b09      	ldr	r3, [pc, #36]	; (8001984 <HAL_RCC_GetClockConfig+0x5c>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	08db      	lsrs	r3, r3, #3
 8001962:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800196a:	4b07      	ldr	r3, [pc, #28]	; (8001988 <HAL_RCC_GetClockConfig+0x60>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 020f 	and.w	r2, r3, #15
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	601a      	str	r2, [r3, #0]
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800
 8001988:	40023c00 	.word	0x40023c00

0800198c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e01d      	b.n	80019da <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d106      	bne.n	80019b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f815 	bl	80019e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2202      	movs	r2, #2
 80019bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3304      	adds	r3, #4
 80019c8:	4619      	mov	r1, r3
 80019ca:	4610      	mov	r0, r2
 80019cc:	f000 f968 	bl	8001ca0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b085      	sub	sp, #20
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f042 0201 	orr.w	r2, r2, #1
 8001a0c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2b06      	cmp	r3, #6
 8001a1e:	d007      	beq.n	8001a30 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f042 0201 	orr.w	r2, r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d122      	bne.n	8001a9a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d11b      	bne.n	8001a9a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f06f 0202 	mvn.w	r2, #2
 8001a6a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d003      	beq.n	8001a88 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 f8ee 	bl	8001c62 <HAL_TIM_IC_CaptureCallback>
 8001a86:	e005      	b.n	8001a94 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f8e0 	bl	8001c4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 f8f1 	bl	8001c76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	d122      	bne.n	8001aee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	2b04      	cmp	r3, #4
 8001ab4:	d11b      	bne.n	8001aee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f06f 0204 	mvn.w	r2, #4
 8001abe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d003      	beq.n	8001adc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 f8c4 	bl	8001c62 <HAL_TIM_IC_CaptureCallback>
 8001ada:	e005      	b.n	8001ae8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 f8b6 	bl	8001c4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f8c7 	bl	8001c76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	f003 0308 	and.w	r3, r3, #8
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d122      	bne.n	8001b42 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	f003 0308 	and.w	r3, r3, #8
 8001b06:	2b08      	cmp	r3, #8
 8001b08:	d11b      	bne.n	8001b42 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f06f 0208 	mvn.w	r2, #8
 8001b12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2204      	movs	r2, #4
 8001b18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	69db      	ldr	r3, [r3, #28]
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d003      	beq.n	8001b30 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 f89a 	bl	8001c62 <HAL_TIM_IC_CaptureCallback>
 8001b2e:	e005      	b.n	8001b3c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f88c 	bl	8001c4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 f89d 	bl	8001c76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	f003 0310 	and.w	r3, r3, #16
 8001b4c:	2b10      	cmp	r3, #16
 8001b4e:	d122      	bne.n	8001b96 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	f003 0310 	and.w	r3, r3, #16
 8001b5a:	2b10      	cmp	r3, #16
 8001b5c:	d11b      	bne.n	8001b96 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f06f 0210 	mvn.w	r2, #16
 8001b66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2208      	movs	r2, #8
 8001b6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f870 	bl	8001c62 <HAL_TIM_IC_CaptureCallback>
 8001b82:	e005      	b.n	8001b90 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 f862 	bl	8001c4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f873 	bl	8001c76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d10e      	bne.n	8001bc2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d107      	bne.n	8001bc2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f06f 0201 	mvn.w	r2, #1
 8001bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7fe fe3f 	bl	8000840 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bcc:	2b80      	cmp	r3, #128	; 0x80
 8001bce:	d10e      	bne.n	8001bee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bda:	2b80      	cmp	r3, #128	; 0x80
 8001bdc:	d107      	bne.n	8001bee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f8e3 	bl	8001db4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf8:	2b40      	cmp	r3, #64	; 0x40
 8001bfa:	d10e      	bne.n	8001c1a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c06:	2b40      	cmp	r3, #64	; 0x40
 8001c08:	d107      	bne.n	8001c1a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f838 	bl	8001c8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	f003 0320 	and.w	r3, r3, #32
 8001c24:	2b20      	cmp	r3, #32
 8001c26:	d10e      	bne.n	8001c46 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	f003 0320 	and.w	r3, r3, #32
 8001c32:	2b20      	cmp	r3, #32
 8001c34:	d107      	bne.n	8001c46 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f06f 0220 	mvn.w	r2, #32
 8001c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 f8ad 	bl	8001da0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
	...

08001ca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a34      	ldr	r2, [pc, #208]	; (8001d84 <TIM_Base_SetConfig+0xe4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d00f      	beq.n	8001cd8 <TIM_Base_SetConfig+0x38>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cbe:	d00b      	beq.n	8001cd8 <TIM_Base_SetConfig+0x38>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a31      	ldr	r2, [pc, #196]	; (8001d88 <TIM_Base_SetConfig+0xe8>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d007      	beq.n	8001cd8 <TIM_Base_SetConfig+0x38>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a30      	ldr	r2, [pc, #192]	; (8001d8c <TIM_Base_SetConfig+0xec>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d003      	beq.n	8001cd8 <TIM_Base_SetConfig+0x38>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a2f      	ldr	r2, [pc, #188]	; (8001d90 <TIM_Base_SetConfig+0xf0>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d108      	bne.n	8001cea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a25      	ldr	r2, [pc, #148]	; (8001d84 <TIM_Base_SetConfig+0xe4>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d01b      	beq.n	8001d2a <TIM_Base_SetConfig+0x8a>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf8:	d017      	beq.n	8001d2a <TIM_Base_SetConfig+0x8a>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a22      	ldr	r2, [pc, #136]	; (8001d88 <TIM_Base_SetConfig+0xe8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d013      	beq.n	8001d2a <TIM_Base_SetConfig+0x8a>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a21      	ldr	r2, [pc, #132]	; (8001d8c <TIM_Base_SetConfig+0xec>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d00f      	beq.n	8001d2a <TIM_Base_SetConfig+0x8a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a20      	ldr	r2, [pc, #128]	; (8001d90 <TIM_Base_SetConfig+0xf0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d00b      	beq.n	8001d2a <TIM_Base_SetConfig+0x8a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a1f      	ldr	r2, [pc, #124]	; (8001d94 <TIM_Base_SetConfig+0xf4>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d007      	beq.n	8001d2a <TIM_Base_SetConfig+0x8a>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a1e      	ldr	r2, [pc, #120]	; (8001d98 <TIM_Base_SetConfig+0xf8>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d003      	beq.n	8001d2a <TIM_Base_SetConfig+0x8a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a1d      	ldr	r2, [pc, #116]	; (8001d9c <TIM_Base_SetConfig+0xfc>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d108      	bne.n	8001d3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a08      	ldr	r2, [pc, #32]	; (8001d84 <TIM_Base_SetConfig+0xe4>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d103      	bne.n	8001d70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	691a      	ldr	r2, [r3, #16]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	615a      	str	r2, [r3, #20]
}
 8001d76:	bf00      	nop
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40010000 	.word	0x40010000
 8001d88:	40000400 	.word	0x40000400
 8001d8c:	40000800 	.word	0x40000800
 8001d90:	40000c00 	.word	0x40000c00
 8001d94:	40014000 	.word	0x40014000
 8001d98:	40014400 	.word	0x40014400
 8001d9c:	40014800 	.word	0x40014800

08001da0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e03f      	b.n	8001e5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d106      	bne.n	8001df4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7fe fd6c 	bl	80008cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2224      	movs	r2, #36	; 0x24
 8001df8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68da      	ldr	r2, [r3, #12]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f90b 	bl	8002028 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	691a      	ldr	r2, [r3, #16]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	695a      	ldr	r2, [r3, #20]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68da      	ldr	r2, [r3, #12]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2220      	movs	r2, #32
 8001e54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b088      	sub	sp, #32
 8001e66:	af02      	add	r7, sp, #8
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	603b      	str	r3, [r7, #0]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b20      	cmp	r3, #32
 8001e80:	f040 8083 	bne.w	8001f8a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <HAL_UART_Transmit+0x2e>
 8001e8a:	88fb      	ldrh	r3, [r7, #6]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e07b      	b.n	8001f8c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_UART_Transmit+0x40>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e074      	b.n	8001f8c <HAL_UART_Transmit+0x12a>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2221      	movs	r2, #33	; 0x21
 8001eb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001eb8:	f7fe fe62 	bl	8000b80 <HAL_GetTick>
 8001ebc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	88fa      	ldrh	r2, [r7, #6]
 8001ec2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	88fa      	ldrh	r2, [r7, #6]
 8001ec8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001eca:	e042      	b.n	8001f52 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ee2:	d122      	bne.n	8001f2a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	2200      	movs	r2, #0
 8001eec:	2180      	movs	r1, #128	; 0x80
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f000 f850 	bl	8001f94 <UART_WaitOnFlagUntilTimeout>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e046      	b.n	8001f8c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f10:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d103      	bne.n	8001f22 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	3302      	adds	r3, #2
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	e017      	b.n	8001f52 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	3301      	adds	r3, #1
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	e013      	b.n	8001f52 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	2200      	movs	r2, #0
 8001f32:	2180      	movs	r1, #128	; 0x80
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f000 f82d 	bl	8001f94 <UART_WaitOnFlagUntilTimeout>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e023      	b.n	8001f8c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	60ba      	str	r2, [r7, #8]
 8001f4a:	781a      	ldrb	r2, [r3, #0]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1b7      	bne.n	8001ecc <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	2200      	movs	r2, #0
 8001f64:	2140      	movs	r1, #64	; 0x40
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 f814 	bl	8001f94 <UART_WaitOnFlagUntilTimeout>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e00a      	b.n	8001f8c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2220      	movs	r2, #32
 8001f7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	e000      	b.n	8001f8c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001f8a:	2302      	movs	r3, #2
  }
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	603b      	str	r3, [r7, #0]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fa4:	e02c      	b.n	8002000 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fac:	d028      	beq.n	8002000 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d007      	beq.n	8001fc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8001fb4:	f7fe fde4 	bl	8000b80 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d21d      	bcs.n	8002000 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001fd2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	695a      	ldr	r2, [r3, #20]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0201 	bic.w	r2, r2, #1
 8001fe2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2220      	movs	r2, #32
 8001ff0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e00f      	b.n	8002020 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	4013      	ands	r3, r2
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	429a      	cmp	r2, r3
 800200e:	bf0c      	ite	eq
 8002010:	2301      	moveq	r3, #1
 8002012:	2300      	movne	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	461a      	mov	r2, r3
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	429a      	cmp	r2, r3
 800201c:	d0c3      	beq.n	8001fa6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002028:	b5b0      	push	{r4, r5, r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689a      	ldr	r2, [r3, #8]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	431a      	orrs	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	4313      	orrs	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002068:	f023 030c 	bic.w	r3, r3, #12
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6812      	ldr	r2, [r2, #0]
 8002070:	68f9      	ldr	r1, [r7, #12]
 8002072:	430b      	orrs	r3, r1
 8002074:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	699a      	ldr	r2, [r3, #24]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002094:	f040 80e4 	bne.w	8002260 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4aab      	ldr	r2, [pc, #684]	; (800234c <UART_SetConfig+0x324>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d004      	beq.n	80020ac <UART_SetConfig+0x84>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4aaa      	ldr	r2, [pc, #680]	; (8002350 <UART_SetConfig+0x328>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d16c      	bne.n	8002186 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80020ac:	f7ff fc28 	bl	8001900 <HAL_RCC_GetPCLK2Freq>
 80020b0:	4602      	mov	r2, r0
 80020b2:	4613      	mov	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	009a      	lsls	r2, r3, #2
 80020ba:	441a      	add	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c6:	4aa3      	ldr	r2, [pc, #652]	; (8002354 <UART_SetConfig+0x32c>)
 80020c8:	fba2 2303 	umull	r2, r3, r2, r3
 80020cc:	095b      	lsrs	r3, r3, #5
 80020ce:	011c      	lsls	r4, r3, #4
 80020d0:	f7ff fc16 	bl	8001900 <HAL_RCC_GetPCLK2Freq>
 80020d4:	4602      	mov	r2, r0
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	009a      	lsls	r2, r3, #2
 80020de:	441a      	add	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	fbb2 f5f3 	udiv	r5, r2, r3
 80020ea:	f7ff fc09 	bl	8001900 <HAL_RCC_GetPCLK2Freq>
 80020ee:	4602      	mov	r2, r0
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	009a      	lsls	r2, r3, #2
 80020f8:	441a      	add	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	fbb2 f3f3 	udiv	r3, r2, r3
 8002104:	4a93      	ldr	r2, [pc, #588]	; (8002354 <UART_SetConfig+0x32c>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	2264      	movs	r2, #100	; 0x64
 800210e:	fb02 f303 	mul.w	r3, r2, r3
 8002112:	1aeb      	subs	r3, r5, r3
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	3332      	adds	r3, #50	; 0x32
 8002118:	4a8e      	ldr	r2, [pc, #568]	; (8002354 <UART_SetConfig+0x32c>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	095b      	lsrs	r3, r3, #5
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002126:	441c      	add	r4, r3
 8002128:	f7ff fbea 	bl	8001900 <HAL_RCC_GetPCLK2Freq>
 800212c:	4602      	mov	r2, r0
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	009a      	lsls	r2, r3, #2
 8002136:	441a      	add	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	fbb2 f5f3 	udiv	r5, r2, r3
 8002142:	f7ff fbdd 	bl	8001900 <HAL_RCC_GetPCLK2Freq>
 8002146:	4602      	mov	r2, r0
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	009a      	lsls	r2, r3, #2
 8002150:	441a      	add	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	fbb2 f3f3 	udiv	r3, r2, r3
 800215c:	4a7d      	ldr	r2, [pc, #500]	; (8002354 <UART_SetConfig+0x32c>)
 800215e:	fba2 2303 	umull	r2, r3, r2, r3
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	2264      	movs	r2, #100	; 0x64
 8002166:	fb02 f303 	mul.w	r3, r2, r3
 800216a:	1aeb      	subs	r3, r5, r3
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	3332      	adds	r3, #50	; 0x32
 8002170:	4a78      	ldr	r2, [pc, #480]	; (8002354 <UART_SetConfig+0x32c>)
 8002172:	fba2 2303 	umull	r2, r3, r2, r3
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	f003 0207 	and.w	r2, r3, #7
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4422      	add	r2, r4
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	e154      	b.n	8002430 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002186:	f7ff fba7 	bl	80018d8 <HAL_RCC_GetPCLK1Freq>
 800218a:	4602      	mov	r2, r0
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	009a      	lsls	r2, r3, #2
 8002194:	441a      	add	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a0:	4a6c      	ldr	r2, [pc, #432]	; (8002354 <UART_SetConfig+0x32c>)
 80021a2:	fba2 2303 	umull	r2, r3, r2, r3
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	011c      	lsls	r4, r3, #4
 80021aa:	f7ff fb95 	bl	80018d8 <HAL_RCC_GetPCLK1Freq>
 80021ae:	4602      	mov	r2, r0
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	009a      	lsls	r2, r3, #2
 80021b8:	441a      	add	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	fbb2 f5f3 	udiv	r5, r2, r3
 80021c4:	f7ff fb88 	bl	80018d8 <HAL_RCC_GetPCLK1Freq>
 80021c8:	4602      	mov	r2, r0
 80021ca:	4613      	mov	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	009a      	lsls	r2, r3, #2
 80021d2:	441a      	add	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	fbb2 f3f3 	udiv	r3, r2, r3
 80021de:	4a5d      	ldr	r2, [pc, #372]	; (8002354 <UART_SetConfig+0x32c>)
 80021e0:	fba2 2303 	umull	r2, r3, r2, r3
 80021e4:	095b      	lsrs	r3, r3, #5
 80021e6:	2264      	movs	r2, #100	; 0x64
 80021e8:	fb02 f303 	mul.w	r3, r2, r3
 80021ec:	1aeb      	subs	r3, r5, r3
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	3332      	adds	r3, #50	; 0x32
 80021f2:	4a58      	ldr	r2, [pc, #352]	; (8002354 <UART_SetConfig+0x32c>)
 80021f4:	fba2 2303 	umull	r2, r3, r2, r3
 80021f8:	095b      	lsrs	r3, r3, #5
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002200:	441c      	add	r4, r3
 8002202:	f7ff fb69 	bl	80018d8 <HAL_RCC_GetPCLK1Freq>
 8002206:	4602      	mov	r2, r0
 8002208:	4613      	mov	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	009a      	lsls	r2, r3, #2
 8002210:	441a      	add	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fbb2 f5f3 	udiv	r5, r2, r3
 800221c:	f7ff fb5c 	bl	80018d8 <HAL_RCC_GetPCLK1Freq>
 8002220:	4602      	mov	r2, r0
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	009a      	lsls	r2, r3, #2
 800222a:	441a      	add	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	fbb2 f3f3 	udiv	r3, r2, r3
 8002236:	4a47      	ldr	r2, [pc, #284]	; (8002354 <UART_SetConfig+0x32c>)
 8002238:	fba2 2303 	umull	r2, r3, r2, r3
 800223c:	095b      	lsrs	r3, r3, #5
 800223e:	2264      	movs	r2, #100	; 0x64
 8002240:	fb02 f303 	mul.w	r3, r2, r3
 8002244:	1aeb      	subs	r3, r5, r3
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	3332      	adds	r3, #50	; 0x32
 800224a:	4a42      	ldr	r2, [pc, #264]	; (8002354 <UART_SetConfig+0x32c>)
 800224c:	fba2 2303 	umull	r2, r3, r2, r3
 8002250:	095b      	lsrs	r3, r3, #5
 8002252:	f003 0207 	and.w	r2, r3, #7
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4422      	add	r2, r4
 800225c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800225e:	e0e7      	b.n	8002430 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a39      	ldr	r2, [pc, #228]	; (800234c <UART_SetConfig+0x324>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d004      	beq.n	8002274 <UART_SetConfig+0x24c>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a38      	ldr	r2, [pc, #224]	; (8002350 <UART_SetConfig+0x328>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d171      	bne.n	8002358 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002274:	f7ff fb44 	bl	8001900 <HAL_RCC_GetPCLK2Freq>
 8002278:	4602      	mov	r2, r0
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	009a      	lsls	r2, r3, #2
 8002282:	441a      	add	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	fbb2 f3f3 	udiv	r3, r2, r3
 800228e:	4a31      	ldr	r2, [pc, #196]	; (8002354 <UART_SetConfig+0x32c>)
 8002290:	fba2 2303 	umull	r2, r3, r2, r3
 8002294:	095b      	lsrs	r3, r3, #5
 8002296:	011c      	lsls	r4, r3, #4
 8002298:	f7ff fb32 	bl	8001900 <HAL_RCC_GetPCLK2Freq>
 800229c:	4602      	mov	r2, r0
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	009a      	lsls	r2, r3, #2
 80022a6:	441a      	add	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	fbb2 f5f3 	udiv	r5, r2, r3
 80022b2:	f7ff fb25 	bl	8001900 <HAL_RCC_GetPCLK2Freq>
 80022b6:	4602      	mov	r2, r0
 80022b8:	4613      	mov	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	009a      	lsls	r2, r3, #2
 80022c0:	441a      	add	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022cc:	4a21      	ldr	r2, [pc, #132]	; (8002354 <UART_SetConfig+0x32c>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	095b      	lsrs	r3, r3, #5
 80022d4:	2264      	movs	r2, #100	; 0x64
 80022d6:	fb02 f303 	mul.w	r3, r2, r3
 80022da:	1aeb      	subs	r3, r5, r3
 80022dc:	011b      	lsls	r3, r3, #4
 80022de:	3332      	adds	r3, #50	; 0x32
 80022e0:	4a1c      	ldr	r2, [pc, #112]	; (8002354 <UART_SetConfig+0x32c>)
 80022e2:	fba2 2303 	umull	r2, r3, r2, r3
 80022e6:	095b      	lsrs	r3, r3, #5
 80022e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ec:	441c      	add	r4, r3
 80022ee:	f7ff fb07 	bl	8001900 <HAL_RCC_GetPCLK2Freq>
 80022f2:	4602      	mov	r2, r0
 80022f4:	4613      	mov	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4413      	add	r3, r2
 80022fa:	009a      	lsls	r2, r3, #2
 80022fc:	441a      	add	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	fbb2 f5f3 	udiv	r5, r2, r3
 8002308:	f7ff fafa 	bl	8001900 <HAL_RCC_GetPCLK2Freq>
 800230c:	4602      	mov	r2, r0
 800230e:	4613      	mov	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	009a      	lsls	r2, r3, #2
 8002316:	441a      	add	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002322:	4a0c      	ldr	r2, [pc, #48]	; (8002354 <UART_SetConfig+0x32c>)
 8002324:	fba2 2303 	umull	r2, r3, r2, r3
 8002328:	095b      	lsrs	r3, r3, #5
 800232a:	2264      	movs	r2, #100	; 0x64
 800232c:	fb02 f303 	mul.w	r3, r2, r3
 8002330:	1aeb      	subs	r3, r5, r3
 8002332:	011b      	lsls	r3, r3, #4
 8002334:	3332      	adds	r3, #50	; 0x32
 8002336:	4a07      	ldr	r2, [pc, #28]	; (8002354 <UART_SetConfig+0x32c>)
 8002338:	fba2 2303 	umull	r2, r3, r2, r3
 800233c:	095b      	lsrs	r3, r3, #5
 800233e:	f003 020f 	and.w	r2, r3, #15
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4422      	add	r2, r4
 8002348:	609a      	str	r2, [r3, #8]
 800234a:	e071      	b.n	8002430 <UART_SetConfig+0x408>
 800234c:	40011000 	.word	0x40011000
 8002350:	40011400 	.word	0x40011400
 8002354:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002358:	f7ff fabe 	bl	80018d8 <HAL_RCC_GetPCLK1Freq>
 800235c:	4602      	mov	r2, r0
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	009a      	lsls	r2, r3, #2
 8002366:	441a      	add	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002372:	4a31      	ldr	r2, [pc, #196]	; (8002438 <UART_SetConfig+0x410>)
 8002374:	fba2 2303 	umull	r2, r3, r2, r3
 8002378:	095b      	lsrs	r3, r3, #5
 800237a:	011c      	lsls	r4, r3, #4
 800237c:	f7ff faac 	bl	80018d8 <HAL_RCC_GetPCLK1Freq>
 8002380:	4602      	mov	r2, r0
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	009a      	lsls	r2, r3, #2
 800238a:	441a      	add	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	fbb2 f5f3 	udiv	r5, r2, r3
 8002396:	f7ff fa9f 	bl	80018d8 <HAL_RCC_GetPCLK1Freq>
 800239a:	4602      	mov	r2, r0
 800239c:	4613      	mov	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	009a      	lsls	r2, r3, #2
 80023a4:	441a      	add	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b0:	4a21      	ldr	r2, [pc, #132]	; (8002438 <UART_SetConfig+0x410>)
 80023b2:	fba2 2303 	umull	r2, r3, r2, r3
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	2264      	movs	r2, #100	; 0x64
 80023ba:	fb02 f303 	mul.w	r3, r2, r3
 80023be:	1aeb      	subs	r3, r5, r3
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	3332      	adds	r3, #50	; 0x32
 80023c4:	4a1c      	ldr	r2, [pc, #112]	; (8002438 <UART_SetConfig+0x410>)
 80023c6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ca:	095b      	lsrs	r3, r3, #5
 80023cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023d0:	441c      	add	r4, r3
 80023d2:	f7ff fa81 	bl	80018d8 <HAL_RCC_GetPCLK1Freq>
 80023d6:	4602      	mov	r2, r0
 80023d8:	4613      	mov	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	009a      	lsls	r2, r3, #2
 80023e0:	441a      	add	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	fbb2 f5f3 	udiv	r5, r2, r3
 80023ec:	f7ff fa74 	bl	80018d8 <HAL_RCC_GetPCLK1Freq>
 80023f0:	4602      	mov	r2, r0
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	009a      	lsls	r2, r3, #2
 80023fa:	441a      	add	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	fbb2 f3f3 	udiv	r3, r2, r3
 8002406:	4a0c      	ldr	r2, [pc, #48]	; (8002438 <UART_SetConfig+0x410>)
 8002408:	fba2 2303 	umull	r2, r3, r2, r3
 800240c:	095b      	lsrs	r3, r3, #5
 800240e:	2264      	movs	r2, #100	; 0x64
 8002410:	fb02 f303 	mul.w	r3, r2, r3
 8002414:	1aeb      	subs	r3, r5, r3
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	3332      	adds	r3, #50	; 0x32
 800241a:	4a07      	ldr	r2, [pc, #28]	; (8002438 <UART_SetConfig+0x410>)
 800241c:	fba2 2303 	umull	r2, r3, r2, r3
 8002420:	095b      	lsrs	r3, r3, #5
 8002422:	f003 020f 	and.w	r2, r3, #15
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4422      	add	r2, r4
 800242c:	609a      	str	r2, [r3, #8]
}
 800242e:	e7ff      	b.n	8002430 <UART_SetConfig+0x408>
 8002430:	bf00      	nop
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bdb0      	pop	{r4, r5, r7, pc}
 8002438:	51eb851f 	.word	0x51eb851f

0800243c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002442:	f3ef 8305 	mrs	r3, IPSR
 8002446:	60bb      	str	r3, [r7, #8]
  return(result);
 8002448:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10f      	bne.n	800246e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800244e:	f3ef 8310 	mrs	r3, PRIMASK
 8002452:	607b      	str	r3, [r7, #4]
  return(result);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d109      	bne.n	800246e <osKernelInitialize+0x32>
 800245a:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <osKernelInitialize+0x64>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b02      	cmp	r3, #2
 8002460:	d109      	bne.n	8002476 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002462:	f3ef 8311 	mrs	r3, BASEPRI
 8002466:	603b      	str	r3, [r7, #0]
  return(result);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800246e:	f06f 0305 	mvn.w	r3, #5
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	e00c      	b.n	8002490 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002476:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <osKernelInitialize+0x64>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d105      	bne.n	800248a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800247e:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <osKernelInitialize+0x64>)
 8002480:	2201      	movs	r2, #1
 8002482:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	e002      	b.n	8002490 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800248a:	f04f 33ff 	mov.w	r3, #4294967295
 800248e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002490:	68fb      	ldr	r3, [r7, #12]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	20000028 	.word	0x20000028

080024a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024aa:	f3ef 8305 	mrs	r3, IPSR
 80024ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80024b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10f      	bne.n	80024d6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024b6:	f3ef 8310 	mrs	r3, PRIMASK
 80024ba:	607b      	str	r3, [r7, #4]
  return(result);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d109      	bne.n	80024d6 <osKernelStart+0x32>
 80024c2:	4b11      	ldr	r3, [pc, #68]	; (8002508 <osKernelStart+0x64>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d109      	bne.n	80024de <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80024ca:	f3ef 8311 	mrs	r3, BASEPRI
 80024ce:	603b      	str	r3, [r7, #0]
  return(result);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <osKernelStart+0x3a>
    stat = osErrorISR;
 80024d6:	f06f 0305 	mvn.w	r3, #5
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	e00e      	b.n	80024fc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80024de:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <osKernelStart+0x64>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d107      	bne.n	80024f6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80024e6:	4b08      	ldr	r3, [pc, #32]	; (8002508 <osKernelStart+0x64>)
 80024e8:	2202      	movs	r2, #2
 80024ea:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80024ec:	f001 f86a 	bl	80035c4 <vTaskStartScheduler>
      stat = osOK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	e002      	b.n	80024fc <osKernelStart+0x58>
    } else {
      stat = osError;
 80024f6:	f04f 33ff 	mov.w	r3, #4294967295
 80024fa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80024fc:	68fb      	ldr	r3, [r7, #12]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	20000028 	.word	0x20000028

0800250c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800250c:	b580      	push	{r7, lr}
 800250e:	b092      	sub	sp, #72	; 0x48
 8002510:	af04      	add	r7, sp, #16
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800251c:	f3ef 8305 	mrs	r3, IPSR
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002524:	2b00      	cmp	r3, #0
 8002526:	f040 8094 	bne.w	8002652 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800252a:	f3ef 8310 	mrs	r3, PRIMASK
 800252e:	623b      	str	r3, [r7, #32]
  return(result);
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	2b00      	cmp	r3, #0
 8002534:	f040 808d 	bne.w	8002652 <osThreadNew+0x146>
 8002538:	4b48      	ldr	r3, [pc, #288]	; (800265c <osThreadNew+0x150>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d106      	bne.n	800254e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002540:	f3ef 8311 	mrs	r3, BASEPRI
 8002544:	61fb      	str	r3, [r7, #28]
  return(result);
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	2b00      	cmp	r3, #0
 800254a:	f040 8082 	bne.w	8002652 <osThreadNew+0x146>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d07e      	beq.n	8002652 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002554:	2380      	movs	r3, #128	; 0x80
 8002556:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002558:	2318      	movs	r3, #24
 800255a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800255c:	2300      	movs	r3, #0
 800255e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002560:	f107 031b 	add.w	r3, r7, #27
 8002564:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002566:	f04f 33ff 	mov.w	r3, #4294967295
 800256a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d045      	beq.n	80025fe <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d002      	beq.n	8002580 <osThreadNew+0x74>
        name = attr->name;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800258e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002590:	2b00      	cmp	r3, #0
 8002592:	d008      	beq.n	80025a6 <osThreadNew+0x9a>
 8002594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002596:	2b38      	cmp	r3, #56	; 0x38
 8002598:	d805      	bhi.n	80025a6 <osThreadNew+0x9a>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <osThreadNew+0x9e>
        return (NULL);
 80025a6:	2300      	movs	r3, #0
 80025a8:	e054      	b.n	8002654 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	089b      	lsrs	r3, r3, #2
 80025b8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00e      	beq.n	80025e0 <osThreadNew+0xd4>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	2b5b      	cmp	r3, #91	; 0x5b
 80025c8:	d90a      	bls.n	80025e0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d006      	beq.n	80025e0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d002      	beq.n	80025e0 <osThreadNew+0xd4>
        mem = 1;
 80025da:	2301      	movs	r3, #1
 80025dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80025de:	e010      	b.n	8002602 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10c      	bne.n	8002602 <osThreadNew+0xf6>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d108      	bne.n	8002602 <osThreadNew+0xf6>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d104      	bne.n	8002602 <osThreadNew+0xf6>
          mem = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80025fc:	e001      	b.n	8002602 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002604:	2b01      	cmp	r3, #1
 8002606:	d110      	bne.n	800262a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002610:	9202      	str	r2, [sp, #8]
 8002612:	9301      	str	r3, [sp, #4]
 8002614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800261c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 fe08 	bl	8003234 <xTaskCreateStatic>
 8002624:	4603      	mov	r3, r0
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	e013      	b.n	8002652 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800262a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262c:	2b00      	cmp	r3, #0
 800262e:	d110      	bne.n	8002652 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002632:	b29a      	uxth	r2, r3
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	9301      	str	r3, [sp, #4]
 800263a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 fe4f 	bl	80032e6 <xTaskCreate>
 8002648:	4603      	mov	r3, r0
 800264a:	2b01      	cmp	r3, #1
 800264c:	d001      	beq.n	8002652 <osThreadNew+0x146>
          hTask = NULL;
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002652:	697b      	ldr	r3, [r7, #20]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3738      	adds	r7, #56	; 0x38
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20000028 	.word	0x20000028

08002660 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002668:	f3ef 8305 	mrs	r3, IPSR
 800266c:	613b      	str	r3, [r7, #16]
  return(result);
 800266e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10f      	bne.n	8002694 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002674:	f3ef 8310 	mrs	r3, PRIMASK
 8002678:	60fb      	str	r3, [r7, #12]
  return(result);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d109      	bne.n	8002694 <osDelay+0x34>
 8002680:	4b0d      	ldr	r3, [pc, #52]	; (80026b8 <osDelay+0x58>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b02      	cmp	r3, #2
 8002686:	d109      	bne.n	800269c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002688:	f3ef 8311 	mrs	r3, BASEPRI
 800268c:	60bb      	str	r3, [r7, #8]
  return(result);
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <osDelay+0x3c>
    stat = osErrorISR;
 8002694:	f06f 0305 	mvn.w	r3, #5
 8002698:	617b      	str	r3, [r7, #20]
 800269a:	e007      	b.n	80026ac <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <osDelay+0x4c>
      vTaskDelay(ticks);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 ff58 	bl	800355c <vTaskDelay>
    }
  }

  return (stat);
 80026ac:	697b      	ldr	r3, [r7, #20]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20000028 	.word	0x20000028

080026bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4a07      	ldr	r2, [pc, #28]	; (80026e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80026cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	4a06      	ldr	r2, [pc, #24]	; (80026ec <vApplicationGetIdleTaskMemory+0x30>)
 80026d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2280      	movs	r2, #128	; 0x80
 80026d8:	601a      	str	r2, [r3, #0]
}
 80026da:	bf00      	nop
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	2000002c 	.word	0x2000002c
 80026ec:	20000088 	.word	0x20000088

080026f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4a07      	ldr	r2, [pc, #28]	; (800271c <vApplicationGetTimerTaskMemory+0x2c>)
 8002700:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	4a06      	ldr	r2, [pc, #24]	; (8002720 <vApplicationGetTimerTaskMemory+0x30>)
 8002706:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800270e:	601a      	str	r2, [r3, #0]
}
 8002710:	bf00      	nop
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	20000288 	.word	0x20000288
 8002720:	200002e4 	.word	0x200002e4

08002724 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f103 0208 	add.w	r2, r3, #8
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f04f 32ff 	mov.w	r2, #4294967295
 800273c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f103 0208 	add.w	r2, r3, #8
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f103 0208 	add.w	r2, r3, #8
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800277e:	b480      	push	{r7}
 8002780:	b085      	sub	sp, #20
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	601a      	str	r2, [r3, #0]
}
 80027ba:	bf00      	nop
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027c6:	b480      	push	{r7}
 80027c8:	b085      	sub	sp, #20
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027dc:	d103      	bne.n	80027e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	e00c      	b.n	8002800 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3308      	adds	r3, #8
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	e002      	b.n	80027f4 <vListInsert+0x2e>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d2f6      	bcs.n	80027ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	601a      	str	r2, [r3, #0]
}
 800282c:	bf00      	nop
 800282e:	3714      	adds	r7, #20
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6892      	ldr	r2, [r2, #8]
 800284e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6852      	ldr	r2, [r2, #4]
 8002858:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	429a      	cmp	r2, r3
 8002862:	d103      	bne.n	800286c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	1e5a      	subs	r2, r3, #1
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d109      	bne.n	80028b4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80028a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a4:	f383 8811 	msr	BASEPRI, r3
 80028a8:	f3bf 8f6f 	isb	sy
 80028ac:	f3bf 8f4f 	dsb	sy
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	e7fe      	b.n	80028b2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80028b4:	f001 ffda 	bl	800486c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c0:	68f9      	ldr	r1, [r7, #12]
 80028c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028c4:	fb01 f303 	mul.w	r3, r1, r3
 80028c8:	441a      	add	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e4:	3b01      	subs	r3, #1
 80028e6:	68f9      	ldr	r1, [r7, #12]
 80028e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028ea:	fb01 f303 	mul.w	r3, r1, r3
 80028ee:	441a      	add	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	22ff      	movs	r2, #255	; 0xff
 80028f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	22ff      	movs	r2, #255	; 0xff
 8002900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d114      	bne.n	8002934 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d01a      	beq.n	8002948 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	3310      	adds	r3, #16
 8002916:	4618      	mov	r0, r3
 8002918:	f001 f8da 	bl	8003ad0 <xTaskRemoveFromEventList>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d012      	beq.n	8002948 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002922:	4b0d      	ldr	r3, [pc, #52]	; (8002958 <xQueueGenericReset+0xcc>)
 8002924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	f3bf 8f4f 	dsb	sy
 800292e:	f3bf 8f6f 	isb	sy
 8002932:	e009      	b.n	8002948 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	3310      	adds	r3, #16
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff fef3 	bl	8002724 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	3324      	adds	r3, #36	; 0x24
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff feee 	bl	8002724 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002948:	f001 ffbe 	bl	80048c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800294c:	2301      	movs	r3, #1
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	e000ed04 	.word	0xe000ed04

0800295c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08e      	sub	sp, #56	; 0x38
 8002960:	af02      	add	r7, sp, #8
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
 8002968:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d109      	bne.n	8002984 <xQueueGenericCreateStatic+0x28>
 8002970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002974:	f383 8811 	msr	BASEPRI, r3
 8002978:	f3bf 8f6f 	isb	sy
 800297c:	f3bf 8f4f 	dsb	sy
 8002980:	62bb      	str	r3, [r7, #40]	; 0x28
 8002982:	e7fe      	b.n	8002982 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d109      	bne.n	800299e <xQueueGenericCreateStatic+0x42>
 800298a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298e:	f383 8811 	msr	BASEPRI, r3
 8002992:	f3bf 8f6f 	isb	sy
 8002996:	f3bf 8f4f 	dsb	sy
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
 800299c:	e7fe      	b.n	800299c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d002      	beq.n	80029aa <xQueueGenericCreateStatic+0x4e>
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <xQueueGenericCreateStatic+0x52>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <xQueueGenericCreateStatic+0x54>
 80029ae:	2300      	movs	r3, #0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d109      	bne.n	80029c8 <xQueueGenericCreateStatic+0x6c>
 80029b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b8:	f383 8811 	msr	BASEPRI, r3
 80029bc:	f3bf 8f6f 	isb	sy
 80029c0:	f3bf 8f4f 	dsb	sy
 80029c4:	623b      	str	r3, [r7, #32]
 80029c6:	e7fe      	b.n	80029c6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d102      	bne.n	80029d4 <xQueueGenericCreateStatic+0x78>
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <xQueueGenericCreateStatic+0x7c>
 80029d4:	2301      	movs	r3, #1
 80029d6:	e000      	b.n	80029da <xQueueGenericCreateStatic+0x7e>
 80029d8:	2300      	movs	r3, #0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d109      	bne.n	80029f2 <xQueueGenericCreateStatic+0x96>
 80029de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e2:	f383 8811 	msr	BASEPRI, r3
 80029e6:	f3bf 8f6f 	isb	sy
 80029ea:	f3bf 8f4f 	dsb	sy
 80029ee:	61fb      	str	r3, [r7, #28]
 80029f0:	e7fe      	b.n	80029f0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80029f2:	2350      	movs	r3, #80	; 0x50
 80029f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2b50      	cmp	r3, #80	; 0x50
 80029fa:	d009      	beq.n	8002a10 <xQueueGenericCreateStatic+0xb4>
 80029fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a00:	f383 8811 	msr	BASEPRI, r3
 8002a04:	f3bf 8f6f 	isb	sy
 8002a08:	f3bf 8f4f 	dsb	sy
 8002a0c:	61bb      	str	r3, [r7, #24]
 8002a0e:	e7fe      	b.n	8002a0e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00d      	beq.n	8002a36 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a22:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	68b9      	ldr	r1, [r7, #8]
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 f805 	bl	8002a40 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3730      	adds	r7, #48	; 0x30
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
 8002a4c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d103      	bne.n	8002a5c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	e002      	b.n	8002a62 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a6e:	2101      	movs	r1, #1
 8002a70:	69b8      	ldr	r0, [r7, #24]
 8002a72:	f7ff ff0b 	bl	800288c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	78fa      	ldrb	r2, [r7, #3]
 8002a7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a7e:	bf00      	nop
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
	...

08002a88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08e      	sub	sp, #56	; 0x38
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
 8002a94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002a96:	2300      	movs	r3, #0
 8002a98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d109      	bne.n	8002ab8 <xQueueGenericSend+0x30>
 8002aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa8:	f383 8811 	msr	BASEPRI, r3
 8002aac:	f3bf 8f6f 	isb	sy
 8002ab0:	f3bf 8f4f 	dsb	sy
 8002ab4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ab6:	e7fe      	b.n	8002ab6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d103      	bne.n	8002ac6 <xQueueGenericSend+0x3e>
 8002abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <xQueueGenericSend+0x42>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <xQueueGenericSend+0x44>
 8002aca:	2300      	movs	r3, #0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d109      	bne.n	8002ae4 <xQueueGenericSend+0x5c>
 8002ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad4:	f383 8811 	msr	BASEPRI, r3
 8002ad8:	f3bf 8f6f 	isb	sy
 8002adc:	f3bf 8f4f 	dsb	sy
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae2:	e7fe      	b.n	8002ae2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d103      	bne.n	8002af2 <xQueueGenericSend+0x6a>
 8002aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d101      	bne.n	8002af6 <xQueueGenericSend+0x6e>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <xQueueGenericSend+0x70>
 8002af6:	2300      	movs	r3, #0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d109      	bne.n	8002b10 <xQueueGenericSend+0x88>
 8002afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b00:	f383 8811 	msr	BASEPRI, r3
 8002b04:	f3bf 8f6f 	isb	sy
 8002b08:	f3bf 8f4f 	dsb	sy
 8002b0c:	623b      	str	r3, [r7, #32]
 8002b0e:	e7fe      	b.n	8002b0e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b10:	f001 f99a 	bl	8003e48 <xTaskGetSchedulerState>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d102      	bne.n	8002b20 <xQueueGenericSend+0x98>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <xQueueGenericSend+0x9c>
 8002b20:	2301      	movs	r3, #1
 8002b22:	e000      	b.n	8002b26 <xQueueGenericSend+0x9e>
 8002b24:	2300      	movs	r3, #0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d109      	bne.n	8002b3e <xQueueGenericSend+0xb6>
 8002b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2e:	f383 8811 	msr	BASEPRI, r3
 8002b32:	f3bf 8f6f 	isb	sy
 8002b36:	f3bf 8f4f 	dsb	sy
 8002b3a:	61fb      	str	r3, [r7, #28]
 8002b3c:	e7fe      	b.n	8002b3c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b3e:	f001 fe95 	bl	800486c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d302      	bcc.n	8002b54 <xQueueGenericSend+0xcc>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d129      	bne.n	8002ba8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	68b9      	ldr	r1, [r7, #8]
 8002b58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b5a:	f000 f9ff 	bl	8002f5c <prvCopyDataToQueue>
 8002b5e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d010      	beq.n	8002b8a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6a:	3324      	adds	r3, #36	; 0x24
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 ffaf 	bl	8003ad0 <xTaskRemoveFromEventList>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d013      	beq.n	8002ba0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b78:	4b3f      	ldr	r3, [pc, #252]	; (8002c78 <xQueueGenericSend+0x1f0>)
 8002b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	f3bf 8f4f 	dsb	sy
 8002b84:	f3bf 8f6f 	isb	sy
 8002b88:	e00a      	b.n	8002ba0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d007      	beq.n	8002ba0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002b90:	4b39      	ldr	r3, [pc, #228]	; (8002c78 <xQueueGenericSend+0x1f0>)
 8002b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	f3bf 8f4f 	dsb	sy
 8002b9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ba0:	f001 fe92 	bl	80048c8 <vPortExitCritical>
				return pdPASS;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e063      	b.n	8002c70 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d103      	bne.n	8002bb6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002bae:	f001 fe8b 	bl	80048c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	e05c      	b.n	8002c70 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d106      	bne.n	8002bca <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002bbc:	f107 0314 	add.w	r3, r7, #20
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f000 ffe7 	bl	8003b94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002bca:	f001 fe7d 	bl	80048c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002bce:	f000 fd5d 	bl	800368c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002bd2:	f001 fe4b 	bl	800486c <vPortEnterCritical>
 8002bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bdc:	b25b      	sxtb	r3, r3
 8002bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be2:	d103      	bne.n	8002bec <xQueueGenericSend+0x164>
 8002be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bf2:	b25b      	sxtb	r3, r3
 8002bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf8:	d103      	bne.n	8002c02 <xQueueGenericSend+0x17a>
 8002bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c02:	f001 fe61 	bl	80048c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c06:	1d3a      	adds	r2, r7, #4
 8002c08:	f107 0314 	add.w	r3, r7, #20
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 ffd6 	bl	8003bc0 <xTaskCheckForTimeOut>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d124      	bne.n	8002c64 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c1c:	f000 fa96 	bl	800314c <prvIsQueueFull>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d018      	beq.n	8002c58 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c28:	3310      	adds	r3, #16
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	4611      	mov	r1, r2
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 ff00 	bl	8003a34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c36:	f000 fa21 	bl	800307c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c3a:	f000 fd35 	bl	80036a8 <xTaskResumeAll>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f47f af7c 	bne.w	8002b3e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002c46:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <xQueueGenericSend+0x1f0>)
 8002c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	f3bf 8f4f 	dsb	sy
 8002c52:	f3bf 8f6f 	isb	sy
 8002c56:	e772      	b.n	8002b3e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c5a:	f000 fa0f 	bl	800307c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c5e:	f000 fd23 	bl	80036a8 <xTaskResumeAll>
 8002c62:	e76c      	b.n	8002b3e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c66:	f000 fa09 	bl	800307c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c6a:	f000 fd1d 	bl	80036a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002c6e:	2300      	movs	r3, #0
		}
	}
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3738      	adds	r7, #56	; 0x38
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	e000ed04 	.word	0xe000ed04

08002c7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08e      	sub	sp, #56	; 0x38
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
 8002c88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d109      	bne.n	8002ca8 <xQueueGenericSendFromISR+0x2c>
 8002c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c98:	f383 8811 	msr	BASEPRI, r3
 8002c9c:	f3bf 8f6f 	isb	sy
 8002ca0:	f3bf 8f4f 	dsb	sy
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca6:	e7fe      	b.n	8002ca6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d103      	bne.n	8002cb6 <xQueueGenericSendFromISR+0x3a>
 8002cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <xQueueGenericSendFromISR+0x3e>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <xQueueGenericSendFromISR+0x40>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d109      	bne.n	8002cd4 <xQueueGenericSendFromISR+0x58>
 8002cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc4:	f383 8811 	msr	BASEPRI, r3
 8002cc8:	f3bf 8f6f 	isb	sy
 8002ccc:	f3bf 8f4f 	dsb	sy
 8002cd0:	623b      	str	r3, [r7, #32]
 8002cd2:	e7fe      	b.n	8002cd2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d103      	bne.n	8002ce2 <xQueueGenericSendFromISR+0x66>
 8002cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d101      	bne.n	8002ce6 <xQueueGenericSendFromISR+0x6a>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <xQueueGenericSendFromISR+0x6c>
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d109      	bne.n	8002d00 <xQueueGenericSendFromISR+0x84>
 8002cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf0:	f383 8811 	msr	BASEPRI, r3
 8002cf4:	f3bf 8f6f 	isb	sy
 8002cf8:	f3bf 8f4f 	dsb	sy
 8002cfc:	61fb      	str	r3, [r7, #28]
 8002cfe:	e7fe      	b.n	8002cfe <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d00:	f001 fe90 	bl	8004a24 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d04:	f3ef 8211 	mrs	r2, BASEPRI
 8002d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0c:	f383 8811 	msr	BASEPRI, r3
 8002d10:	f3bf 8f6f 	isb	sy
 8002d14:	f3bf 8f4f 	dsb	sy
 8002d18:	61ba      	str	r2, [r7, #24]
 8002d1a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d1c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d302      	bcc.n	8002d32 <xQueueGenericSendFromISR+0xb6>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d12c      	bne.n	8002d8c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	68b9      	ldr	r1, [r7, #8]
 8002d40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d42:	f000 f90b 	bl	8002f5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d46:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4e:	d112      	bne.n	8002d76 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d016      	beq.n	8002d86 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5a:	3324      	adds	r3, #36	; 0x24
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 feb7 	bl	8003ad0 <xTaskRemoveFromEventList>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00e      	beq.n	8002d86 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00b      	beq.n	8002d86 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	e007      	b.n	8002d86 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	b25a      	sxtb	r2, r3
 8002d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002d86:	2301      	movs	r3, #1
 8002d88:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002d8a:	e001      	b.n	8002d90 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d92:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3738      	adds	r7, #56	; 0x38
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08c      	sub	sp, #48	; 0x30
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002db0:	2300      	movs	r3, #0
 8002db2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d109      	bne.n	8002dd2 <xQueueReceive+0x2e>
	__asm volatile
 8002dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc2:	f383 8811 	msr	BASEPRI, r3
 8002dc6:	f3bf 8f6f 	isb	sy
 8002dca:	f3bf 8f4f 	dsb	sy
 8002dce:	623b      	str	r3, [r7, #32]
 8002dd0:	e7fe      	b.n	8002dd0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d103      	bne.n	8002de0 <xQueueReceive+0x3c>
 8002dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <xQueueReceive+0x40>
 8002de0:	2301      	movs	r3, #1
 8002de2:	e000      	b.n	8002de6 <xQueueReceive+0x42>
 8002de4:	2300      	movs	r3, #0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d109      	bne.n	8002dfe <xQueueReceive+0x5a>
 8002dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dee:	f383 8811 	msr	BASEPRI, r3
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	f3bf 8f4f 	dsb	sy
 8002dfa:	61fb      	str	r3, [r7, #28]
 8002dfc:	e7fe      	b.n	8002dfc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dfe:	f001 f823 	bl	8003e48 <xTaskGetSchedulerState>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d102      	bne.n	8002e0e <xQueueReceive+0x6a>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <xQueueReceive+0x6e>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <xQueueReceive+0x70>
 8002e12:	2300      	movs	r3, #0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d109      	bne.n	8002e2c <xQueueReceive+0x88>
 8002e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1c:	f383 8811 	msr	BASEPRI, r3
 8002e20:	f3bf 8f6f 	isb	sy
 8002e24:	f3bf 8f4f 	dsb	sy
 8002e28:	61bb      	str	r3, [r7, #24]
 8002e2a:	e7fe      	b.n	8002e2a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e2c:	f001 fd1e 	bl	800486c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e34:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d01f      	beq.n	8002e7c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e3c:	68b9      	ldr	r1, [r7, #8]
 8002e3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e40:	f000 f8f6 	bl	8003030 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	1e5a      	subs	r2, r3, #1
 8002e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00f      	beq.n	8002e74 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e56:	3310      	adds	r3, #16
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f000 fe39 	bl	8003ad0 <xTaskRemoveFromEventList>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d007      	beq.n	8002e74 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e64:	4b3c      	ldr	r3, [pc, #240]	; (8002f58 <xQueueReceive+0x1b4>)
 8002e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e74:	f001 fd28 	bl	80048c8 <vPortExitCritical>
				return pdPASS;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e069      	b.n	8002f50 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d103      	bne.n	8002e8a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e82:	f001 fd21 	bl	80048c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e86:	2300      	movs	r3, #0
 8002e88:	e062      	b.n	8002f50 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d106      	bne.n	8002e9e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e90:	f107 0310 	add.w	r3, r7, #16
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 fe7d 	bl	8003b94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e9e:	f001 fd13 	bl	80048c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ea2:	f000 fbf3 	bl	800368c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ea6:	f001 fce1 	bl	800486c <vPortEnterCritical>
 8002eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002eb0:	b25b      	sxtb	r3, r3
 8002eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb6:	d103      	bne.n	8002ec0 <xQueueReceive+0x11c>
 8002eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ec6:	b25b      	sxtb	r3, r3
 8002ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ecc:	d103      	bne.n	8002ed6 <xQueueReceive+0x132>
 8002ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ed6:	f001 fcf7 	bl	80048c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002eda:	1d3a      	adds	r2, r7, #4
 8002edc:	f107 0310 	add.w	r3, r7, #16
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 fe6c 	bl	8003bc0 <xTaskCheckForTimeOut>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d123      	bne.n	8002f36 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002eee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ef0:	f000 f916 	bl	8003120 <prvIsQueueEmpty>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d017      	beq.n	8002f2a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efc:	3324      	adds	r3, #36	; 0x24
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	4611      	mov	r1, r2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 fd96 	bl	8003a34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f0a:	f000 f8b7 	bl	800307c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f0e:	f000 fbcb 	bl	80036a8 <xTaskResumeAll>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d189      	bne.n	8002e2c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002f18:	4b0f      	ldr	r3, [pc, #60]	; (8002f58 <xQueueReceive+0x1b4>)
 8002f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	f3bf 8f4f 	dsb	sy
 8002f24:	f3bf 8f6f 	isb	sy
 8002f28:	e780      	b.n	8002e2c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f2c:	f000 f8a6 	bl	800307c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f30:	f000 fbba 	bl	80036a8 <xTaskResumeAll>
 8002f34:	e77a      	b.n	8002e2c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002f36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f38:	f000 f8a0 	bl	800307c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f3c:	f000 fbb4 	bl	80036a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f42:	f000 f8ed 	bl	8003120 <prvIsQueueEmpty>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f43f af6f 	beq.w	8002e2c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f4e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3730      	adds	r7, #48	; 0x30
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	e000ed04 	.word	0xe000ed04

08002f5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10d      	bne.n	8002f96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d14d      	bne.n	800301e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 ff7c 	bl	8003e84 <xTaskPriorityDisinherit>
 8002f8c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	605a      	str	r2, [r3, #4]
 8002f94:	e043      	b.n	800301e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d119      	bne.n	8002fd0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6898      	ldr	r0, [r3, #8]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	68b9      	ldr	r1, [r7, #8]
 8002fa8:	f001 ff74 	bl	8004e94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	441a      	add	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d32b      	bcc.n	800301e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	609a      	str	r2, [r3, #8]
 8002fce:	e026      	b.n	800301e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	68d8      	ldr	r0, [r3, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	461a      	mov	r2, r3
 8002fda:	68b9      	ldr	r1, [r7, #8]
 8002fdc:	f001 ff5a 	bl	8004e94 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	68da      	ldr	r2, [r3, #12]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe8:	425b      	negs	r3, r3
 8002fea:	441a      	add	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d207      	bcs.n	800300c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	425b      	negs	r3, r3
 8003006:	441a      	add	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d105      	bne.n	800301e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d002      	beq.n	800301e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	3b01      	subs	r3, #1
 800301c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003026:	697b      	ldr	r3, [r7, #20]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	2b00      	cmp	r3, #0
 8003040:	d018      	beq.n	8003074 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	441a      	add	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	429a      	cmp	r2, r3
 800305a:	d303      	bcc.n	8003064 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68d9      	ldr	r1, [r3, #12]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	461a      	mov	r2, r3
 800306e:	6838      	ldr	r0, [r7, #0]
 8003070:	f001 ff10 	bl	8004e94 <memcpy>
	}
}
 8003074:	bf00      	nop
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003084:	f001 fbf2 	bl	800486c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800308e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003090:	e011      	b.n	80030b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	2b00      	cmp	r3, #0
 8003098:	d012      	beq.n	80030c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3324      	adds	r3, #36	; 0x24
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 fd16 	bl	8003ad0 <xTaskRemoveFromEventList>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80030aa:	f000 fde9 	bl	8003c80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80030b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	dce9      	bgt.n	8003092 <prvUnlockQueue+0x16>
 80030be:	e000      	b.n	80030c2 <prvUnlockQueue+0x46>
					break;
 80030c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	22ff      	movs	r2, #255	; 0xff
 80030c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80030ca:	f001 fbfd 	bl	80048c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80030ce:	f001 fbcd 	bl	800486c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030da:	e011      	b.n	8003100 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d012      	beq.n	800310a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3310      	adds	r3, #16
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 fcf1 	bl	8003ad0 <xTaskRemoveFromEventList>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80030f4:	f000 fdc4 	bl	8003c80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80030f8:	7bbb      	ldrb	r3, [r7, #14]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003100:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003104:	2b00      	cmp	r3, #0
 8003106:	dce9      	bgt.n	80030dc <prvUnlockQueue+0x60>
 8003108:	e000      	b.n	800310c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800310a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	22ff      	movs	r2, #255	; 0xff
 8003110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003114:	f001 fbd8 	bl	80048c8 <vPortExitCritical>
}
 8003118:	bf00      	nop
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003128:	f001 fba0 	bl	800486c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003130:	2b00      	cmp	r3, #0
 8003132:	d102      	bne.n	800313a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003134:	2301      	movs	r3, #1
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	e001      	b.n	800313e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800313a:	2300      	movs	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800313e:	f001 fbc3 	bl	80048c8 <vPortExitCritical>

	return xReturn;
 8003142:	68fb      	ldr	r3, [r7, #12]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003154:	f001 fb8a 	bl	800486c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003160:	429a      	cmp	r2, r3
 8003162:	d102      	bne.n	800316a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003164:	2301      	movs	r3, #1
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	e001      	b.n	800316e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800316e:	f001 fbab 	bl	80048c8 <vPortExitCritical>

	return xReturn;
 8003172:	68fb      	ldr	r3, [r7, #12]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003186:	2300      	movs	r3, #0
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	e014      	b.n	80031b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800318c:	4a0e      	ldr	r2, [pc, #56]	; (80031c8 <vQueueAddToRegistry+0x4c>)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10b      	bne.n	80031b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003198:	490b      	ldr	r1, [pc, #44]	; (80031c8 <vQueueAddToRegistry+0x4c>)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80031a2:	4a09      	ldr	r2, [pc, #36]	; (80031c8 <vQueueAddToRegistry+0x4c>)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	4413      	add	r3, r2
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80031ae:	e005      	b.n	80031bc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	3301      	adds	r3, #1
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2b07      	cmp	r3, #7
 80031ba:	d9e7      	bls.n	800318c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80031bc:	bf00      	nop
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	200049b8 	.word	0x200049b8

080031cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80031dc:	f001 fb46 	bl	800486c <vPortEnterCritical>
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031e6:	b25b      	sxtb	r3, r3
 80031e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ec:	d103      	bne.n	80031f6 <vQueueWaitForMessageRestricted+0x2a>
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031fc:	b25b      	sxtb	r3, r3
 80031fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003202:	d103      	bne.n	800320c <vQueueWaitForMessageRestricted+0x40>
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800320c:	f001 fb5c 	bl	80048c8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003214:	2b00      	cmp	r3, #0
 8003216:	d106      	bne.n	8003226 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	3324      	adds	r3, #36	; 0x24
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	68b9      	ldr	r1, [r7, #8]
 8003220:	4618      	mov	r0, r3
 8003222:	f000 fc2b 	bl	8003a7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003226:	6978      	ldr	r0, [r7, #20]
 8003228:	f7ff ff28 	bl	800307c <prvUnlockQueue>
	}
 800322c:	bf00      	nop
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08e      	sub	sp, #56	; 0x38
 8003238:	af04      	add	r7, sp, #16
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
 8003240:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003244:	2b00      	cmp	r3, #0
 8003246:	d109      	bne.n	800325c <xTaskCreateStatic+0x28>
 8003248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324c:	f383 8811 	msr	BASEPRI, r3
 8003250:	f3bf 8f6f 	isb	sy
 8003254:	f3bf 8f4f 	dsb	sy
 8003258:	623b      	str	r3, [r7, #32]
 800325a:	e7fe      	b.n	800325a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800325c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325e:	2b00      	cmp	r3, #0
 8003260:	d109      	bne.n	8003276 <xTaskCreateStatic+0x42>
 8003262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003266:	f383 8811 	msr	BASEPRI, r3
 800326a:	f3bf 8f6f 	isb	sy
 800326e:	f3bf 8f4f 	dsb	sy
 8003272:	61fb      	str	r3, [r7, #28]
 8003274:	e7fe      	b.n	8003274 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003276:	235c      	movs	r3, #92	; 0x5c
 8003278:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	2b5c      	cmp	r3, #92	; 0x5c
 800327e:	d009      	beq.n	8003294 <xTaskCreateStatic+0x60>
 8003280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003284:	f383 8811 	msr	BASEPRI, r3
 8003288:	f3bf 8f6f 	isb	sy
 800328c:	f3bf 8f4f 	dsb	sy
 8003290:	61bb      	str	r3, [r7, #24]
 8003292:	e7fe      	b.n	8003292 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003296:	2b00      	cmp	r3, #0
 8003298:	d01e      	beq.n	80032d8 <xTaskCreateStatic+0xa4>
 800329a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329c:	2b00      	cmp	r3, #0
 800329e:	d01b      	beq.n	80032d8 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	2202      	movs	r2, #2
 80032ae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80032b2:	2300      	movs	r3, #0
 80032b4:	9303      	str	r3, [sp, #12]
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	9302      	str	r3, [sp, #8]
 80032ba:	f107 0314 	add.w	r3, r7, #20
 80032be:	9301      	str	r3, [sp, #4]
 80032c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	68b9      	ldr	r1, [r7, #8]
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 f850 	bl	8003370 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032d2:	f000 f8d3 	bl	800347c <prvAddNewTaskToReadyList>
 80032d6:	e001      	b.n	80032dc <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80032dc:	697b      	ldr	r3, [r7, #20]
	}
 80032de:	4618      	mov	r0, r3
 80032e0:	3728      	adds	r7, #40	; 0x28
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b08c      	sub	sp, #48	; 0x30
 80032ea:	af04      	add	r7, sp, #16
 80032ec:	60f8      	str	r0, [r7, #12]
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	603b      	str	r3, [r7, #0]
 80032f2:	4613      	mov	r3, r2
 80032f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032f6:	88fb      	ldrh	r3, [r7, #6]
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f001 fbd0 	bl	8004aa0 <pvPortMalloc>
 8003300:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00e      	beq.n	8003326 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003308:	205c      	movs	r0, #92	; 0x5c
 800330a:	f001 fbc9 	bl	8004aa0 <pvPortMalloc>
 800330e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	631a      	str	r2, [r3, #48]	; 0x30
 800331c:	e005      	b.n	800332a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800331e:	6978      	ldr	r0, [r7, #20]
 8003320:	f001 fc80 	bl	8004c24 <vPortFree>
 8003324:	e001      	b.n	800332a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003326:	2300      	movs	r3, #0
 8003328:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d017      	beq.n	8003360 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003338:	88fa      	ldrh	r2, [r7, #6]
 800333a:	2300      	movs	r3, #0
 800333c:	9303      	str	r3, [sp, #12]
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	9302      	str	r3, [sp, #8]
 8003342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003344:	9301      	str	r3, [sp, #4]
 8003346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f80e 	bl	8003370 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003354:	69f8      	ldr	r0, [r7, #28]
 8003356:	f000 f891 	bl	800347c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800335a:	2301      	movs	r3, #1
 800335c:	61bb      	str	r3, [r7, #24]
 800335e:	e002      	b.n	8003366 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003360:	f04f 33ff 	mov.w	r3, #4294967295
 8003364:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003366:	69bb      	ldr	r3, [r7, #24]
	}
 8003368:	4618      	mov	r0, r3
 800336a:	3720      	adds	r7, #32
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800337e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003380:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	461a      	mov	r2, r3
 8003388:	21a5      	movs	r1, #165	; 0xa5
 800338a:	f001 fd8e 	bl	8004eaa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800338e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003398:	3b01      	subs	r3, #1
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	f023 0307 	bic.w	r3, r3, #7
 80033a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d009      	beq.n	80033c6 <prvInitialiseNewTask+0x56>
 80033b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b6:	f383 8811 	msr	BASEPRI, r3
 80033ba:	f3bf 8f6f 	isb	sy
 80033be:	f3bf 8f4f 	dsb	sy
 80033c2:	617b      	str	r3, [r7, #20]
 80033c4:	e7fe      	b.n	80033c4 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033c6:	2300      	movs	r3, #0
 80033c8:	61fb      	str	r3, [r7, #28]
 80033ca:	e012      	b.n	80033f2 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033cc:	68ba      	ldr	r2, [r7, #8]
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	4413      	add	r3, r2
 80033d2:	7819      	ldrb	r1, [r3, #0]
 80033d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	4413      	add	r3, r2
 80033da:	3334      	adds	r3, #52	; 0x34
 80033dc:	460a      	mov	r2, r1
 80033de:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	4413      	add	r3, r2
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d006      	beq.n	80033fa <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	3301      	adds	r3, #1
 80033f0:	61fb      	str	r3, [r7, #28]
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	2b0f      	cmp	r3, #15
 80033f6:	d9e9      	bls.n	80033cc <prvInitialiseNewTask+0x5c>
 80033f8:	e000      	b.n	80033fc <prvInitialiseNewTask+0x8c>
		{
			break;
 80033fa:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80033fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003406:	2b37      	cmp	r3, #55	; 0x37
 8003408:	d901      	bls.n	800340e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800340a:	2337      	movs	r3, #55	; 0x37
 800340c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800340e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003410:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003412:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003418:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800341a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341c:	2200      	movs	r2, #0
 800341e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003422:	3304      	adds	r3, #4
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff f99d 	bl	8002764 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800342a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342c:	3318      	adds	r3, #24
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff f998 	bl	8002764 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003436:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003438:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800343a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003442:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003448:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800344a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344c:	2200      	movs	r2, #0
 800344e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	68f9      	ldr	r1, [r7, #12]
 800345c:	69b8      	ldr	r0, [r7, #24]
 800345e:	f001 f8db 	bl	8004618 <pxPortInitialiseStack>
 8003462:	4602      	mov	r2, r0
 8003464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003466:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346a:	2b00      	cmp	r3, #0
 800346c:	d002      	beq.n	8003474 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800346e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003472:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003474:	bf00      	nop
 8003476:	3720      	adds	r7, #32
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003484:	f001 f9f2 	bl	800486c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003488:	4b2d      	ldr	r3, [pc, #180]	; (8003540 <prvAddNewTaskToReadyList+0xc4>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	3301      	adds	r3, #1
 800348e:	4a2c      	ldr	r2, [pc, #176]	; (8003540 <prvAddNewTaskToReadyList+0xc4>)
 8003490:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003492:	4b2c      	ldr	r3, [pc, #176]	; (8003544 <prvAddNewTaskToReadyList+0xc8>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d109      	bne.n	80034ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800349a:	4a2a      	ldr	r2, [pc, #168]	; (8003544 <prvAddNewTaskToReadyList+0xc8>)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034a0:	4b27      	ldr	r3, [pc, #156]	; (8003540 <prvAddNewTaskToReadyList+0xc4>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d110      	bne.n	80034ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80034a8:	f000 fc0e 	bl	8003cc8 <prvInitialiseTaskLists>
 80034ac:	e00d      	b.n	80034ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80034ae:	4b26      	ldr	r3, [pc, #152]	; (8003548 <prvAddNewTaskToReadyList+0xcc>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d109      	bne.n	80034ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034b6:	4b23      	ldr	r3, [pc, #140]	; (8003544 <prvAddNewTaskToReadyList+0xc8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d802      	bhi.n	80034ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80034c4:	4a1f      	ldr	r2, [pc, #124]	; (8003544 <prvAddNewTaskToReadyList+0xc8>)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80034ca:	4b20      	ldr	r3, [pc, #128]	; (800354c <prvAddNewTaskToReadyList+0xd0>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	3301      	adds	r3, #1
 80034d0:	4a1e      	ldr	r2, [pc, #120]	; (800354c <prvAddNewTaskToReadyList+0xd0>)
 80034d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80034d4:	4b1d      	ldr	r3, [pc, #116]	; (800354c <prvAddNewTaskToReadyList+0xd0>)
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e0:	4b1b      	ldr	r3, [pc, #108]	; (8003550 <prvAddNewTaskToReadyList+0xd4>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d903      	bls.n	80034f0 <prvAddNewTaskToReadyList+0x74>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ec:	4a18      	ldr	r2, [pc, #96]	; (8003550 <prvAddNewTaskToReadyList+0xd4>)
 80034ee:	6013      	str	r3, [r2, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4a15      	ldr	r2, [pc, #84]	; (8003554 <prvAddNewTaskToReadyList+0xd8>)
 80034fe:	441a      	add	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3304      	adds	r3, #4
 8003504:	4619      	mov	r1, r3
 8003506:	4610      	mov	r0, r2
 8003508:	f7ff f939 	bl	800277e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800350c:	f001 f9dc 	bl	80048c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003510:	4b0d      	ldr	r3, [pc, #52]	; (8003548 <prvAddNewTaskToReadyList+0xcc>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00e      	beq.n	8003536 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003518:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <prvAddNewTaskToReadyList+0xc8>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003522:	429a      	cmp	r2, r3
 8003524:	d207      	bcs.n	8003536 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003526:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <prvAddNewTaskToReadyList+0xdc>)
 8003528:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	f3bf 8f4f 	dsb	sy
 8003532:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003536:	bf00      	nop
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	20000bb8 	.word	0x20000bb8
 8003544:	200006e4 	.word	0x200006e4
 8003548:	20000bc4 	.word	0x20000bc4
 800354c:	20000bd4 	.word	0x20000bd4
 8003550:	20000bc0 	.word	0x20000bc0
 8003554:	200006e8 	.word	0x200006e8
 8003558:	e000ed04 	.word	0xe000ed04

0800355c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003564:	2300      	movs	r3, #0
 8003566:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d016      	beq.n	800359c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800356e:	4b13      	ldr	r3, [pc, #76]	; (80035bc <vTaskDelay+0x60>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d009      	beq.n	800358a <vTaskDelay+0x2e>
 8003576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357a:	f383 8811 	msr	BASEPRI, r3
 800357e:	f3bf 8f6f 	isb	sy
 8003582:	f3bf 8f4f 	dsb	sy
 8003586:	60bb      	str	r3, [r7, #8]
 8003588:	e7fe      	b.n	8003588 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800358a:	f000 f87f 	bl	800368c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800358e:	2100      	movs	r1, #0
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 fce3 	bl	8003f5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003596:	f000 f887 	bl	80036a8 <xTaskResumeAll>
 800359a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d107      	bne.n	80035b2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80035a2:	4b07      	ldr	r3, [pc, #28]	; (80035c0 <vTaskDelay+0x64>)
 80035a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	f3bf 8f4f 	dsb	sy
 80035ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80035b2:	bf00      	nop
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	20000be0 	.word	0x20000be0
 80035c0:	e000ed04 	.word	0xe000ed04

080035c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b08a      	sub	sp, #40	; 0x28
 80035c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80035d2:	463a      	mov	r2, r7
 80035d4:	1d39      	adds	r1, r7, #4
 80035d6:	f107 0308 	add.w	r3, r7, #8
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff f86e 	bl	80026bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80035e0:	6839      	ldr	r1, [r7, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	9202      	str	r2, [sp, #8]
 80035e8:	9301      	str	r3, [sp, #4]
 80035ea:	2300      	movs	r3, #0
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	2300      	movs	r3, #0
 80035f0:	460a      	mov	r2, r1
 80035f2:	4920      	ldr	r1, [pc, #128]	; (8003674 <vTaskStartScheduler+0xb0>)
 80035f4:	4820      	ldr	r0, [pc, #128]	; (8003678 <vTaskStartScheduler+0xb4>)
 80035f6:	f7ff fe1d 	bl	8003234 <xTaskCreateStatic>
 80035fa:	4602      	mov	r2, r0
 80035fc:	4b1f      	ldr	r3, [pc, #124]	; (800367c <vTaskStartScheduler+0xb8>)
 80035fe:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003600:	4b1e      	ldr	r3, [pc, #120]	; (800367c <vTaskStartScheduler+0xb8>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003608:	2301      	movs	r3, #1
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	e001      	b.n	8003612 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800360e:	2300      	movs	r3, #0
 8003610:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d102      	bne.n	800361e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003618:	f000 fcf4 	bl	8004004 <xTimerCreateTimerTask>
 800361c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d115      	bne.n	8003650 <vTaskStartScheduler+0x8c>
 8003624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003628:	f383 8811 	msr	BASEPRI, r3
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003636:	4b12      	ldr	r3, [pc, #72]	; (8003680 <vTaskStartScheduler+0xbc>)
 8003638:	f04f 32ff 	mov.w	r2, #4294967295
 800363c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800363e:	4b11      	ldr	r3, [pc, #68]	; (8003684 <vTaskStartScheduler+0xc0>)
 8003640:	2201      	movs	r2, #1
 8003642:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003644:	4b10      	ldr	r3, [pc, #64]	; (8003688 <vTaskStartScheduler+0xc4>)
 8003646:	2200      	movs	r2, #0
 8003648:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800364a:	f001 f871 	bl	8004730 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800364e:	e00d      	b.n	800366c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003656:	d109      	bne.n	800366c <vTaskStartScheduler+0xa8>
 8003658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365c:	f383 8811 	msr	BASEPRI, r3
 8003660:	f3bf 8f6f 	isb	sy
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	e7fe      	b.n	800366a <vTaskStartScheduler+0xa6>
}
 800366c:	bf00      	nop
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	08004f0c 	.word	0x08004f0c
 8003678:	08003c99 	.word	0x08003c99
 800367c:	20000bdc 	.word	0x20000bdc
 8003680:	20000bd8 	.word	0x20000bd8
 8003684:	20000bc4 	.word	0x20000bc4
 8003688:	20000bbc 	.word	0x20000bbc

0800368c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003690:	4b04      	ldr	r3, [pc, #16]	; (80036a4 <vTaskSuspendAll+0x18>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3301      	adds	r3, #1
 8003696:	4a03      	ldr	r2, [pc, #12]	; (80036a4 <vTaskSuspendAll+0x18>)
 8003698:	6013      	str	r3, [r2, #0]
}
 800369a:	bf00      	nop
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	20000be0 	.word	0x20000be0

080036a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80036b2:	2300      	movs	r3, #0
 80036b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80036b6:	4b41      	ldr	r3, [pc, #260]	; (80037bc <xTaskResumeAll+0x114>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d109      	bne.n	80036d2 <xTaskResumeAll+0x2a>
 80036be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c2:	f383 8811 	msr	BASEPRI, r3
 80036c6:	f3bf 8f6f 	isb	sy
 80036ca:	f3bf 8f4f 	dsb	sy
 80036ce:	603b      	str	r3, [r7, #0]
 80036d0:	e7fe      	b.n	80036d0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80036d2:	f001 f8cb 	bl	800486c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80036d6:	4b39      	ldr	r3, [pc, #228]	; (80037bc <xTaskResumeAll+0x114>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	3b01      	subs	r3, #1
 80036dc:	4a37      	ldr	r2, [pc, #220]	; (80037bc <xTaskResumeAll+0x114>)
 80036de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036e0:	4b36      	ldr	r3, [pc, #216]	; (80037bc <xTaskResumeAll+0x114>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d162      	bne.n	80037ae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80036e8:	4b35      	ldr	r3, [pc, #212]	; (80037c0 <xTaskResumeAll+0x118>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d05e      	beq.n	80037ae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036f0:	e02f      	b.n	8003752 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80036f2:	4b34      	ldr	r3, [pc, #208]	; (80037c4 <xTaskResumeAll+0x11c>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	3318      	adds	r3, #24
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff f89a 	bl	8002838 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	3304      	adds	r3, #4
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff f895 	bl	8002838 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003712:	4b2d      	ldr	r3, [pc, #180]	; (80037c8 <xTaskResumeAll+0x120>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d903      	bls.n	8003722 <xTaskResumeAll+0x7a>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371e:	4a2a      	ldr	r2, [pc, #168]	; (80037c8 <xTaskResumeAll+0x120>)
 8003720:	6013      	str	r3, [r2, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003726:	4613      	mov	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4a27      	ldr	r2, [pc, #156]	; (80037cc <xTaskResumeAll+0x124>)
 8003730:	441a      	add	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	3304      	adds	r3, #4
 8003736:	4619      	mov	r1, r3
 8003738:	4610      	mov	r0, r2
 800373a:	f7ff f820 	bl	800277e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003742:	4b23      	ldr	r3, [pc, #140]	; (80037d0 <xTaskResumeAll+0x128>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	429a      	cmp	r2, r3
 800374a:	d302      	bcc.n	8003752 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800374c:	4b21      	ldr	r3, [pc, #132]	; (80037d4 <xTaskResumeAll+0x12c>)
 800374e:	2201      	movs	r2, #1
 8003750:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003752:	4b1c      	ldr	r3, [pc, #112]	; (80037c4 <xTaskResumeAll+0x11c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1cb      	bne.n	80036f2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003760:	f000 fb4c 	bl	8003dfc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003764:	4b1c      	ldr	r3, [pc, #112]	; (80037d8 <xTaskResumeAll+0x130>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d010      	beq.n	8003792 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003770:	f000 f846 	bl	8003800 <xTaskIncrementTick>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800377a:	4b16      	ldr	r3, [pc, #88]	; (80037d4 <xTaskResumeAll+0x12c>)
 800377c:	2201      	movs	r2, #1
 800377e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3b01      	subs	r3, #1
 8003784:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1f1      	bne.n	8003770 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800378c:	4b12      	ldr	r3, [pc, #72]	; (80037d8 <xTaskResumeAll+0x130>)
 800378e:	2200      	movs	r2, #0
 8003790:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003792:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <xTaskResumeAll+0x12c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d009      	beq.n	80037ae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800379a:	2301      	movs	r3, #1
 800379c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800379e:	4b0f      	ldr	r3, [pc, #60]	; (80037dc <xTaskResumeAll+0x134>)
 80037a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	f3bf 8f4f 	dsb	sy
 80037aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80037ae:	f001 f88b 	bl	80048c8 <vPortExitCritical>

	return xAlreadyYielded;
 80037b2:	68bb      	ldr	r3, [r7, #8]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	20000be0 	.word	0x20000be0
 80037c0:	20000bb8 	.word	0x20000bb8
 80037c4:	20000b78 	.word	0x20000b78
 80037c8:	20000bc0 	.word	0x20000bc0
 80037cc:	200006e8 	.word	0x200006e8
 80037d0:	200006e4 	.word	0x200006e4
 80037d4:	20000bcc 	.word	0x20000bcc
 80037d8:	20000bc8 	.word	0x20000bc8
 80037dc:	e000ed04 	.word	0xe000ed04

080037e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80037e6:	4b05      	ldr	r3, [pc, #20]	; (80037fc <xTaskGetTickCount+0x1c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80037ec:	687b      	ldr	r3, [r7, #4]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	20000bbc 	.word	0x20000bbc

08003800 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800380a:	4b51      	ldr	r3, [pc, #324]	; (8003950 <xTaskIncrementTick+0x150>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	f040 808d 	bne.w	800392e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003814:	4b4f      	ldr	r3, [pc, #316]	; (8003954 <xTaskIncrementTick+0x154>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	3301      	adds	r3, #1
 800381a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800381c:	4a4d      	ldr	r2, [pc, #308]	; (8003954 <xTaskIncrementTick+0x154>)
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d11f      	bne.n	8003868 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003828:	4b4b      	ldr	r3, [pc, #300]	; (8003958 <xTaskIncrementTick+0x158>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d009      	beq.n	8003846 <xTaskIncrementTick+0x46>
 8003832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003836:	f383 8811 	msr	BASEPRI, r3
 800383a:	f3bf 8f6f 	isb	sy
 800383e:	f3bf 8f4f 	dsb	sy
 8003842:	603b      	str	r3, [r7, #0]
 8003844:	e7fe      	b.n	8003844 <xTaskIncrementTick+0x44>
 8003846:	4b44      	ldr	r3, [pc, #272]	; (8003958 <xTaskIncrementTick+0x158>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	4b43      	ldr	r3, [pc, #268]	; (800395c <xTaskIncrementTick+0x15c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a41      	ldr	r2, [pc, #260]	; (8003958 <xTaskIncrementTick+0x158>)
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	4a41      	ldr	r2, [pc, #260]	; (800395c <xTaskIncrementTick+0x15c>)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	4b41      	ldr	r3, [pc, #260]	; (8003960 <xTaskIncrementTick+0x160>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	3301      	adds	r3, #1
 8003860:	4a3f      	ldr	r2, [pc, #252]	; (8003960 <xTaskIncrementTick+0x160>)
 8003862:	6013      	str	r3, [r2, #0]
 8003864:	f000 faca 	bl	8003dfc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003868:	4b3e      	ldr	r3, [pc, #248]	; (8003964 <xTaskIncrementTick+0x164>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	429a      	cmp	r2, r3
 8003870:	d34e      	bcc.n	8003910 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003872:	4b39      	ldr	r3, [pc, #228]	; (8003958 <xTaskIncrementTick+0x158>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <xTaskIncrementTick+0x80>
 800387c:	2301      	movs	r3, #1
 800387e:	e000      	b.n	8003882 <xTaskIncrementTick+0x82>
 8003880:	2300      	movs	r3, #0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d004      	beq.n	8003890 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003886:	4b37      	ldr	r3, [pc, #220]	; (8003964 <xTaskIncrementTick+0x164>)
 8003888:	f04f 32ff 	mov.w	r2, #4294967295
 800388c:	601a      	str	r2, [r3, #0]
					break;
 800388e:	e03f      	b.n	8003910 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003890:	4b31      	ldr	r3, [pc, #196]	; (8003958 <xTaskIncrementTick+0x158>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d203      	bcs.n	80038b0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80038a8:	4a2e      	ldr	r2, [pc, #184]	; (8003964 <xTaskIncrementTick+0x164>)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6013      	str	r3, [r2, #0]
						break;
 80038ae:	e02f      	b.n	8003910 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	3304      	adds	r3, #4
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fe ffbf 	bl	8002838 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d004      	beq.n	80038cc <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	3318      	adds	r3, #24
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fe ffb6 	bl	8002838 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d0:	4b25      	ldr	r3, [pc, #148]	; (8003968 <xTaskIncrementTick+0x168>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d903      	bls.n	80038e0 <xTaskIncrementTick+0xe0>
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	4a22      	ldr	r2, [pc, #136]	; (8003968 <xTaskIncrementTick+0x168>)
 80038de:	6013      	str	r3, [r2, #0]
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e4:	4613      	mov	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4a1f      	ldr	r2, [pc, #124]	; (800396c <xTaskIncrementTick+0x16c>)
 80038ee:	441a      	add	r2, r3
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	3304      	adds	r3, #4
 80038f4:	4619      	mov	r1, r3
 80038f6:	4610      	mov	r0, r2
 80038f8:	f7fe ff41 	bl	800277e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003900:	4b1b      	ldr	r3, [pc, #108]	; (8003970 <xTaskIncrementTick+0x170>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003906:	429a      	cmp	r2, r3
 8003908:	d3b3      	bcc.n	8003872 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800390a:	2301      	movs	r3, #1
 800390c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800390e:	e7b0      	b.n	8003872 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003910:	4b17      	ldr	r3, [pc, #92]	; (8003970 <xTaskIncrementTick+0x170>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003916:	4915      	ldr	r1, [pc, #84]	; (800396c <xTaskIncrementTick+0x16c>)
 8003918:	4613      	mov	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d907      	bls.n	8003938 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003928:	2301      	movs	r3, #1
 800392a:	617b      	str	r3, [r7, #20]
 800392c:	e004      	b.n	8003938 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800392e:	4b11      	ldr	r3, [pc, #68]	; (8003974 <xTaskIncrementTick+0x174>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3301      	adds	r3, #1
 8003934:	4a0f      	ldr	r2, [pc, #60]	; (8003974 <xTaskIncrementTick+0x174>)
 8003936:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003938:	4b0f      	ldr	r3, [pc, #60]	; (8003978 <xTaskIncrementTick+0x178>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003940:	2301      	movs	r3, #1
 8003942:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003944:	697b      	ldr	r3, [r7, #20]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	20000be0 	.word	0x20000be0
 8003954:	20000bbc 	.word	0x20000bbc
 8003958:	20000b70 	.word	0x20000b70
 800395c:	20000b74 	.word	0x20000b74
 8003960:	20000bd0 	.word	0x20000bd0
 8003964:	20000bd8 	.word	0x20000bd8
 8003968:	20000bc0 	.word	0x20000bc0
 800396c:	200006e8 	.word	0x200006e8
 8003970:	200006e4 	.word	0x200006e4
 8003974:	20000bc8 	.word	0x20000bc8
 8003978:	20000bcc 	.word	0x20000bcc

0800397c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003982:	4b27      	ldr	r3, [pc, #156]	; (8003a20 <vTaskSwitchContext+0xa4>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800398a:	4b26      	ldr	r3, [pc, #152]	; (8003a24 <vTaskSwitchContext+0xa8>)
 800398c:	2201      	movs	r2, #1
 800398e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003990:	e040      	b.n	8003a14 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003992:	4b24      	ldr	r3, [pc, #144]	; (8003a24 <vTaskSwitchContext+0xa8>)
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003998:	4b23      	ldr	r3, [pc, #140]	; (8003a28 <vTaskSwitchContext+0xac>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	e00f      	b.n	80039c0 <vTaskSwitchContext+0x44>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d109      	bne.n	80039ba <vTaskSwitchContext+0x3e>
 80039a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039aa:	f383 8811 	msr	BASEPRI, r3
 80039ae:	f3bf 8f6f 	isb	sy
 80039b2:	f3bf 8f4f 	dsb	sy
 80039b6:	607b      	str	r3, [r7, #4]
 80039b8:	e7fe      	b.n	80039b8 <vTaskSwitchContext+0x3c>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	3b01      	subs	r3, #1
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	491a      	ldr	r1, [pc, #104]	; (8003a2c <vTaskSwitchContext+0xb0>)
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	4613      	mov	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0e5      	beq.n	80039a0 <vTaskSwitchContext+0x24>
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	4613      	mov	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4a13      	ldr	r2, [pc, #76]	; (8003a2c <vTaskSwitchContext+0xb0>)
 80039e0:	4413      	add	r3, r2
 80039e2:	60bb      	str	r3, [r7, #8]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	605a      	str	r2, [r3, #4]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	3308      	adds	r3, #8
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d104      	bne.n	8003a04 <vTaskSwitchContext+0x88>
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	605a      	str	r2, [r3, #4]
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	4a09      	ldr	r2, [pc, #36]	; (8003a30 <vTaskSwitchContext+0xb4>)
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	4a06      	ldr	r2, [pc, #24]	; (8003a28 <vTaskSwitchContext+0xac>)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6013      	str	r3, [r2, #0]
}
 8003a14:	bf00      	nop
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	20000be0 	.word	0x20000be0
 8003a24:	20000bcc 	.word	0x20000bcc
 8003a28:	20000bc0 	.word	0x20000bc0
 8003a2c:	200006e8 	.word	0x200006e8
 8003a30:	200006e4 	.word	0x200006e4

08003a34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d109      	bne.n	8003a58 <vTaskPlaceOnEventList+0x24>
 8003a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a48:	f383 8811 	msr	BASEPRI, r3
 8003a4c:	f3bf 8f6f 	isb	sy
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	e7fe      	b.n	8003a56 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a58:	4b07      	ldr	r3, [pc, #28]	; (8003a78 <vTaskPlaceOnEventList+0x44>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3318      	adds	r3, #24
 8003a5e:	4619      	mov	r1, r3
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7fe feb0 	bl	80027c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a66:	2101      	movs	r1, #1
 8003a68:	6838      	ldr	r0, [r7, #0]
 8003a6a:	f000 fa77 	bl	8003f5c <prvAddCurrentTaskToDelayedList>
}
 8003a6e:	bf00      	nop
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	200006e4 	.word	0x200006e4

08003a7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d109      	bne.n	8003aa2 <vTaskPlaceOnEventListRestricted+0x26>
 8003a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a92:	f383 8811 	msr	BASEPRI, r3
 8003a96:	f3bf 8f6f 	isb	sy
 8003a9a:	f3bf 8f4f 	dsb	sy
 8003a9e:	617b      	str	r3, [r7, #20]
 8003aa0:	e7fe      	b.n	8003aa0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003aa2:	4b0a      	ldr	r3, [pc, #40]	; (8003acc <vTaskPlaceOnEventListRestricted+0x50>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3318      	adds	r3, #24
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f7fe fe67 	bl	800277e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8003ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	68b8      	ldr	r0, [r7, #8]
 8003ac0:	f000 fa4c 	bl	8003f5c <prvAddCurrentTaskToDelayedList>
	}
 8003ac4:	bf00      	nop
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	200006e4 	.word	0x200006e4

08003ad0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d109      	bne.n	8003afa <xTaskRemoveFromEventList+0x2a>
 8003ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aea:	f383 8811 	msr	BASEPRI, r3
 8003aee:	f3bf 8f6f 	isb	sy
 8003af2:	f3bf 8f4f 	dsb	sy
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	e7fe      	b.n	8003af8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	3318      	adds	r3, #24
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fe fe9a 	bl	8002838 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b04:	4b1d      	ldr	r3, [pc, #116]	; (8003b7c <xTaskRemoveFromEventList+0xac>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d11d      	bne.n	8003b48 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	3304      	adds	r3, #4
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fe fe91 	bl	8002838 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b1a:	4b19      	ldr	r3, [pc, #100]	; (8003b80 <xTaskRemoveFromEventList+0xb0>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d903      	bls.n	8003b2a <xTaskRemoveFromEventList+0x5a>
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b26:	4a16      	ldr	r2, [pc, #88]	; (8003b80 <xTaskRemoveFromEventList+0xb0>)
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b2e:	4613      	mov	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4413      	add	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4a13      	ldr	r2, [pc, #76]	; (8003b84 <xTaskRemoveFromEventList+0xb4>)
 8003b38:	441a      	add	r2, r3
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4610      	mov	r0, r2
 8003b42:	f7fe fe1c 	bl	800277e <vListInsertEnd>
 8003b46:	e005      	b.n	8003b54 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	3318      	adds	r3, #24
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	480e      	ldr	r0, [pc, #56]	; (8003b88 <xTaskRemoveFromEventList+0xb8>)
 8003b50:	f7fe fe15 	bl	800277e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b58:	4b0c      	ldr	r3, [pc, #48]	; (8003b8c <xTaskRemoveFromEventList+0xbc>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d905      	bls.n	8003b6e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003b62:	2301      	movs	r3, #1
 8003b64:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003b66:	4b0a      	ldr	r3, [pc, #40]	; (8003b90 <xTaskRemoveFromEventList+0xc0>)
 8003b68:	2201      	movs	r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	e001      	b.n	8003b72 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003b72:	697b      	ldr	r3, [r7, #20]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3718      	adds	r7, #24
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	20000be0 	.word	0x20000be0
 8003b80:	20000bc0 	.word	0x20000bc0
 8003b84:	200006e8 	.word	0x200006e8
 8003b88:	20000b78 	.word	0x20000b78
 8003b8c:	200006e4 	.word	0x200006e4
 8003b90:	20000bcc 	.word	0x20000bcc

08003b94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b9c:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <vTaskInternalSetTimeOutState+0x24>)
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ba4:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <vTaskInternalSetTimeOutState+0x28>)
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	605a      	str	r2, [r3, #4]
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	20000bd0 	.word	0x20000bd0
 8003bbc:	20000bbc 	.word	0x20000bbc

08003bc0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b088      	sub	sp, #32
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d109      	bne.n	8003be4 <xTaskCheckForTimeOut+0x24>
 8003bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd4:	f383 8811 	msr	BASEPRI, r3
 8003bd8:	f3bf 8f6f 	isb	sy
 8003bdc:	f3bf 8f4f 	dsb	sy
 8003be0:	613b      	str	r3, [r7, #16]
 8003be2:	e7fe      	b.n	8003be2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d109      	bne.n	8003bfe <xTaskCheckForTimeOut+0x3e>
 8003bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bee:	f383 8811 	msr	BASEPRI, r3
 8003bf2:	f3bf 8f6f 	isb	sy
 8003bf6:	f3bf 8f4f 	dsb	sy
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	e7fe      	b.n	8003bfc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003bfe:	f000 fe35 	bl	800486c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003c02:	4b1d      	ldr	r3, [pc, #116]	; (8003c78 <xTaskCheckForTimeOut+0xb8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1a:	d102      	bne.n	8003c22 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	61fb      	str	r3, [r7, #28]
 8003c20:	e023      	b.n	8003c6a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	4b15      	ldr	r3, [pc, #84]	; (8003c7c <xTaskCheckForTimeOut+0xbc>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d007      	beq.n	8003c3e <xTaskCheckForTimeOut+0x7e>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d302      	bcc.n	8003c3e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	61fb      	str	r3, [r7, #28]
 8003c3c:	e015      	b.n	8003c6a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d20b      	bcs.n	8003c60 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	1ad2      	subs	r2, r2, r3
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7ff ff9d 	bl	8003b94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61fb      	str	r3, [r7, #28]
 8003c5e:	e004      	b.n	8003c6a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	2200      	movs	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003c66:	2301      	movs	r3, #1
 8003c68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003c6a:	f000 fe2d 	bl	80048c8 <vPortExitCritical>

	return xReturn;
 8003c6e:	69fb      	ldr	r3, [r7, #28]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3720      	adds	r7, #32
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	20000bbc 	.word	0x20000bbc
 8003c7c:	20000bd0 	.word	0x20000bd0

08003c80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003c84:	4b03      	ldr	r3, [pc, #12]	; (8003c94 <vTaskMissedYield+0x14>)
 8003c86:	2201      	movs	r2, #1
 8003c88:	601a      	str	r2, [r3, #0]
}
 8003c8a:	bf00      	nop
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	20000bcc 	.word	0x20000bcc

08003c98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ca0:	f000 f852 	bl	8003d48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ca4:	4b06      	ldr	r3, [pc, #24]	; (8003cc0 <prvIdleTask+0x28>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d9f9      	bls.n	8003ca0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003cac:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <prvIdleTask+0x2c>)
 8003cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	f3bf 8f4f 	dsb	sy
 8003cb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003cbc:	e7f0      	b.n	8003ca0 <prvIdleTask+0x8>
 8003cbe:	bf00      	nop
 8003cc0:	200006e8 	.word	0x200006e8
 8003cc4:	e000ed04 	.word	0xe000ed04

08003cc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003cce:	2300      	movs	r3, #0
 8003cd0:	607b      	str	r3, [r7, #4]
 8003cd2:	e00c      	b.n	8003cee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4a12      	ldr	r2, [pc, #72]	; (8003d28 <prvInitialiseTaskLists+0x60>)
 8003ce0:	4413      	add	r3, r2
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fe fd1e 	bl	8002724 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3301      	adds	r3, #1
 8003cec:	607b      	str	r3, [r7, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b37      	cmp	r3, #55	; 0x37
 8003cf2:	d9ef      	bls.n	8003cd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003cf4:	480d      	ldr	r0, [pc, #52]	; (8003d2c <prvInitialiseTaskLists+0x64>)
 8003cf6:	f7fe fd15 	bl	8002724 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003cfa:	480d      	ldr	r0, [pc, #52]	; (8003d30 <prvInitialiseTaskLists+0x68>)
 8003cfc:	f7fe fd12 	bl	8002724 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d00:	480c      	ldr	r0, [pc, #48]	; (8003d34 <prvInitialiseTaskLists+0x6c>)
 8003d02:	f7fe fd0f 	bl	8002724 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d06:	480c      	ldr	r0, [pc, #48]	; (8003d38 <prvInitialiseTaskLists+0x70>)
 8003d08:	f7fe fd0c 	bl	8002724 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d0c:	480b      	ldr	r0, [pc, #44]	; (8003d3c <prvInitialiseTaskLists+0x74>)
 8003d0e:	f7fe fd09 	bl	8002724 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d12:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <prvInitialiseTaskLists+0x78>)
 8003d14:	4a05      	ldr	r2, [pc, #20]	; (8003d2c <prvInitialiseTaskLists+0x64>)
 8003d16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d18:	4b0a      	ldr	r3, [pc, #40]	; (8003d44 <prvInitialiseTaskLists+0x7c>)
 8003d1a:	4a05      	ldr	r2, [pc, #20]	; (8003d30 <prvInitialiseTaskLists+0x68>)
 8003d1c:	601a      	str	r2, [r3, #0]
}
 8003d1e:	bf00      	nop
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	200006e8 	.word	0x200006e8
 8003d2c:	20000b48 	.word	0x20000b48
 8003d30:	20000b5c 	.word	0x20000b5c
 8003d34:	20000b78 	.word	0x20000b78
 8003d38:	20000b8c 	.word	0x20000b8c
 8003d3c:	20000ba4 	.word	0x20000ba4
 8003d40:	20000b70 	.word	0x20000b70
 8003d44:	20000b74 	.word	0x20000b74

08003d48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d4e:	e019      	b.n	8003d84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003d50:	f000 fd8c 	bl	800486c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003d54:	4b0f      	ldr	r3, [pc, #60]	; (8003d94 <prvCheckTasksWaitingTermination+0x4c>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3304      	adds	r3, #4
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fe fd69 	bl	8002838 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003d66:	4b0c      	ldr	r3, [pc, #48]	; (8003d98 <prvCheckTasksWaitingTermination+0x50>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	4a0a      	ldr	r2, [pc, #40]	; (8003d98 <prvCheckTasksWaitingTermination+0x50>)
 8003d6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d70:	4b0a      	ldr	r3, [pc, #40]	; (8003d9c <prvCheckTasksWaitingTermination+0x54>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	3b01      	subs	r3, #1
 8003d76:	4a09      	ldr	r2, [pc, #36]	; (8003d9c <prvCheckTasksWaitingTermination+0x54>)
 8003d78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003d7a:	f000 fda5 	bl	80048c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f80e 	bl	8003da0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d84:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <prvCheckTasksWaitingTermination+0x54>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1e1      	bne.n	8003d50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d8c:	bf00      	nop
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	20000b8c 	.word	0x20000b8c
 8003d98:	20000bb8 	.word	0x20000bb8
 8003d9c:	20000ba0 	.word	0x20000ba0

08003da0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d108      	bne.n	8003dc4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 ff34 	bl	8004c24 <vPortFree>
				vPortFree( pxTCB );
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 ff31 	bl	8004c24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003dc2:	e017      	b.n	8003df4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d103      	bne.n	8003dd6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 ff28 	bl	8004c24 <vPortFree>
	}
 8003dd4:	e00e      	b.n	8003df4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d009      	beq.n	8003df4 <prvDeleteTCB+0x54>
 8003de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de4:	f383 8811 	msr	BASEPRI, r3
 8003de8:	f3bf 8f6f 	isb	sy
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	60fb      	str	r3, [r7, #12]
 8003df2:	e7fe      	b.n	8003df2 <prvDeleteTCB+0x52>
	}
 8003df4:	bf00      	nop
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e02:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <prvResetNextTaskUnblockTime+0x44>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <prvResetNextTaskUnblockTime+0x14>
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e000      	b.n	8003e12 <prvResetNextTaskUnblockTime+0x16>
 8003e10:	2300      	movs	r3, #0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d004      	beq.n	8003e20 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e16:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <prvResetNextTaskUnblockTime+0x48>)
 8003e18:	f04f 32ff 	mov.w	r2, #4294967295
 8003e1c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e1e:	e008      	b.n	8003e32 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e20:	4b07      	ldr	r3, [pc, #28]	; (8003e40 <prvResetNextTaskUnblockTime+0x44>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	4a05      	ldr	r2, [pc, #20]	; (8003e44 <prvResetNextTaskUnblockTime+0x48>)
 8003e30:	6013      	str	r3, [r2, #0]
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	20000b70 	.word	0x20000b70
 8003e44:	20000bd8 	.word	0x20000bd8

08003e48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003e4e:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <xTaskGetSchedulerState+0x34>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d102      	bne.n	8003e5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003e56:	2301      	movs	r3, #1
 8003e58:	607b      	str	r3, [r7, #4]
 8003e5a:	e008      	b.n	8003e6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e5c:	4b08      	ldr	r3, [pc, #32]	; (8003e80 <xTaskGetSchedulerState+0x38>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d102      	bne.n	8003e6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003e64:	2302      	movs	r3, #2
 8003e66:	607b      	str	r3, [r7, #4]
 8003e68:	e001      	b.n	8003e6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003e6e:	687b      	ldr	r3, [r7, #4]
	}
 8003e70:	4618      	mov	r0, r3
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	20000bc4 	.word	0x20000bc4
 8003e80:	20000be0 	.word	0x20000be0

08003e84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003e90:	2300      	movs	r3, #0
 8003e92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d054      	beq.n	8003f44 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003e9a:	4b2d      	ldr	r3, [pc, #180]	; (8003f50 <xTaskPriorityDisinherit+0xcc>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d009      	beq.n	8003eb8 <xTaskPriorityDisinherit+0x34>
 8003ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea8:	f383 8811 	msr	BASEPRI, r3
 8003eac:	f3bf 8f6f 	isb	sy
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	e7fe      	b.n	8003eb6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d109      	bne.n	8003ed4 <xTaskPriorityDisinherit+0x50>
 8003ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec4:	f383 8811 	msr	BASEPRI, r3
 8003ec8:	f3bf 8f6f 	isb	sy
 8003ecc:	f3bf 8f4f 	dsb	sy
 8003ed0:	60bb      	str	r3, [r7, #8]
 8003ed2:	e7fe      	b.n	8003ed2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ed8:	1e5a      	subs	r2, r3, #1
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d02c      	beq.n	8003f44 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d128      	bne.n	8003f44 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fe fc9e 	bl	8002838 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f14:	4b0f      	ldr	r3, [pc, #60]	; (8003f54 <xTaskPriorityDisinherit+0xd0>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d903      	bls.n	8003f24 <xTaskPriorityDisinherit+0xa0>
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f20:	4a0c      	ldr	r2, [pc, #48]	; (8003f54 <xTaskPriorityDisinherit+0xd0>)
 8003f22:	6013      	str	r3, [r2, #0]
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f28:	4613      	mov	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4a09      	ldr	r2, [pc, #36]	; (8003f58 <xTaskPriorityDisinherit+0xd4>)
 8003f32:	441a      	add	r2, r3
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	3304      	adds	r3, #4
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4610      	mov	r0, r2
 8003f3c:	f7fe fc1f 	bl	800277e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003f40:	2301      	movs	r3, #1
 8003f42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003f44:	697b      	ldr	r3, [r7, #20]
	}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3718      	adds	r7, #24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	200006e4 	.word	0x200006e4
 8003f54:	20000bc0 	.word	0x20000bc0
 8003f58:	200006e8 	.word	0x200006e8

08003f5c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f66:	4b21      	ldr	r3, [pc, #132]	; (8003fec <prvAddCurrentTaskToDelayedList+0x90>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f6c:	4b20      	ldr	r3, [pc, #128]	; (8003ff0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3304      	adds	r3, #4
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fe fc60 	bl	8002838 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7e:	d10a      	bne.n	8003f96 <prvAddCurrentTaskToDelayedList+0x3a>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d007      	beq.n	8003f96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f86:	4b1a      	ldr	r3, [pc, #104]	; (8003ff0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3304      	adds	r3, #4
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	4819      	ldr	r0, [pc, #100]	; (8003ff4 <prvAddCurrentTaskToDelayedList+0x98>)
 8003f90:	f7fe fbf5 	bl	800277e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f94:	e026      	b.n	8003fe4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f9e:	4b14      	ldr	r3, [pc, #80]	; (8003ff0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d209      	bcs.n	8003fc2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fae:	4b12      	ldr	r3, [pc, #72]	; (8003ff8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	4b0f      	ldr	r3, [pc, #60]	; (8003ff0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4610      	mov	r0, r2
 8003fbc:	f7fe fc03 	bl	80027c6 <vListInsert>
}
 8003fc0:	e010      	b.n	8003fe4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fc2:	4b0e      	ldr	r3, [pc, #56]	; (8003ffc <prvAddCurrentTaskToDelayedList+0xa0>)
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	4b0a      	ldr	r3, [pc, #40]	; (8003ff0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3304      	adds	r3, #4
 8003fcc:	4619      	mov	r1, r3
 8003fce:	4610      	mov	r0, r2
 8003fd0:	f7fe fbf9 	bl	80027c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003fd4:	4b0a      	ldr	r3, [pc, #40]	; (8004000 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d202      	bcs.n	8003fe4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003fde:	4a08      	ldr	r2, [pc, #32]	; (8004000 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	6013      	str	r3, [r2, #0]
}
 8003fe4:	bf00      	nop
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	20000bbc 	.word	0x20000bbc
 8003ff0:	200006e4 	.word	0x200006e4
 8003ff4:	20000ba4 	.word	0x20000ba4
 8003ff8:	20000b74 	.word	0x20000b74
 8003ffc:	20000b70 	.word	0x20000b70
 8004000:	20000bd8 	.word	0x20000bd8

08004004 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b08a      	sub	sp, #40	; 0x28
 8004008:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800400a:	2300      	movs	r3, #0
 800400c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800400e:	f000 fac3 	bl	8004598 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004012:	4b1c      	ldr	r3, [pc, #112]	; (8004084 <xTimerCreateTimerTask+0x80>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d021      	beq.n	800405e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800401a:	2300      	movs	r3, #0
 800401c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800401e:	2300      	movs	r3, #0
 8004020:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004022:	1d3a      	adds	r2, r7, #4
 8004024:	f107 0108 	add.w	r1, r7, #8
 8004028:	f107 030c 	add.w	r3, r7, #12
 800402c:	4618      	mov	r0, r3
 800402e:	f7fe fb5f 	bl	80026f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004032:	6879      	ldr	r1, [r7, #4]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	9202      	str	r2, [sp, #8]
 800403a:	9301      	str	r3, [sp, #4]
 800403c:	2302      	movs	r3, #2
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	2300      	movs	r3, #0
 8004042:	460a      	mov	r2, r1
 8004044:	4910      	ldr	r1, [pc, #64]	; (8004088 <xTimerCreateTimerTask+0x84>)
 8004046:	4811      	ldr	r0, [pc, #68]	; (800408c <xTimerCreateTimerTask+0x88>)
 8004048:	f7ff f8f4 	bl	8003234 <xTaskCreateStatic>
 800404c:	4602      	mov	r2, r0
 800404e:	4b10      	ldr	r3, [pc, #64]	; (8004090 <xTimerCreateTimerTask+0x8c>)
 8004050:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004052:	4b0f      	ldr	r3, [pc, #60]	; (8004090 <xTimerCreateTimerTask+0x8c>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800405a:	2301      	movs	r3, #1
 800405c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d109      	bne.n	8004078 <xTimerCreateTimerTask+0x74>
 8004064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	613b      	str	r3, [r7, #16]
 8004076:	e7fe      	b.n	8004076 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004078:	697b      	ldr	r3, [r7, #20]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3718      	adds	r7, #24
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	20000c14 	.word	0x20000c14
 8004088:	08004f14 	.word	0x08004f14
 800408c:	080041ad 	.word	0x080041ad
 8004090:	20000c18 	.word	0x20000c18

08004094 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b08a      	sub	sp, #40	; 0x28
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
 80040a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80040a2:	2300      	movs	r3, #0
 80040a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d109      	bne.n	80040c0 <xTimerGenericCommand+0x2c>
 80040ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b0:	f383 8811 	msr	BASEPRI, r3
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	623b      	str	r3, [r7, #32]
 80040be:	e7fe      	b.n	80040be <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80040c0:	4b19      	ldr	r3, [pc, #100]	; (8004128 <xTimerGenericCommand+0x94>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d02a      	beq.n	800411e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	2b05      	cmp	r3, #5
 80040d8:	dc18      	bgt.n	800410c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80040da:	f7ff feb5 	bl	8003e48 <xTaskGetSchedulerState>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d109      	bne.n	80040f8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80040e4:	4b10      	ldr	r3, [pc, #64]	; (8004128 <xTimerGenericCommand+0x94>)
 80040e6:	6818      	ldr	r0, [r3, #0]
 80040e8:	f107 0110 	add.w	r1, r7, #16
 80040ec:	2300      	movs	r3, #0
 80040ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040f0:	f7fe fcca 	bl	8002a88 <xQueueGenericSend>
 80040f4:	6278      	str	r0, [r7, #36]	; 0x24
 80040f6:	e012      	b.n	800411e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80040f8:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <xTimerGenericCommand+0x94>)
 80040fa:	6818      	ldr	r0, [r3, #0]
 80040fc:	f107 0110 	add.w	r1, r7, #16
 8004100:	2300      	movs	r3, #0
 8004102:	2200      	movs	r2, #0
 8004104:	f7fe fcc0 	bl	8002a88 <xQueueGenericSend>
 8004108:	6278      	str	r0, [r7, #36]	; 0x24
 800410a:	e008      	b.n	800411e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800410c:	4b06      	ldr	r3, [pc, #24]	; (8004128 <xTimerGenericCommand+0x94>)
 800410e:	6818      	ldr	r0, [r3, #0]
 8004110:	f107 0110 	add.w	r1, r7, #16
 8004114:	2300      	movs	r3, #0
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	f7fe fdb0 	bl	8002c7c <xQueueGenericSendFromISR>
 800411c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004120:	4618      	mov	r0, r3
 8004122:	3728      	adds	r7, #40	; 0x28
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	20000c14 	.word	0x20000c14

0800412c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af02      	add	r7, sp, #8
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004136:	4b1c      	ldr	r3, [pc, #112]	; (80041a8 <prvProcessExpiredTimer+0x7c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	3304      	adds	r3, #4
 8004144:	4618      	mov	r0, r3
 8004146:	f7fe fb77 	bl	8002838 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d121      	bne.n	8004196 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	699a      	ldr	r2, [r3, #24]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	18d1      	adds	r1, r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	6978      	ldr	r0, [r7, #20]
 8004160:	f000 f8c8 	bl	80042f4 <prvInsertTimerInActiveList>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d015      	beq.n	8004196 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800416a:	2300      	movs	r3, #0
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	2300      	movs	r3, #0
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	2100      	movs	r1, #0
 8004174:	6978      	ldr	r0, [r7, #20]
 8004176:	f7ff ff8d 	bl	8004094 <xTimerGenericCommand>
 800417a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d109      	bne.n	8004196 <prvProcessExpiredTimer+0x6a>
 8004182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	e7fe      	b.n	8004194 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	6978      	ldr	r0, [r7, #20]
 800419c:	4798      	blx	r3
}
 800419e:	bf00      	nop
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	20000c0c 	.word	0x20000c0c

080041ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041b4:	f107 0308 	add.w	r3, r7, #8
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 f857 	bl	800426c <prvGetNextExpireTime>
 80041be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	4619      	mov	r1, r3
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f803 	bl	80041d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80041ca:	f000 f8d5 	bl	8004378 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041ce:	e7f1      	b.n	80041b4 <prvTimerTask+0x8>

080041d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80041da:	f7ff fa57 	bl	800368c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041de:	f107 0308 	add.w	r3, r7, #8
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 f866 	bl	80042b4 <prvSampleTimeNow>
 80041e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d130      	bne.n	8004252 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10a      	bne.n	800420c <prvProcessTimerOrBlockTask+0x3c>
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d806      	bhi.n	800420c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80041fe:	f7ff fa53 	bl	80036a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004202:	68f9      	ldr	r1, [r7, #12]
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff ff91 	bl	800412c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800420a:	e024      	b.n	8004256 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d008      	beq.n	8004224 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004212:	4b13      	ldr	r3, [pc, #76]	; (8004260 <prvProcessTimerOrBlockTask+0x90>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	bf0c      	ite	eq
 800421c:	2301      	moveq	r3, #1
 800421e:	2300      	movne	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004224:	4b0f      	ldr	r3, [pc, #60]	; (8004264 <prvProcessTimerOrBlockTask+0x94>)
 8004226:	6818      	ldr	r0, [r3, #0]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	4619      	mov	r1, r3
 8004232:	f7fe ffcb 	bl	80031cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004236:	f7ff fa37 	bl	80036a8 <xTaskResumeAll>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10a      	bne.n	8004256 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004240:	4b09      	ldr	r3, [pc, #36]	; (8004268 <prvProcessTimerOrBlockTask+0x98>)
 8004242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	f3bf 8f6f 	isb	sy
}
 8004250:	e001      	b.n	8004256 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004252:	f7ff fa29 	bl	80036a8 <xTaskResumeAll>
}
 8004256:	bf00      	nop
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	20000c10 	.word	0x20000c10
 8004264:	20000c14 	.word	0x20000c14
 8004268:	e000ed04 	.word	0xe000ed04

0800426c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004274:	4b0e      	ldr	r3, [pc, #56]	; (80042b0 <prvGetNextExpireTime+0x44>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	bf0c      	ite	eq
 800427e:	2301      	moveq	r3, #1
 8004280:	2300      	movne	r3, #0
 8004282:	b2db      	uxtb	r3, r3
 8004284:	461a      	mov	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d105      	bne.n	800429e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004292:	4b07      	ldr	r3, [pc, #28]	; (80042b0 <prvGetNextExpireTime+0x44>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	e001      	b.n	80042a2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80042a2:	68fb      	ldr	r3, [r7, #12]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3714      	adds	r7, #20
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	20000c0c 	.word	0x20000c0c

080042b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80042bc:	f7ff fa90 	bl	80037e0 <xTaskGetTickCount>
 80042c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80042c2:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <prvSampleTimeNow+0x3c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d205      	bcs.n	80042d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80042cc:	f000 f904 	bl	80044d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	e002      	b.n	80042de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80042de:	4a04      	ldr	r2, [pc, #16]	; (80042f0 <prvSampleTimeNow+0x3c>)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80042e4:	68fb      	ldr	r3, [r7, #12]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	20000c1c 	.word	0x20000c1c

080042f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004302:	2300      	movs	r3, #0
 8004304:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	429a      	cmp	r2, r3
 8004318:	d812      	bhi.n	8004340 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	1ad2      	subs	r2, r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	429a      	cmp	r2, r3
 8004326:	d302      	bcc.n	800432e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004328:	2301      	movs	r3, #1
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	e01b      	b.n	8004366 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800432e:	4b10      	ldr	r3, [pc, #64]	; (8004370 <prvInsertTimerInActiveList+0x7c>)
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	3304      	adds	r3, #4
 8004336:	4619      	mov	r1, r3
 8004338:	4610      	mov	r0, r2
 800433a:	f7fe fa44 	bl	80027c6 <vListInsert>
 800433e:	e012      	b.n	8004366 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	429a      	cmp	r2, r3
 8004346:	d206      	bcs.n	8004356 <prvInsertTimerInActiveList+0x62>
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d302      	bcc.n	8004356 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004350:	2301      	movs	r3, #1
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	e007      	b.n	8004366 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004356:	4b07      	ldr	r3, [pc, #28]	; (8004374 <prvInsertTimerInActiveList+0x80>)
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	3304      	adds	r3, #4
 800435e:	4619      	mov	r1, r3
 8004360:	4610      	mov	r0, r2
 8004362:	f7fe fa30 	bl	80027c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004366:	697b      	ldr	r3, [r7, #20]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	20000c10 	.word	0x20000c10
 8004374:	20000c0c 	.word	0x20000c0c

08004378 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b08e      	sub	sp, #56	; 0x38
 800437c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800437e:	e099      	b.n	80044b4 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	da17      	bge.n	80043b6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004386:	1d3b      	adds	r3, r7, #4
 8004388:	3304      	adds	r3, #4
 800438a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800438c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438e:	2b00      	cmp	r3, #0
 8004390:	d109      	bne.n	80043a6 <prvProcessReceivedCommands+0x2e>
 8004392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004396:	f383 8811 	msr	BASEPRI, r3
 800439a:	f3bf 8f6f 	isb	sy
 800439e:	f3bf 8f4f 	dsb	sy
 80043a2:	61fb      	str	r3, [r7, #28]
 80043a4:	e7fe      	b.n	80043a4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80043a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043ac:	6850      	ldr	r0, [r2, #4]
 80043ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043b0:	6892      	ldr	r2, [r2, #8]
 80043b2:	4611      	mov	r1, r2
 80043b4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	db7a      	blt.n	80044b2 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80043c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d004      	beq.n	80043d2 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ca:	3304      	adds	r3, #4
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7fe fa33 	bl	8002838 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80043d2:	463b      	mov	r3, r7
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7ff ff6d 	bl	80042b4 <prvSampleTimeNow>
 80043da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b09      	cmp	r3, #9
 80043e0:	d868      	bhi.n	80044b4 <prvProcessReceivedCommands+0x13c>
 80043e2:	a201      	add	r2, pc, #4	; (adr r2, 80043e8 <prvProcessReceivedCommands+0x70>)
 80043e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e8:	08004411 	.word	0x08004411
 80043ec:	08004411 	.word	0x08004411
 80043f0:	08004411 	.word	0x08004411
 80043f4:	080044b5 	.word	0x080044b5
 80043f8:	0800446b 	.word	0x0800446b
 80043fc:	080044a1 	.word	0x080044a1
 8004400:	08004411 	.word	0x08004411
 8004404:	08004411 	.word	0x08004411
 8004408:	080044b5 	.word	0x080044b5
 800440c:	0800446b 	.word	0x0800446b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	18d1      	adds	r1, r2, r3
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800441c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800441e:	f7ff ff69 	bl	80042f4 <prvInsertTimerInActiveList>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d045      	beq.n	80044b4 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800442e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004432:	69db      	ldr	r3, [r3, #28]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d13d      	bne.n	80044b4 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	441a      	add	r2, r3
 8004440:	2300      	movs	r3, #0
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	2300      	movs	r3, #0
 8004446:	2100      	movs	r1, #0
 8004448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800444a:	f7ff fe23 	bl	8004094 <xTimerGenericCommand>
 800444e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d12e      	bne.n	80044b4 <prvProcessReceivedCommands+0x13c>
 8004456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445a:	f383 8811 	msr	BASEPRI, r3
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	61bb      	str	r3, [r7, #24]
 8004468:	e7fe      	b.n	8004468 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d109      	bne.n	800448c <prvProcessReceivedCommands+0x114>
 8004478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	e7fe      	b.n	800448a <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800448c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448e:	699a      	ldr	r2, [r3, #24]
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	18d1      	adds	r1, r2, r3
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004498:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800449a:	f7ff ff2b 	bl	80042f4 <prvInsertTimerInActiveList>
					break;
 800449e:	e009      	b.n	80044b4 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80044a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d104      	bne.n	80044b4 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80044aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044ac:	f000 fbba 	bl	8004c24 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80044b0:	e000      	b.n	80044b4 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80044b2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80044b4:	4b07      	ldr	r3, [pc, #28]	; (80044d4 <prvProcessReceivedCommands+0x15c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	1d39      	adds	r1, r7, #4
 80044ba:	2200      	movs	r2, #0
 80044bc:	4618      	mov	r0, r3
 80044be:	f7fe fc71 	bl	8002da4 <xQueueReceive>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f47f af5b 	bne.w	8004380 <prvProcessReceivedCommands+0x8>
	}
}
 80044ca:	bf00      	nop
 80044cc:	3730      	adds	r7, #48	; 0x30
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	20000c14 	.word	0x20000c14

080044d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044de:	e044      	b.n	800456a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80044e0:	4b2b      	ldr	r3, [pc, #172]	; (8004590 <prvSwitchTimerLists+0xb8>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80044ea:	4b29      	ldr	r3, [pc, #164]	; (8004590 <prvSwitchTimerLists+0xb8>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	3304      	adds	r3, #4
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7fe f99d 	bl	8002838 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d12d      	bne.n	800456a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	4413      	add	r3, r2
 8004516:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	429a      	cmp	r2, r3
 800451e:	d90e      	bls.n	800453e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800452c:	4b18      	ldr	r3, [pc, #96]	; (8004590 <prvSwitchTimerLists+0xb8>)
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	3304      	adds	r3, #4
 8004534:	4619      	mov	r1, r3
 8004536:	4610      	mov	r0, r2
 8004538:	f7fe f945 	bl	80027c6 <vListInsert>
 800453c:	e015      	b.n	800456a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800453e:	2300      	movs	r3, #0
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	2300      	movs	r3, #0
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	2100      	movs	r1, #0
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f7ff fda3 	bl	8004094 <xTimerGenericCommand>
 800454e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d109      	bne.n	800456a <prvSwitchTimerLists+0x92>
 8004556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455a:	f383 8811 	msr	BASEPRI, r3
 800455e:	f3bf 8f6f 	isb	sy
 8004562:	f3bf 8f4f 	dsb	sy
 8004566:	603b      	str	r3, [r7, #0]
 8004568:	e7fe      	b.n	8004568 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800456a:	4b09      	ldr	r3, [pc, #36]	; (8004590 <prvSwitchTimerLists+0xb8>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1b5      	bne.n	80044e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004574:	4b06      	ldr	r3, [pc, #24]	; (8004590 <prvSwitchTimerLists+0xb8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800457a:	4b06      	ldr	r3, [pc, #24]	; (8004594 <prvSwitchTimerLists+0xbc>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a04      	ldr	r2, [pc, #16]	; (8004590 <prvSwitchTimerLists+0xb8>)
 8004580:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004582:	4a04      	ldr	r2, [pc, #16]	; (8004594 <prvSwitchTimerLists+0xbc>)
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	6013      	str	r3, [r2, #0]
}
 8004588:	bf00      	nop
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	20000c0c 	.word	0x20000c0c
 8004594:	20000c10 	.word	0x20000c10

08004598 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800459e:	f000 f965 	bl	800486c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80045a2:	4b15      	ldr	r3, [pc, #84]	; (80045f8 <prvCheckForValidListAndQueue+0x60>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d120      	bne.n	80045ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80045aa:	4814      	ldr	r0, [pc, #80]	; (80045fc <prvCheckForValidListAndQueue+0x64>)
 80045ac:	f7fe f8ba 	bl	8002724 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80045b0:	4813      	ldr	r0, [pc, #76]	; (8004600 <prvCheckForValidListAndQueue+0x68>)
 80045b2:	f7fe f8b7 	bl	8002724 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80045b6:	4b13      	ldr	r3, [pc, #76]	; (8004604 <prvCheckForValidListAndQueue+0x6c>)
 80045b8:	4a10      	ldr	r2, [pc, #64]	; (80045fc <prvCheckForValidListAndQueue+0x64>)
 80045ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80045bc:	4b12      	ldr	r3, [pc, #72]	; (8004608 <prvCheckForValidListAndQueue+0x70>)
 80045be:	4a10      	ldr	r2, [pc, #64]	; (8004600 <prvCheckForValidListAndQueue+0x68>)
 80045c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80045c2:	2300      	movs	r3, #0
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	4b11      	ldr	r3, [pc, #68]	; (800460c <prvCheckForValidListAndQueue+0x74>)
 80045c8:	4a11      	ldr	r2, [pc, #68]	; (8004610 <prvCheckForValidListAndQueue+0x78>)
 80045ca:	2110      	movs	r1, #16
 80045cc:	200a      	movs	r0, #10
 80045ce:	f7fe f9c5 	bl	800295c <xQueueGenericCreateStatic>
 80045d2:	4602      	mov	r2, r0
 80045d4:	4b08      	ldr	r3, [pc, #32]	; (80045f8 <prvCheckForValidListAndQueue+0x60>)
 80045d6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80045d8:	4b07      	ldr	r3, [pc, #28]	; (80045f8 <prvCheckForValidListAndQueue+0x60>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d005      	beq.n	80045ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80045e0:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <prvCheckForValidListAndQueue+0x60>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	490b      	ldr	r1, [pc, #44]	; (8004614 <prvCheckForValidListAndQueue+0x7c>)
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fe fdc8 	bl	800317c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045ec:	f000 f96c 	bl	80048c8 <vPortExitCritical>
}
 80045f0:	bf00      	nop
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	20000c14 	.word	0x20000c14
 80045fc:	20000be4 	.word	0x20000be4
 8004600:	20000bf8 	.word	0x20000bf8
 8004604:	20000c0c 	.word	0x20000c0c
 8004608:	20000c10 	.word	0x20000c10
 800460c:	20000cc0 	.word	0x20000cc0
 8004610:	20000c20 	.word	0x20000c20
 8004614:	08004f1c 	.word	0x08004f1c

08004618 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	3b04      	subs	r3, #4
 8004628:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004630:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	3b04      	subs	r3, #4
 8004636:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f023 0201 	bic.w	r2, r3, #1
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	3b04      	subs	r3, #4
 8004646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004648:	4a0c      	ldr	r2, [pc, #48]	; (800467c <pxPortInitialiseStack+0x64>)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	3b14      	subs	r3, #20
 8004652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	3b04      	subs	r3, #4
 800465e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f06f 0202 	mvn.w	r2, #2
 8004666:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	3b20      	subs	r3, #32
 800466c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800466e:	68fb      	ldr	r3, [r7, #12]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	08004681 	.word	0x08004681

08004680 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004686:	2300      	movs	r3, #0
 8004688:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800468a:	4b11      	ldr	r3, [pc, #68]	; (80046d0 <prvTaskExitError+0x50>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004692:	d009      	beq.n	80046a8 <prvTaskExitError+0x28>
 8004694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004698:	f383 8811 	msr	BASEPRI, r3
 800469c:	f3bf 8f6f 	isb	sy
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	60fb      	str	r3, [r7, #12]
 80046a6:	e7fe      	b.n	80046a6 <prvTaskExitError+0x26>
 80046a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ac:	f383 8811 	msr	BASEPRI, r3
 80046b0:	f3bf 8f6f 	isb	sy
 80046b4:	f3bf 8f4f 	dsb	sy
 80046b8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80046ba:	bf00      	nop
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0fc      	beq.n	80046bc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80046c2:	bf00      	nop
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	20000008 	.word	0x20000008
	...

080046e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80046e0:	4b07      	ldr	r3, [pc, #28]	; (8004700 <pxCurrentTCBConst2>)
 80046e2:	6819      	ldr	r1, [r3, #0]
 80046e4:	6808      	ldr	r0, [r1, #0]
 80046e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ea:	f380 8809 	msr	PSP, r0
 80046ee:	f3bf 8f6f 	isb	sy
 80046f2:	f04f 0000 	mov.w	r0, #0
 80046f6:	f380 8811 	msr	BASEPRI, r0
 80046fa:	4770      	bx	lr
 80046fc:	f3af 8000 	nop.w

08004700 <pxCurrentTCBConst2>:
 8004700:	200006e4 	.word	0x200006e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004704:	bf00      	nop
 8004706:	bf00      	nop

08004708 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004708:	4808      	ldr	r0, [pc, #32]	; (800472c <prvPortStartFirstTask+0x24>)
 800470a:	6800      	ldr	r0, [r0, #0]
 800470c:	6800      	ldr	r0, [r0, #0]
 800470e:	f380 8808 	msr	MSP, r0
 8004712:	f04f 0000 	mov.w	r0, #0
 8004716:	f380 8814 	msr	CONTROL, r0
 800471a:	b662      	cpsie	i
 800471c:	b661      	cpsie	f
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	df00      	svc	0
 8004728:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800472a:	bf00      	nop
 800472c:	e000ed08 	.word	0xe000ed08

08004730 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004736:	4b44      	ldr	r3, [pc, #272]	; (8004848 <xPortStartScheduler+0x118>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a44      	ldr	r2, [pc, #272]	; (800484c <xPortStartScheduler+0x11c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d109      	bne.n	8004754 <xPortStartScheduler+0x24>
 8004740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004744:	f383 8811 	msr	BASEPRI, r3
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	613b      	str	r3, [r7, #16]
 8004752:	e7fe      	b.n	8004752 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004754:	4b3c      	ldr	r3, [pc, #240]	; (8004848 <xPortStartScheduler+0x118>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a3d      	ldr	r2, [pc, #244]	; (8004850 <xPortStartScheduler+0x120>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d109      	bne.n	8004772 <xPortStartScheduler+0x42>
 800475e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	e7fe      	b.n	8004770 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004772:	4b38      	ldr	r3, [pc, #224]	; (8004854 <xPortStartScheduler+0x124>)
 8004774:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	b2db      	uxtb	r3, r3
 800477c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	22ff      	movs	r2, #255	; 0xff
 8004782:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	b2db      	uxtb	r3, r3
 800478a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800478c:	78fb      	ldrb	r3, [r7, #3]
 800478e:	b2db      	uxtb	r3, r3
 8004790:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004794:	b2da      	uxtb	r2, r3
 8004796:	4b30      	ldr	r3, [pc, #192]	; (8004858 <xPortStartScheduler+0x128>)
 8004798:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800479a:	4b30      	ldr	r3, [pc, #192]	; (800485c <xPortStartScheduler+0x12c>)
 800479c:	2207      	movs	r2, #7
 800479e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047a0:	e009      	b.n	80047b6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80047a2:	4b2e      	ldr	r3, [pc, #184]	; (800485c <xPortStartScheduler+0x12c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	4a2c      	ldr	r2, [pc, #176]	; (800485c <xPortStartScheduler+0x12c>)
 80047aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047b6:	78fb      	ldrb	r3, [r7, #3]
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047be:	2b80      	cmp	r3, #128	; 0x80
 80047c0:	d0ef      	beq.n	80047a2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80047c2:	4b26      	ldr	r3, [pc, #152]	; (800485c <xPortStartScheduler+0x12c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f1c3 0307 	rsb	r3, r3, #7
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	d009      	beq.n	80047e2 <xPortStartScheduler+0xb2>
 80047ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	60bb      	str	r3, [r7, #8]
 80047e0:	e7fe      	b.n	80047e0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80047e2:	4b1e      	ldr	r3, [pc, #120]	; (800485c <xPortStartScheduler+0x12c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	021b      	lsls	r3, r3, #8
 80047e8:	4a1c      	ldr	r2, [pc, #112]	; (800485c <xPortStartScheduler+0x12c>)
 80047ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80047ec:	4b1b      	ldr	r3, [pc, #108]	; (800485c <xPortStartScheduler+0x12c>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047f4:	4a19      	ldr	r2, [pc, #100]	; (800485c <xPortStartScheduler+0x12c>)
 80047f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004800:	4b17      	ldr	r3, [pc, #92]	; (8004860 <xPortStartScheduler+0x130>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a16      	ldr	r2, [pc, #88]	; (8004860 <xPortStartScheduler+0x130>)
 8004806:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800480a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800480c:	4b14      	ldr	r3, [pc, #80]	; (8004860 <xPortStartScheduler+0x130>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a13      	ldr	r2, [pc, #76]	; (8004860 <xPortStartScheduler+0x130>)
 8004812:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004816:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004818:	f000 f8d6 	bl	80049c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800481c:	4b11      	ldr	r3, [pc, #68]	; (8004864 <xPortStartScheduler+0x134>)
 800481e:	2200      	movs	r2, #0
 8004820:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004822:	f000 f8f5 	bl	8004a10 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004826:	4b10      	ldr	r3, [pc, #64]	; (8004868 <xPortStartScheduler+0x138>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a0f      	ldr	r2, [pc, #60]	; (8004868 <xPortStartScheduler+0x138>)
 800482c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004830:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004832:	f7ff ff69 	bl	8004708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004836:	f7ff f8a1 	bl	800397c <vTaskSwitchContext>
	prvTaskExitError();
 800483a:	f7ff ff21 	bl	8004680 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	e000ed00 	.word	0xe000ed00
 800484c:	410fc271 	.word	0x410fc271
 8004850:	410fc270 	.word	0x410fc270
 8004854:	e000e400 	.word	0xe000e400
 8004858:	20000d10 	.word	0x20000d10
 800485c:	20000d14 	.word	0x20000d14
 8004860:	e000ed20 	.word	0xe000ed20
 8004864:	20000008 	.word	0x20000008
 8004868:	e000ef34 	.word	0xe000ef34

0800486c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004884:	4b0e      	ldr	r3, [pc, #56]	; (80048c0 <vPortEnterCritical+0x54>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3301      	adds	r3, #1
 800488a:	4a0d      	ldr	r2, [pc, #52]	; (80048c0 <vPortEnterCritical+0x54>)
 800488c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800488e:	4b0c      	ldr	r3, [pc, #48]	; (80048c0 <vPortEnterCritical+0x54>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d10e      	bne.n	80048b4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004896:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <vPortEnterCritical+0x58>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d009      	beq.n	80048b4 <vPortEnterCritical+0x48>
 80048a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	603b      	str	r3, [r7, #0]
 80048b2:	e7fe      	b.n	80048b2 <vPortEnterCritical+0x46>
	}
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	20000008 	.word	0x20000008
 80048c4:	e000ed04 	.word	0xe000ed04

080048c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80048ce:	4b11      	ldr	r3, [pc, #68]	; (8004914 <vPortExitCritical+0x4c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d109      	bne.n	80048ea <vPortExitCritical+0x22>
 80048d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048da:	f383 8811 	msr	BASEPRI, r3
 80048de:	f3bf 8f6f 	isb	sy
 80048e2:	f3bf 8f4f 	dsb	sy
 80048e6:	607b      	str	r3, [r7, #4]
 80048e8:	e7fe      	b.n	80048e8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80048ea:	4b0a      	ldr	r3, [pc, #40]	; (8004914 <vPortExitCritical+0x4c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	3b01      	subs	r3, #1
 80048f0:	4a08      	ldr	r2, [pc, #32]	; (8004914 <vPortExitCritical+0x4c>)
 80048f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80048f4:	4b07      	ldr	r3, [pc, #28]	; (8004914 <vPortExitCritical+0x4c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d104      	bne.n	8004906 <vPortExitCritical+0x3e>
 80048fc:	2300      	movs	r3, #0
 80048fe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004906:	bf00      	nop
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	20000008 	.word	0x20000008
	...

08004920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004920:	f3ef 8009 	mrs	r0, PSP
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	4b15      	ldr	r3, [pc, #84]	; (8004980 <pxCurrentTCBConst>)
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	f01e 0f10 	tst.w	lr, #16
 8004930:	bf08      	it	eq
 8004932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800493a:	6010      	str	r0, [r2, #0]
 800493c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004940:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004944:	f380 8811 	msr	BASEPRI, r0
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	f3bf 8f6f 	isb	sy
 8004950:	f7ff f814 	bl	800397c <vTaskSwitchContext>
 8004954:	f04f 0000 	mov.w	r0, #0
 8004958:	f380 8811 	msr	BASEPRI, r0
 800495c:	bc09      	pop	{r0, r3}
 800495e:	6819      	ldr	r1, [r3, #0]
 8004960:	6808      	ldr	r0, [r1, #0]
 8004962:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004966:	f01e 0f10 	tst.w	lr, #16
 800496a:	bf08      	it	eq
 800496c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004970:	f380 8809 	msr	PSP, r0
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	f3af 8000 	nop.w

08004980 <pxCurrentTCBConst>:
 8004980:	200006e4 	.word	0x200006e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004984:	bf00      	nop
 8004986:	bf00      	nop

08004988 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
	__asm volatile
 800498e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004992:	f383 8811 	msr	BASEPRI, r3
 8004996:	f3bf 8f6f 	isb	sy
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80049a0:	f7fe ff2e 	bl	8003800 <xTaskIncrementTick>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80049aa:	4b06      	ldr	r3, [pc, #24]	; (80049c4 <SysTick_Handler+0x3c>)
 80049ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049b0:	601a      	str	r2, [r3, #0]
 80049b2:	2300      	movs	r3, #0
 80049b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80049bc:	bf00      	nop
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	e000ed04 	.word	0xe000ed04

080049c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80049cc:	4b0b      	ldr	r3, [pc, #44]	; (80049fc <vPortSetupTimerInterrupt+0x34>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80049d2:	4b0b      	ldr	r3, [pc, #44]	; (8004a00 <vPortSetupTimerInterrupt+0x38>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80049d8:	4b0a      	ldr	r3, [pc, #40]	; (8004a04 <vPortSetupTimerInterrupt+0x3c>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a0a      	ldr	r2, [pc, #40]	; (8004a08 <vPortSetupTimerInterrupt+0x40>)
 80049de:	fba2 2303 	umull	r2, r3, r2, r3
 80049e2:	099b      	lsrs	r3, r3, #6
 80049e4:	4a09      	ldr	r2, [pc, #36]	; (8004a0c <vPortSetupTimerInterrupt+0x44>)
 80049e6:	3b01      	subs	r3, #1
 80049e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80049ea:	4b04      	ldr	r3, [pc, #16]	; (80049fc <vPortSetupTimerInterrupt+0x34>)
 80049ec:	2207      	movs	r2, #7
 80049ee:	601a      	str	r2, [r3, #0]
}
 80049f0:	bf00      	nop
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	e000e010 	.word	0xe000e010
 8004a00:	e000e018 	.word	0xe000e018
 8004a04:	20000000 	.word	0x20000000
 8004a08:	10624dd3 	.word	0x10624dd3
 8004a0c:	e000e014 	.word	0xe000e014

08004a10 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004a10:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004a20 <vPortEnableVFP+0x10>
 8004a14:	6801      	ldr	r1, [r0, #0]
 8004a16:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004a1a:	6001      	str	r1, [r0, #0]
 8004a1c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004a1e:	bf00      	nop
 8004a20:	e000ed88 	.word	0xe000ed88

08004a24 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004a2a:	f3ef 8305 	mrs	r3, IPSR
 8004a2e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2b0f      	cmp	r3, #15
 8004a34:	d913      	bls.n	8004a5e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a36:	4a16      	ldr	r2, [pc, #88]	; (8004a90 <vPortValidateInterruptPriority+0x6c>)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a40:	4b14      	ldr	r3, [pc, #80]	; (8004a94 <vPortValidateInterruptPriority+0x70>)
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	7afa      	ldrb	r2, [r7, #11]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d209      	bcs.n	8004a5e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4e:	f383 8811 	msr	BASEPRI, r3
 8004a52:	f3bf 8f6f 	isb	sy
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	607b      	str	r3, [r7, #4]
 8004a5c:	e7fe      	b.n	8004a5c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a5e:	4b0e      	ldr	r3, [pc, #56]	; (8004a98 <vPortValidateInterruptPriority+0x74>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a66:	4b0d      	ldr	r3, [pc, #52]	; (8004a9c <vPortValidateInterruptPriority+0x78>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d909      	bls.n	8004a82 <vPortValidateInterruptPriority+0x5e>
 8004a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	603b      	str	r3, [r7, #0]
 8004a80:	e7fe      	b.n	8004a80 <vPortValidateInterruptPriority+0x5c>
	}
 8004a82:	bf00      	nop
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	e000e3f0 	.word	0xe000e3f0
 8004a94:	20000d10 	.word	0x20000d10
 8004a98:	e000ed0c 	.word	0xe000ed0c
 8004a9c:	20000d14 	.word	0x20000d14

08004aa0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b08a      	sub	sp, #40	; 0x28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004aac:	f7fe fdee 	bl	800368c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ab0:	4b57      	ldr	r3, [pc, #348]	; (8004c10 <pvPortMalloc+0x170>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ab8:	f000 f90c 	bl	8004cd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004abc:	4b55      	ldr	r3, [pc, #340]	; (8004c14 <pvPortMalloc+0x174>)
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f040 808c 	bne.w	8004be2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d01c      	beq.n	8004b0a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004ad0:	2208      	movs	r2, #8
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f003 0307 	and.w	r3, r3, #7
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d013      	beq.n	8004b0a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f023 0307 	bic.w	r3, r3, #7
 8004ae8:	3308      	adds	r3, #8
 8004aea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f003 0307 	and.w	r3, r3, #7
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d009      	beq.n	8004b0a <pvPortMalloc+0x6a>
 8004af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afa:	f383 8811 	msr	BASEPRI, r3
 8004afe:	f3bf 8f6f 	isb	sy
 8004b02:	f3bf 8f4f 	dsb	sy
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	e7fe      	b.n	8004b08 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d068      	beq.n	8004be2 <pvPortMalloc+0x142>
 8004b10:	4b41      	ldr	r3, [pc, #260]	; (8004c18 <pvPortMalloc+0x178>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d863      	bhi.n	8004be2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b1a:	4b40      	ldr	r3, [pc, #256]	; (8004c1c <pvPortMalloc+0x17c>)
 8004b1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b1e:	4b3f      	ldr	r3, [pc, #252]	; (8004c1c <pvPortMalloc+0x17c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b24:	e004      	b.n	8004b30 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d903      	bls.n	8004b42 <pvPortMalloc+0xa2>
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1f1      	bne.n	8004b26 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b42:	4b33      	ldr	r3, [pc, #204]	; (8004c10 <pvPortMalloc+0x170>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d04a      	beq.n	8004be2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2208      	movs	r2, #8
 8004b52:	4413      	add	r3, r2
 8004b54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	1ad2      	subs	r2, r2, r3
 8004b66:	2308      	movs	r3, #8
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d91e      	bls.n	8004bac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4413      	add	r3, r2
 8004b74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d009      	beq.n	8004b94 <pvPortMalloc+0xf4>
 8004b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	613b      	str	r3, [r7, #16]
 8004b92:	e7fe      	b.n	8004b92 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	1ad2      	subs	r2, r2, r3
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ba6:	69b8      	ldr	r0, [r7, #24]
 8004ba8:	f000 f8f6 	bl	8004d98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004bac:	4b1a      	ldr	r3, [pc, #104]	; (8004c18 <pvPortMalloc+0x178>)
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	4a18      	ldr	r2, [pc, #96]	; (8004c18 <pvPortMalloc+0x178>)
 8004bb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004bba:	4b17      	ldr	r3, [pc, #92]	; (8004c18 <pvPortMalloc+0x178>)
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	4b18      	ldr	r3, [pc, #96]	; (8004c20 <pvPortMalloc+0x180>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d203      	bcs.n	8004bce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004bc6:	4b14      	ldr	r3, [pc, #80]	; (8004c18 <pvPortMalloc+0x178>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a15      	ldr	r2, [pc, #84]	; (8004c20 <pvPortMalloc+0x180>)
 8004bcc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	4b10      	ldr	r3, [pc, #64]	; (8004c14 <pvPortMalloc+0x174>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	2200      	movs	r2, #0
 8004be0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004be2:	f7fe fd61 	bl	80036a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d009      	beq.n	8004c04 <pvPortMalloc+0x164>
 8004bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf4:	f383 8811 	msr	BASEPRI, r3
 8004bf8:	f3bf 8f6f 	isb	sy
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	e7fe      	b.n	8004c02 <pvPortMalloc+0x162>
	return pvReturn;
 8004c04:	69fb      	ldr	r3, [r7, #28]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3728      	adds	r7, #40	; 0x28
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	20004920 	.word	0x20004920
 8004c14:	2000492c 	.word	0x2000492c
 8004c18:	20004924 	.word	0x20004924
 8004c1c:	20004918 	.word	0x20004918
 8004c20:	20004928 	.word	0x20004928

08004c24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d046      	beq.n	8004cc4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c36:	2308      	movs	r3, #8
 8004c38:	425b      	negs	r3, r3
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	4b20      	ldr	r3, [pc, #128]	; (8004ccc <vPortFree+0xa8>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d109      	bne.n	8004c66 <vPortFree+0x42>
 8004c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c56:	f383 8811 	msr	BASEPRI, r3
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	e7fe      	b.n	8004c64 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d009      	beq.n	8004c82 <vPortFree+0x5e>
 8004c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c72:	f383 8811 	msr	BASEPRI, r3
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	60bb      	str	r3, [r7, #8]
 8004c80:	e7fe      	b.n	8004c80 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	4b11      	ldr	r3, [pc, #68]	; (8004ccc <vPortFree+0xa8>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d019      	beq.n	8004cc4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d115      	bne.n	8004cc4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	4b0b      	ldr	r3, [pc, #44]	; (8004ccc <vPortFree+0xa8>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	43db      	mvns	r3, r3
 8004ca2:	401a      	ands	r2, r3
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ca8:	f7fe fcf0 	bl	800368c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	4b07      	ldr	r3, [pc, #28]	; (8004cd0 <vPortFree+0xac>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	4a06      	ldr	r2, [pc, #24]	; (8004cd0 <vPortFree+0xac>)
 8004cb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004cba:	6938      	ldr	r0, [r7, #16]
 8004cbc:	f000 f86c 	bl	8004d98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004cc0:	f7fe fcf2 	bl	80036a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004cc4:	bf00      	nop
 8004cc6:	3718      	adds	r7, #24
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	2000492c 	.word	0x2000492c
 8004cd0:	20004924 	.word	0x20004924

08004cd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004cda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004cde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004ce0:	4b27      	ldr	r3, [pc, #156]	; (8004d80 <prvHeapInit+0xac>)
 8004ce2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00c      	beq.n	8004d08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	3307      	adds	r3, #7
 8004cf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f023 0307 	bic.w	r3, r3, #7
 8004cfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	4a1f      	ldr	r2, [pc, #124]	; (8004d80 <prvHeapInit+0xac>)
 8004d04:	4413      	add	r3, r2
 8004d06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d0c:	4a1d      	ldr	r2, [pc, #116]	; (8004d84 <prvHeapInit+0xb0>)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004d12:	4b1c      	ldr	r3, [pc, #112]	; (8004d84 <prvHeapInit+0xb0>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d20:	2208      	movs	r2, #8
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	1a9b      	subs	r3, r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0307 	bic.w	r3, r3, #7
 8004d2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4a15      	ldr	r2, [pc, #84]	; (8004d88 <prvHeapInit+0xb4>)
 8004d34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d36:	4b14      	ldr	r3, [pc, #80]	; (8004d88 <prvHeapInit+0xb4>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d3e:	4b12      	ldr	r3, [pc, #72]	; (8004d88 <prvHeapInit+0xb4>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2200      	movs	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	1ad2      	subs	r2, r2, r3
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d54:	4b0c      	ldr	r3, [pc, #48]	; (8004d88 <prvHeapInit+0xb4>)
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	4a0a      	ldr	r2, [pc, #40]	; (8004d8c <prvHeapInit+0xb8>)
 8004d62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	4a09      	ldr	r2, [pc, #36]	; (8004d90 <prvHeapInit+0xbc>)
 8004d6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d6c:	4b09      	ldr	r3, [pc, #36]	; (8004d94 <prvHeapInit+0xc0>)
 8004d6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d72:	601a      	str	r2, [r3, #0]
}
 8004d74:	bf00      	nop
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	20000d18 	.word	0x20000d18
 8004d84:	20004918 	.word	0x20004918
 8004d88:	20004920 	.word	0x20004920
 8004d8c:	20004928 	.word	0x20004928
 8004d90:	20004924 	.word	0x20004924
 8004d94:	2000492c 	.word	0x2000492c

08004d98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004da0:	4b28      	ldr	r3, [pc, #160]	; (8004e44 <prvInsertBlockIntoFreeList+0xac>)
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	e002      	b.n	8004dac <prvInsertBlockIntoFreeList+0x14>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d8f7      	bhi.n	8004da6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d108      	bne.n	8004dda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	441a      	add	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	441a      	add	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d118      	bne.n	8004e20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	4b15      	ldr	r3, [pc, #84]	; (8004e48 <prvInsertBlockIntoFreeList+0xb0>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d00d      	beq.n	8004e16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	441a      	add	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	e008      	b.n	8004e28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e16:	4b0c      	ldr	r3, [pc, #48]	; (8004e48 <prvInsertBlockIntoFreeList+0xb0>)
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	e003      	b.n	8004e28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d002      	beq.n	8004e36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e36:	bf00      	nop
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	20004918 	.word	0x20004918
 8004e48:	20004920 	.word	0x20004920

08004e4c <__libc_init_array>:
 8004e4c:	b570      	push	{r4, r5, r6, lr}
 8004e4e:	4e0d      	ldr	r6, [pc, #52]	; (8004e84 <__libc_init_array+0x38>)
 8004e50:	4c0d      	ldr	r4, [pc, #52]	; (8004e88 <__libc_init_array+0x3c>)
 8004e52:	1ba4      	subs	r4, r4, r6
 8004e54:	10a4      	asrs	r4, r4, #2
 8004e56:	2500      	movs	r5, #0
 8004e58:	42a5      	cmp	r5, r4
 8004e5a:	d109      	bne.n	8004e70 <__libc_init_array+0x24>
 8004e5c:	4e0b      	ldr	r6, [pc, #44]	; (8004e8c <__libc_init_array+0x40>)
 8004e5e:	4c0c      	ldr	r4, [pc, #48]	; (8004e90 <__libc_init_array+0x44>)
 8004e60:	f000 f82c 	bl	8004ebc <_init>
 8004e64:	1ba4      	subs	r4, r4, r6
 8004e66:	10a4      	asrs	r4, r4, #2
 8004e68:	2500      	movs	r5, #0
 8004e6a:	42a5      	cmp	r5, r4
 8004e6c:	d105      	bne.n	8004e7a <__libc_init_array+0x2e>
 8004e6e:	bd70      	pop	{r4, r5, r6, pc}
 8004e70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e74:	4798      	blx	r3
 8004e76:	3501      	adds	r5, #1
 8004e78:	e7ee      	b.n	8004e58 <__libc_init_array+0xc>
 8004e7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e7e:	4798      	blx	r3
 8004e80:	3501      	adds	r5, #1
 8004e82:	e7f2      	b.n	8004e6a <__libc_init_array+0x1e>
 8004e84:	08004f44 	.word	0x08004f44
 8004e88:	08004f44 	.word	0x08004f44
 8004e8c:	08004f44 	.word	0x08004f44
 8004e90:	08004f48 	.word	0x08004f48

08004e94 <memcpy>:
 8004e94:	b510      	push	{r4, lr}
 8004e96:	1e43      	subs	r3, r0, #1
 8004e98:	440a      	add	r2, r1
 8004e9a:	4291      	cmp	r1, r2
 8004e9c:	d100      	bne.n	8004ea0 <memcpy+0xc>
 8004e9e:	bd10      	pop	{r4, pc}
 8004ea0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ea4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ea8:	e7f7      	b.n	8004e9a <memcpy+0x6>

08004eaa <memset>:
 8004eaa:	4402      	add	r2, r0
 8004eac:	4603      	mov	r3, r0
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d100      	bne.n	8004eb4 <memset+0xa>
 8004eb2:	4770      	bx	lr
 8004eb4:	f803 1b01 	strb.w	r1, [r3], #1
 8004eb8:	e7f9      	b.n	8004eae <memset+0x4>
	...

08004ebc <_init>:
 8004ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ebe:	bf00      	nop
 8004ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ec2:	bc08      	pop	{r3}
 8004ec4:	469e      	mov	lr, r3
 8004ec6:	4770      	bx	lr

08004ec8 <_fini>:
 8004ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eca:	bf00      	nop
 8004ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ece:	bc08      	pop	{r3}
 8004ed0:	469e      	mov	lr, r3
 8004ed2:	4770      	bx	lr
