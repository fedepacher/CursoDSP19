
Mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f18  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080060b8  080060b8  000160b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006174  08006174  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006174  08006174  00016174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800617c  0800617c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800617c  0800617c  0001617c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006180  08006180  00016180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006184  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a04  20000070  080061f4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a74  080061f4  00024a74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017376  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d9c  00000000  00000000  00037416  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012a0  00000000  00000000  0003a1b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001158  00000000  00000000  0003b458  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000039f9  00000000  00000000  0003c5b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e7bc  00000000  00000000  0003ffa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00095b33  00000000  00000000  0004e765  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e4298  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005118  00000000  00000000  000e4314  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080060a0 	.word	0x080060a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080060a0 	.word	0x080060a0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <notify>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */



void notify(const char* name, int state) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b090      	sub	sp, #64	; 0x40
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
	  osStatus_t result = osMutexAcquire(mutex_id, osWaitForever);  // lock count is incremented, might fail when lock count is depleted
 800058a:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <notify+0x64>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f04f 31ff 	mov.w	r1, #4294967295
 8000592:	4618      	mov	r0, r3
 8000594:	f002 f9b2 	bl	80028fc <osMutexAcquire>
 8000598:	63f8      	str	r0, [r7, #60]	; 0x3c
	  if (result == osOK)
 800059a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800059c:	2b00      	cmp	r3, #0
 800059e:	d11c      	bne.n	80005da <notify+0x5a>
	  {
		  char txData[50]= "";
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	222e      	movs	r2, #46	; 0x2e
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f005 f972 	bl	8005896 <memset>
		  sprintf(txData, "%s: %d\n\r", name, state);
 80005b2:	f107 0008 	add.w	r0, r7, #8
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	490b      	ldr	r1, [pc, #44]	; (80005e8 <notify+0x68>)
 80005bc:	f005 f974 	bl	80058a8 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t *) txData, sizeof(txData),1000);
 80005c0:	f107 0108 	add.w	r1, r7, #8
 80005c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c8:	2232      	movs	r2, #50	; 0x32
 80005ca:	4808      	ldr	r0, [pc, #32]	; (80005ec <notify+0x6c>)
 80005cc:	f001 fccf 	bl	8001f6e <HAL_UART_Transmit>
		  osMutexRelease(mutex_id);
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <notify+0x64>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f002 f9ef 	bl	80029b8 <osMutexRelease>
	  }
}
 80005da:	bf00      	nop
 80005dc:	3740      	adds	r7, #64	; 0x40
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	200049e8 	.word	0x200049e8
 80005e8:	080060b8 	.word	0x080060b8
 80005ec:	200049a4 	.word	0x200049a4

080005f0 <test_thread>:

void test_thread(void const *args) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
    while (1)
    {
        notify((const char*)args, 0);
 80005f8:	2100      	movs	r1, #0
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f7ff ffc0 	bl	8000580 <notify>
        osDelay(1000);
 8000600:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000604:	f002 f8b2 	bl	800276c <osDelay>
        notify((const char*)args, 1);
 8000608:	2101      	movs	r1, #1
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f7ff ffb8 	bl	8000580 <notify>
        osDelay(1000);
 8000610:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000614:	f002 f8aa 	bl	800276c <osDelay>
        notify((const char*)args, 0);
 8000618:	e7ee      	b.n	80005f8 <test_thread+0x8>
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b0a5      	sub	sp, #148	; 0x94
 8000620:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f000 fb17 	bl	8000c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f871 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f000 f901 	bl	8000830 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062e:	f000 f8d5 	bl	80007dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  osKernelInitialize();
 8000632:	f001 ff89 	bl	8002548 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  //The Mutex Management function group is used to synchronize the execution of threads.
  //This is for example used to protect access to a shared resource, for example a shared memory image.
  const osMutexAttr_t Thread_Mutex_attr = {
 8000636:	4b2b      	ldr	r3, [pc, #172]	; (80006e4 <main+0xc8>)
 8000638:	f107 0480 	add.w	r4, r7, #128	; 0x80
 800063c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800063e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    "myThreadMutex",     // human readable mutex name
    osMutexRecursive,    // attr_bits
    NULL,                // memory for control block
    0U                   // size for control block
  };
  mutex_id = osMutexNew(&Thread_Mutex_attr);
 8000642:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000646:	4618      	mov	r0, r3
 8000648:	f002 f8be 	bl	80027c8 <osMutexNew>
 800064c:	4602      	mov	r2, r0
 800064e:	4b26      	ldr	r3, [pc, #152]	; (80006e8 <main+0xcc>)
 8000650:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  const osThreadAttr_t t1Task_attributes = {
 8000652:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000656:	2224      	movs	r2, #36	; 0x24
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f005 f91b 	bl	8005896 <memset>
 8000660:	4b22      	ldr	r3, [pc, #136]	; (80006ec <main+0xd0>)
 8000662:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000668:	673b      	str	r3, [r7, #112]	; 0x70
 800066a:	2318      	movs	r3, #24
 800066c:	677b      	str	r3, [r7, #116]	; 0x74
      .name = "t1",
      .priority = (osPriority_t) osPriorityNormal,
      .stack_size = 4096
    };
  t1TaskHandle = osThreadNew(Start1Task, NULL, &t1Task_attributes);
 800066e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000672:	461a      	mov	r2, r3
 8000674:	2100      	movs	r1, #0
 8000676:	481e      	ldr	r0, [pc, #120]	; (80006f0 <main+0xd4>)
 8000678:	f001 ffce 	bl	8002618 <osThreadNew>
 800067c:	4602      	mov	r2, r0
 800067e:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <main+0xd8>)
 8000680:	601a      	str	r2, [r3, #0]

    const osThreadAttr_t t2Task_attributes = {
 8000682:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000686:	2224      	movs	r2, #36	; 0x24
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f005 f903 	bl	8005896 <memset>
 8000690:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <main+0xdc>)
 8000692:	63bb      	str	r3, [r7, #56]	; 0x38
 8000694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000698:	64fb      	str	r3, [r7, #76]	; 0x4c
 800069a:	2310      	movs	r3, #16
 800069c:	653b      	str	r3, [r7, #80]	; 0x50
        .name = "t2",
        .priority = (osPriority_t) osPriorityBelowNormal,
        .stack_size = 4096
      };
    t2TaskHandle = osThreadNew(Start2Task, NULL, &t2Task_attributes);
 800069e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006a2:	461a      	mov	r2, r3
 80006a4:	2100      	movs	r1, #0
 80006a6:	4815      	ldr	r0, [pc, #84]	; (80006fc <main+0xe0>)
 80006a8:	f001 ffb6 	bl	8002618 <osThreadNew>
 80006ac:	4602      	mov	r2, r0
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <main+0xe4>)
 80006b0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */

    char txData[50]= "";;
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	f107 0308 	add.w	r3, r7, #8
 80006ba:	222e      	movs	r2, #46	; 0x2e
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f005 f8e9 	bl	8005896 <memset>
    sprintf(txData, "%s", "inicio\r\n");
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	4a0f      	ldr	r2, [pc, #60]	; (8000704 <main+0xe8>)
 80006c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80006ca:	c303      	stmia	r3!, {r0, r1}
 80006cc:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t *) txData, sizeof(txData),1000);
 80006ce:	1d39      	adds	r1, r7, #4
 80006d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d4:	2232      	movs	r2, #50	; 0x32
 80006d6:	480c      	ldr	r0, [pc, #48]	; (8000708 <main+0xec>)
 80006d8:	f001 fc49 	bl	8001f6e <HAL_UART_Transmit>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */
    //test_thread((void *)"Th 1");
  /* Start scheduler */
  osKernelStart();
 80006dc:	f001 ff68 	bl	80025b0 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <main+0xc4>
 80006e2:	bf00      	nop
 80006e4:	080060e8 	.word	0x080060e8
 80006e8:	200049e8 	.word	0x200049e8
 80006ec:	080060c4 	.word	0x080060c4
 80006f0:	080008f1 	.word	0x080008f1
 80006f4:	200049a0 	.word	0x200049a0
 80006f8:	080060c8 	.word	0x080060c8
 80006fc:	0800090d 	.word	0x0800090d
 8000700:	200049e4 	.word	0x200049e4
 8000704:	080060cc 	.word	0x080060cc
 8000708:	200049a4 	.word	0x200049a4

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b094      	sub	sp, #80	; 0x50
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 0320 	add.w	r3, r7, #32
 8000716:	2230      	movs	r2, #48	; 0x30
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f005 f8bb 	bl	8005896 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000730:	2300      	movs	r3, #0
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	4b27      	ldr	r3, [pc, #156]	; (80007d4 <SystemClock_Config+0xc8>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	4a26      	ldr	r2, [pc, #152]	; (80007d4 <SystemClock_Config+0xc8>)
 800073a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073e:	6413      	str	r3, [r2, #64]	; 0x40
 8000740:	4b24      	ldr	r3, [pc, #144]	; (80007d4 <SystemClock_Config+0xc8>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <SystemClock_Config+0xcc>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a20      	ldr	r2, [pc, #128]	; (80007d8 <SystemClock_Config+0xcc>)
 8000756:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800075a:	6013      	str	r3, [r2, #0]
 800075c:	4b1e      	ldr	r3, [pc, #120]	; (80007d8 <SystemClock_Config+0xcc>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000768:	2301      	movs	r3, #1
 800076a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800076c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000772:	2302      	movs	r3, #2
 8000774:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000776:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800077a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800077c:	2304      	movs	r3, #4
 800077e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000780:	2364      	movs	r3, #100	; 0x64
 8000782:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000784:	2302      	movs	r3, #2
 8000786:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000788:	2304      	movs	r3, #4
 800078a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078c:	f107 0320 	add.w	r3, r7, #32
 8000790:	4618      	mov	r0, r3
 8000792:	f000 fd1f 	bl	80011d4 <HAL_RCC_OscConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800079c:	f000 f8d6 	bl	800094c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a0:	230f      	movs	r3, #15
 80007a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a4:	2302      	movs	r3, #2
 80007a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007b6:	f107 030c 	add.w	r3, r7, #12
 80007ba:	2103      	movs	r1, #3
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 ff4b 	bl	8001658 <HAL_RCC_ClockConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007c8:	f000 f8c0 	bl	800094c <Error_Handler>
  }
}
 80007cc:	bf00      	nop
 80007ce:	3750      	adds	r7, #80	; 0x50
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	; (800082c <MX_USART2_UART_Init+0x50>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 8000814:	f001 fb5e 	bl	8001ed4 <HAL_UART_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800081e:	f000 f895 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200049a4 	.word	0x200049a4
 800082c:	40004400 	.word	0x40004400

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	4b26      	ldr	r3, [pc, #152]	; (80008e4 <MX_GPIO_Init+0xb4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a25      	ldr	r2, [pc, #148]	; (80008e4 <MX_GPIO_Init+0xb4>)
 8000850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b23      	ldr	r3, [pc, #140]	; (80008e4 <MX_GPIO_Init+0xb4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <MX_GPIO_Init+0xb4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a1e      	ldr	r2, [pc, #120]	; (80008e4 <MX_GPIO_Init+0xb4>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <MX_GPIO_Init+0xb4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <MX_GPIO_Init+0xb4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a17      	ldr	r2, [pc, #92]	; (80008e4 <MX_GPIO_Init+0xb4>)
 8000888:	f043 0308 	orr.w	r3, r3, #8
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <MX_GPIO_Init+0xb4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0308 	and.w	r3, r3, #8
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80008a0:	4811      	ldr	r0, [pc, #68]	; (80008e8 <MX_GPIO_Init+0xb8>)
 80008a2:	f000 fc7d 	bl	80011a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008a6:	2301      	movs	r3, #1
 80008a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b2:	f107 030c 	add.w	r3, r7, #12
 80008b6:	4619      	mov	r1, r3
 80008b8:	480c      	ldr	r0, [pc, #48]	; (80008ec <MX_GPIO_Init+0xbc>)
 80008ba:	f000 faef 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008be:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	4619      	mov	r1, r3
 80008d6:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_GPIO_Init+0xb8>)
 80008d8:	f000 fae0 	bl	8000e9c <HAL_GPIO_Init>

}
 80008dc:	bf00      	nop
 80008de:	3720      	adds	r7, #32
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40020c00 	.word	0x40020c00
 80008ec:	40020000 	.word	0x40020000

080008f0 <Start1Task>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void Start1Task(void *argument)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	test_thread("Thread 1");
 80008f8:	4803      	ldr	r0, [pc, #12]	; (8000908 <Start1Task+0x18>)
 80008fa:	f7ff fe79 	bl	80005f0 <test_thread>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	080060f8 	.word	0x080060f8

0800090c <Start2Task>:

void Start2Task(void *argument)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	test_thread("Thread 2");
 8000914:	4803      	ldr	r0, [pc, #12]	; (8000924 <Start2Task+0x18>)
 8000916:	f7ff fe6b 	bl	80005f0 <test_thread>
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	08006104 	.word	0x08006104

08000928 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a04      	ldr	r2, [pc, #16]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d101      	bne.n	800093e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800093a:	f000 f9ad 	bl	8000c98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40010000 	.word	0x40010000

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
	...

0800095c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_MspInit+0x54>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	4a11      	ldr	r2, [pc, #68]	; (80009b0 <HAL_MspInit+0x54>)
 800096c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000970:	6453      	str	r3, [r2, #68]	; 0x44
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <HAL_MspInit+0x54>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <HAL_MspInit+0x54>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <HAL_MspInit+0x54>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098c:	6413      	str	r3, [r2, #64]	; 0x40
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <HAL_MspInit+0x54>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	210f      	movs	r1, #15
 800099e:	f06f 0001 	mvn.w	r0, #1
 80009a2:	f000 fa51 	bl	8000e48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800

080009b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	; 0x28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a19      	ldr	r2, [pc, #100]	; (8000a38 <HAL_UART_MspInit+0x84>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d12b      	bne.n	8000a2e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <HAL_UART_MspInit+0x88>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	4a17      	ldr	r2, [pc, #92]	; (8000a3c <HAL_UART_MspInit+0x88>)
 80009e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e4:	6413      	str	r3, [r2, #64]	; 0x40
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <HAL_UART_MspInit+0x88>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <HAL_UART_MspInit+0x88>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a10      	ldr	r2, [pc, #64]	; (8000a3c <HAL_UART_MspInit+0x88>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <HAL_UART_MspInit+0x88>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a0e:	230c      	movs	r3, #12
 8000a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a1e:	2307      	movs	r3, #7
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	4619      	mov	r1, r3
 8000a28:	4805      	ldr	r0, [pc, #20]	; (8000a40 <HAL_UART_MspInit+0x8c>)
 8000a2a:	f000 fa37 	bl	8000e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a2e:	bf00      	nop
 8000a30:	3728      	adds	r7, #40	; 0x28
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40004400 	.word	0x40004400
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020000 	.word	0x40020000

08000a44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08c      	sub	sp, #48	; 0x30
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000a54:	2200      	movs	r2, #0
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	2019      	movs	r0, #25
 8000a5a:	f000 f9f5 	bl	8000e48 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000a5e:	2019      	movs	r0, #25
 8000a60:	f000 fa0e 	bl	8000e80 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <HAL_InitTick+0xa0>)
 8000a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6c:	4a1d      	ldr	r2, [pc, #116]	; (8000ae4 <HAL_InitTick+0xa0>)
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	6453      	str	r3, [r2, #68]	; 0x44
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <HAL_InitTick+0xa0>)
 8000a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a80:	f107 0210 	add.w	r2, r7, #16
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4611      	mov	r1, r2
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 ffd2 	bl	8001a34 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a90:	f000 ffbc 	bl	8001a0c <HAL_RCC_GetPCLK2Freq>
 8000a94:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a98:	4a13      	ldr	r2, [pc, #76]	; (8000ae8 <HAL_InitTick+0xa4>)
 8000a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9e:	0c9b      	lsrs	r3, r3, #18
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <HAL_InitTick+0xa8>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <HAL_InitTick+0xac>)
 8000aa8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <HAL_InitTick+0xa8>)
 8000aac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ab0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ab2:	4a0e      	ldr	r2, [pc, #56]	; (8000aec <HAL_InitTick+0xa8>)
 8000ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <HAL_InitTick+0xa8>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <HAL_InitTick+0xa8>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000ac4:	4809      	ldr	r0, [pc, #36]	; (8000aec <HAL_InitTick+0xa8>)
 8000ac6:	f000 ffe7 	bl	8001a98 <HAL_TIM_Base_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d104      	bne.n	8000ada <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ad0:	4806      	ldr	r0, [pc, #24]	; (8000aec <HAL_InitTick+0xa8>)
 8000ad2:	f001 f816 	bl	8001b02 <HAL_TIM_Base_Start_IT>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	e000      	b.n	8000adc <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3730      	adds	r7, #48	; 0x30
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	431bde83 	.word	0x431bde83
 8000aec:	200049ec 	.word	0x200049ec
 8000af0:	40010000 	.word	0x40010000

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <HardFault_Handler+0x4>

08000b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <MemManage_Handler+0x4>

08000b0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <BusFault_Handler+0x4>

08000b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <UsageFault_Handler+0x4>

08000b1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b2e:	f001 f80c 	bl	8001b4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200049ec 	.word	0x200049ec

08000b3c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <_sbrk+0x50>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d102      	bne.n	8000b52 <_sbrk+0x16>
		heap_end = &end;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <_sbrk+0x50>)
 8000b4e:	4a10      	ldr	r2, [pc, #64]	; (8000b90 <_sbrk+0x54>)
 8000b50:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <_sbrk+0x50>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <_sbrk+0x50>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4413      	add	r3, r2
 8000b60:	466a      	mov	r2, sp
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d907      	bls.n	8000b76 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000b66:	f004 fe61 	bl	800582c <__errno>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	230c      	movs	r3, #12
 8000b6e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000b70:	f04f 33ff 	mov.w	r3, #4294967295
 8000b74:	e006      	b.n	8000b84 <_sbrk+0x48>
	}

	heap_end += incr;
 8000b76:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <_sbrk+0x50>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	4a03      	ldr	r2, [pc, #12]	; (8000b8c <_sbrk+0x50>)
 8000b80:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b82:	68fb      	ldr	r3, [r7, #12]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	2000008c 	.word	0x2000008c
 8000b90:	20004a78 	.word	0x20004a78

08000b94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b98:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <SystemInit+0x60>)
 8000b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b9e:	4a15      	ldr	r2, [pc, #84]	; (8000bf4 <SystemInit+0x60>)
 8000ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <SystemInit+0x64>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <SystemInit+0x64>)
 8000bae:	f043 0301 	orr.w	r3, r3, #1
 8000bb2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000bb4:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <SystemInit+0x64>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000bba:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <SystemInit+0x64>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <SystemInit+0x64>)
 8000bc0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000bc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bc8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <SystemInit+0x64>)
 8000bcc:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <SystemInit+0x68>)
 8000bce:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <SystemInit+0x64>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a08      	ldr	r2, [pc, #32]	; (8000bf8 <SystemInit+0x64>)
 8000bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bda:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <SystemInit+0x64>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000be2:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <SystemInit+0x60>)
 8000be4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000be8:	609a      	str	r2, [r3, #8]
#endif
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	24003010 	.word	0x24003010

08000c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c06:	e003      	b.n	8000c10 <LoopCopyDataInit>

08000c08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c0e:	3104      	adds	r1, #4

08000c10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c10:	480b      	ldr	r0, [pc, #44]	; (8000c40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c12:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c18:	d3f6      	bcc.n	8000c08 <CopyDataInit>
  ldr  r2, =_sbss
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c1c:	e002      	b.n	8000c24 <LoopFillZerobss>

08000c1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c20:	f842 3b04 	str.w	r3, [r2], #4

08000c24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c28:	d3f9      	bcc.n	8000c1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c2a:	f7ff ffb3 	bl	8000b94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c2e:	f004 fe03 	bl	8005838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c32:	f7ff fcf3 	bl	800061c <main>
  bx  lr    
 8000c36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c38:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c3c:	08006184 	.word	0x08006184
  ldr  r0, =_sdata
 8000c40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c44:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000c48:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000c4c:	20004a74 	.word	0x20004a74

08000c50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC_IRQHandler>
	...

08000c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c58:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	; (8000c94 <HAL_Init+0x40>)
 8000c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <HAL_Init+0x40>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <HAL_Init+0x40>)
 8000c6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <HAL_Init+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <HAL_Init+0x40>)
 8000c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f000 f8d8 	bl	8000e32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c82:	2000      	movs	r0, #0
 8000c84:	f7ff fede 	bl	8000a44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c88:	f7ff fe68 	bl	800095c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023c00 	.word	0x40023c00

08000c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x20>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x24>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <HAL_IncTick+0x24>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000004 	.word	0x20000004
 8000cbc:	20004a2c 	.word	0x20004a2c

08000cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <HAL_GetTick+0x14>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20004a2c 	.word	0x20004a2c

08000cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0a:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	60d3      	str	r3, [r2, #12]
}
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <__NVIC_GetPriorityGrouping+0x18>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	0a1b      	lsrs	r3, r3, #8
 8000d2a:	f003 0307 	and.w	r3, r3, #7
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	db0b      	blt.n	8000d66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	f003 021f 	and.w	r2, r3, #31
 8000d54:	4907      	ldr	r1, [pc, #28]	; (8000d74 <__NVIC_EnableIRQ+0x38>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	095b      	lsrs	r3, r3, #5
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000e100 	.word	0xe000e100

08000d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	6039      	str	r1, [r7, #0]
 8000d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	db0a      	blt.n	8000da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	490c      	ldr	r1, [pc, #48]	; (8000dc4 <__NVIC_SetPriority+0x4c>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	0112      	lsls	r2, r2, #4
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	440b      	add	r3, r1
 8000d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da0:	e00a      	b.n	8000db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4908      	ldr	r1, [pc, #32]	; (8000dc8 <__NVIC_SetPriority+0x50>)
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	f003 030f 	and.w	r3, r3, #15
 8000dae:	3b04      	subs	r3, #4
 8000db0:	0112      	lsls	r2, r2, #4
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	440b      	add	r3, r1
 8000db6:	761a      	strb	r2, [r3, #24]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000e100 	.word	0xe000e100
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b089      	sub	sp, #36	; 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f1c3 0307 	rsb	r3, r3, #7
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	bf28      	it	cs
 8000dea:	2304      	movcs	r3, #4
 8000dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3304      	adds	r3, #4
 8000df2:	2b06      	cmp	r3, #6
 8000df4:	d902      	bls.n	8000dfc <NVIC_EncodePriority+0x30>
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3b03      	subs	r3, #3
 8000dfa:	e000      	b.n	8000dfe <NVIC_EncodePriority+0x32>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	f04f 32ff 	mov.w	r2, #4294967295
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43da      	mvns	r2, r3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	401a      	ands	r2, r3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e14:	f04f 31ff 	mov.w	r1, #4294967295
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1e:	43d9      	mvns	r1, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	4313      	orrs	r3, r2
         );
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3724      	adds	r7, #36	; 0x24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ff4c 	bl	8000cd8 <__NVIC_SetPriorityGrouping>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
 8000e54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e5a:	f7ff ff61 	bl	8000d20 <__NVIC_GetPriorityGrouping>
 8000e5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	68b9      	ldr	r1, [r7, #8]
 8000e64:	6978      	ldr	r0, [r7, #20]
 8000e66:	f7ff ffb1 	bl	8000dcc <NVIC_EncodePriority>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e70:	4611      	mov	r1, r2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ff80 	bl	8000d78 <__NVIC_SetPriority>
}
 8000e78:	bf00      	nop
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff ff54 	bl	8000d3c <__NVIC_EnableIRQ>
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b089      	sub	sp, #36	; 0x24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
 8000eb6:	e159      	b.n	800116c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb8:	2201      	movs	r2, #1
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	f040 8148 	bne.w	8001166 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0x4a>
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2b12      	cmp	r3, #18
 8000ee4:	d123      	bne.n	8000f2e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	08da      	lsrs	r2, r3, #3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	3208      	adds	r2, #8
 8000eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	220f      	movs	r2, #15
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4013      	ands	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	691a      	ldr	r2, [r3, #16]
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	f003 0307 	and.w	r3, r3, #7
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	08da      	lsrs	r2, r3, #3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3208      	adds	r2, #8
 8000f28:	69b9      	ldr	r1, [r7, #24]
 8000f2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	2203      	movs	r2, #3
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4013      	ands	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 0203 	and.w	r2, r3, #3
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d00b      	beq.n	8000f82 <HAL_GPIO_Init+0xe6>
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d007      	beq.n	8000f82 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f76:	2b11      	cmp	r3, #17
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2b12      	cmp	r3, #18
 8000f80:	d130      	bne.n	8000fe4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	68da      	ldr	r2, [r3, #12]
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fb8:	2201      	movs	r2, #1
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	091b      	lsrs	r3, r3, #4
 8000fce:	f003 0201 	and.w	r2, r3, #1
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	2203      	movs	r2, #3
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101c:	2b00      	cmp	r3, #0
 800101e:	f000 80a2 	beq.w	8001166 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	4b56      	ldr	r3, [pc, #344]	; (8001180 <HAL_GPIO_Init+0x2e4>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	4a55      	ldr	r2, [pc, #340]	; (8001180 <HAL_GPIO_Init+0x2e4>)
 800102c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001030:	6453      	str	r3, [r2, #68]	; 0x44
 8001032:	4b53      	ldr	r3, [pc, #332]	; (8001180 <HAL_GPIO_Init+0x2e4>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800103e:	4a51      	ldr	r2, [pc, #324]	; (8001184 <HAL_GPIO_Init+0x2e8>)
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	089b      	lsrs	r3, r3, #2
 8001044:	3302      	adds	r3, #2
 8001046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f003 0303 	and.w	r3, r3, #3
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	220f      	movs	r2, #15
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a48      	ldr	r2, [pc, #288]	; (8001188 <HAL_GPIO_Init+0x2ec>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d019      	beq.n	800109e <HAL_GPIO_Init+0x202>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a47      	ldr	r2, [pc, #284]	; (800118c <HAL_GPIO_Init+0x2f0>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d013      	beq.n	800109a <HAL_GPIO_Init+0x1fe>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a46      	ldr	r2, [pc, #280]	; (8001190 <HAL_GPIO_Init+0x2f4>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d00d      	beq.n	8001096 <HAL_GPIO_Init+0x1fa>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a45      	ldr	r2, [pc, #276]	; (8001194 <HAL_GPIO_Init+0x2f8>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d007      	beq.n	8001092 <HAL_GPIO_Init+0x1f6>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a44      	ldr	r2, [pc, #272]	; (8001198 <HAL_GPIO_Init+0x2fc>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d101      	bne.n	800108e <HAL_GPIO_Init+0x1f2>
 800108a:	2304      	movs	r3, #4
 800108c:	e008      	b.n	80010a0 <HAL_GPIO_Init+0x204>
 800108e:	2307      	movs	r3, #7
 8001090:	e006      	b.n	80010a0 <HAL_GPIO_Init+0x204>
 8001092:	2303      	movs	r3, #3
 8001094:	e004      	b.n	80010a0 <HAL_GPIO_Init+0x204>
 8001096:	2302      	movs	r3, #2
 8001098:	e002      	b.n	80010a0 <HAL_GPIO_Init+0x204>
 800109a:	2301      	movs	r3, #1
 800109c:	e000      	b.n	80010a0 <HAL_GPIO_Init+0x204>
 800109e:	2300      	movs	r3, #0
 80010a0:	69fa      	ldr	r2, [r7, #28]
 80010a2:	f002 0203 	and.w	r2, r2, #3
 80010a6:	0092      	lsls	r2, r2, #2
 80010a8:	4093      	lsls	r3, r2
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010b0:	4934      	ldr	r1, [pc, #208]	; (8001184 <HAL_GPIO_Init+0x2e8>)
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	089b      	lsrs	r3, r3, #2
 80010b6:	3302      	adds	r3, #2
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010be:	4b37      	ldr	r3, [pc, #220]	; (800119c <HAL_GPIO_Init+0x300>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010e2:	4a2e      	ldr	r2, [pc, #184]	; (800119c <HAL_GPIO_Init+0x300>)
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010e8:	4b2c      	ldr	r3, [pc, #176]	; (800119c <HAL_GPIO_Init+0x300>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800110c:	4a23      	ldr	r2, [pc, #140]	; (800119c <HAL_GPIO_Init+0x300>)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001112:	4b22      	ldr	r3, [pc, #136]	; (800119c <HAL_GPIO_Init+0x300>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001136:	4a19      	ldr	r2, [pc, #100]	; (800119c <HAL_GPIO_Init+0x300>)
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800113c:	4b17      	ldr	r3, [pc, #92]	; (800119c <HAL_GPIO_Init+0x300>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001160:	4a0e      	ldr	r2, [pc, #56]	; (800119c <HAL_GPIO_Init+0x300>)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3301      	adds	r3, #1
 800116a:	61fb      	str	r3, [r7, #28]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	2b0f      	cmp	r3, #15
 8001170:	f67f aea2 	bls.w	8000eb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001174:	bf00      	nop
 8001176:	3724      	adds	r7, #36	; 0x24
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	40023800 	.word	0x40023800
 8001184:	40013800 	.word	0x40013800
 8001188:	40020000 	.word	0x40020000
 800118c:	40020400 	.word	0x40020400
 8001190:	40020800 	.word	0x40020800
 8001194:	40020c00 	.word	0x40020c00
 8001198:	40021000 	.word	0x40021000
 800119c:	40013c00 	.word	0x40013c00

080011a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]
 80011ac:	4613      	mov	r3, r2
 80011ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b0:	787b      	ldrb	r3, [r7, #1]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011b6:	887a      	ldrh	r2, [r7, #2]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011bc:	e003      	b.n	80011c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011be:	887b      	ldrh	r3, [r7, #2]
 80011c0:	041a      	lsls	r2, r3, #16
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	619a      	str	r2, [r3, #24]
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e22d      	b.n	8001642 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d075      	beq.n	80012de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011f2:	4ba3      	ldr	r3, [pc, #652]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f003 030c 	and.w	r3, r3, #12
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	d00c      	beq.n	8001218 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011fe:	4ba0      	ldr	r3, [pc, #640]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001206:	2b08      	cmp	r3, #8
 8001208:	d112      	bne.n	8001230 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800120a:	4b9d      	ldr	r3, [pc, #628]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001212:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001216:	d10b      	bne.n	8001230 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001218:	4b99      	ldr	r3, [pc, #612]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d05b      	beq.n	80012dc <HAL_RCC_OscConfig+0x108>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d157      	bne.n	80012dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e208      	b.n	8001642 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001238:	d106      	bne.n	8001248 <HAL_RCC_OscConfig+0x74>
 800123a:	4b91      	ldr	r3, [pc, #580]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a90      	ldr	r2, [pc, #576]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	e01d      	b.n	8001284 <HAL_RCC_OscConfig+0xb0>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001250:	d10c      	bne.n	800126c <HAL_RCC_OscConfig+0x98>
 8001252:	4b8b      	ldr	r3, [pc, #556]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a8a      	ldr	r2, [pc, #552]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	4b88      	ldr	r3, [pc, #544]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a87      	ldr	r2, [pc, #540]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	e00b      	b.n	8001284 <HAL_RCC_OscConfig+0xb0>
 800126c:	4b84      	ldr	r3, [pc, #528]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a83      	ldr	r2, [pc, #524]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	4b81      	ldr	r3, [pc, #516]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a80      	ldr	r2, [pc, #512]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 800127e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001282:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d013      	beq.n	80012b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128c:	f7ff fd18 	bl	8000cc0 <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001294:	f7ff fd14 	bl	8000cc0 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b64      	cmp	r3, #100	; 0x64
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e1cd      	b.n	8001642 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a6:	4b76      	ldr	r3, [pc, #472]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f0      	beq.n	8001294 <HAL_RCC_OscConfig+0xc0>
 80012b2:	e014      	b.n	80012de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b4:	f7ff fd04 	bl	8000cc0 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012bc:	f7ff fd00 	bl	8000cc0 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b64      	cmp	r3, #100	; 0x64
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e1b9      	b.n	8001642 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ce:	4b6c      	ldr	r3, [pc, #432]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f0      	bne.n	80012bc <HAL_RCC_OscConfig+0xe8>
 80012da:	e000      	b.n	80012de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d063      	beq.n	80013b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ea:	4b65      	ldr	r3, [pc, #404]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 030c 	and.w	r3, r3, #12
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00b      	beq.n	800130e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012f6:	4b62      	ldr	r3, [pc, #392]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012fe:	2b08      	cmp	r3, #8
 8001300:	d11c      	bne.n	800133c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001302:	4b5f      	ldr	r3, [pc, #380]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d116      	bne.n	800133c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130e:	4b5c      	ldr	r3, [pc, #368]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d005      	beq.n	8001326 <HAL_RCC_OscConfig+0x152>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d001      	beq.n	8001326 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e18d      	b.n	8001642 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001326:	4b56      	ldr	r3, [pc, #344]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	4952      	ldr	r1, [pc, #328]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001336:	4313      	orrs	r3, r2
 8001338:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133a:	e03a      	b.n	80013b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d020      	beq.n	8001386 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001344:	4b4f      	ldr	r3, [pc, #316]	; (8001484 <HAL_RCC_OscConfig+0x2b0>)
 8001346:	2201      	movs	r2, #1
 8001348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134a:	f7ff fcb9 	bl	8000cc0 <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001352:	f7ff fcb5 	bl	8000cc0 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e16e      	b.n	8001642 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001364:	4b46      	ldr	r3, [pc, #280]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0f0      	beq.n	8001352 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001370:	4b43      	ldr	r3, [pc, #268]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	4940      	ldr	r1, [pc, #256]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001380:	4313      	orrs	r3, r2
 8001382:	600b      	str	r3, [r1, #0]
 8001384:	e015      	b.n	80013b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001386:	4b3f      	ldr	r3, [pc, #252]	; (8001484 <HAL_RCC_OscConfig+0x2b0>)
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138c:	f7ff fc98 	bl	8000cc0 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001394:	f7ff fc94 	bl	8000cc0 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e14d      	b.n	8001642 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a6:	4b36      	ldr	r3, [pc, #216]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f0      	bne.n	8001394 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d030      	beq.n	8001420 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d016      	beq.n	80013f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c6:	4b30      	ldr	r3, [pc, #192]	; (8001488 <HAL_RCC_OscConfig+0x2b4>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013cc:	f7ff fc78 	bl	8000cc0 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d4:	f7ff fc74 	bl	8000cc0 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e12d      	b.n	8001642 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e6:	4b26      	ldr	r3, [pc, #152]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0f0      	beq.n	80013d4 <HAL_RCC_OscConfig+0x200>
 80013f2:	e015      	b.n	8001420 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013f4:	4b24      	ldr	r3, [pc, #144]	; (8001488 <HAL_RCC_OscConfig+0x2b4>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fa:	f7ff fc61 	bl	8000cc0 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001402:	f7ff fc5d 	bl	8000cc0 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e116      	b.n	8001642 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001414:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1f0      	bne.n	8001402 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	2b00      	cmp	r3, #0
 800142a:	f000 80a0 	beq.w	800156e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10f      	bne.n	800145e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	4a0e      	ldr	r2, [pc, #56]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144c:	6413      	str	r3, [r2, #64]	; 0x40
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800145a:	2301      	movs	r3, #1
 800145c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <HAL_RCC_OscConfig+0x2b8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001466:	2b00      	cmp	r3, #0
 8001468:	d121      	bne.n	80014ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800146a:	4b08      	ldr	r3, [pc, #32]	; (800148c <HAL_RCC_OscConfig+0x2b8>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a07      	ldr	r2, [pc, #28]	; (800148c <HAL_RCC_OscConfig+0x2b8>)
 8001470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001474:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001476:	f7ff fc23 	bl	8000cc0 <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147c:	e011      	b.n	80014a2 <HAL_RCC_OscConfig+0x2ce>
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800
 8001484:	42470000 	.word	0x42470000
 8001488:	42470e80 	.word	0x42470e80
 800148c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001490:	f7ff fc16 	bl	8000cc0 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e0cf      	b.n	8001642 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a2:	4b6a      	ldr	r3, [pc, #424]	; (800164c <HAL_RCC_OscConfig+0x478>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f0      	beq.n	8001490 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d106      	bne.n	80014c4 <HAL_RCC_OscConfig+0x2f0>
 80014b6:	4b66      	ldr	r3, [pc, #408]	; (8001650 <HAL_RCC_OscConfig+0x47c>)
 80014b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ba:	4a65      	ldr	r2, [pc, #404]	; (8001650 <HAL_RCC_OscConfig+0x47c>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6713      	str	r3, [r2, #112]	; 0x70
 80014c2:	e01c      	b.n	80014fe <HAL_RCC_OscConfig+0x32a>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	2b05      	cmp	r3, #5
 80014ca:	d10c      	bne.n	80014e6 <HAL_RCC_OscConfig+0x312>
 80014cc:	4b60      	ldr	r3, [pc, #384]	; (8001650 <HAL_RCC_OscConfig+0x47c>)
 80014ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d0:	4a5f      	ldr	r2, [pc, #380]	; (8001650 <HAL_RCC_OscConfig+0x47c>)
 80014d2:	f043 0304 	orr.w	r3, r3, #4
 80014d6:	6713      	str	r3, [r2, #112]	; 0x70
 80014d8:	4b5d      	ldr	r3, [pc, #372]	; (8001650 <HAL_RCC_OscConfig+0x47c>)
 80014da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014dc:	4a5c      	ldr	r2, [pc, #368]	; (8001650 <HAL_RCC_OscConfig+0x47c>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	6713      	str	r3, [r2, #112]	; 0x70
 80014e4:	e00b      	b.n	80014fe <HAL_RCC_OscConfig+0x32a>
 80014e6:	4b5a      	ldr	r3, [pc, #360]	; (8001650 <HAL_RCC_OscConfig+0x47c>)
 80014e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ea:	4a59      	ldr	r2, [pc, #356]	; (8001650 <HAL_RCC_OscConfig+0x47c>)
 80014ec:	f023 0301 	bic.w	r3, r3, #1
 80014f0:	6713      	str	r3, [r2, #112]	; 0x70
 80014f2:	4b57      	ldr	r3, [pc, #348]	; (8001650 <HAL_RCC_OscConfig+0x47c>)
 80014f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f6:	4a56      	ldr	r2, [pc, #344]	; (8001650 <HAL_RCC_OscConfig+0x47c>)
 80014f8:	f023 0304 	bic.w	r3, r3, #4
 80014fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d015      	beq.n	8001532 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001506:	f7ff fbdb 	bl	8000cc0 <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800150c:	e00a      	b.n	8001524 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800150e:	f7ff fbd7 	bl	8000cc0 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	f241 3288 	movw	r2, #5000	; 0x1388
 800151c:	4293      	cmp	r3, r2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e08e      	b.n	8001642 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001524:	4b4a      	ldr	r3, [pc, #296]	; (8001650 <HAL_RCC_OscConfig+0x47c>)
 8001526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0ee      	beq.n	800150e <HAL_RCC_OscConfig+0x33a>
 8001530:	e014      	b.n	800155c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001532:	f7ff fbc5 	bl	8000cc0 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001538:	e00a      	b.n	8001550 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800153a:	f7ff fbc1 	bl	8000cc0 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	f241 3288 	movw	r2, #5000	; 0x1388
 8001548:	4293      	cmp	r3, r2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e078      	b.n	8001642 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001550:	4b3f      	ldr	r3, [pc, #252]	; (8001650 <HAL_RCC_OscConfig+0x47c>)
 8001552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1ee      	bne.n	800153a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800155c:	7dfb      	ldrb	r3, [r7, #23]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d105      	bne.n	800156e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001562:	4b3b      	ldr	r3, [pc, #236]	; (8001650 <HAL_RCC_OscConfig+0x47c>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	4a3a      	ldr	r2, [pc, #232]	; (8001650 <HAL_RCC_OscConfig+0x47c>)
 8001568:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800156c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d064      	beq.n	8001640 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001576:	4b36      	ldr	r3, [pc, #216]	; (8001650 <HAL_RCC_OscConfig+0x47c>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 030c 	and.w	r3, r3, #12
 800157e:	2b08      	cmp	r3, #8
 8001580:	d05c      	beq.n	800163c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d141      	bne.n	800160e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800158a:	4b32      	ldr	r3, [pc, #200]	; (8001654 <HAL_RCC_OscConfig+0x480>)
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001590:	f7ff fb96 	bl	8000cc0 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001598:	f7ff fb92 	bl	8000cc0 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e04b      	b.n	8001642 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015aa:	4b29      	ldr	r3, [pc, #164]	; (8001650 <HAL_RCC_OscConfig+0x47c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69da      	ldr	r2, [r3, #28]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c4:	019b      	lsls	r3, r3, #6
 80015c6:	431a      	orrs	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015cc:	085b      	lsrs	r3, r3, #1
 80015ce:	3b01      	subs	r3, #1
 80015d0:	041b      	lsls	r3, r3, #16
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d8:	061b      	lsls	r3, r3, #24
 80015da:	491d      	ldr	r1, [pc, #116]	; (8001650 <HAL_RCC_OscConfig+0x47c>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e0:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <HAL_RCC_OscConfig+0x480>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e6:	f7ff fb6b 	bl	8000cc0 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ee:	f7ff fb67 	bl	8000cc0 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e020      	b.n	8001642 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <HAL_RCC_OscConfig+0x47c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f0      	beq.n	80015ee <HAL_RCC_OscConfig+0x41a>
 800160c:	e018      	b.n	8001640 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <HAL_RCC_OscConfig+0x480>)
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001614:	f7ff fb54 	bl	8000cc0 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800161c:	f7ff fb50 	bl	8000cc0 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e009      	b.n	8001642 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <HAL_RCC_OscConfig+0x47c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f0      	bne.n	800161c <HAL_RCC_OscConfig+0x448>
 800163a:	e001      	b.n	8001640 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e000      	b.n	8001642 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40007000 	.word	0x40007000
 8001650:	40023800 	.word	0x40023800
 8001654:	42470060 	.word	0x42470060

08001658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e0ca      	b.n	8001802 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800166c:	4b67      	ldr	r3, [pc, #412]	; (800180c <HAL_RCC_ClockConfig+0x1b4>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 030f 	and.w	r3, r3, #15
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d90c      	bls.n	8001694 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167a:	4b64      	ldr	r3, [pc, #400]	; (800180c <HAL_RCC_ClockConfig+0x1b4>)
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001682:	4b62      	ldr	r3, [pc, #392]	; (800180c <HAL_RCC_ClockConfig+0x1b4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	429a      	cmp	r2, r3
 800168e:	d001      	beq.n	8001694 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e0b6      	b.n	8001802 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d020      	beq.n	80016e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016ac:	4b58      	ldr	r3, [pc, #352]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	4a57      	ldr	r2, [pc, #348]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 80016b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d005      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016c4:	4b52      	ldr	r3, [pc, #328]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	4a51      	ldr	r2, [pc, #324]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 80016ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d0:	4b4f      	ldr	r3, [pc, #316]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	494c      	ldr	r1, [pc, #304]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d044      	beq.n	8001778 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d107      	bne.n	8001706 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f6:	4b46      	ldr	r3, [pc, #280]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d119      	bne.n	8001736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e07d      	b.n	8001802 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b02      	cmp	r3, #2
 800170c:	d003      	beq.n	8001716 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001712:	2b03      	cmp	r3, #3
 8001714:	d107      	bne.n	8001726 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001716:	4b3e      	ldr	r3, [pc, #248]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d109      	bne.n	8001736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e06d      	b.n	8001802 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001726:	4b3a      	ldr	r3, [pc, #232]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e065      	b.n	8001802 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001736:	4b36      	ldr	r3, [pc, #216]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f023 0203 	bic.w	r2, r3, #3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	4933      	ldr	r1, [pc, #204]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 8001744:	4313      	orrs	r3, r2
 8001746:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001748:	f7ff faba 	bl	8000cc0 <HAL_GetTick>
 800174c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174e:	e00a      	b.n	8001766 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001750:	f7ff fab6 	bl	8000cc0 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	f241 3288 	movw	r2, #5000	; 0x1388
 800175e:	4293      	cmp	r3, r2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e04d      	b.n	8001802 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001766:	4b2a      	ldr	r3, [pc, #168]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 020c 	and.w	r2, r3, #12
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	429a      	cmp	r2, r3
 8001776:	d1eb      	bne.n	8001750 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001778:	4b24      	ldr	r3, [pc, #144]	; (800180c <HAL_RCC_ClockConfig+0x1b4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 030f 	and.w	r3, r3, #15
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d20c      	bcs.n	80017a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001786:	4b21      	ldr	r3, [pc, #132]	; (800180c <HAL_RCC_ClockConfig+0x1b4>)
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800178e:	4b1f      	ldr	r3, [pc, #124]	; (800180c <HAL_RCC_ClockConfig+0x1b4>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	429a      	cmp	r2, r3
 800179a:	d001      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e030      	b.n	8001802 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d008      	beq.n	80017be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017ac:	4b18      	ldr	r3, [pc, #96]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	4915      	ldr	r1, [pc, #84]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d009      	beq.n	80017de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	490d      	ldr	r1, [pc, #52]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017de:	f000 f81d 	bl	800181c <HAL_RCC_GetSysClockFreq>
 80017e2:	4601      	mov	r1, r0
 80017e4:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	091b      	lsrs	r3, r3, #4
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	4a09      	ldr	r2, [pc, #36]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	5cd3      	ldrb	r3, [r2, r3]
 80017f2:	fa21 f303 	lsr.w	r3, r1, r3
 80017f6:	4a08      	ldr	r2, [pc, #32]	; (8001818 <HAL_RCC_ClockConfig+0x1c0>)
 80017f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80017fa:	2000      	movs	r0, #0
 80017fc:	f7ff f922 	bl	8000a44 <HAL_InitTick>

  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40023c00 	.word	0x40023c00
 8001810:	40023800 	.word	0x40023800
 8001814:	08006128 	.word	0x08006128
 8001818:	20000000 	.word	0x20000000

0800181c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800181c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	2300      	movs	r3, #0
 800182c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001832:	4b63      	ldr	r3, [pc, #396]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b04      	cmp	r3, #4
 800183c:	d007      	beq.n	800184e <HAL_RCC_GetSysClockFreq+0x32>
 800183e:	2b08      	cmp	r3, #8
 8001840:	d008      	beq.n	8001854 <HAL_RCC_GetSysClockFreq+0x38>
 8001842:	2b00      	cmp	r3, #0
 8001844:	f040 80b4 	bne.w	80019b0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001848:	4b5e      	ldr	r3, [pc, #376]	; (80019c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800184a:	60bb      	str	r3, [r7, #8]
       break;
 800184c:	e0b3      	b.n	80019b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800184e:	4b5e      	ldr	r3, [pc, #376]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001850:	60bb      	str	r3, [r7, #8]
      break;
 8001852:	e0b0      	b.n	80019b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001854:	4b5a      	ldr	r3, [pc, #360]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800185c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800185e:	4b58      	ldr	r3, [pc, #352]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d04a      	beq.n	8001900 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800186a:	4b55      	ldr	r3, [pc, #340]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	099b      	lsrs	r3, r3, #6
 8001870:	f04f 0400 	mov.w	r4, #0
 8001874:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	ea03 0501 	and.w	r5, r3, r1
 8001880:	ea04 0602 	and.w	r6, r4, r2
 8001884:	4629      	mov	r1, r5
 8001886:	4632      	mov	r2, r6
 8001888:	f04f 0300 	mov.w	r3, #0
 800188c:	f04f 0400 	mov.w	r4, #0
 8001890:	0154      	lsls	r4, r2, #5
 8001892:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001896:	014b      	lsls	r3, r1, #5
 8001898:	4619      	mov	r1, r3
 800189a:	4622      	mov	r2, r4
 800189c:	1b49      	subs	r1, r1, r5
 800189e:	eb62 0206 	sbc.w	r2, r2, r6
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	f04f 0400 	mov.w	r4, #0
 80018aa:	0194      	lsls	r4, r2, #6
 80018ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018b0:	018b      	lsls	r3, r1, #6
 80018b2:	1a5b      	subs	r3, r3, r1
 80018b4:	eb64 0402 	sbc.w	r4, r4, r2
 80018b8:	f04f 0100 	mov.w	r1, #0
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	00e2      	lsls	r2, r4, #3
 80018c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018c6:	00d9      	lsls	r1, r3, #3
 80018c8:	460b      	mov	r3, r1
 80018ca:	4614      	mov	r4, r2
 80018cc:	195b      	adds	r3, r3, r5
 80018ce:	eb44 0406 	adc.w	r4, r4, r6
 80018d2:	f04f 0100 	mov.w	r1, #0
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	0262      	lsls	r2, r4, #9
 80018dc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80018e0:	0259      	lsls	r1, r3, #9
 80018e2:	460b      	mov	r3, r1
 80018e4:	4614      	mov	r4, r2
 80018e6:	4618      	mov	r0, r3
 80018e8:	4621      	mov	r1, r4
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f04f 0400 	mov.w	r4, #0
 80018f0:	461a      	mov	r2, r3
 80018f2:	4623      	mov	r3, r4
 80018f4:	f7fe fcc4 	bl	8000280 <__aeabi_uldivmod>
 80018f8:	4603      	mov	r3, r0
 80018fa:	460c      	mov	r4, r1
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	e049      	b.n	8001994 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001900:	4b2f      	ldr	r3, [pc, #188]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	099b      	lsrs	r3, r3, #6
 8001906:	f04f 0400 	mov.w	r4, #0
 800190a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	ea03 0501 	and.w	r5, r3, r1
 8001916:	ea04 0602 	and.w	r6, r4, r2
 800191a:	4629      	mov	r1, r5
 800191c:	4632      	mov	r2, r6
 800191e:	f04f 0300 	mov.w	r3, #0
 8001922:	f04f 0400 	mov.w	r4, #0
 8001926:	0154      	lsls	r4, r2, #5
 8001928:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800192c:	014b      	lsls	r3, r1, #5
 800192e:	4619      	mov	r1, r3
 8001930:	4622      	mov	r2, r4
 8001932:	1b49      	subs	r1, r1, r5
 8001934:	eb62 0206 	sbc.w	r2, r2, r6
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	f04f 0400 	mov.w	r4, #0
 8001940:	0194      	lsls	r4, r2, #6
 8001942:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001946:	018b      	lsls	r3, r1, #6
 8001948:	1a5b      	subs	r3, r3, r1
 800194a:	eb64 0402 	sbc.w	r4, r4, r2
 800194e:	f04f 0100 	mov.w	r1, #0
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	00e2      	lsls	r2, r4, #3
 8001958:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800195c:	00d9      	lsls	r1, r3, #3
 800195e:	460b      	mov	r3, r1
 8001960:	4614      	mov	r4, r2
 8001962:	195b      	adds	r3, r3, r5
 8001964:	eb44 0406 	adc.w	r4, r4, r6
 8001968:	f04f 0100 	mov.w	r1, #0
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	02a2      	lsls	r2, r4, #10
 8001972:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001976:	0299      	lsls	r1, r3, #10
 8001978:	460b      	mov	r3, r1
 800197a:	4614      	mov	r4, r2
 800197c:	4618      	mov	r0, r3
 800197e:	4621      	mov	r1, r4
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f04f 0400 	mov.w	r4, #0
 8001986:	461a      	mov	r2, r3
 8001988:	4623      	mov	r3, r4
 800198a:	f7fe fc79 	bl	8000280 <__aeabi_uldivmod>
 800198e:	4603      	mov	r3, r0
 8001990:	460c      	mov	r4, r1
 8001992:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001994:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	0c1b      	lsrs	r3, r3, #16
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	3301      	adds	r3, #1
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ac:	60bb      	str	r3, [r7, #8]
      break;
 80019ae:	e002      	b.n	80019b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019b0:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80019b2:	60bb      	str	r3, [r7, #8]
      break;
 80019b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019b6:	68bb      	ldr	r3, [r7, #8]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019c0:	40023800 	.word	0x40023800
 80019c4:	00f42400 	.word	0x00f42400
 80019c8:	007a1200 	.word	0x007a1200

080019cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019d0:	4b03      	ldr	r3, [pc, #12]	; (80019e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80019d2:	681b      	ldr	r3, [r3, #0]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	20000000 	.word	0x20000000

080019e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019e8:	f7ff fff0 	bl	80019cc <HAL_RCC_GetHCLKFreq>
 80019ec:	4601      	mov	r1, r0
 80019ee:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	0a9b      	lsrs	r3, r3, #10
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	4a03      	ldr	r2, [pc, #12]	; (8001a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019fa:	5cd3      	ldrb	r3, [r2, r3]
 80019fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40023800 	.word	0x40023800
 8001a08:	08006138 	.word	0x08006138

08001a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a10:	f7ff ffdc 	bl	80019cc <HAL_RCC_GetHCLKFreq>
 8001a14:	4601      	mov	r1, r0
 8001a16:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	0b5b      	lsrs	r3, r3, #13
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	4a03      	ldr	r2, [pc, #12]	; (8001a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a22:	5cd3      	ldrb	r3, [r2, r3]
 8001a24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	08006138 	.word	0x08006138

08001a34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	220f      	movs	r2, #15
 8001a42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a44:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_RCC_GetClockConfig+0x5c>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 0203 	and.w	r2, r3, #3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a50:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <HAL_RCC_GetClockConfig+0x5c>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <HAL_RCC_GetClockConfig+0x5c>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a68:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <HAL_RCC_GetClockConfig+0x5c>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	08db      	lsrs	r3, r3, #3
 8001a6e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <HAL_RCC_GetClockConfig+0x60>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 020f 	and.w	r2, r3, #15
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	601a      	str	r2, [r3, #0]
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40023c00 	.word	0x40023c00

08001a98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e01d      	b.n	8001ae6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d106      	bne.n	8001ac4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 f815 	bl	8001aee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3304      	adds	r3, #4
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	f000 f968 	bl	8001dac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b085      	sub	sp, #20
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68da      	ldr	r2, [r3, #12]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f042 0201 	orr.w	r2, r2, #1
 8001b18:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2b06      	cmp	r3, #6
 8001b2a:	d007      	beq.n	8001b3c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 0201 	orr.w	r2, r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d122      	bne.n	8001ba6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d11b      	bne.n	8001ba6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f06f 0202 	mvn.w	r2, #2
 8001b76:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f8ee 	bl	8001d6e <HAL_TIM_IC_CaptureCallback>
 8001b92:	e005      	b.n	8001ba0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f8e0 	bl	8001d5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f8f1 	bl	8001d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d122      	bne.n	8001bfa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d11b      	bne.n	8001bfa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f06f 0204 	mvn.w	r2, #4
 8001bca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 f8c4 	bl	8001d6e <HAL_TIM_IC_CaptureCallback>
 8001be6:	e005      	b.n	8001bf4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f8b6 	bl	8001d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f8c7 	bl	8001d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	f003 0308 	and.w	r3, r3, #8
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	d122      	bne.n	8001c4e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d11b      	bne.n	8001c4e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f06f 0208 	mvn.w	r2, #8
 8001c1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2204      	movs	r2, #4
 8001c24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 f89a 	bl	8001d6e <HAL_TIM_IC_CaptureCallback>
 8001c3a:	e005      	b.n	8001c48 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f88c 	bl	8001d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f89d 	bl	8001d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	f003 0310 	and.w	r3, r3, #16
 8001c58:	2b10      	cmp	r3, #16
 8001c5a:	d122      	bne.n	8001ca2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	f003 0310 	and.w	r3, r3, #16
 8001c66:	2b10      	cmp	r3, #16
 8001c68:	d11b      	bne.n	8001ca2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f06f 0210 	mvn.w	r2, #16
 8001c72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2208      	movs	r2, #8
 8001c78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f870 	bl	8001d6e <HAL_TIM_IC_CaptureCallback>
 8001c8e:	e005      	b.n	8001c9c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f862 	bl	8001d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f873 	bl	8001d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d10e      	bne.n	8001cce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d107      	bne.n	8001cce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f06f 0201 	mvn.w	r2, #1
 8001cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7fe fe2d 	bl	8000928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd8:	2b80      	cmp	r3, #128	; 0x80
 8001cda:	d10e      	bne.n	8001cfa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce6:	2b80      	cmp	r3, #128	; 0x80
 8001ce8:	d107      	bne.n	8001cfa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f8e3 	bl	8001ec0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d04:	2b40      	cmp	r3, #64	; 0x40
 8001d06:	d10e      	bne.n	8001d26 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d12:	2b40      	cmp	r3, #64	; 0x40
 8001d14:	d107      	bne.n	8001d26 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f838 	bl	8001d96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	f003 0320 	and.w	r3, r3, #32
 8001d30:	2b20      	cmp	r3, #32
 8001d32:	d10e      	bne.n	8001d52 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	f003 0320 	and.w	r3, r3, #32
 8001d3e:	2b20      	cmp	r3, #32
 8001d40:	d107      	bne.n	8001d52 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f06f 0220 	mvn.w	r2, #32
 8001d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f8ad 	bl	8001eac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a34      	ldr	r2, [pc, #208]	; (8001e90 <TIM_Base_SetConfig+0xe4>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d00f      	beq.n	8001de4 <TIM_Base_SetConfig+0x38>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dca:	d00b      	beq.n	8001de4 <TIM_Base_SetConfig+0x38>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a31      	ldr	r2, [pc, #196]	; (8001e94 <TIM_Base_SetConfig+0xe8>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d007      	beq.n	8001de4 <TIM_Base_SetConfig+0x38>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a30      	ldr	r2, [pc, #192]	; (8001e98 <TIM_Base_SetConfig+0xec>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d003      	beq.n	8001de4 <TIM_Base_SetConfig+0x38>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a2f      	ldr	r2, [pc, #188]	; (8001e9c <TIM_Base_SetConfig+0xf0>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d108      	bne.n	8001df6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a25      	ldr	r2, [pc, #148]	; (8001e90 <TIM_Base_SetConfig+0xe4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d01b      	beq.n	8001e36 <TIM_Base_SetConfig+0x8a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e04:	d017      	beq.n	8001e36 <TIM_Base_SetConfig+0x8a>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a22      	ldr	r2, [pc, #136]	; (8001e94 <TIM_Base_SetConfig+0xe8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d013      	beq.n	8001e36 <TIM_Base_SetConfig+0x8a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a21      	ldr	r2, [pc, #132]	; (8001e98 <TIM_Base_SetConfig+0xec>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d00f      	beq.n	8001e36 <TIM_Base_SetConfig+0x8a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a20      	ldr	r2, [pc, #128]	; (8001e9c <TIM_Base_SetConfig+0xf0>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d00b      	beq.n	8001e36 <TIM_Base_SetConfig+0x8a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a1f      	ldr	r2, [pc, #124]	; (8001ea0 <TIM_Base_SetConfig+0xf4>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d007      	beq.n	8001e36 <TIM_Base_SetConfig+0x8a>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a1e      	ldr	r2, [pc, #120]	; (8001ea4 <TIM_Base_SetConfig+0xf8>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d003      	beq.n	8001e36 <TIM_Base_SetConfig+0x8a>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a1d      	ldr	r2, [pc, #116]	; (8001ea8 <TIM_Base_SetConfig+0xfc>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d108      	bne.n	8001e48 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a08      	ldr	r2, [pc, #32]	; (8001e90 <TIM_Base_SetConfig+0xe4>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d103      	bne.n	8001e7c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	615a      	str	r2, [r3, #20]
}
 8001e82:	bf00      	nop
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	40010000 	.word	0x40010000
 8001e94:	40000400 	.word	0x40000400
 8001e98:	40000800 	.word	0x40000800
 8001e9c:	40000c00 	.word	0x40000c00
 8001ea0:	40014000 	.word	0x40014000
 8001ea4:	40014400 	.word	0x40014400
 8001ea8:	40014800 	.word	0x40014800

08001eac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e03f      	b.n	8001f66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d106      	bne.n	8001f00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7fe fd5a 	bl	80009b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2224      	movs	r2, #36	; 0x24
 8001f04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 f90b 	bl	8002134 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	691a      	ldr	r2, [r3, #16]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	695a      	ldr	r2, [r3, #20]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2220      	movs	r2, #32
 8001f58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b088      	sub	sp, #32
 8001f72:	af02      	add	r7, sp, #8
 8001f74:	60f8      	str	r0, [r7, #12]
 8001f76:	60b9      	str	r1, [r7, #8]
 8001f78:	603b      	str	r3, [r7, #0]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b20      	cmp	r3, #32
 8001f8c:	f040 8083 	bne.w	8002096 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d002      	beq.n	8001f9c <HAL_UART_Transmit+0x2e>
 8001f96:	88fb      	ldrh	r3, [r7, #6]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e07b      	b.n	8002098 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d101      	bne.n	8001fae <HAL_UART_Transmit+0x40>
 8001faa:	2302      	movs	r3, #2
 8001fac:	e074      	b.n	8002098 <HAL_UART_Transmit+0x12a>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2221      	movs	r2, #33	; 0x21
 8001fc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001fc4:	f7fe fe7c 	bl	8000cc0 <HAL_GetTick>
 8001fc8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	88fa      	ldrh	r2, [r7, #6]
 8001fce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	88fa      	ldrh	r2, [r7, #6]
 8001fd4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001fd6:	e042      	b.n	800205e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fee:	d122      	bne.n	8002036 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2180      	movs	r1, #128	; 0x80
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f000 f850 	bl	80020a0 <UART_WaitOnFlagUntilTimeout>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e046      	b.n	8002098 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	461a      	mov	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800201c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d103      	bne.n	800202e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	3302      	adds	r3, #2
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	e017      	b.n	800205e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	3301      	adds	r3, #1
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	e013      	b.n	800205e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2200      	movs	r2, #0
 800203e:	2180      	movs	r1, #128	; 0x80
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 f82d 	bl	80020a0 <UART_WaitOnFlagUntilTimeout>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e023      	b.n	8002098 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	1c5a      	adds	r2, r3, #1
 8002054:	60ba      	str	r2, [r7, #8]
 8002056:	781a      	ldrb	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002062:	b29b      	uxth	r3, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1b7      	bne.n	8001fd8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	2200      	movs	r2, #0
 8002070:	2140      	movs	r1, #64	; 0x40
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 f814 	bl	80020a0 <UART_WaitOnFlagUntilTimeout>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e00a      	b.n	8002098 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2220      	movs	r2, #32
 8002086:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	e000      	b.n	8002098 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002096:	2302      	movs	r3, #2
  }
}
 8002098:	4618      	mov	r0, r3
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	603b      	str	r3, [r7, #0]
 80020ac:	4613      	mov	r3, r2
 80020ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020b0:	e02c      	b.n	800210c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b8:	d028      	beq.n	800210c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d007      	beq.n	80020d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80020c0:	f7fe fdfe 	bl	8000cc0 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d21d      	bcs.n	800210c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80020de:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	695a      	ldr	r2, [r3, #20]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0201 	bic.w	r2, r2, #1
 80020ee:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2220      	movs	r2, #32
 80020f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2220      	movs	r2, #32
 80020fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e00f      	b.n	800212c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	4013      	ands	r3, r2
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	429a      	cmp	r2, r3
 800211a:	bf0c      	ite	eq
 800211c:	2301      	moveq	r3, #1
 800211e:	2300      	movne	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	461a      	mov	r2, r3
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	429a      	cmp	r2, r3
 8002128:	d0c3      	beq.n	80020b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002134:	b5b0      	push	{r4, r5, r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	430a      	orrs	r2, r1
 8002150:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	431a      	orrs	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	4313      	orrs	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002174:	f023 030c 	bic.w	r3, r3, #12
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6812      	ldr	r2, [r2, #0]
 800217c:	68f9      	ldr	r1, [r7, #12]
 800217e:	430b      	orrs	r3, r1
 8002180:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	699a      	ldr	r2, [r3, #24]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021a0:	f040 80e4 	bne.w	800236c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4aab      	ldr	r2, [pc, #684]	; (8002458 <UART_SetConfig+0x324>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d004      	beq.n	80021b8 <UART_SetConfig+0x84>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4aaa      	ldr	r2, [pc, #680]	; (800245c <UART_SetConfig+0x328>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d16c      	bne.n	8002292 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80021b8:	f7ff fc28 	bl	8001a0c <HAL_RCC_GetPCLK2Freq>
 80021bc:	4602      	mov	r2, r0
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	009a      	lsls	r2, r3, #2
 80021c6:	441a      	add	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d2:	4aa3      	ldr	r2, [pc, #652]	; (8002460 <UART_SetConfig+0x32c>)
 80021d4:	fba2 2303 	umull	r2, r3, r2, r3
 80021d8:	095b      	lsrs	r3, r3, #5
 80021da:	011c      	lsls	r4, r3, #4
 80021dc:	f7ff fc16 	bl	8001a0c <HAL_RCC_GetPCLK2Freq>
 80021e0:	4602      	mov	r2, r0
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	009a      	lsls	r2, r3, #2
 80021ea:	441a      	add	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	fbb2 f5f3 	udiv	r5, r2, r3
 80021f6:	f7ff fc09 	bl	8001a0c <HAL_RCC_GetPCLK2Freq>
 80021fa:	4602      	mov	r2, r0
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	009a      	lsls	r2, r3, #2
 8002204:	441a      	add	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002210:	4a93      	ldr	r2, [pc, #588]	; (8002460 <UART_SetConfig+0x32c>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	095b      	lsrs	r3, r3, #5
 8002218:	2264      	movs	r2, #100	; 0x64
 800221a:	fb02 f303 	mul.w	r3, r2, r3
 800221e:	1aeb      	subs	r3, r5, r3
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	3332      	adds	r3, #50	; 0x32
 8002224:	4a8e      	ldr	r2, [pc, #568]	; (8002460 <UART_SetConfig+0x32c>)
 8002226:	fba2 2303 	umull	r2, r3, r2, r3
 800222a:	095b      	lsrs	r3, r3, #5
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002232:	441c      	add	r4, r3
 8002234:	f7ff fbea 	bl	8001a0c <HAL_RCC_GetPCLK2Freq>
 8002238:	4602      	mov	r2, r0
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	009a      	lsls	r2, r3, #2
 8002242:	441a      	add	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	fbb2 f5f3 	udiv	r5, r2, r3
 800224e:	f7ff fbdd 	bl	8001a0c <HAL_RCC_GetPCLK2Freq>
 8002252:	4602      	mov	r2, r0
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	009a      	lsls	r2, r3, #2
 800225c:	441a      	add	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	fbb2 f3f3 	udiv	r3, r2, r3
 8002268:	4a7d      	ldr	r2, [pc, #500]	; (8002460 <UART_SetConfig+0x32c>)
 800226a:	fba2 2303 	umull	r2, r3, r2, r3
 800226e:	095b      	lsrs	r3, r3, #5
 8002270:	2264      	movs	r2, #100	; 0x64
 8002272:	fb02 f303 	mul.w	r3, r2, r3
 8002276:	1aeb      	subs	r3, r5, r3
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	3332      	adds	r3, #50	; 0x32
 800227c:	4a78      	ldr	r2, [pc, #480]	; (8002460 <UART_SetConfig+0x32c>)
 800227e:	fba2 2303 	umull	r2, r3, r2, r3
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	f003 0207 	and.w	r2, r3, #7
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4422      	add	r2, r4
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	e154      	b.n	800253c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002292:	f7ff fba7 	bl	80019e4 <HAL_RCC_GetPCLK1Freq>
 8002296:	4602      	mov	r2, r0
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	009a      	lsls	r2, r3, #2
 80022a0:	441a      	add	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ac:	4a6c      	ldr	r2, [pc, #432]	; (8002460 <UART_SetConfig+0x32c>)
 80022ae:	fba2 2303 	umull	r2, r3, r2, r3
 80022b2:	095b      	lsrs	r3, r3, #5
 80022b4:	011c      	lsls	r4, r3, #4
 80022b6:	f7ff fb95 	bl	80019e4 <HAL_RCC_GetPCLK1Freq>
 80022ba:	4602      	mov	r2, r0
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	009a      	lsls	r2, r3, #2
 80022c4:	441a      	add	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	fbb2 f5f3 	udiv	r5, r2, r3
 80022d0:	f7ff fb88 	bl	80019e4 <HAL_RCC_GetPCLK1Freq>
 80022d4:	4602      	mov	r2, r0
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	009a      	lsls	r2, r3, #2
 80022de:	441a      	add	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ea:	4a5d      	ldr	r2, [pc, #372]	; (8002460 <UART_SetConfig+0x32c>)
 80022ec:	fba2 2303 	umull	r2, r3, r2, r3
 80022f0:	095b      	lsrs	r3, r3, #5
 80022f2:	2264      	movs	r2, #100	; 0x64
 80022f4:	fb02 f303 	mul.w	r3, r2, r3
 80022f8:	1aeb      	subs	r3, r5, r3
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	3332      	adds	r3, #50	; 0x32
 80022fe:	4a58      	ldr	r2, [pc, #352]	; (8002460 <UART_SetConfig+0x32c>)
 8002300:	fba2 2303 	umull	r2, r3, r2, r3
 8002304:	095b      	lsrs	r3, r3, #5
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800230c:	441c      	add	r4, r3
 800230e:	f7ff fb69 	bl	80019e4 <HAL_RCC_GetPCLK1Freq>
 8002312:	4602      	mov	r2, r0
 8002314:	4613      	mov	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	009a      	lsls	r2, r3, #2
 800231c:	441a      	add	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	fbb2 f5f3 	udiv	r5, r2, r3
 8002328:	f7ff fb5c 	bl	80019e4 <HAL_RCC_GetPCLK1Freq>
 800232c:	4602      	mov	r2, r0
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	009a      	lsls	r2, r3, #2
 8002336:	441a      	add	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002342:	4a47      	ldr	r2, [pc, #284]	; (8002460 <UART_SetConfig+0x32c>)
 8002344:	fba2 2303 	umull	r2, r3, r2, r3
 8002348:	095b      	lsrs	r3, r3, #5
 800234a:	2264      	movs	r2, #100	; 0x64
 800234c:	fb02 f303 	mul.w	r3, r2, r3
 8002350:	1aeb      	subs	r3, r5, r3
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	3332      	adds	r3, #50	; 0x32
 8002356:	4a42      	ldr	r2, [pc, #264]	; (8002460 <UART_SetConfig+0x32c>)
 8002358:	fba2 2303 	umull	r2, r3, r2, r3
 800235c:	095b      	lsrs	r3, r3, #5
 800235e:	f003 0207 	and.w	r2, r3, #7
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4422      	add	r2, r4
 8002368:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800236a:	e0e7      	b.n	800253c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a39      	ldr	r2, [pc, #228]	; (8002458 <UART_SetConfig+0x324>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d004      	beq.n	8002380 <UART_SetConfig+0x24c>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a38      	ldr	r2, [pc, #224]	; (800245c <UART_SetConfig+0x328>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d171      	bne.n	8002464 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002380:	f7ff fb44 	bl	8001a0c <HAL_RCC_GetPCLK2Freq>
 8002384:	4602      	mov	r2, r0
 8002386:	4613      	mov	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	009a      	lsls	r2, r3, #2
 800238e:	441a      	add	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	fbb2 f3f3 	udiv	r3, r2, r3
 800239a:	4a31      	ldr	r2, [pc, #196]	; (8002460 <UART_SetConfig+0x32c>)
 800239c:	fba2 2303 	umull	r2, r3, r2, r3
 80023a0:	095b      	lsrs	r3, r3, #5
 80023a2:	011c      	lsls	r4, r3, #4
 80023a4:	f7ff fb32 	bl	8001a0c <HAL_RCC_GetPCLK2Freq>
 80023a8:	4602      	mov	r2, r0
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	009a      	lsls	r2, r3, #2
 80023b2:	441a      	add	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	fbb2 f5f3 	udiv	r5, r2, r3
 80023be:	f7ff fb25 	bl	8001a0c <HAL_RCC_GetPCLK2Freq>
 80023c2:	4602      	mov	r2, r0
 80023c4:	4613      	mov	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	009a      	lsls	r2, r3, #2
 80023cc:	441a      	add	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d8:	4a21      	ldr	r2, [pc, #132]	; (8002460 <UART_SetConfig+0x32c>)
 80023da:	fba2 2303 	umull	r2, r3, r2, r3
 80023de:	095b      	lsrs	r3, r3, #5
 80023e0:	2264      	movs	r2, #100	; 0x64
 80023e2:	fb02 f303 	mul.w	r3, r2, r3
 80023e6:	1aeb      	subs	r3, r5, r3
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	3332      	adds	r3, #50	; 0x32
 80023ec:	4a1c      	ldr	r2, [pc, #112]	; (8002460 <UART_SetConfig+0x32c>)
 80023ee:	fba2 2303 	umull	r2, r3, r2, r3
 80023f2:	095b      	lsrs	r3, r3, #5
 80023f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023f8:	441c      	add	r4, r3
 80023fa:	f7ff fb07 	bl	8001a0c <HAL_RCC_GetPCLK2Freq>
 80023fe:	4602      	mov	r2, r0
 8002400:	4613      	mov	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	009a      	lsls	r2, r3, #2
 8002408:	441a      	add	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	fbb2 f5f3 	udiv	r5, r2, r3
 8002414:	f7ff fafa 	bl	8001a0c <HAL_RCC_GetPCLK2Freq>
 8002418:	4602      	mov	r2, r0
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	009a      	lsls	r2, r3, #2
 8002422:	441a      	add	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	fbb2 f3f3 	udiv	r3, r2, r3
 800242e:	4a0c      	ldr	r2, [pc, #48]	; (8002460 <UART_SetConfig+0x32c>)
 8002430:	fba2 2303 	umull	r2, r3, r2, r3
 8002434:	095b      	lsrs	r3, r3, #5
 8002436:	2264      	movs	r2, #100	; 0x64
 8002438:	fb02 f303 	mul.w	r3, r2, r3
 800243c:	1aeb      	subs	r3, r5, r3
 800243e:	011b      	lsls	r3, r3, #4
 8002440:	3332      	adds	r3, #50	; 0x32
 8002442:	4a07      	ldr	r2, [pc, #28]	; (8002460 <UART_SetConfig+0x32c>)
 8002444:	fba2 2303 	umull	r2, r3, r2, r3
 8002448:	095b      	lsrs	r3, r3, #5
 800244a:	f003 020f 	and.w	r2, r3, #15
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4422      	add	r2, r4
 8002454:	609a      	str	r2, [r3, #8]
 8002456:	e071      	b.n	800253c <UART_SetConfig+0x408>
 8002458:	40011000 	.word	0x40011000
 800245c:	40011400 	.word	0x40011400
 8002460:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002464:	f7ff fabe 	bl	80019e4 <HAL_RCC_GetPCLK1Freq>
 8002468:	4602      	mov	r2, r0
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	009a      	lsls	r2, r3, #2
 8002472:	441a      	add	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	fbb2 f3f3 	udiv	r3, r2, r3
 800247e:	4a31      	ldr	r2, [pc, #196]	; (8002544 <UART_SetConfig+0x410>)
 8002480:	fba2 2303 	umull	r2, r3, r2, r3
 8002484:	095b      	lsrs	r3, r3, #5
 8002486:	011c      	lsls	r4, r3, #4
 8002488:	f7ff faac 	bl	80019e4 <HAL_RCC_GetPCLK1Freq>
 800248c:	4602      	mov	r2, r0
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	009a      	lsls	r2, r3, #2
 8002496:	441a      	add	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	fbb2 f5f3 	udiv	r5, r2, r3
 80024a2:	f7ff fa9f 	bl	80019e4 <HAL_RCC_GetPCLK1Freq>
 80024a6:	4602      	mov	r2, r0
 80024a8:	4613      	mov	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	009a      	lsls	r2, r3, #2
 80024b0:	441a      	add	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024bc:	4a21      	ldr	r2, [pc, #132]	; (8002544 <UART_SetConfig+0x410>)
 80024be:	fba2 2303 	umull	r2, r3, r2, r3
 80024c2:	095b      	lsrs	r3, r3, #5
 80024c4:	2264      	movs	r2, #100	; 0x64
 80024c6:	fb02 f303 	mul.w	r3, r2, r3
 80024ca:	1aeb      	subs	r3, r5, r3
 80024cc:	011b      	lsls	r3, r3, #4
 80024ce:	3332      	adds	r3, #50	; 0x32
 80024d0:	4a1c      	ldr	r2, [pc, #112]	; (8002544 <UART_SetConfig+0x410>)
 80024d2:	fba2 2303 	umull	r2, r3, r2, r3
 80024d6:	095b      	lsrs	r3, r3, #5
 80024d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024dc:	441c      	add	r4, r3
 80024de:	f7ff fa81 	bl	80019e4 <HAL_RCC_GetPCLK1Freq>
 80024e2:	4602      	mov	r2, r0
 80024e4:	4613      	mov	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	009a      	lsls	r2, r3, #2
 80024ec:	441a      	add	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	fbb2 f5f3 	udiv	r5, r2, r3
 80024f8:	f7ff fa74 	bl	80019e4 <HAL_RCC_GetPCLK1Freq>
 80024fc:	4602      	mov	r2, r0
 80024fe:	4613      	mov	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	009a      	lsls	r2, r3, #2
 8002506:	441a      	add	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002512:	4a0c      	ldr	r2, [pc, #48]	; (8002544 <UART_SetConfig+0x410>)
 8002514:	fba2 2303 	umull	r2, r3, r2, r3
 8002518:	095b      	lsrs	r3, r3, #5
 800251a:	2264      	movs	r2, #100	; 0x64
 800251c:	fb02 f303 	mul.w	r3, r2, r3
 8002520:	1aeb      	subs	r3, r5, r3
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	3332      	adds	r3, #50	; 0x32
 8002526:	4a07      	ldr	r2, [pc, #28]	; (8002544 <UART_SetConfig+0x410>)
 8002528:	fba2 2303 	umull	r2, r3, r2, r3
 800252c:	095b      	lsrs	r3, r3, #5
 800252e:	f003 020f 	and.w	r2, r3, #15
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4422      	add	r2, r4
 8002538:	609a      	str	r2, [r3, #8]
}
 800253a:	e7ff      	b.n	800253c <UART_SetConfig+0x408>
 800253c:	bf00      	nop
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bdb0      	pop	{r4, r5, r7, pc}
 8002544:	51eb851f 	.word	0x51eb851f

08002548 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800254e:	f3ef 8305 	mrs	r3, IPSR
 8002552:	60bb      	str	r3, [r7, #8]
  return(result);
 8002554:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10f      	bne.n	800257a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800255a:	f3ef 8310 	mrs	r3, PRIMASK
 800255e:	607b      	str	r3, [r7, #4]
  return(result);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d109      	bne.n	800257a <osKernelInitialize+0x32>
 8002566:	4b11      	ldr	r3, [pc, #68]	; (80025ac <osKernelInitialize+0x64>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d109      	bne.n	8002582 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800256e:	f3ef 8311 	mrs	r3, BASEPRI
 8002572:	603b      	str	r3, [r7, #0]
  return(result);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800257a:	f06f 0305 	mvn.w	r3, #5
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	e00c      	b.n	800259c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002582:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <osKernelInitialize+0x64>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d105      	bne.n	8002596 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800258a:	4b08      	ldr	r3, [pc, #32]	; (80025ac <osKernelInitialize+0x64>)
 800258c:	2201      	movs	r2, #1
 800258e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002590:	2300      	movs	r3, #0
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	e002      	b.n	800259c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002596:	f04f 33ff 	mov.w	r3, #4294967295
 800259a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800259c:	68fb      	ldr	r3, [r7, #12]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	20000090 	.word	0x20000090

080025b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025b6:	f3ef 8305 	mrs	r3, IPSR
 80025ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80025bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10f      	bne.n	80025e2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025c2:	f3ef 8310 	mrs	r3, PRIMASK
 80025c6:	607b      	str	r3, [r7, #4]
  return(result);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d109      	bne.n	80025e2 <osKernelStart+0x32>
 80025ce:	4b11      	ldr	r3, [pc, #68]	; (8002614 <osKernelStart+0x64>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d109      	bne.n	80025ea <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80025d6:	f3ef 8311 	mrs	r3, BASEPRI
 80025da:	603b      	str	r3, [r7, #0]
  return(result);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <osKernelStart+0x3a>
    stat = osErrorISR;
 80025e2:	f06f 0305 	mvn.w	r3, #5
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	e00e      	b.n	8002608 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80025ea:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <osKernelStart+0x64>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d107      	bne.n	8002602 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <osKernelStart+0x64>)
 80025f4:	2202      	movs	r2, #2
 80025f6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80025f8:	f001 fbc4 	bl	8003d84 <vTaskStartScheduler>
      stat = osOK;
 80025fc:	2300      	movs	r3, #0
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	e002      	b.n	8002608 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002602:	f04f 33ff 	mov.w	r3, #4294967295
 8002606:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002608:	68fb      	ldr	r3, [r7, #12]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000090 	.word	0x20000090

08002618 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002618:	b580      	push	{r7, lr}
 800261a:	b092      	sub	sp, #72	; 0x48
 800261c:	af04      	add	r7, sp, #16
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002628:	f3ef 8305 	mrs	r3, IPSR
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002630:	2b00      	cmp	r3, #0
 8002632:	f040 8094 	bne.w	800275e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002636:	f3ef 8310 	mrs	r3, PRIMASK
 800263a:	623b      	str	r3, [r7, #32]
  return(result);
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	2b00      	cmp	r3, #0
 8002640:	f040 808d 	bne.w	800275e <osThreadNew+0x146>
 8002644:	4b48      	ldr	r3, [pc, #288]	; (8002768 <osThreadNew+0x150>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b02      	cmp	r3, #2
 800264a:	d106      	bne.n	800265a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800264c:	f3ef 8311 	mrs	r3, BASEPRI
 8002650:	61fb      	str	r3, [r7, #28]
  return(result);
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	2b00      	cmp	r3, #0
 8002656:	f040 8082 	bne.w	800275e <osThreadNew+0x146>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d07e      	beq.n	800275e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002660:	2380      	movs	r3, #128	; 0x80
 8002662:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002664:	2318      	movs	r3, #24
 8002666:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002668:	2300      	movs	r3, #0
 800266a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800266c:	f107 031b 	add.w	r3, r7, #27
 8002670:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002672:	f04f 33ff 	mov.w	r3, #4294967295
 8002676:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d045      	beq.n	800270a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <osThreadNew+0x74>
        name = attr->name;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800269a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269c:	2b00      	cmp	r3, #0
 800269e:	d008      	beq.n	80026b2 <osThreadNew+0x9a>
 80026a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a2:	2b38      	cmp	r3, #56	; 0x38
 80026a4:	d805      	bhi.n	80026b2 <osThreadNew+0x9a>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <osThreadNew+0x9e>
        return (NULL);
 80026b2:	2300      	movs	r3, #0
 80026b4:	e054      	b.n	8002760 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	089b      	lsrs	r3, r3, #2
 80026c4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00e      	beq.n	80026ec <osThreadNew+0xd4>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	2b5b      	cmp	r3, #91	; 0x5b
 80026d4:	d90a      	bls.n	80026ec <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d006      	beq.n	80026ec <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d002      	beq.n	80026ec <osThreadNew+0xd4>
        mem = 1;
 80026e6:	2301      	movs	r3, #1
 80026e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80026ea:	e010      	b.n	800270e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10c      	bne.n	800270e <osThreadNew+0xf6>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d108      	bne.n	800270e <osThreadNew+0xf6>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d104      	bne.n	800270e <osThreadNew+0xf6>
          mem = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	62bb      	str	r3, [r7, #40]	; 0x28
 8002708:	e001      	b.n	800270e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800270a:	2300      	movs	r3, #0
 800270c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800270e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002710:	2b01      	cmp	r3, #1
 8002712:	d110      	bne.n	8002736 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800271c:	9202      	str	r2, [sp, #8]
 800271e:	9301      	str	r3, [sp, #4]
 8002720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002728:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f001 f962 	bl	80039f4 <xTaskCreateStatic>
 8002730:	4603      	mov	r3, r0
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	e013      	b.n	800275e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002738:	2b00      	cmp	r3, #0
 800273a:	d110      	bne.n	800275e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800273c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273e:	b29a      	uxth	r2, r3
 8002740:	f107 0314 	add.w	r3, r7, #20
 8002744:	9301      	str	r3, [sp, #4]
 8002746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f001 f9a9 	bl	8003aa6 <xTaskCreate>
 8002754:	4603      	mov	r3, r0
 8002756:	2b01      	cmp	r3, #1
 8002758:	d001      	beq.n	800275e <osThreadNew+0x146>
          hTask = NULL;
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800275e:	697b      	ldr	r3, [r7, #20]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3738      	adds	r7, #56	; 0x38
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20000090 	.word	0x20000090

0800276c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002774:	f3ef 8305 	mrs	r3, IPSR
 8002778:	613b      	str	r3, [r7, #16]
  return(result);
 800277a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10f      	bne.n	80027a0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002780:	f3ef 8310 	mrs	r3, PRIMASK
 8002784:	60fb      	str	r3, [r7, #12]
  return(result);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d109      	bne.n	80027a0 <osDelay+0x34>
 800278c:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <osDelay+0x58>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b02      	cmp	r3, #2
 8002792:	d109      	bne.n	80027a8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002794:	f3ef 8311 	mrs	r3, BASEPRI
 8002798:	60bb      	str	r3, [r7, #8]
  return(result);
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <osDelay+0x3c>
    stat = osErrorISR;
 80027a0:	f06f 0305 	mvn.w	r3, #5
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	e007      	b.n	80027b8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f001 fab2 	bl	8003d1c <vTaskDelay>
    }
  }

  return (stat);
 80027b8:	697b      	ldr	r3, [r7, #20]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000090 	.word	0x20000090

080027c8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08a      	sub	sp, #40	; 0x28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027d4:	f3ef 8305 	mrs	r3, IPSR
 80027d8:	613b      	str	r3, [r7, #16]
  return(result);
 80027da:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f040 8085 	bne.w	80028ec <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027e2:	f3ef 8310 	mrs	r3, PRIMASK
 80027e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d17e      	bne.n	80028ec <osMutexNew+0x124>
 80027ee:	4b42      	ldr	r3, [pc, #264]	; (80028f8 <osMutexNew+0x130>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d105      	bne.n	8002802 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80027f6:	f3ef 8311 	mrs	r3, BASEPRI
 80027fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d174      	bne.n	80028ec <osMutexNew+0x124>
    if (attr != NULL) {
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <osMutexNew+0x48>
      type = attr->attr_bits;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	623b      	str	r3, [r7, #32]
 800280e:	e001      	b.n	8002814 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d002      	beq.n	8002824 <osMutexNew+0x5c>
      rmtx = 1U;
 800281e:	2301      	movs	r3, #1
 8002820:	61fb      	str	r3, [r7, #28]
 8002822:	e001      	b.n	8002828 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b00      	cmp	r3, #0
 8002830:	d15c      	bne.n	80028ec <osMutexNew+0x124>
      mem = -1;
 8002832:	f04f 33ff 	mov.w	r3, #4294967295
 8002836:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d015      	beq.n	800286a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d006      	beq.n	8002854 <osMutexNew+0x8c>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	2b4f      	cmp	r3, #79	; 0x4f
 800284c:	d902      	bls.n	8002854 <osMutexNew+0x8c>
          mem = 1;
 800284e:	2301      	movs	r3, #1
 8002850:	61bb      	str	r3, [r7, #24]
 8002852:	e00c      	b.n	800286e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d108      	bne.n	800286e <osMutexNew+0xa6>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d104      	bne.n	800286e <osMutexNew+0xa6>
            mem = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	61bb      	str	r3, [r7, #24]
 8002868:	e001      	b.n	800286e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800286a:	2300      	movs	r3, #0
 800286c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d112      	bne.n	800289a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d007      	beq.n	800288a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	4619      	mov	r1, r3
 8002880:	2004      	movs	r0, #4
 8002882:	f000 fb3d 	bl	8002f00 <xQueueCreateMutexStatic>
 8002886:	6278      	str	r0, [r7, #36]	; 0x24
 8002888:	e016      	b.n	80028b8 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	4619      	mov	r1, r3
 8002890:	2001      	movs	r0, #1
 8002892:	f000 fb35 	bl	8002f00 <xQueueCreateMutexStatic>
 8002896:	6278      	str	r0, [r7, #36]	; 0x24
 8002898:	e00e      	b.n	80028b8 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10b      	bne.n	80028b8 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d004      	beq.n	80028b0 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80028a6:	2004      	movs	r0, #4
 80028a8:	f000 fb12 	bl	8002ed0 <xQueueCreateMutex>
 80028ac:	6278      	str	r0, [r7, #36]	; 0x24
 80028ae:	e003      	b.n	80028b8 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80028b0:	2001      	movs	r0, #1
 80028b2:	f000 fb0d 	bl	8002ed0 <xQueueCreateMutex>
 80028b6:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00c      	beq.n	80028d8 <osMutexNew+0x110>
        if (attr != NULL) {
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <osMutexNew+0x104>
          name = attr->name;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	e001      	b.n	80028d0 <osMutexNew+0x108>
        } else {
          name = NULL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80028d0:	6979      	ldr	r1, [r7, #20]
 80028d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028d4:	f001 f832 	bl	800393c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d006      	beq.n	80028ec <osMutexNew+0x124>
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	f043 0301 	orr.w	r3, r3, #1
 80028ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3728      	adds	r7, #40	; 0x28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20000090 	.word	0x20000090

080028fc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b088      	sub	sp, #32
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f023 0301 	bic.w	r3, r3, #1
 800290c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800291a:	f3ef 8305 	mrs	r3, IPSR
 800291e:	613b      	str	r3, [r7, #16]
  return(result);
 8002920:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10f      	bne.n	8002946 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002926:	f3ef 8310 	mrs	r3, PRIMASK
 800292a:	60fb      	str	r3, [r7, #12]
  return(result);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d109      	bne.n	8002946 <osMutexAcquire+0x4a>
 8002932:	4b20      	ldr	r3, [pc, #128]	; (80029b4 <osMutexAcquire+0xb8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d109      	bne.n	800294e <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800293a:	f3ef 8311 	mrs	r3, BASEPRI
 800293e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8002946:	f06f 0305 	mvn.w	r3, #5
 800294a:	61fb      	str	r3, [r7, #28]
 800294c:	e02c      	b.n	80029a8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d103      	bne.n	800295c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8002954:	f06f 0303 	mvn.w	r3, #3
 8002958:	61fb      	str	r3, [r7, #28]
 800295a:	e025      	b.n	80029a8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d011      	beq.n	8002986 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8002962:	6839      	ldr	r1, [r7, #0]
 8002964:	69b8      	ldr	r0, [r7, #24]
 8002966:	f000 fb19 	bl	8002f9c <xQueueTakeMutexRecursive>
 800296a:	4603      	mov	r3, r0
 800296c:	2b01      	cmp	r3, #1
 800296e:	d01b      	beq.n	80029a8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8002976:	f06f 0301 	mvn.w	r3, #1
 800297a:	61fb      	str	r3, [r7, #28]
 800297c:	e014      	b.n	80029a8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800297e:	f06f 0302 	mvn.w	r3, #2
 8002982:	61fb      	str	r3, [r7, #28]
 8002984:	e010      	b.n	80029a8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8002986:	6839      	ldr	r1, [r7, #0]
 8002988:	69b8      	ldr	r0, [r7, #24]
 800298a:	f000 fda7 	bl	80034dc <xQueueSemaphoreTake>
 800298e:	4603      	mov	r3, r0
 8002990:	2b01      	cmp	r3, #1
 8002992:	d009      	beq.n	80029a8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800299a:	f06f 0301 	mvn.w	r3, #1
 800299e:	61fb      	str	r3, [r7, #28]
 80029a0:	e002      	b.n	80029a8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80029a2:	f06f 0302 	mvn.w	r3, #2
 80029a6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80029a8:	69fb      	ldr	r3, [r7, #28]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3720      	adds	r7, #32
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000090 	.word	0x20000090

080029b8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b088      	sub	sp, #32
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f023 0301 	bic.w	r3, r3, #1
 80029c6:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029d4:	f3ef 8305 	mrs	r3, IPSR
 80029d8:	613b      	str	r3, [r7, #16]
  return(result);
 80029da:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10f      	bne.n	8002a00 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029e0:	f3ef 8310 	mrs	r3, PRIMASK
 80029e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d109      	bne.n	8002a00 <osMutexRelease+0x48>
 80029ec:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <osMutexRelease+0x9c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d109      	bne.n	8002a08 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80029f4:	f3ef 8311 	mrs	r3, BASEPRI
 80029f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <osMutexRelease+0x50>
    stat = osErrorISR;
 8002a00:	f06f 0305 	mvn.w	r3, #5
 8002a04:	61fb      	str	r3, [r7, #28]
 8002a06:	e01f      	b.n	8002a48 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d103      	bne.n	8002a16 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8002a0e:	f06f 0303 	mvn.w	r3, #3
 8002a12:	61fb      	str	r3, [r7, #28]
 8002a14:	e018      	b.n	8002a48 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d009      	beq.n	8002a30 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8002a1c:	69b8      	ldr	r0, [r7, #24]
 8002a1e:	f000 fa8a 	bl	8002f36 <xQueueGiveMutexRecursive>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d00f      	beq.n	8002a48 <osMutexRelease+0x90>
        stat = osErrorResource;
 8002a28:	f06f 0302 	mvn.w	r3, #2
 8002a2c:	61fb      	str	r3, [r7, #28]
 8002a2e:	e00b      	b.n	8002a48 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8002a30:	2300      	movs	r3, #0
 8002a32:	2200      	movs	r2, #0
 8002a34:	2100      	movs	r1, #0
 8002a36:	69b8      	ldr	r0, [r7, #24]
 8002a38:	f000 fae6 	bl	8003008 <xQueueGenericSend>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d002      	beq.n	8002a48 <osMutexRelease+0x90>
        stat = osErrorResource;
 8002a42:	f06f 0302 	mvn.w	r3, #2
 8002a46:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8002a48:	69fb      	ldr	r3, [r7, #28]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3720      	adds	r7, #32
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000090 	.word	0x20000090

08002a58 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4a07      	ldr	r2, [pc, #28]	; (8002a84 <vApplicationGetIdleTaskMemory+0x2c>)
 8002a68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	4a06      	ldr	r2, [pc, #24]	; (8002a88 <vApplicationGetIdleTaskMemory+0x30>)
 8002a6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2280      	movs	r2, #128	; 0x80
 8002a74:	601a      	str	r2, [r3, #0]
}
 8002a76:	bf00      	nop
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	20000094 	.word	0x20000094
 8002a88:	200000f0 	.word	0x200000f0

08002a8c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4a07      	ldr	r2, [pc, #28]	; (8002ab8 <vApplicationGetTimerTaskMemory+0x2c>)
 8002a9c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	4a06      	ldr	r2, [pc, #24]	; (8002abc <vApplicationGetTimerTaskMemory+0x30>)
 8002aa2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002aaa:	601a      	str	r2, [r3, #0]
}
 8002aac:	bf00      	nop
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	200002f0 	.word	0x200002f0
 8002abc:	2000034c 	.word	0x2000034c

08002ac0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f103 0208 	add.w	r2, r3, #8
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ad8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f103 0208 	add.w	r2, r3, #8
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f103 0208 	add.w	r2, r3, #8
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b085      	sub	sp, #20
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
 8002b22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	601a      	str	r2, [r3, #0]
}
 8002b56:	bf00      	nop
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b62:	b480      	push	{r7}
 8002b64:	b085      	sub	sp, #20
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b78:	d103      	bne.n	8002b82 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	e00c      	b.n	8002b9c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	3308      	adds	r3, #8
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	e002      	b.n	8002b90 <vListInsert+0x2e>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d2f6      	bcs.n	8002b8a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	601a      	str	r2, [r3, #0]
}
 8002bc8:	bf00      	nop
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6892      	ldr	r2, [r2, #8]
 8002bea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6852      	ldr	r2, [r2, #4]
 8002bf4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d103      	bne.n	8002c08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	1e5a      	subs	r2, r3, #1
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d109      	bne.n	8002c50 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c40:	f383 8811 	msr	BASEPRI, r3
 8002c44:	f3bf 8f6f 	isb	sy
 8002c48:	f3bf 8f4f 	dsb	sy
 8002c4c:	60bb      	str	r3, [r7, #8]
 8002c4e:	e7fe      	b.n	8002c4e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002c50:	f002 fafc 	bl	800524c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5c:	68f9      	ldr	r1, [r7, #12]
 8002c5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c60:	fb01 f303 	mul.w	r3, r1, r3
 8002c64:	441a      	add	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c80:	3b01      	subs	r3, #1
 8002c82:	68f9      	ldr	r1, [r7, #12]
 8002c84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002c86:	fb01 f303 	mul.w	r3, r1, r3
 8002c8a:	441a      	add	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	22ff      	movs	r2, #255	; 0xff
 8002c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	22ff      	movs	r2, #255	; 0xff
 8002c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d114      	bne.n	8002cd0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d01a      	beq.n	8002ce4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	3310      	adds	r3, #16
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f001 faec 	bl	8004290 <xTaskRemoveFromEventList>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d012      	beq.n	8002ce4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002cbe:	4b0d      	ldr	r3, [pc, #52]	; (8002cf4 <xQueueGenericReset+0xcc>)
 8002cc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	f3bf 8f4f 	dsb	sy
 8002cca:	f3bf 8f6f 	isb	sy
 8002cce:	e009      	b.n	8002ce4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	3310      	adds	r3, #16
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff fef3 	bl	8002ac0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	3324      	adds	r3, #36	; 0x24
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff feee 	bl	8002ac0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002ce4:	f002 fae0 	bl	80052a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002ce8:	2301      	movs	r3, #1
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	e000ed04 	.word	0xe000ed04

08002cf8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08e      	sub	sp, #56	; 0x38
 8002cfc:	af02      	add	r7, sp, #8
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
 8002d04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d109      	bne.n	8002d20 <xQueueGenericCreateStatic+0x28>
 8002d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d10:	f383 8811 	msr	BASEPRI, r3
 8002d14:	f3bf 8f6f 	isb	sy
 8002d18:	f3bf 8f4f 	dsb	sy
 8002d1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d1e:	e7fe      	b.n	8002d1e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d109      	bne.n	8002d3a <xQueueGenericCreateStatic+0x42>
 8002d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2a:	f383 8811 	msr	BASEPRI, r3
 8002d2e:	f3bf 8f6f 	isb	sy
 8002d32:	f3bf 8f4f 	dsb	sy
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
 8002d38:	e7fe      	b.n	8002d38 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <xQueueGenericCreateStatic+0x4e>
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <xQueueGenericCreateStatic+0x52>
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <xQueueGenericCreateStatic+0x54>
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d109      	bne.n	8002d64 <xQueueGenericCreateStatic+0x6c>
 8002d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d54:	f383 8811 	msr	BASEPRI, r3
 8002d58:	f3bf 8f6f 	isb	sy
 8002d5c:	f3bf 8f4f 	dsb	sy
 8002d60:	623b      	str	r3, [r7, #32]
 8002d62:	e7fe      	b.n	8002d62 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d102      	bne.n	8002d70 <xQueueGenericCreateStatic+0x78>
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <xQueueGenericCreateStatic+0x7c>
 8002d70:	2301      	movs	r3, #1
 8002d72:	e000      	b.n	8002d76 <xQueueGenericCreateStatic+0x7e>
 8002d74:	2300      	movs	r3, #0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d109      	bne.n	8002d8e <xQueueGenericCreateStatic+0x96>
 8002d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7e:	f383 8811 	msr	BASEPRI, r3
 8002d82:	f3bf 8f6f 	isb	sy
 8002d86:	f3bf 8f4f 	dsb	sy
 8002d8a:	61fb      	str	r3, [r7, #28]
 8002d8c:	e7fe      	b.n	8002d8c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002d8e:	2350      	movs	r3, #80	; 0x50
 8002d90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	2b50      	cmp	r3, #80	; 0x50
 8002d96:	d009      	beq.n	8002dac <xQueueGenericCreateStatic+0xb4>
 8002d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9c:	f383 8811 	msr	BASEPRI, r3
 8002da0:	f3bf 8f6f 	isb	sy
 8002da4:	f3bf 8f4f 	dsb	sy
 8002da8:	61bb      	str	r3, [r7, #24]
 8002daa:	e7fe      	b.n	8002daa <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00d      	beq.n	8002dd2 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002dbe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc4:	9300      	str	r3, [sp, #0]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	68b9      	ldr	r1, [r7, #8]
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f000 f842 	bl	8002e56 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3730      	adds	r7, #48	; 0x30
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08a      	sub	sp, #40	; 0x28
 8002de0:	af02      	add	r7, sp, #8
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	4613      	mov	r3, r2
 8002de8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d109      	bne.n	8002e04 <xQueueGenericCreate+0x28>
 8002df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df4:	f383 8811 	msr	BASEPRI, r3
 8002df8:	f3bf 8f6f 	isb	sy
 8002dfc:	f3bf 8f4f 	dsb	sy
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	e7fe      	b.n	8002e02 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d102      	bne.n	8002e10 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61fb      	str	r3, [r7, #28]
 8002e0e:	e004      	b.n	8002e1a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	fb02 f303 	mul.w	r3, r2, r3
 8002e18:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	3350      	adds	r3, #80	; 0x50
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f002 fb2e 	bl	8005480 <pvPortMalloc>
 8002e24:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00f      	beq.n	8002e4c <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	3350      	adds	r3, #80	; 0x50
 8002e30:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e3a:	79fa      	ldrb	r2, [r7, #7]
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	4613      	mov	r3, r2
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	68b9      	ldr	r1, [r7, #8]
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 f805 	bl	8002e56 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002e4c:	69bb      	ldr	r3, [r7, #24]
	}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3720      	adds	r7, #32
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b084      	sub	sp, #16
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	607a      	str	r2, [r7, #4]
 8002e62:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d103      	bne.n	8002e72 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	e002      	b.n	8002e78 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e84:	2101      	movs	r1, #1
 8002e86:	69b8      	ldr	r0, [r7, #24]
 8002e88:	f7ff fece 	bl	8002c28 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	78fa      	ldrb	r2, [r7, #3]
 8002e90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002e94:	bf00      	nop
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00e      	beq.n	8002ec8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f8a0 	bl	8003008 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002ec8:	bf00      	nop
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002eda:	2301      	movs	r3, #1
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	2300      	movs	r3, #0
 8002ee0:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002ee2:	79fb      	ldrb	r3, [r7, #7]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	6939      	ldr	r1, [r7, #16]
 8002ee8:	6978      	ldr	r0, [r7, #20]
 8002eea:	f7ff ff77 	bl	8002ddc <xQueueGenericCreate>
 8002eee:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f7ff ffd3 	bl	8002e9c <prvInitialiseMutex>

		return pxNewQueue;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
	}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b088      	sub	sp, #32
 8002f04:	af02      	add	r7, sp, #8
 8002f06:	4603      	mov	r3, r0
 8002f08:	6039      	str	r1, [r7, #0]
 8002f0a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	2300      	movs	r3, #0
 8002f12:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002f14:	79fb      	ldrb	r3, [r7, #7]
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	6939      	ldr	r1, [r7, #16]
 8002f1e:	6978      	ldr	r0, [r7, #20]
 8002f20:	f7ff feea 	bl	8002cf8 <xQueueGenericCreateStatic>
 8002f24:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f7ff ffb8 	bl	8002e9c <prvInitialiseMutex>

		return pxNewQueue;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
	}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8002f36:	b590      	push	{r4, r7, lr}
 8002f38:	b087      	sub	sp, #28
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d109      	bne.n	8002f5c <xQueueGiveMutexRecursive+0x26>
 8002f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4c:	f383 8811 	msr	BASEPRI, r3
 8002f50:	f3bf 8f6f 	isb	sy
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	e7fe      	b.n	8002f5a <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	685c      	ldr	r4, [r3, #4]
 8002f60:	f001 fb52 	bl	8004608 <xTaskGetCurrentTaskHandle>
 8002f64:	4603      	mov	r3, r0
 8002f66:	429c      	cmp	r4, r3
 8002f68:	d111      	bne.n	8002f8e <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	1e5a      	subs	r2, r3, #1
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d105      	bne.n	8002f88 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	2200      	movs	r2, #0
 8002f80:	2100      	movs	r1, #0
 8002f82:	6938      	ldr	r0, [r7, #16]
 8002f84:	f000 f840 	bl	8003008 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	e001      	b.n	8002f92 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8002f92:	697b      	ldr	r3, [r7, #20]
	}
 8002f94:	4618      	mov	r0, r3
 8002f96:	371c      	adds	r7, #28
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd90      	pop	{r4, r7, pc}

08002f9c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8002f9c:	b590      	push	{r4, r7, lr}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d109      	bne.n	8002fc4 <xQueueTakeMutexRecursive+0x28>
 8002fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb4:	f383 8811 	msr	BASEPRI, r3
 8002fb8:	f3bf 8f6f 	isb	sy
 8002fbc:	f3bf 8f4f 	dsb	sy
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	e7fe      	b.n	8002fc2 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	685c      	ldr	r4, [r3, #4]
 8002fc8:	f001 fb1e 	bl	8004608 <xTaskGetCurrentTaskHandle>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	429c      	cmp	r4, r3
 8002fd0:	d107      	bne.n	8002fe2 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	1c5a      	adds	r2, r3, #1
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	e00c      	b.n	8002ffc <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8002fe2:	6839      	ldr	r1, [r7, #0]
 8002fe4:	6938      	ldr	r0, [r7, #16]
 8002fe6:	f000 fa79 	bl	80034dc <xQueueSemaphoreTake>
 8002fea:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d004      	beq.n	8002ffc <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8002ffc:	697b      	ldr	r3, [r7, #20]
	}
 8002ffe:	4618      	mov	r0, r3
 8003000:	371c      	adds	r7, #28
 8003002:	46bd      	mov	sp, r7
 8003004:	bd90      	pop	{r4, r7, pc}
	...

08003008 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b08e      	sub	sp, #56	; 0x38
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
 8003014:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003016:	2300      	movs	r3, #0
 8003018:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800301e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003020:	2b00      	cmp	r3, #0
 8003022:	d109      	bne.n	8003038 <xQueueGenericSend+0x30>
 8003024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003028:	f383 8811 	msr	BASEPRI, r3
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	62bb      	str	r3, [r7, #40]	; 0x28
 8003036:	e7fe      	b.n	8003036 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d103      	bne.n	8003046 <xQueueGenericSend+0x3e>
 800303e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <xQueueGenericSend+0x42>
 8003046:	2301      	movs	r3, #1
 8003048:	e000      	b.n	800304c <xQueueGenericSend+0x44>
 800304a:	2300      	movs	r3, #0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d109      	bne.n	8003064 <xQueueGenericSend+0x5c>
 8003050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003054:	f383 8811 	msr	BASEPRI, r3
 8003058:	f3bf 8f6f 	isb	sy
 800305c:	f3bf 8f4f 	dsb	sy
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
 8003062:	e7fe      	b.n	8003062 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	2b02      	cmp	r3, #2
 8003068:	d103      	bne.n	8003072 <xQueueGenericSend+0x6a>
 800306a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306e:	2b01      	cmp	r3, #1
 8003070:	d101      	bne.n	8003076 <xQueueGenericSend+0x6e>
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <xQueueGenericSend+0x70>
 8003076:	2300      	movs	r3, #0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d109      	bne.n	8003090 <xQueueGenericSend+0x88>
 800307c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003080:	f383 8811 	msr	BASEPRI, r3
 8003084:	f3bf 8f6f 	isb	sy
 8003088:	f3bf 8f4f 	dsb	sy
 800308c:	623b      	str	r3, [r7, #32]
 800308e:	e7fe      	b.n	800308e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003090:	f001 faca 	bl	8004628 <xTaskGetSchedulerState>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d102      	bne.n	80030a0 <xQueueGenericSend+0x98>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <xQueueGenericSend+0x9c>
 80030a0:	2301      	movs	r3, #1
 80030a2:	e000      	b.n	80030a6 <xQueueGenericSend+0x9e>
 80030a4:	2300      	movs	r3, #0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d109      	bne.n	80030be <xQueueGenericSend+0xb6>
 80030aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ae:	f383 8811 	msr	BASEPRI, r3
 80030b2:	f3bf 8f6f 	isb	sy
 80030b6:	f3bf 8f4f 	dsb	sy
 80030ba:	61fb      	str	r3, [r7, #28]
 80030bc:	e7fe      	b.n	80030bc <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030be:	f002 f8c5 	bl	800524c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d302      	bcc.n	80030d4 <xQueueGenericSend+0xcc>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d129      	bne.n	8003128 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	68b9      	ldr	r1, [r7, #8]
 80030d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030da:	f000 fb1f 	bl	800371c <prvCopyDataToQueue>
 80030de:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d010      	beq.n	800310a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ea:	3324      	adds	r3, #36	; 0x24
 80030ec:	4618      	mov	r0, r3
 80030ee:	f001 f8cf 	bl	8004290 <xTaskRemoveFromEventList>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d013      	beq.n	8003120 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80030f8:	4b3f      	ldr	r3, [pc, #252]	; (80031f8 <xQueueGenericSend+0x1f0>)
 80030fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	f3bf 8f4f 	dsb	sy
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	e00a      	b.n	8003120 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800310a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310c:	2b00      	cmp	r3, #0
 800310e:	d007      	beq.n	8003120 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003110:	4b39      	ldr	r3, [pc, #228]	; (80031f8 <xQueueGenericSend+0x1f0>)
 8003112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003120:	f002 f8c2 	bl	80052a8 <vPortExitCritical>
				return pdPASS;
 8003124:	2301      	movs	r3, #1
 8003126:	e063      	b.n	80031f0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d103      	bne.n	8003136 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800312e:	f002 f8bb 	bl	80052a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003132:	2300      	movs	r3, #0
 8003134:	e05c      	b.n	80031f0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003138:	2b00      	cmp	r3, #0
 800313a:	d106      	bne.n	800314a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800313c:	f107 0314 	add.w	r3, r7, #20
 8003140:	4618      	mov	r0, r3
 8003142:	f001 f907 	bl	8004354 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003146:	2301      	movs	r3, #1
 8003148:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800314a:	f002 f8ad 	bl	80052a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800314e:	f000 fe7d 	bl	8003e4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003152:	f002 f87b 	bl	800524c <vPortEnterCritical>
 8003156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003158:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800315c:	b25b      	sxtb	r3, r3
 800315e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003162:	d103      	bne.n	800316c <xQueueGenericSend+0x164>
 8003164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800316c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003172:	b25b      	sxtb	r3, r3
 8003174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003178:	d103      	bne.n	8003182 <xQueueGenericSend+0x17a>
 800317a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003182:	f002 f891 	bl	80052a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003186:	1d3a      	adds	r2, r7, #4
 8003188:	f107 0314 	add.w	r3, r7, #20
 800318c:	4611      	mov	r1, r2
 800318e:	4618      	mov	r0, r3
 8003190:	f001 f8f6 	bl	8004380 <xTaskCheckForTimeOut>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d124      	bne.n	80031e4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800319a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800319c:	f000 fbb6 	bl	800390c <prvIsQueueFull>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d018      	beq.n	80031d8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80031a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a8:	3310      	adds	r3, #16
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	4611      	mov	r1, r2
 80031ae:	4618      	mov	r0, r3
 80031b0:	f001 f820 	bl	80041f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80031b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031b6:	f000 fb41 	bl	800383c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80031ba:	f000 fe55 	bl	8003e68 <xTaskResumeAll>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f47f af7c 	bne.w	80030be <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80031c6:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <xQueueGenericSend+0x1f0>)
 80031c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	f3bf 8f4f 	dsb	sy
 80031d2:	f3bf 8f6f 	isb	sy
 80031d6:	e772      	b.n	80030be <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80031d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031da:	f000 fb2f 	bl	800383c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031de:	f000 fe43 	bl	8003e68 <xTaskResumeAll>
 80031e2:	e76c      	b.n	80030be <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80031e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031e6:	f000 fb29 	bl	800383c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031ea:	f000 fe3d 	bl	8003e68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80031ee:	2300      	movs	r3, #0
		}
	}
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3738      	adds	r7, #56	; 0x38
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	e000ed04 	.word	0xe000ed04

080031fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08e      	sub	sp, #56	; 0x38
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
 8003208:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800320e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003210:	2b00      	cmp	r3, #0
 8003212:	d109      	bne.n	8003228 <xQueueGenericSendFromISR+0x2c>
 8003214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003218:	f383 8811 	msr	BASEPRI, r3
 800321c:	f3bf 8f6f 	isb	sy
 8003220:	f3bf 8f4f 	dsb	sy
 8003224:	627b      	str	r3, [r7, #36]	; 0x24
 8003226:	e7fe      	b.n	8003226 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d103      	bne.n	8003236 <xQueueGenericSendFromISR+0x3a>
 800322e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <xQueueGenericSendFromISR+0x3e>
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <xQueueGenericSendFromISR+0x40>
 800323a:	2300      	movs	r3, #0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d109      	bne.n	8003254 <xQueueGenericSendFromISR+0x58>
 8003240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003244:	f383 8811 	msr	BASEPRI, r3
 8003248:	f3bf 8f6f 	isb	sy
 800324c:	f3bf 8f4f 	dsb	sy
 8003250:	623b      	str	r3, [r7, #32]
 8003252:	e7fe      	b.n	8003252 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d103      	bne.n	8003262 <xQueueGenericSendFromISR+0x66>
 800325a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325e:	2b01      	cmp	r3, #1
 8003260:	d101      	bne.n	8003266 <xQueueGenericSendFromISR+0x6a>
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <xQueueGenericSendFromISR+0x6c>
 8003266:	2300      	movs	r3, #0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d109      	bne.n	8003280 <xQueueGenericSendFromISR+0x84>
 800326c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003270:	f383 8811 	msr	BASEPRI, r3
 8003274:	f3bf 8f6f 	isb	sy
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	61fb      	str	r3, [r7, #28]
 800327e:	e7fe      	b.n	800327e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003280:	f002 f8c0 	bl	8005404 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003284:	f3ef 8211 	mrs	r2, BASEPRI
 8003288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	61ba      	str	r2, [r7, #24]
 800329a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800329c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800329e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d302      	bcc.n	80032b2 <xQueueGenericSendFromISR+0xb6>
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d12c      	bne.n	800330c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80032b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	68b9      	ldr	r1, [r7, #8]
 80032c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032c2:	f000 fa2b 	bl	800371c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80032c6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80032ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ce:	d112      	bne.n	80032f6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d016      	beq.n	8003306 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032da:	3324      	adds	r3, #36	; 0x24
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 ffd7 	bl	8004290 <xTaskRemoveFromEventList>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00e      	beq.n	8003306 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00b      	beq.n	8003306 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	e007      	b.n	8003306 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80032f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80032fa:	3301      	adds	r3, #1
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	b25a      	sxtb	r2, r3
 8003300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003306:	2301      	movs	r3, #1
 8003308:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800330a:	e001      	b.n	8003310 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800330c:	2300      	movs	r3, #0
 800330e:	637b      	str	r3, [r7, #52]	; 0x34
 8003310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003312:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800331a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800331c:	4618      	mov	r0, r3
 800331e:	3738      	adds	r7, #56	; 0x38
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b08c      	sub	sp, #48	; 0x30
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003330:	2300      	movs	r3, #0
 8003332:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333a:	2b00      	cmp	r3, #0
 800333c:	d109      	bne.n	8003352 <xQueueReceive+0x2e>
	__asm volatile
 800333e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003342:	f383 8811 	msr	BASEPRI, r3
 8003346:	f3bf 8f6f 	isb	sy
 800334a:	f3bf 8f4f 	dsb	sy
 800334e:	623b      	str	r3, [r7, #32]
 8003350:	e7fe      	b.n	8003350 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d103      	bne.n	8003360 <xQueueReceive+0x3c>
 8003358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <xQueueReceive+0x40>
 8003360:	2301      	movs	r3, #1
 8003362:	e000      	b.n	8003366 <xQueueReceive+0x42>
 8003364:	2300      	movs	r3, #0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d109      	bne.n	800337e <xQueueReceive+0x5a>
 800336a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336e:	f383 8811 	msr	BASEPRI, r3
 8003372:	f3bf 8f6f 	isb	sy
 8003376:	f3bf 8f4f 	dsb	sy
 800337a:	61fb      	str	r3, [r7, #28]
 800337c:	e7fe      	b.n	800337c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800337e:	f001 f953 	bl	8004628 <xTaskGetSchedulerState>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d102      	bne.n	800338e <xQueueReceive+0x6a>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <xQueueReceive+0x6e>
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <xQueueReceive+0x70>
 8003392:	2300      	movs	r3, #0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d109      	bne.n	80033ac <xQueueReceive+0x88>
 8003398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339c:	f383 8811 	msr	BASEPRI, r3
 80033a0:	f3bf 8f6f 	isb	sy
 80033a4:	f3bf 8f4f 	dsb	sy
 80033a8:	61bb      	str	r3, [r7, #24]
 80033aa:	e7fe      	b.n	80033aa <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80033ac:	f001 ff4e 	bl	800524c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d01f      	beq.n	80033fc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033c0:	f000 fa16 	bl	80037f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	1e5a      	subs	r2, r3, #1
 80033c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ca:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00f      	beq.n	80033f4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d6:	3310      	adds	r3, #16
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 ff59 	bl	8004290 <xTaskRemoveFromEventList>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d007      	beq.n	80033f4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80033e4:	4b3c      	ldr	r3, [pc, #240]	; (80034d8 <xQueueReceive+0x1b4>)
 80033e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	f3bf 8f4f 	dsb	sy
 80033f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80033f4:	f001 ff58 	bl	80052a8 <vPortExitCritical>
				return pdPASS;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e069      	b.n	80034d0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d103      	bne.n	800340a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003402:	f001 ff51 	bl	80052a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003406:	2300      	movs	r3, #0
 8003408:	e062      	b.n	80034d0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800340a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340c:	2b00      	cmp	r3, #0
 800340e:	d106      	bne.n	800341e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003410:	f107 0310 	add.w	r3, r7, #16
 8003414:	4618      	mov	r0, r3
 8003416:	f000 ff9d 	bl	8004354 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800341a:	2301      	movs	r3, #1
 800341c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800341e:	f001 ff43 	bl	80052a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003422:	f000 fd13 	bl	8003e4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003426:	f001 ff11 	bl	800524c <vPortEnterCritical>
 800342a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003430:	b25b      	sxtb	r3, r3
 8003432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003436:	d103      	bne.n	8003440 <xQueueReceive+0x11c>
 8003438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003442:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003446:	b25b      	sxtb	r3, r3
 8003448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344c:	d103      	bne.n	8003456 <xQueueReceive+0x132>
 800344e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003456:	f001 ff27 	bl	80052a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800345a:	1d3a      	adds	r2, r7, #4
 800345c:	f107 0310 	add.w	r3, r7, #16
 8003460:	4611      	mov	r1, r2
 8003462:	4618      	mov	r0, r3
 8003464:	f000 ff8c 	bl	8004380 <xTaskCheckForTimeOut>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d123      	bne.n	80034b6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800346e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003470:	f000 fa36 	bl	80038e0 <prvIsQueueEmpty>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d017      	beq.n	80034aa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800347a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347c:	3324      	adds	r3, #36	; 0x24
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	4611      	mov	r1, r2
 8003482:	4618      	mov	r0, r3
 8003484:	f000 feb6 	bl	80041f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800348a:	f000 f9d7 	bl	800383c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800348e:	f000 fceb 	bl	8003e68 <xTaskResumeAll>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d189      	bne.n	80033ac <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003498:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <xQueueReceive+0x1b4>)
 800349a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	f3bf 8f4f 	dsb	sy
 80034a4:	f3bf 8f6f 	isb	sy
 80034a8:	e780      	b.n	80033ac <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80034aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034ac:	f000 f9c6 	bl	800383c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034b0:	f000 fcda 	bl	8003e68 <xTaskResumeAll>
 80034b4:	e77a      	b.n	80033ac <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80034b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034b8:	f000 f9c0 	bl	800383c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034bc:	f000 fcd4 	bl	8003e68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034c2:	f000 fa0d 	bl	80038e0 <prvIsQueueEmpty>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f43f af6f 	beq.w	80033ac <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80034ce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3730      	adds	r7, #48	; 0x30
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	e000ed04 	.word	0xe000ed04

080034dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b08e      	sub	sp, #56	; 0x38
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80034e6:	2300      	movs	r3, #0
 80034e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80034ee:	2300      	movs	r3, #0
 80034f0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d109      	bne.n	800350c <xQueueSemaphoreTake+0x30>
 80034f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fc:	f383 8811 	msr	BASEPRI, r3
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	623b      	str	r3, [r7, #32]
 800350a:	e7fe      	b.n	800350a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800350c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	2b00      	cmp	r3, #0
 8003512:	d009      	beq.n	8003528 <xQueueSemaphoreTake+0x4c>
 8003514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003518:	f383 8811 	msr	BASEPRI, r3
 800351c:	f3bf 8f6f 	isb	sy
 8003520:	f3bf 8f4f 	dsb	sy
 8003524:	61fb      	str	r3, [r7, #28]
 8003526:	e7fe      	b.n	8003526 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003528:	f001 f87e 	bl	8004628 <xTaskGetSchedulerState>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d102      	bne.n	8003538 <xQueueSemaphoreTake+0x5c>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <xQueueSemaphoreTake+0x60>
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <xQueueSemaphoreTake+0x62>
 800353c:	2300      	movs	r3, #0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d109      	bne.n	8003556 <xQueueSemaphoreTake+0x7a>
 8003542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003546:	f383 8811 	msr	BASEPRI, r3
 800354a:	f3bf 8f6f 	isb	sy
 800354e:	f3bf 8f4f 	dsb	sy
 8003552:	61bb      	str	r3, [r7, #24]
 8003554:	e7fe      	b.n	8003554 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003556:	f001 fe79 	bl	800524c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800355a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003562:	2b00      	cmp	r3, #0
 8003564:	d024      	beq.n	80035b0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003568:	1e5a      	subs	r2, r3, #1
 800356a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800356e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d104      	bne.n	8003580 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003576:	f001 f9d3 	bl	8004920 <pvTaskIncrementMutexHeldCount>
 800357a:	4602      	mov	r2, r0
 800357c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00f      	beq.n	80035a8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358a:	3310      	adds	r3, #16
 800358c:	4618      	mov	r0, r3
 800358e:	f000 fe7f 	bl	8004290 <xTaskRemoveFromEventList>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d007      	beq.n	80035a8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003598:	4b53      	ldr	r3, [pc, #332]	; (80036e8 <xQueueSemaphoreTake+0x20c>)
 800359a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	f3bf 8f4f 	dsb	sy
 80035a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80035a8:	f001 fe7e 	bl	80052a8 <vPortExitCritical>
				return pdPASS;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e096      	b.n	80036de <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d110      	bne.n	80035d8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80035b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d009      	beq.n	80035d0 <xQueueSemaphoreTake+0xf4>
 80035bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c0:	f383 8811 	msr	BASEPRI, r3
 80035c4:	f3bf 8f6f 	isb	sy
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	617b      	str	r3, [r7, #20]
 80035ce:	e7fe      	b.n	80035ce <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80035d0:	f001 fe6a 	bl	80052a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80035d4:	2300      	movs	r3, #0
 80035d6:	e082      	b.n	80036de <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d106      	bne.n	80035ec <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035de:	f107 030c 	add.w	r3, r7, #12
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 feb6 	bl	8004354 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035e8:	2301      	movs	r3, #1
 80035ea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035ec:	f001 fe5c 	bl	80052a8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035f0:	f000 fc2c 	bl	8003e4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035f4:	f001 fe2a 	bl	800524c <vPortEnterCritical>
 80035f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035fe:	b25b      	sxtb	r3, r3
 8003600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003604:	d103      	bne.n	800360e <xQueueSemaphoreTake+0x132>
 8003606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800360e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003610:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003614:	b25b      	sxtb	r3, r3
 8003616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361a:	d103      	bne.n	8003624 <xQueueSemaphoreTake+0x148>
 800361c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003624:	f001 fe40 	bl	80052a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003628:	463a      	mov	r2, r7
 800362a:	f107 030c 	add.w	r3, r7, #12
 800362e:	4611      	mov	r1, r2
 8003630:	4618      	mov	r0, r3
 8003632:	f000 fea5 	bl	8004380 <xTaskCheckForTimeOut>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d132      	bne.n	80036a2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800363c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800363e:	f000 f94f 	bl	80038e0 <prvIsQueueEmpty>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d026      	beq.n	8003696 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d109      	bne.n	8003664 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8003650:	f001 fdfc 	bl	800524c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	4618      	mov	r0, r3
 800365a:	f001 f803 	bl	8004664 <xTaskPriorityInherit>
 800365e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003660:	f001 fe22 	bl	80052a8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003666:	3324      	adds	r3, #36	; 0x24
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	4611      	mov	r1, r2
 800366c:	4618      	mov	r0, r3
 800366e:	f000 fdc1 	bl	80041f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003672:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003674:	f000 f8e2 	bl	800383c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003678:	f000 fbf6 	bl	8003e68 <xTaskResumeAll>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	f47f af69 	bne.w	8003556 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8003684:	4b18      	ldr	r3, [pc, #96]	; (80036e8 <xQueueSemaphoreTake+0x20c>)
 8003686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	f3bf 8f4f 	dsb	sy
 8003690:	f3bf 8f6f 	isb	sy
 8003694:	e75f      	b.n	8003556 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003696:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003698:	f000 f8d0 	bl	800383c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800369c:	f000 fbe4 	bl	8003e68 <xTaskResumeAll>
 80036a0:	e759      	b.n	8003556 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80036a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036a4:	f000 f8ca 	bl	800383c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036a8:	f000 fbde 	bl	8003e68 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036ae:	f000 f917 	bl	80038e0 <prvIsQueueEmpty>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f43f af4e 	beq.w	8003556 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80036ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00d      	beq.n	80036dc <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80036c0:	f001 fdc4 	bl	800524c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80036c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036c6:	f000 f811 	bl	80036ec <prvGetDisinheritPriorityAfterTimeout>
 80036ca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80036cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036d2:	4618      	mov	r0, r3
 80036d4:	f001 f8a0 	bl	8004818 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80036d8:	f001 fde6 	bl	80052a8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80036dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3738      	adds	r7, #56	; 0x38
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	e000ed04 	.word	0xe000ed04

080036ec <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d006      	beq.n	800370a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	e001      	b.n	800370e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800370e:	68fb      	ldr	r3, [r7, #12]
	}
 8003710:	4618      	mov	r0, r3
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003728:	2300      	movs	r3, #0
 800372a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003730:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10d      	bne.n	8003756 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d14d      	bne.n	80037de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	4618      	mov	r0, r3
 8003748:	f000 fffa 	bl	8004740 <xTaskPriorityDisinherit>
 800374c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	605a      	str	r2, [r3, #4]
 8003754:	e043      	b.n	80037de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d119      	bne.n	8003790 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6898      	ldr	r0, [r3, #8]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	461a      	mov	r2, r3
 8003766:	68b9      	ldr	r1, [r7, #8]
 8003768:	f002 f88a 	bl	8005880 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	689a      	ldr	r2, [r3, #8]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	441a      	add	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	429a      	cmp	r2, r3
 8003784:	d32b      	bcc.n	80037de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	609a      	str	r2, [r3, #8]
 800378e:	e026      	b.n	80037de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	68d8      	ldr	r0, [r3, #12]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	461a      	mov	r2, r3
 800379a:	68b9      	ldr	r1, [r7, #8]
 800379c:	f002 f870 	bl	8005880 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	425b      	negs	r3, r3
 80037aa:	441a      	add	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	68da      	ldr	r2, [r3, #12]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d207      	bcs.n	80037cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c4:	425b      	negs	r3, r3
 80037c6:	441a      	add	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d105      	bne.n	80037de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d002      	beq.n	80037de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	3b01      	subs	r3, #1
 80037dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1c5a      	adds	r2, r3, #1
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80037e6:	697b      	ldr	r3, [r7, #20]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d018      	beq.n	8003834 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	441a      	add	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	429a      	cmp	r2, r3
 800381a:	d303      	bcc.n	8003824 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68d9      	ldr	r1, [r3, #12]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382c:	461a      	mov	r2, r3
 800382e:	6838      	ldr	r0, [r7, #0]
 8003830:	f002 f826 	bl	8005880 <memcpy>
	}
}
 8003834:	bf00      	nop
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003844:	f001 fd02 	bl	800524c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800384e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003850:	e011      	b.n	8003876 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	2b00      	cmp	r3, #0
 8003858:	d012      	beq.n	8003880 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	3324      	adds	r3, #36	; 0x24
 800385e:	4618      	mov	r0, r3
 8003860:	f000 fd16 	bl	8004290 <xTaskRemoveFromEventList>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800386a:	f000 fde9 	bl	8004440 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800386e:	7bfb      	ldrb	r3, [r7, #15]
 8003870:	3b01      	subs	r3, #1
 8003872:	b2db      	uxtb	r3, r3
 8003874:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800387a:	2b00      	cmp	r3, #0
 800387c:	dce9      	bgt.n	8003852 <prvUnlockQueue+0x16>
 800387e:	e000      	b.n	8003882 <prvUnlockQueue+0x46>
					break;
 8003880:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	22ff      	movs	r2, #255	; 0xff
 8003886:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800388a:	f001 fd0d 	bl	80052a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800388e:	f001 fcdd 	bl	800524c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003898:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800389a:	e011      	b.n	80038c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d012      	beq.n	80038ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3310      	adds	r3, #16
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 fcf1 	bl	8004290 <xTaskRemoveFromEventList>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80038b4:	f000 fdc4 	bl	8004440 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80038b8:	7bbb      	ldrb	r3, [r7, #14]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	dce9      	bgt.n	800389c <prvUnlockQueue+0x60>
 80038c8:	e000      	b.n	80038cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80038ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	22ff      	movs	r2, #255	; 0xff
 80038d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80038d4:	f001 fce8 	bl	80052a8 <vPortExitCritical>
}
 80038d8:	bf00      	nop
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038e8:	f001 fcb0 	bl	800524c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d102      	bne.n	80038fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80038f4:	2301      	movs	r3, #1
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	e001      	b.n	80038fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80038fa:	2300      	movs	r3, #0
 80038fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038fe:	f001 fcd3 	bl	80052a8 <vPortExitCritical>

	return xReturn;
 8003902:	68fb      	ldr	r3, [r7, #12]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003914:	f001 fc9a 	bl	800524c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003920:	429a      	cmp	r2, r3
 8003922:	d102      	bne.n	800392a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003924:	2301      	movs	r3, #1
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	e001      	b.n	800392e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800392a:	2300      	movs	r3, #0
 800392c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800392e:	f001 fcbb 	bl	80052a8 <vPortExitCritical>

	return xReturn;
 8003932:	68fb      	ldr	r3, [r7, #12]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003946:	2300      	movs	r3, #0
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	e014      	b.n	8003976 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800394c:	4a0e      	ldr	r2, [pc, #56]	; (8003988 <vQueueAddToRegistry+0x4c>)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10b      	bne.n	8003970 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003958:	490b      	ldr	r1, [pc, #44]	; (8003988 <vQueueAddToRegistry+0x4c>)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003962:	4a09      	ldr	r2, [pc, #36]	; (8003988 <vQueueAddToRegistry+0x4c>)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	4413      	add	r3, r2
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800396e:	e005      	b.n	800397c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	3301      	adds	r3, #1
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2b07      	cmp	r3, #7
 800397a:	d9e7      	bls.n	800394c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800397c:	bf00      	nop
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	20004a30 	.word	0x20004a30

0800398c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800399c:	f001 fc56 	bl	800524c <vPortEnterCritical>
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039a6:	b25b      	sxtb	r3, r3
 80039a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ac:	d103      	bne.n	80039b6 <vQueueWaitForMessageRestricted+0x2a>
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039bc:	b25b      	sxtb	r3, r3
 80039be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c2:	d103      	bne.n	80039cc <vQueueWaitForMessageRestricted+0x40>
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039cc:	f001 fc6c 	bl	80052a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d106      	bne.n	80039e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	3324      	adds	r3, #36	; 0x24
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	68b9      	ldr	r1, [r7, #8]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 fc2b 	bl	800423c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80039e6:	6978      	ldr	r0, [r7, #20]
 80039e8:	f7ff ff28 	bl	800383c <prvUnlockQueue>
	}
 80039ec:	bf00      	nop
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b08e      	sub	sp, #56	; 0x38
 80039f8:	af04      	add	r7, sp, #16
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d109      	bne.n	8003a1c <xTaskCreateStatic+0x28>
 8003a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0c:	f383 8811 	msr	BASEPRI, r3
 8003a10:	f3bf 8f6f 	isb	sy
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	623b      	str	r3, [r7, #32]
 8003a1a:	e7fe      	b.n	8003a1a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d109      	bne.n	8003a36 <xTaskCreateStatic+0x42>
 8003a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a26:	f383 8811 	msr	BASEPRI, r3
 8003a2a:	f3bf 8f6f 	isb	sy
 8003a2e:	f3bf 8f4f 	dsb	sy
 8003a32:	61fb      	str	r3, [r7, #28]
 8003a34:	e7fe      	b.n	8003a34 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a36:	235c      	movs	r3, #92	; 0x5c
 8003a38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	2b5c      	cmp	r3, #92	; 0x5c
 8003a3e:	d009      	beq.n	8003a54 <xTaskCreateStatic+0x60>
 8003a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a44:	f383 8811 	msr	BASEPRI, r3
 8003a48:	f3bf 8f6f 	isb	sy
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	61bb      	str	r3, [r7, #24]
 8003a52:	e7fe      	b.n	8003a52 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d01e      	beq.n	8003a98 <xTaskCreateStatic+0xa4>
 8003a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d01b      	beq.n	8003a98 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a68:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a72:	2300      	movs	r3, #0
 8003a74:	9303      	str	r3, [sp, #12]
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a78:	9302      	str	r3, [sp, #8]
 8003a7a:	f107 0314 	add.w	r3, r7, #20
 8003a7e:	9301      	str	r3, [sp, #4]
 8003a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	68b9      	ldr	r1, [r7, #8]
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 f850 	bl	8003b30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a92:	f000 f8d3 	bl	8003c3c <prvAddNewTaskToReadyList>
 8003a96:	e001      	b.n	8003a9c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a9c:	697b      	ldr	r3, [r7, #20]
	}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3728      	adds	r7, #40	; 0x28
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b08c      	sub	sp, #48	; 0x30
 8003aaa:	af04      	add	r7, sp, #16
 8003aac:	60f8      	str	r0, [r7, #12]
 8003aae:	60b9      	str	r1, [r7, #8]
 8003ab0:	603b      	str	r3, [r7, #0]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ab6:	88fb      	ldrh	r3, [r7, #6]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4618      	mov	r0, r3
 8003abc:	f001 fce0 	bl	8005480 <pvPortMalloc>
 8003ac0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00e      	beq.n	8003ae6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003ac8:	205c      	movs	r0, #92	; 0x5c
 8003aca:	f001 fcd9 	bl	8005480 <pvPortMalloc>
 8003ace:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	631a      	str	r2, [r3, #48]	; 0x30
 8003adc:	e005      	b.n	8003aea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ade:	6978      	ldr	r0, [r7, #20]
 8003ae0:	f001 fd90 	bl	8005604 <vPortFree>
 8003ae4:	e001      	b.n	8003aea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d017      	beq.n	8003b20 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003af8:	88fa      	ldrh	r2, [r7, #6]
 8003afa:	2300      	movs	r3, #0
 8003afc:	9303      	str	r3, [sp, #12]
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	9302      	str	r3, [sp, #8]
 8003b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b04:	9301      	str	r3, [sp, #4]
 8003b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	68b9      	ldr	r1, [r7, #8]
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 f80e 	bl	8003b30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b14:	69f8      	ldr	r0, [r7, #28]
 8003b16:	f000 f891 	bl	8003c3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	61bb      	str	r3, [r7, #24]
 8003b1e:	e002      	b.n	8003b26 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b20:	f04f 33ff 	mov.w	r3, #4294967295
 8003b24:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b26:	69bb      	ldr	r3, [r7, #24]
	}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3720      	adds	r7, #32
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b088      	sub	sp, #32
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
 8003b3c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b40:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	461a      	mov	r2, r3
 8003b48:	21a5      	movs	r1, #165	; 0xa5
 8003b4a:	f001 fea4 	bl	8005896 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	f023 0307 	bic.w	r3, r3, #7
 8003b66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d009      	beq.n	8003b86 <prvInitialiseNewTask+0x56>
 8003b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b76:	f383 8811 	msr	BASEPRI, r3
 8003b7a:	f3bf 8f6f 	isb	sy
 8003b7e:	f3bf 8f4f 	dsb	sy
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	e7fe      	b.n	8003b84 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b86:	2300      	movs	r3, #0
 8003b88:	61fb      	str	r3, [r7, #28]
 8003b8a:	e012      	b.n	8003bb2 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	4413      	add	r3, r2
 8003b92:	7819      	ldrb	r1, [r3, #0]
 8003b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	4413      	add	r3, r2
 8003b9a:	3334      	adds	r3, #52	; 0x34
 8003b9c:	460a      	mov	r2, r1
 8003b9e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d006      	beq.n	8003bba <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	61fb      	str	r3, [r7, #28]
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	2b0f      	cmp	r3, #15
 8003bb6:	d9e9      	bls.n	8003b8c <prvInitialiseNewTask+0x5c>
 8003bb8:	e000      	b.n	8003bbc <prvInitialiseNewTask+0x8c>
		{
			break;
 8003bba:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc6:	2b37      	cmp	r3, #55	; 0x37
 8003bc8:	d901      	bls.n	8003bce <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003bca:	2337      	movs	r3, #55	; 0x37
 8003bcc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bd2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bd8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bdc:	2200      	movs	r2, #0
 8003bde:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be2:	3304      	adds	r3, #4
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7fe ff8b 	bl	8002b00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bec:	3318      	adds	r3, #24
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fe ff86 	bl	8002b00 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bf8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c02:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c08:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	68f9      	ldr	r1, [r7, #12]
 8003c1c:	69b8      	ldr	r0, [r7, #24]
 8003c1e:	f001 f9f1 	bl	8005004 <pxPortInitialiseStack>
 8003c22:	4602      	mov	r2, r0
 8003c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c26:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c32:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c34:	bf00      	nop
 8003c36:	3720      	adds	r7, #32
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c44:	f001 fb02 	bl	800524c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c48:	4b2d      	ldr	r3, [pc, #180]	; (8003d00 <prvAddNewTaskToReadyList+0xc4>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	4a2c      	ldr	r2, [pc, #176]	; (8003d00 <prvAddNewTaskToReadyList+0xc4>)
 8003c50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c52:	4b2c      	ldr	r3, [pc, #176]	; (8003d04 <prvAddNewTaskToReadyList+0xc8>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d109      	bne.n	8003c6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c5a:	4a2a      	ldr	r2, [pc, #168]	; (8003d04 <prvAddNewTaskToReadyList+0xc8>)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c60:	4b27      	ldr	r3, [pc, #156]	; (8003d00 <prvAddNewTaskToReadyList+0xc4>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d110      	bne.n	8003c8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c68:	f000 fc0e 	bl	8004488 <prvInitialiseTaskLists>
 8003c6c:	e00d      	b.n	8003c8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c6e:	4b26      	ldr	r3, [pc, #152]	; (8003d08 <prvAddNewTaskToReadyList+0xcc>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d109      	bne.n	8003c8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c76:	4b23      	ldr	r3, [pc, #140]	; (8003d04 <prvAddNewTaskToReadyList+0xc8>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d802      	bhi.n	8003c8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c84:	4a1f      	ldr	r2, [pc, #124]	; (8003d04 <prvAddNewTaskToReadyList+0xc8>)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c8a:	4b20      	ldr	r3, [pc, #128]	; (8003d0c <prvAddNewTaskToReadyList+0xd0>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	4a1e      	ldr	r2, [pc, #120]	; (8003d0c <prvAddNewTaskToReadyList+0xd0>)
 8003c92:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003c94:	4b1d      	ldr	r3, [pc, #116]	; (8003d0c <prvAddNewTaskToReadyList+0xd0>)
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca0:	4b1b      	ldr	r3, [pc, #108]	; (8003d10 <prvAddNewTaskToReadyList+0xd4>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d903      	bls.n	8003cb0 <prvAddNewTaskToReadyList+0x74>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cac:	4a18      	ldr	r2, [pc, #96]	; (8003d10 <prvAddNewTaskToReadyList+0xd4>)
 8003cae:	6013      	str	r3, [r2, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4a15      	ldr	r2, [pc, #84]	; (8003d14 <prvAddNewTaskToReadyList+0xd8>)
 8003cbe:	441a      	add	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	f7fe ff27 	bl	8002b1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ccc:	f001 faec 	bl	80052a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003cd0:	4b0d      	ldr	r3, [pc, #52]	; (8003d08 <prvAddNewTaskToReadyList+0xcc>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00e      	beq.n	8003cf6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003cd8:	4b0a      	ldr	r3, [pc, #40]	; (8003d04 <prvAddNewTaskToReadyList+0xc8>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d207      	bcs.n	8003cf6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003ce6:	4b0c      	ldr	r3, [pc, #48]	; (8003d18 <prvAddNewTaskToReadyList+0xdc>)
 8003ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	f3bf 8f4f 	dsb	sy
 8003cf2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cf6:	bf00      	nop
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	20000c20 	.word	0x20000c20
 8003d04:	2000074c 	.word	0x2000074c
 8003d08:	20000c2c 	.word	0x20000c2c
 8003d0c:	20000c3c 	.word	0x20000c3c
 8003d10:	20000c28 	.word	0x20000c28
 8003d14:	20000750 	.word	0x20000750
 8003d18:	e000ed04 	.word	0xe000ed04

08003d1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d24:	2300      	movs	r3, #0
 8003d26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d016      	beq.n	8003d5c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d2e:	4b13      	ldr	r3, [pc, #76]	; (8003d7c <vTaskDelay+0x60>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d009      	beq.n	8003d4a <vTaskDelay+0x2e>
 8003d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3a:	f383 8811 	msr	BASEPRI, r3
 8003d3e:	f3bf 8f6f 	isb	sy
 8003d42:	f3bf 8f4f 	dsb	sy
 8003d46:	60bb      	str	r3, [r7, #8]
 8003d48:	e7fe      	b.n	8003d48 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003d4a:	f000 f87f 	bl	8003e4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d4e:	2100      	movs	r1, #0
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 fdf9 	bl	8004948 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d56:	f000 f887 	bl	8003e68 <xTaskResumeAll>
 8003d5a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d107      	bne.n	8003d72 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003d62:	4b07      	ldr	r3, [pc, #28]	; (8003d80 <vTaskDelay+0x64>)
 8003d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d72:	bf00      	nop
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20000c48 	.word	0x20000c48
 8003d80:	e000ed04 	.word	0xe000ed04

08003d84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b08a      	sub	sp, #40	; 0x28
 8003d88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d92:	463a      	mov	r2, r7
 8003d94:	1d39      	adds	r1, r7, #4
 8003d96:	f107 0308 	add.w	r3, r7, #8
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fe fe5c 	bl	8002a58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003da0:	6839      	ldr	r1, [r7, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68ba      	ldr	r2, [r7, #8]
 8003da6:	9202      	str	r2, [sp, #8]
 8003da8:	9301      	str	r3, [sp, #4]
 8003daa:	2300      	movs	r3, #0
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	2300      	movs	r3, #0
 8003db0:	460a      	mov	r2, r1
 8003db2:	4920      	ldr	r1, [pc, #128]	; (8003e34 <vTaskStartScheduler+0xb0>)
 8003db4:	4820      	ldr	r0, [pc, #128]	; (8003e38 <vTaskStartScheduler+0xb4>)
 8003db6:	f7ff fe1d 	bl	80039f4 <xTaskCreateStatic>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	4b1f      	ldr	r3, [pc, #124]	; (8003e3c <vTaskStartScheduler+0xb8>)
 8003dbe:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003dc0:	4b1e      	ldr	r3, [pc, #120]	; (8003e3c <vTaskStartScheduler+0xb8>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	e001      	b.n	8003dd2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d102      	bne.n	8003dde <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003dd8:	f000 fe0a 	bl	80049f0 <xTimerCreateTimerTask>
 8003ddc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d115      	bne.n	8003e10 <vTaskStartScheduler+0x8c>
 8003de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de8:	f383 8811 	msr	BASEPRI, r3
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003df6:	4b12      	ldr	r3, [pc, #72]	; (8003e40 <vTaskStartScheduler+0xbc>)
 8003df8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dfc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003dfe:	4b11      	ldr	r3, [pc, #68]	; (8003e44 <vTaskStartScheduler+0xc0>)
 8003e00:	2201      	movs	r2, #1
 8003e02:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003e04:	4b10      	ldr	r3, [pc, #64]	; (8003e48 <vTaskStartScheduler+0xc4>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e0a:	f001 f981 	bl	8005110 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e0e:	e00d      	b.n	8003e2c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e16:	d109      	bne.n	8003e2c <vTaskStartScheduler+0xa8>
 8003e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1c:	f383 8811 	msr	BASEPRI, r3
 8003e20:	f3bf 8f6f 	isb	sy
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	e7fe      	b.n	8003e2a <vTaskStartScheduler+0xa6>
}
 8003e2c:	bf00      	nop
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	08006110 	.word	0x08006110
 8003e38:	08004459 	.word	0x08004459
 8003e3c:	20000c44 	.word	0x20000c44
 8003e40:	20000c40 	.word	0x20000c40
 8003e44:	20000c2c 	.word	0x20000c2c
 8003e48:	20000c24 	.word	0x20000c24

08003e4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003e50:	4b04      	ldr	r3, [pc, #16]	; (8003e64 <vTaskSuspendAll+0x18>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3301      	adds	r3, #1
 8003e56:	4a03      	ldr	r2, [pc, #12]	; (8003e64 <vTaskSuspendAll+0x18>)
 8003e58:	6013      	str	r3, [r2, #0]
}
 8003e5a:	bf00      	nop
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	20000c48 	.word	0x20000c48

08003e68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e72:	2300      	movs	r3, #0
 8003e74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e76:	4b41      	ldr	r3, [pc, #260]	; (8003f7c <xTaskResumeAll+0x114>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d109      	bne.n	8003e92 <xTaskResumeAll+0x2a>
 8003e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	603b      	str	r3, [r7, #0]
 8003e90:	e7fe      	b.n	8003e90 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e92:	f001 f9db 	bl	800524c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e96:	4b39      	ldr	r3, [pc, #228]	; (8003f7c <xTaskResumeAll+0x114>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	4a37      	ldr	r2, [pc, #220]	; (8003f7c <xTaskResumeAll+0x114>)
 8003e9e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ea0:	4b36      	ldr	r3, [pc, #216]	; (8003f7c <xTaskResumeAll+0x114>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d162      	bne.n	8003f6e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ea8:	4b35      	ldr	r3, [pc, #212]	; (8003f80 <xTaskResumeAll+0x118>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d05e      	beq.n	8003f6e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003eb0:	e02f      	b.n	8003f12 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003eb2:	4b34      	ldr	r3, [pc, #208]	; (8003f84 <xTaskResumeAll+0x11c>)
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	3318      	adds	r3, #24
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fe fe88 	bl	8002bd4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7fe fe83 	bl	8002bd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed2:	4b2d      	ldr	r3, [pc, #180]	; (8003f88 <xTaskResumeAll+0x120>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d903      	bls.n	8003ee2 <xTaskResumeAll+0x7a>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	4a2a      	ldr	r2, [pc, #168]	; (8003f88 <xTaskResumeAll+0x120>)
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4a27      	ldr	r2, [pc, #156]	; (8003f8c <xTaskResumeAll+0x124>)
 8003ef0:	441a      	add	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	4610      	mov	r0, r2
 8003efa:	f7fe fe0e 	bl	8002b1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f02:	4b23      	ldr	r3, [pc, #140]	; (8003f90 <xTaskResumeAll+0x128>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d302      	bcc.n	8003f12 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003f0c:	4b21      	ldr	r3, [pc, #132]	; (8003f94 <xTaskResumeAll+0x12c>)
 8003f0e:	2201      	movs	r2, #1
 8003f10:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f12:	4b1c      	ldr	r3, [pc, #112]	; (8003f84 <xTaskResumeAll+0x11c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1cb      	bne.n	8003eb2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f20:	f000 fb4c 	bl	80045bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003f24:	4b1c      	ldr	r3, [pc, #112]	; (8003f98 <xTaskResumeAll+0x130>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d010      	beq.n	8003f52 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f30:	f000 f846 	bl	8003fc0 <xTaskIncrementTick>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003f3a:	4b16      	ldr	r3, [pc, #88]	; (8003f94 <xTaskResumeAll+0x12c>)
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	3b01      	subs	r3, #1
 8003f44:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1f1      	bne.n	8003f30 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003f4c:	4b12      	ldr	r3, [pc, #72]	; (8003f98 <xTaskResumeAll+0x130>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f52:	4b10      	ldr	r3, [pc, #64]	; (8003f94 <xTaskResumeAll+0x12c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d009      	beq.n	8003f6e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f5e:	4b0f      	ldr	r3, [pc, #60]	; (8003f9c <xTaskResumeAll+0x134>)
 8003f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	f3bf 8f4f 	dsb	sy
 8003f6a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f6e:	f001 f99b 	bl	80052a8 <vPortExitCritical>

	return xAlreadyYielded;
 8003f72:	68bb      	ldr	r3, [r7, #8]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	20000c48 	.word	0x20000c48
 8003f80:	20000c20 	.word	0x20000c20
 8003f84:	20000be0 	.word	0x20000be0
 8003f88:	20000c28 	.word	0x20000c28
 8003f8c:	20000750 	.word	0x20000750
 8003f90:	2000074c 	.word	0x2000074c
 8003f94:	20000c34 	.word	0x20000c34
 8003f98:	20000c30 	.word	0x20000c30
 8003f9c:	e000ed04 	.word	0xe000ed04

08003fa0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003fa6:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <xTaskGetTickCount+0x1c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003fac:	687b      	ldr	r3, [r7, #4]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	20000c24 	.word	0x20000c24

08003fc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fca:	4b51      	ldr	r3, [pc, #324]	; (8004110 <xTaskIncrementTick+0x150>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f040 808d 	bne.w	80040ee <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003fd4:	4b4f      	ldr	r3, [pc, #316]	; (8004114 <xTaskIncrementTick+0x154>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	3301      	adds	r3, #1
 8003fda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003fdc:	4a4d      	ldr	r2, [pc, #308]	; (8004114 <xTaskIncrementTick+0x154>)
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d11f      	bne.n	8004028 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003fe8:	4b4b      	ldr	r3, [pc, #300]	; (8004118 <xTaskIncrementTick+0x158>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d009      	beq.n	8004006 <xTaskIncrementTick+0x46>
 8003ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff6:	f383 8811 	msr	BASEPRI, r3
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	603b      	str	r3, [r7, #0]
 8004004:	e7fe      	b.n	8004004 <xTaskIncrementTick+0x44>
 8004006:	4b44      	ldr	r3, [pc, #272]	; (8004118 <xTaskIncrementTick+0x158>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	60fb      	str	r3, [r7, #12]
 800400c:	4b43      	ldr	r3, [pc, #268]	; (800411c <xTaskIncrementTick+0x15c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a41      	ldr	r2, [pc, #260]	; (8004118 <xTaskIncrementTick+0x158>)
 8004012:	6013      	str	r3, [r2, #0]
 8004014:	4a41      	ldr	r2, [pc, #260]	; (800411c <xTaskIncrementTick+0x15c>)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6013      	str	r3, [r2, #0]
 800401a:	4b41      	ldr	r3, [pc, #260]	; (8004120 <xTaskIncrementTick+0x160>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	3301      	adds	r3, #1
 8004020:	4a3f      	ldr	r2, [pc, #252]	; (8004120 <xTaskIncrementTick+0x160>)
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	f000 faca 	bl	80045bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004028:	4b3e      	ldr	r3, [pc, #248]	; (8004124 <xTaskIncrementTick+0x164>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	429a      	cmp	r2, r3
 8004030:	d34e      	bcc.n	80040d0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004032:	4b39      	ldr	r3, [pc, #228]	; (8004118 <xTaskIncrementTick+0x158>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <xTaskIncrementTick+0x80>
 800403c:	2301      	movs	r3, #1
 800403e:	e000      	b.n	8004042 <xTaskIncrementTick+0x82>
 8004040:	2300      	movs	r3, #0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d004      	beq.n	8004050 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004046:	4b37      	ldr	r3, [pc, #220]	; (8004124 <xTaskIncrementTick+0x164>)
 8004048:	f04f 32ff 	mov.w	r2, #4294967295
 800404c:	601a      	str	r2, [r3, #0]
					break;
 800404e:	e03f      	b.n	80040d0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004050:	4b31      	ldr	r3, [pc, #196]	; (8004118 <xTaskIncrementTick+0x158>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	429a      	cmp	r2, r3
 8004066:	d203      	bcs.n	8004070 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004068:	4a2e      	ldr	r2, [pc, #184]	; (8004124 <xTaskIncrementTick+0x164>)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6013      	str	r3, [r2, #0]
						break;
 800406e:	e02f      	b.n	80040d0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	3304      	adds	r3, #4
 8004074:	4618      	mov	r0, r3
 8004076:	f7fe fdad 	bl	8002bd4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407e:	2b00      	cmp	r3, #0
 8004080:	d004      	beq.n	800408c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	3318      	adds	r3, #24
 8004086:	4618      	mov	r0, r3
 8004088:	f7fe fda4 	bl	8002bd4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004090:	4b25      	ldr	r3, [pc, #148]	; (8004128 <xTaskIncrementTick+0x168>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	429a      	cmp	r2, r3
 8004096:	d903      	bls.n	80040a0 <xTaskIncrementTick+0xe0>
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	4a22      	ldr	r2, [pc, #136]	; (8004128 <xTaskIncrementTick+0x168>)
 800409e:	6013      	str	r3, [r2, #0]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a4:	4613      	mov	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4413      	add	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4a1f      	ldr	r2, [pc, #124]	; (800412c <xTaskIncrementTick+0x16c>)
 80040ae:	441a      	add	r2, r3
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	3304      	adds	r3, #4
 80040b4:	4619      	mov	r1, r3
 80040b6:	4610      	mov	r0, r2
 80040b8:	f7fe fd2f 	bl	8002b1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c0:	4b1b      	ldr	r3, [pc, #108]	; (8004130 <xTaskIncrementTick+0x170>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d3b3      	bcc.n	8004032 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80040ca:	2301      	movs	r3, #1
 80040cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040ce:	e7b0      	b.n	8004032 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040d0:	4b17      	ldr	r3, [pc, #92]	; (8004130 <xTaskIncrementTick+0x170>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d6:	4915      	ldr	r1, [pc, #84]	; (800412c <xTaskIncrementTick+0x16c>)
 80040d8:	4613      	mov	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	440b      	add	r3, r1
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d907      	bls.n	80040f8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80040e8:	2301      	movs	r3, #1
 80040ea:	617b      	str	r3, [r7, #20]
 80040ec:	e004      	b.n	80040f8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80040ee:	4b11      	ldr	r3, [pc, #68]	; (8004134 <xTaskIncrementTick+0x174>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3301      	adds	r3, #1
 80040f4:	4a0f      	ldr	r2, [pc, #60]	; (8004134 <xTaskIncrementTick+0x174>)
 80040f6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80040f8:	4b0f      	ldr	r3, [pc, #60]	; (8004138 <xTaskIncrementTick+0x178>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004100:	2301      	movs	r3, #1
 8004102:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004104:	697b      	ldr	r3, [r7, #20]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	20000c48 	.word	0x20000c48
 8004114:	20000c24 	.word	0x20000c24
 8004118:	20000bd8 	.word	0x20000bd8
 800411c:	20000bdc 	.word	0x20000bdc
 8004120:	20000c38 	.word	0x20000c38
 8004124:	20000c40 	.word	0x20000c40
 8004128:	20000c28 	.word	0x20000c28
 800412c:	20000750 	.word	0x20000750
 8004130:	2000074c 	.word	0x2000074c
 8004134:	20000c30 	.word	0x20000c30
 8004138:	20000c34 	.word	0x20000c34

0800413c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004142:	4b27      	ldr	r3, [pc, #156]	; (80041e0 <vTaskSwitchContext+0xa4>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800414a:	4b26      	ldr	r3, [pc, #152]	; (80041e4 <vTaskSwitchContext+0xa8>)
 800414c:	2201      	movs	r2, #1
 800414e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004150:	e040      	b.n	80041d4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004152:	4b24      	ldr	r3, [pc, #144]	; (80041e4 <vTaskSwitchContext+0xa8>)
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004158:	4b23      	ldr	r3, [pc, #140]	; (80041e8 <vTaskSwitchContext+0xac>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	e00f      	b.n	8004180 <vTaskSwitchContext+0x44>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d109      	bne.n	800417a <vTaskSwitchContext+0x3e>
 8004166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416a:	f383 8811 	msr	BASEPRI, r3
 800416e:	f3bf 8f6f 	isb	sy
 8004172:	f3bf 8f4f 	dsb	sy
 8004176:	607b      	str	r3, [r7, #4]
 8004178:	e7fe      	b.n	8004178 <vTaskSwitchContext+0x3c>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	3b01      	subs	r3, #1
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	491a      	ldr	r1, [pc, #104]	; (80041ec <vTaskSwitchContext+0xb0>)
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	4613      	mov	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0e5      	beq.n	8004160 <vTaskSwitchContext+0x24>
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4613      	mov	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4a13      	ldr	r2, [pc, #76]	; (80041ec <vTaskSwitchContext+0xb0>)
 80041a0:	4413      	add	r3, r2
 80041a2:	60bb      	str	r3, [r7, #8]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	605a      	str	r2, [r3, #4]
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	3308      	adds	r3, #8
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d104      	bne.n	80041c4 <vTaskSwitchContext+0x88>
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	605a      	str	r2, [r3, #4]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	4a09      	ldr	r2, [pc, #36]	; (80041f0 <vTaskSwitchContext+0xb4>)
 80041cc:	6013      	str	r3, [r2, #0]
 80041ce:	4a06      	ldr	r2, [pc, #24]	; (80041e8 <vTaskSwitchContext+0xac>)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6013      	str	r3, [r2, #0]
}
 80041d4:	bf00      	nop
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	20000c48 	.word	0x20000c48
 80041e4:	20000c34 	.word	0x20000c34
 80041e8:	20000c28 	.word	0x20000c28
 80041ec:	20000750 	.word	0x20000750
 80041f0:	2000074c 	.word	0x2000074c

080041f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d109      	bne.n	8004218 <vTaskPlaceOnEventList+0x24>
 8004204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	60fb      	str	r3, [r7, #12]
 8004216:	e7fe      	b.n	8004216 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004218:	4b07      	ldr	r3, [pc, #28]	; (8004238 <vTaskPlaceOnEventList+0x44>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	3318      	adds	r3, #24
 800421e:	4619      	mov	r1, r3
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f7fe fc9e 	bl	8002b62 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004226:	2101      	movs	r1, #1
 8004228:	6838      	ldr	r0, [r7, #0]
 800422a:	f000 fb8d 	bl	8004948 <prvAddCurrentTaskToDelayedList>
}
 800422e:	bf00      	nop
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	2000074c 	.word	0x2000074c

0800423c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d109      	bne.n	8004262 <vTaskPlaceOnEventListRestricted+0x26>
 800424e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004252:	f383 8811 	msr	BASEPRI, r3
 8004256:	f3bf 8f6f 	isb	sy
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	617b      	str	r3, [r7, #20]
 8004260:	e7fe      	b.n	8004260 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004262:	4b0a      	ldr	r3, [pc, #40]	; (800428c <vTaskPlaceOnEventListRestricted+0x50>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3318      	adds	r3, #24
 8004268:	4619      	mov	r1, r3
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f7fe fc55 	bl	8002b1a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d002      	beq.n	800427c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004276:	f04f 33ff 	mov.w	r3, #4294967295
 800427a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800427c:	6879      	ldr	r1, [r7, #4]
 800427e:	68b8      	ldr	r0, [r7, #8]
 8004280:	f000 fb62 	bl	8004948 <prvAddCurrentTaskToDelayedList>
	}
 8004284:	bf00      	nop
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	2000074c 	.word	0x2000074c

08004290 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d109      	bne.n	80042ba <xTaskRemoveFromEventList+0x2a>
 80042a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	60fb      	str	r3, [r7, #12]
 80042b8:	e7fe      	b.n	80042b8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	3318      	adds	r3, #24
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fe fc88 	bl	8002bd4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042c4:	4b1d      	ldr	r3, [pc, #116]	; (800433c <xTaskRemoveFromEventList+0xac>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d11d      	bne.n	8004308 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	3304      	adds	r3, #4
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7fe fc7f 	bl	8002bd4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042da:	4b19      	ldr	r3, [pc, #100]	; (8004340 <xTaskRemoveFromEventList+0xb0>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d903      	bls.n	80042ea <xTaskRemoveFromEventList+0x5a>
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e6:	4a16      	ldr	r2, [pc, #88]	; (8004340 <xTaskRemoveFromEventList+0xb0>)
 80042e8:	6013      	str	r3, [r2, #0]
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ee:	4613      	mov	r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4413      	add	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4a13      	ldr	r2, [pc, #76]	; (8004344 <xTaskRemoveFromEventList+0xb4>)
 80042f8:	441a      	add	r2, r3
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	3304      	adds	r3, #4
 80042fe:	4619      	mov	r1, r3
 8004300:	4610      	mov	r0, r2
 8004302:	f7fe fc0a 	bl	8002b1a <vListInsertEnd>
 8004306:	e005      	b.n	8004314 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	3318      	adds	r3, #24
 800430c:	4619      	mov	r1, r3
 800430e:	480e      	ldr	r0, [pc, #56]	; (8004348 <xTaskRemoveFromEventList+0xb8>)
 8004310:	f7fe fc03 	bl	8002b1a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004318:	4b0c      	ldr	r3, [pc, #48]	; (800434c <xTaskRemoveFromEventList+0xbc>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431e:	429a      	cmp	r2, r3
 8004320:	d905      	bls.n	800432e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004322:	2301      	movs	r3, #1
 8004324:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004326:	4b0a      	ldr	r3, [pc, #40]	; (8004350 <xTaskRemoveFromEventList+0xc0>)
 8004328:	2201      	movs	r2, #1
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	e001      	b.n	8004332 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800432e:	2300      	movs	r3, #0
 8004330:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004332:	697b      	ldr	r3, [r7, #20]
}
 8004334:	4618      	mov	r0, r3
 8004336:	3718      	adds	r7, #24
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	20000c48 	.word	0x20000c48
 8004340:	20000c28 	.word	0x20000c28
 8004344:	20000750 	.word	0x20000750
 8004348:	20000be0 	.word	0x20000be0
 800434c:	2000074c 	.word	0x2000074c
 8004350:	20000c34 	.word	0x20000c34

08004354 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800435c:	4b06      	ldr	r3, [pc, #24]	; (8004378 <vTaskInternalSetTimeOutState+0x24>)
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004364:	4b05      	ldr	r3, [pc, #20]	; (800437c <vTaskInternalSetTimeOutState+0x28>)
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	605a      	str	r2, [r3, #4]
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	20000c38 	.word	0x20000c38
 800437c:	20000c24 	.word	0x20000c24

08004380 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b088      	sub	sp, #32
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d109      	bne.n	80043a4 <xTaskCheckForTimeOut+0x24>
 8004390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004394:	f383 8811 	msr	BASEPRI, r3
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	613b      	str	r3, [r7, #16]
 80043a2:	e7fe      	b.n	80043a2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d109      	bne.n	80043be <xTaskCheckForTimeOut+0x3e>
 80043aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	e7fe      	b.n	80043bc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80043be:	f000 ff45 	bl	800524c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80043c2:	4b1d      	ldr	r3, [pc, #116]	; (8004438 <xTaskCheckForTimeOut+0xb8>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043da:	d102      	bne.n	80043e2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80043dc:	2300      	movs	r3, #0
 80043de:	61fb      	str	r3, [r7, #28]
 80043e0:	e023      	b.n	800442a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	4b15      	ldr	r3, [pc, #84]	; (800443c <xTaskCheckForTimeOut+0xbc>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d007      	beq.n	80043fe <xTaskCheckForTimeOut+0x7e>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d302      	bcc.n	80043fe <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80043f8:	2301      	movs	r3, #1
 80043fa:	61fb      	str	r3, [r7, #28]
 80043fc:	e015      	b.n	800442a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	429a      	cmp	r2, r3
 8004406:	d20b      	bcs.n	8004420 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	1ad2      	subs	r2, r2, r3
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f7ff ff9d 	bl	8004354 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800441a:	2300      	movs	r3, #0
 800441c:	61fb      	str	r3, [r7, #28]
 800441e:	e004      	b.n	800442a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2200      	movs	r2, #0
 8004424:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004426:	2301      	movs	r3, #1
 8004428:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800442a:	f000 ff3d 	bl	80052a8 <vPortExitCritical>

	return xReturn;
 800442e:	69fb      	ldr	r3, [r7, #28]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3720      	adds	r7, #32
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	20000c24 	.word	0x20000c24
 800443c:	20000c38 	.word	0x20000c38

08004440 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004444:	4b03      	ldr	r3, [pc, #12]	; (8004454 <vTaskMissedYield+0x14>)
 8004446:	2201      	movs	r2, #1
 8004448:	601a      	str	r2, [r3, #0]
}
 800444a:	bf00      	nop
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	20000c34 	.word	0x20000c34

08004458 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004460:	f000 f852 	bl	8004508 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004464:	4b06      	ldr	r3, [pc, #24]	; (8004480 <prvIdleTask+0x28>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d9f9      	bls.n	8004460 <prvIdleTask+0x8>
			{
				taskYIELD();
 800446c:	4b05      	ldr	r3, [pc, #20]	; (8004484 <prvIdleTask+0x2c>)
 800446e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800447c:	e7f0      	b.n	8004460 <prvIdleTask+0x8>
 800447e:	bf00      	nop
 8004480:	20000750 	.word	0x20000750
 8004484:	e000ed04 	.word	0xe000ed04

08004488 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800448e:	2300      	movs	r3, #0
 8004490:	607b      	str	r3, [r7, #4]
 8004492:	e00c      	b.n	80044ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	4613      	mov	r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4413      	add	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4a12      	ldr	r2, [pc, #72]	; (80044e8 <prvInitialiseTaskLists+0x60>)
 80044a0:	4413      	add	r3, r2
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fe fb0c 	bl	8002ac0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3301      	adds	r3, #1
 80044ac:	607b      	str	r3, [r7, #4]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b37      	cmp	r3, #55	; 0x37
 80044b2:	d9ef      	bls.n	8004494 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80044b4:	480d      	ldr	r0, [pc, #52]	; (80044ec <prvInitialiseTaskLists+0x64>)
 80044b6:	f7fe fb03 	bl	8002ac0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80044ba:	480d      	ldr	r0, [pc, #52]	; (80044f0 <prvInitialiseTaskLists+0x68>)
 80044bc:	f7fe fb00 	bl	8002ac0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80044c0:	480c      	ldr	r0, [pc, #48]	; (80044f4 <prvInitialiseTaskLists+0x6c>)
 80044c2:	f7fe fafd 	bl	8002ac0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80044c6:	480c      	ldr	r0, [pc, #48]	; (80044f8 <prvInitialiseTaskLists+0x70>)
 80044c8:	f7fe fafa 	bl	8002ac0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80044cc:	480b      	ldr	r0, [pc, #44]	; (80044fc <prvInitialiseTaskLists+0x74>)
 80044ce:	f7fe faf7 	bl	8002ac0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80044d2:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <prvInitialiseTaskLists+0x78>)
 80044d4:	4a05      	ldr	r2, [pc, #20]	; (80044ec <prvInitialiseTaskLists+0x64>)
 80044d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80044d8:	4b0a      	ldr	r3, [pc, #40]	; (8004504 <prvInitialiseTaskLists+0x7c>)
 80044da:	4a05      	ldr	r2, [pc, #20]	; (80044f0 <prvInitialiseTaskLists+0x68>)
 80044dc:	601a      	str	r2, [r3, #0]
}
 80044de:	bf00      	nop
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	20000750 	.word	0x20000750
 80044ec:	20000bb0 	.word	0x20000bb0
 80044f0:	20000bc4 	.word	0x20000bc4
 80044f4:	20000be0 	.word	0x20000be0
 80044f8:	20000bf4 	.word	0x20000bf4
 80044fc:	20000c0c 	.word	0x20000c0c
 8004500:	20000bd8 	.word	0x20000bd8
 8004504:	20000bdc 	.word	0x20000bdc

08004508 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800450e:	e019      	b.n	8004544 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004510:	f000 fe9c 	bl	800524c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004514:	4b0f      	ldr	r3, [pc, #60]	; (8004554 <prvCheckTasksWaitingTermination+0x4c>)
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3304      	adds	r3, #4
 8004520:	4618      	mov	r0, r3
 8004522:	f7fe fb57 	bl	8002bd4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004526:	4b0c      	ldr	r3, [pc, #48]	; (8004558 <prvCheckTasksWaitingTermination+0x50>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3b01      	subs	r3, #1
 800452c:	4a0a      	ldr	r2, [pc, #40]	; (8004558 <prvCheckTasksWaitingTermination+0x50>)
 800452e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004530:	4b0a      	ldr	r3, [pc, #40]	; (800455c <prvCheckTasksWaitingTermination+0x54>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	3b01      	subs	r3, #1
 8004536:	4a09      	ldr	r2, [pc, #36]	; (800455c <prvCheckTasksWaitingTermination+0x54>)
 8004538:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800453a:	f000 feb5 	bl	80052a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f80e 	bl	8004560 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004544:	4b05      	ldr	r3, [pc, #20]	; (800455c <prvCheckTasksWaitingTermination+0x54>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1e1      	bne.n	8004510 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800454c:	bf00      	nop
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	20000bf4 	.word	0x20000bf4
 8004558:	20000c20 	.word	0x20000c20
 800455c:	20000c08 	.word	0x20000c08

08004560 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800456e:	2b00      	cmp	r3, #0
 8004570:	d108      	bne.n	8004584 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004576:	4618      	mov	r0, r3
 8004578:	f001 f844 	bl	8005604 <vPortFree>
				vPortFree( pxTCB );
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f001 f841 	bl	8005604 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004582:	e017      	b.n	80045b4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800458a:	2b01      	cmp	r3, #1
 800458c:	d103      	bne.n	8004596 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f001 f838 	bl	8005604 <vPortFree>
	}
 8004594:	e00e      	b.n	80045b4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800459c:	2b02      	cmp	r3, #2
 800459e:	d009      	beq.n	80045b4 <prvDeleteTCB+0x54>
 80045a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a4:	f383 8811 	msr	BASEPRI, r3
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	60fb      	str	r3, [r7, #12]
 80045b2:	e7fe      	b.n	80045b2 <prvDeleteTCB+0x52>
	}
 80045b4:	bf00      	nop
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045c2:	4b0f      	ldr	r3, [pc, #60]	; (8004600 <prvResetNextTaskUnblockTime+0x44>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <prvResetNextTaskUnblockTime+0x14>
 80045cc:	2301      	movs	r3, #1
 80045ce:	e000      	b.n	80045d2 <prvResetNextTaskUnblockTime+0x16>
 80045d0:	2300      	movs	r3, #0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d004      	beq.n	80045e0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80045d6:	4b0b      	ldr	r3, [pc, #44]	; (8004604 <prvResetNextTaskUnblockTime+0x48>)
 80045d8:	f04f 32ff 	mov.w	r2, #4294967295
 80045dc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80045de:	e008      	b.n	80045f2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80045e0:	4b07      	ldr	r3, [pc, #28]	; (8004600 <prvResetNextTaskUnblockTime+0x44>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	4a05      	ldr	r2, [pc, #20]	; (8004604 <prvResetNextTaskUnblockTime+0x48>)
 80045f0:	6013      	str	r3, [r2, #0]
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	20000bd8 	.word	0x20000bd8
 8004604:	20000c40 	.word	0x20000c40

08004608 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800460e:	4b05      	ldr	r3, [pc, #20]	; (8004624 <xTaskGetCurrentTaskHandle+0x1c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	607b      	str	r3, [r7, #4]

		return xReturn;
 8004614:	687b      	ldr	r3, [r7, #4]
	}
 8004616:	4618      	mov	r0, r3
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	2000074c 	.word	0x2000074c

08004628 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800462e:	4b0b      	ldr	r3, [pc, #44]	; (800465c <xTaskGetSchedulerState+0x34>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d102      	bne.n	800463c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004636:	2301      	movs	r3, #1
 8004638:	607b      	str	r3, [r7, #4]
 800463a:	e008      	b.n	800464e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800463c:	4b08      	ldr	r3, [pc, #32]	; (8004660 <xTaskGetSchedulerState+0x38>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d102      	bne.n	800464a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004644:	2302      	movs	r3, #2
 8004646:	607b      	str	r3, [r7, #4]
 8004648:	e001      	b.n	800464e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800464a:	2300      	movs	r3, #0
 800464c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800464e:	687b      	ldr	r3, [r7, #4]
	}
 8004650:	4618      	mov	r0, r3
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	20000c2c 	.word	0x20000c2c
 8004660:	20000c48 	.word	0x20000c48

08004664 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004670:	2300      	movs	r3, #0
 8004672:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d056      	beq.n	8004728 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467e:	4b2d      	ldr	r3, [pc, #180]	; (8004734 <xTaskPriorityInherit+0xd0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004684:	429a      	cmp	r2, r3
 8004686:	d246      	bcs.n	8004716 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	2b00      	cmp	r3, #0
 800468e:	db06      	blt.n	800469e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004690:	4b28      	ldr	r3, [pc, #160]	; (8004734 <xTaskPriorityInherit+0xd0>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004696:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	6959      	ldr	r1, [r3, #20]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a6:	4613      	mov	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4a22      	ldr	r2, [pc, #136]	; (8004738 <xTaskPriorityInherit+0xd4>)
 80046b0:	4413      	add	r3, r2
 80046b2:	4299      	cmp	r1, r3
 80046b4:	d101      	bne.n	80046ba <xTaskPriorityInherit+0x56>
 80046b6:	2301      	movs	r3, #1
 80046b8:	e000      	b.n	80046bc <xTaskPriorityInherit+0x58>
 80046ba:	2300      	movs	r3, #0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d022      	beq.n	8004706 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	3304      	adds	r3, #4
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7fe fa85 	bl	8002bd4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80046ca:	4b1a      	ldr	r3, [pc, #104]	; (8004734 <xTaskPriorityInherit+0xd0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d8:	4b18      	ldr	r3, [pc, #96]	; (800473c <xTaskPriorityInherit+0xd8>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d903      	bls.n	80046e8 <xTaskPriorityInherit+0x84>
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e4:	4a15      	ldr	r2, [pc, #84]	; (800473c <xTaskPriorityInherit+0xd8>)
 80046e6:	6013      	str	r3, [r2, #0]
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ec:	4613      	mov	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4a10      	ldr	r2, [pc, #64]	; (8004738 <xTaskPriorityInherit+0xd4>)
 80046f6:	441a      	add	r2, r3
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	3304      	adds	r3, #4
 80046fc:	4619      	mov	r1, r3
 80046fe:	4610      	mov	r0, r2
 8004700:	f7fe fa0b 	bl	8002b1a <vListInsertEnd>
 8004704:	e004      	b.n	8004710 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004706:	4b0b      	ldr	r3, [pc, #44]	; (8004734 <xTaskPriorityInherit+0xd0>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004710:	2301      	movs	r3, #1
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	e008      	b.n	8004728 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800471a:	4b06      	ldr	r3, [pc, #24]	; (8004734 <xTaskPriorityInherit+0xd0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	429a      	cmp	r2, r3
 8004722:	d201      	bcs.n	8004728 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004724:	2301      	movs	r3, #1
 8004726:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004728:	68fb      	ldr	r3, [r7, #12]
	}
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	2000074c 	.word	0x2000074c
 8004738:	20000750 	.word	0x20000750
 800473c:	20000c28 	.word	0x20000c28

08004740 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800474c:	2300      	movs	r3, #0
 800474e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d054      	beq.n	8004800 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004756:	4b2d      	ldr	r3, [pc, #180]	; (800480c <xTaskPriorityDisinherit+0xcc>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	429a      	cmp	r2, r3
 800475e:	d009      	beq.n	8004774 <xTaskPriorityDisinherit+0x34>
 8004760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004764:	f383 8811 	msr	BASEPRI, r3
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	e7fe      	b.n	8004772 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004778:	2b00      	cmp	r3, #0
 800477a:	d109      	bne.n	8004790 <xTaskPriorityDisinherit+0x50>
 800477c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004780:	f383 8811 	msr	BASEPRI, r3
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	e7fe      	b.n	800478e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004794:	1e5a      	subs	r2, r3, #1
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d02c      	beq.n	8004800 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d128      	bne.n	8004800 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	3304      	adds	r3, #4
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fe fa0e 	bl	8002bd4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d0:	4b0f      	ldr	r3, [pc, #60]	; (8004810 <xTaskPriorityDisinherit+0xd0>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d903      	bls.n	80047e0 <xTaskPriorityDisinherit+0xa0>
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047dc:	4a0c      	ldr	r2, [pc, #48]	; (8004810 <xTaskPriorityDisinherit+0xd0>)
 80047de:	6013      	str	r3, [r2, #0]
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e4:	4613      	mov	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	4413      	add	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4a09      	ldr	r2, [pc, #36]	; (8004814 <xTaskPriorityDisinherit+0xd4>)
 80047ee:	441a      	add	r2, r3
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	3304      	adds	r3, #4
 80047f4:	4619      	mov	r1, r3
 80047f6:	4610      	mov	r0, r2
 80047f8:	f7fe f98f 	bl	8002b1a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80047fc:	2301      	movs	r3, #1
 80047fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004800:	697b      	ldr	r3, [r7, #20]
	}
 8004802:	4618      	mov	r0, r3
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	2000074c 	.word	0x2000074c
 8004810:	20000c28 	.word	0x20000c28
 8004814:	20000750 	.word	0x20000750

08004818 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004818:	b580      	push	{r7, lr}
 800481a:	b088      	sub	sp, #32
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004826:	2301      	movs	r3, #1
 8004828:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d06d      	beq.n	800490c <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004834:	2b00      	cmp	r3, #0
 8004836:	d109      	bne.n	800484c <vTaskPriorityDisinheritAfterTimeout+0x34>
 8004838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	60fb      	str	r3, [r7, #12]
 800484a:	e7fe      	b.n	800484a <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d902      	bls.n	800485c <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	61fb      	str	r3, [r7, #28]
 800485a:	e002      	b.n	8004862 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004860:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004866:	69fa      	ldr	r2, [r7, #28]
 8004868:	429a      	cmp	r2, r3
 800486a:	d04f      	beq.n	800490c <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	429a      	cmp	r2, r3
 8004874:	d14a      	bne.n	800490c <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004876:	4b27      	ldr	r3, [pc, #156]	; (8004914 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	429a      	cmp	r2, r3
 800487e:	d109      	bne.n	8004894 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8004880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004884:	f383 8811 	msr	BASEPRI, r3
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	60bb      	str	r3, [r7, #8]
 8004892:	e7fe      	b.n	8004892 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004898:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	69fa      	ldr	r2, [r7, #28]
 800489e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	db04      	blt.n	80048b2 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	6959      	ldr	r1, [r3, #20]
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	4613      	mov	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4a15      	ldr	r2, [pc, #84]	; (8004918 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80048c2:	4413      	add	r3, r2
 80048c4:	4299      	cmp	r1, r3
 80048c6:	d101      	bne.n	80048cc <vTaskPriorityDisinheritAfterTimeout+0xb4>
 80048c8:	2301      	movs	r3, #1
 80048ca:	e000      	b.n	80048ce <vTaskPriorityDisinheritAfterTimeout+0xb6>
 80048cc:	2300      	movs	r3, #0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d01c      	beq.n	800490c <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	3304      	adds	r3, #4
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fe f97c 	bl	8002bd4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e0:	4b0e      	ldr	r3, [pc, #56]	; (800491c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d903      	bls.n	80048f0 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ec:	4a0b      	ldr	r2, [pc, #44]	; (800491c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80048ee:	6013      	str	r3, [r2, #0]
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f4:	4613      	mov	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4a06      	ldr	r2, [pc, #24]	; (8004918 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80048fe:	441a      	add	r2, r3
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	3304      	adds	r3, #4
 8004904:	4619      	mov	r1, r3
 8004906:	4610      	mov	r0, r2
 8004908:	f7fe f907 	bl	8002b1a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800490c:	bf00      	nop
 800490e:	3720      	adds	r7, #32
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	2000074c 	.word	0x2000074c
 8004918:	20000750 	.word	0x20000750
 800491c:	20000c28 	.word	0x20000c28

08004920 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004924:	4b07      	ldr	r3, [pc, #28]	; (8004944 <pvTaskIncrementMutexHeldCount+0x24>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d004      	beq.n	8004936 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800492c:	4b05      	ldr	r3, [pc, #20]	; (8004944 <pvTaskIncrementMutexHeldCount+0x24>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004932:	3201      	adds	r2, #1
 8004934:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004936:	4b03      	ldr	r3, [pc, #12]	; (8004944 <pvTaskIncrementMutexHeldCount+0x24>)
 8004938:	681b      	ldr	r3, [r3, #0]
	}
 800493a:	4618      	mov	r0, r3
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	2000074c 	.word	0x2000074c

08004948 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004952:	4b21      	ldr	r3, [pc, #132]	; (80049d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004958:	4b20      	ldr	r3, [pc, #128]	; (80049dc <prvAddCurrentTaskToDelayedList+0x94>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	3304      	adds	r3, #4
 800495e:	4618      	mov	r0, r3
 8004960:	f7fe f938 	bl	8002bd4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496a:	d10a      	bne.n	8004982 <prvAddCurrentTaskToDelayedList+0x3a>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d007      	beq.n	8004982 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004972:	4b1a      	ldr	r3, [pc, #104]	; (80049dc <prvAddCurrentTaskToDelayedList+0x94>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	3304      	adds	r3, #4
 8004978:	4619      	mov	r1, r3
 800497a:	4819      	ldr	r0, [pc, #100]	; (80049e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800497c:	f7fe f8cd 	bl	8002b1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004980:	e026      	b.n	80049d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4413      	add	r3, r2
 8004988:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800498a:	4b14      	ldr	r3, [pc, #80]	; (80049dc <prvAddCurrentTaskToDelayedList+0x94>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	429a      	cmp	r2, r3
 8004998:	d209      	bcs.n	80049ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800499a:	4b12      	ldr	r3, [pc, #72]	; (80049e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	4b0f      	ldr	r3, [pc, #60]	; (80049dc <prvAddCurrentTaskToDelayedList+0x94>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3304      	adds	r3, #4
 80049a4:	4619      	mov	r1, r3
 80049a6:	4610      	mov	r0, r2
 80049a8:	f7fe f8db 	bl	8002b62 <vListInsert>
}
 80049ac:	e010      	b.n	80049d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049ae:	4b0e      	ldr	r3, [pc, #56]	; (80049e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	4b0a      	ldr	r3, [pc, #40]	; (80049dc <prvAddCurrentTaskToDelayedList+0x94>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	3304      	adds	r3, #4
 80049b8:	4619      	mov	r1, r3
 80049ba:	4610      	mov	r0, r2
 80049bc:	f7fe f8d1 	bl	8002b62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80049c0:	4b0a      	ldr	r3, [pc, #40]	; (80049ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d202      	bcs.n	80049d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80049ca:	4a08      	ldr	r2, [pc, #32]	; (80049ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	6013      	str	r3, [r2, #0]
}
 80049d0:	bf00      	nop
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	20000c24 	.word	0x20000c24
 80049dc:	2000074c 	.word	0x2000074c
 80049e0:	20000c0c 	.word	0x20000c0c
 80049e4:	20000bdc 	.word	0x20000bdc
 80049e8:	20000bd8 	.word	0x20000bd8
 80049ec:	20000c40 	.word	0x20000c40

080049f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b08a      	sub	sp, #40	; 0x28
 80049f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80049f6:	2300      	movs	r3, #0
 80049f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80049fa:	f000 fac3 	bl	8004f84 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80049fe:	4b1c      	ldr	r3, [pc, #112]	; (8004a70 <xTimerCreateTimerTask+0x80>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d021      	beq.n	8004a4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004a06:	2300      	movs	r3, #0
 8004a08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004a0e:	1d3a      	adds	r2, r7, #4
 8004a10:	f107 0108 	add.w	r1, r7, #8
 8004a14:	f107 030c 	add.w	r3, r7, #12
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7fe f837 	bl	8002a8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004a1e:	6879      	ldr	r1, [r7, #4]
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	9202      	str	r2, [sp, #8]
 8004a26:	9301      	str	r3, [sp, #4]
 8004a28:	2302      	movs	r3, #2
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	460a      	mov	r2, r1
 8004a30:	4910      	ldr	r1, [pc, #64]	; (8004a74 <xTimerCreateTimerTask+0x84>)
 8004a32:	4811      	ldr	r0, [pc, #68]	; (8004a78 <xTimerCreateTimerTask+0x88>)
 8004a34:	f7fe ffde 	bl	80039f4 <xTaskCreateStatic>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	4b10      	ldr	r3, [pc, #64]	; (8004a7c <xTimerCreateTimerTask+0x8c>)
 8004a3c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004a3e:	4b0f      	ldr	r3, [pc, #60]	; (8004a7c <xTimerCreateTimerTask+0x8c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004a46:	2301      	movs	r3, #1
 8004a48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d109      	bne.n	8004a64 <xTimerCreateTimerTask+0x74>
 8004a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a54:	f383 8811 	msr	BASEPRI, r3
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	613b      	str	r3, [r7, #16]
 8004a62:	e7fe      	b.n	8004a62 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004a64:	697b      	ldr	r3, [r7, #20]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3718      	adds	r7, #24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	20000c7c 	.word	0x20000c7c
 8004a74:	08006118 	.word	0x08006118
 8004a78:	08004b99 	.word	0x08004b99
 8004a7c:	20000c80 	.word	0x20000c80

08004a80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b08a      	sub	sp, #40	; 0x28
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
 8004a8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d109      	bne.n	8004aac <xTimerGenericCommand+0x2c>
 8004a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9c:	f383 8811 	msr	BASEPRI, r3
 8004aa0:	f3bf 8f6f 	isb	sy
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	623b      	str	r3, [r7, #32]
 8004aaa:	e7fe      	b.n	8004aaa <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004aac:	4b19      	ldr	r3, [pc, #100]	; (8004b14 <xTimerGenericCommand+0x94>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d02a      	beq.n	8004b0a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	2b05      	cmp	r3, #5
 8004ac4:	dc18      	bgt.n	8004af8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004ac6:	f7ff fdaf 	bl	8004628 <xTaskGetSchedulerState>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d109      	bne.n	8004ae4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004ad0:	4b10      	ldr	r3, [pc, #64]	; (8004b14 <xTimerGenericCommand+0x94>)
 8004ad2:	6818      	ldr	r0, [r3, #0]
 8004ad4:	f107 0110 	add.w	r1, r7, #16
 8004ad8:	2300      	movs	r3, #0
 8004ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004adc:	f7fe fa94 	bl	8003008 <xQueueGenericSend>
 8004ae0:	6278      	str	r0, [r7, #36]	; 0x24
 8004ae2:	e012      	b.n	8004b0a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004ae4:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <xTimerGenericCommand+0x94>)
 8004ae6:	6818      	ldr	r0, [r3, #0]
 8004ae8:	f107 0110 	add.w	r1, r7, #16
 8004aec:	2300      	movs	r3, #0
 8004aee:	2200      	movs	r2, #0
 8004af0:	f7fe fa8a 	bl	8003008 <xQueueGenericSend>
 8004af4:	6278      	str	r0, [r7, #36]	; 0x24
 8004af6:	e008      	b.n	8004b0a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004af8:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <xTimerGenericCommand+0x94>)
 8004afa:	6818      	ldr	r0, [r3, #0]
 8004afc:	f107 0110 	add.w	r1, r7, #16
 8004b00:	2300      	movs	r3, #0
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	f7fe fb7a 	bl	80031fc <xQueueGenericSendFromISR>
 8004b08:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3728      	adds	r7, #40	; 0x28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	20000c7c 	.word	0x20000c7c

08004b18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b088      	sub	sp, #32
 8004b1c:	af02      	add	r7, sp, #8
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b22:	4b1c      	ldr	r3, [pc, #112]	; (8004b94 <prvProcessExpiredTimer+0x7c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	3304      	adds	r3, #4
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7fe f84f 	bl	8002bd4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d121      	bne.n	8004b82 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	699a      	ldr	r2, [r3, #24]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	18d1      	adds	r1, r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	6978      	ldr	r0, [r7, #20]
 8004b4c:	f000 f8c8 	bl	8004ce0 <prvInsertTimerInActiveList>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d015      	beq.n	8004b82 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b56:	2300      	movs	r3, #0
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	2100      	movs	r1, #0
 8004b60:	6978      	ldr	r0, [r7, #20]
 8004b62:	f7ff ff8d 	bl	8004a80 <xTimerGenericCommand>
 8004b66:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d109      	bne.n	8004b82 <prvProcessExpiredTimer+0x6a>
 8004b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b72:	f383 8811 	msr	BASEPRI, r3
 8004b76:	f3bf 8f6f 	isb	sy
 8004b7a:	f3bf 8f4f 	dsb	sy
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	e7fe      	b.n	8004b80 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	6978      	ldr	r0, [r7, #20]
 8004b88:	4798      	blx	r3
}
 8004b8a:	bf00      	nop
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20000c74 	.word	0x20000c74

08004b98 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ba0:	f107 0308 	add.w	r3, r7, #8
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 f857 	bl	8004c58 <prvGetNextExpireTime>
 8004baa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	4619      	mov	r1, r3
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 f803 	bl	8004bbc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004bb6:	f000 f8d5 	bl	8004d64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004bba:	e7f1      	b.n	8004ba0 <prvTimerTask+0x8>

08004bbc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004bc6:	f7ff f941 	bl	8003e4c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004bca:	f107 0308 	add.w	r3, r7, #8
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 f866 	bl	8004ca0 <prvSampleTimeNow>
 8004bd4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d130      	bne.n	8004c3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10a      	bne.n	8004bf8 <prvProcessTimerOrBlockTask+0x3c>
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d806      	bhi.n	8004bf8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004bea:	f7ff f93d 	bl	8003e68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004bee:	68f9      	ldr	r1, [r7, #12]
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7ff ff91 	bl	8004b18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004bf6:	e024      	b.n	8004c42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d008      	beq.n	8004c10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004bfe:	4b13      	ldr	r3, [pc, #76]	; (8004c4c <prvProcessTimerOrBlockTask+0x90>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	bf0c      	ite	eq
 8004c08:	2301      	moveq	r3, #1
 8004c0a:	2300      	movne	r3, #0
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c10:	4b0f      	ldr	r3, [pc, #60]	; (8004c50 <prvProcessTimerOrBlockTask+0x94>)
 8004c12:	6818      	ldr	r0, [r3, #0]
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	f7fe feb5 	bl	800398c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004c22:	f7ff f921 	bl	8003e68 <xTaskResumeAll>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10a      	bne.n	8004c42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004c2c:	4b09      	ldr	r3, [pc, #36]	; (8004c54 <prvProcessTimerOrBlockTask+0x98>)
 8004c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	f3bf 8f4f 	dsb	sy
 8004c38:	f3bf 8f6f 	isb	sy
}
 8004c3c:	e001      	b.n	8004c42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004c3e:	f7ff f913 	bl	8003e68 <xTaskResumeAll>
}
 8004c42:	bf00      	nop
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	20000c78 	.word	0x20000c78
 8004c50:	20000c7c 	.word	0x20000c7c
 8004c54:	e000ed04 	.word	0xe000ed04

08004c58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004c60:	4b0e      	ldr	r3, [pc, #56]	; (8004c9c <prvGetNextExpireTime+0x44>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	bf0c      	ite	eq
 8004c6a:	2301      	moveq	r3, #1
 8004c6c:	2300      	movne	r3, #0
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	461a      	mov	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d105      	bne.n	8004c8a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c7e:	4b07      	ldr	r3, [pc, #28]	; (8004c9c <prvGetNextExpireTime+0x44>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	e001      	b.n	8004c8e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3714      	adds	r7, #20
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	20000c74 	.word	0x20000c74

08004ca0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004ca8:	f7ff f97a 	bl	8003fa0 <xTaskGetTickCount>
 8004cac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004cae:	4b0b      	ldr	r3, [pc, #44]	; (8004cdc <prvSampleTimeNow+0x3c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d205      	bcs.n	8004cc4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004cb8:	f000 f904 	bl	8004ec4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	e002      	b.n	8004cca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004cca:	4a04      	ldr	r2, [pc, #16]	; (8004cdc <prvSampleTimeNow+0x3c>)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	20000c84 	.word	0x20000c84

08004ce0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
 8004cec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d812      	bhi.n	8004d2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	1ad2      	subs	r2, r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d302      	bcc.n	8004d1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004d14:	2301      	movs	r3, #1
 8004d16:	617b      	str	r3, [r7, #20]
 8004d18:	e01b      	b.n	8004d52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d1a:	4b10      	ldr	r3, [pc, #64]	; (8004d5c <prvInsertTimerInActiveList+0x7c>)
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	3304      	adds	r3, #4
 8004d22:	4619      	mov	r1, r3
 8004d24:	4610      	mov	r0, r2
 8004d26:	f7fd ff1c 	bl	8002b62 <vListInsert>
 8004d2a:	e012      	b.n	8004d52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d206      	bcs.n	8004d42 <prvInsertTimerInActiveList+0x62>
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d302      	bcc.n	8004d42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	617b      	str	r3, [r7, #20]
 8004d40:	e007      	b.n	8004d52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d42:	4b07      	ldr	r3, [pc, #28]	; (8004d60 <prvInsertTimerInActiveList+0x80>)
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	3304      	adds	r3, #4
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	f7fd ff08 	bl	8002b62 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004d52:	697b      	ldr	r3, [r7, #20]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3718      	adds	r7, #24
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	20000c78 	.word	0x20000c78
 8004d60:	20000c74 	.word	0x20000c74

08004d64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b08e      	sub	sp, #56	; 0x38
 8004d68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d6a:	e099      	b.n	8004ea0 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	da17      	bge.n	8004da2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004d72:	1d3b      	adds	r3, r7, #4
 8004d74:	3304      	adds	r3, #4
 8004d76:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d109      	bne.n	8004d92 <prvProcessReceivedCommands+0x2e>
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	61fb      	str	r3, [r7, #28]
 8004d90:	e7fe      	b.n	8004d90 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d98:	6850      	ldr	r0, [r2, #4]
 8004d9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d9c:	6892      	ldr	r2, [r2, #8]
 8004d9e:	4611      	mov	r1, r2
 8004da0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	db7a      	blt.n	8004e9e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d004      	beq.n	8004dbe <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db6:	3304      	adds	r3, #4
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7fd ff0b 	bl	8002bd4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004dbe:	463b      	mov	r3, r7
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7ff ff6d 	bl	8004ca0 <prvSampleTimeNow>
 8004dc6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b09      	cmp	r3, #9
 8004dcc:	d868      	bhi.n	8004ea0 <prvProcessReceivedCommands+0x13c>
 8004dce:	a201      	add	r2, pc, #4	; (adr r2, 8004dd4 <prvProcessReceivedCommands+0x70>)
 8004dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd4:	08004dfd 	.word	0x08004dfd
 8004dd8:	08004dfd 	.word	0x08004dfd
 8004ddc:	08004dfd 	.word	0x08004dfd
 8004de0:	08004ea1 	.word	0x08004ea1
 8004de4:	08004e57 	.word	0x08004e57
 8004de8:	08004e8d 	.word	0x08004e8d
 8004dec:	08004dfd 	.word	0x08004dfd
 8004df0:	08004dfd 	.word	0x08004dfd
 8004df4:	08004ea1 	.word	0x08004ea1
 8004df8:	08004e57 	.word	0x08004e57
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	18d1      	adds	r1, r2, r3
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e0a:	f7ff ff69 	bl	8004ce0 <prvInsertTimerInActiveList>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d045      	beq.n	8004ea0 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e1a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d13d      	bne.n	8004ea0 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	441a      	add	r2, r3
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	2300      	movs	r3, #0
 8004e32:	2100      	movs	r1, #0
 8004e34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e36:	f7ff fe23 	bl	8004a80 <xTimerGenericCommand>
 8004e3a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004e3c:	6a3b      	ldr	r3, [r7, #32]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d12e      	bne.n	8004ea0 <prvProcessReceivedCommands+0x13c>
 8004e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e46:	f383 8811 	msr	BASEPRI, r3
 8004e4a:	f3bf 8f6f 	isb	sy
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	61bb      	str	r3, [r7, #24]
 8004e54:	e7fe      	b.n	8004e54 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d109      	bne.n	8004e78 <prvProcessReceivedCommands+0x114>
 8004e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e68:	f383 8811 	msr	BASEPRI, r3
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	617b      	str	r3, [r7, #20]
 8004e76:	e7fe      	b.n	8004e76 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7a:	699a      	ldr	r2, [r3, #24]
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	18d1      	adds	r1, r2, r3
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e86:	f7ff ff2b 	bl	8004ce0 <prvInsertTimerInActiveList>
					break;
 8004e8a:	e009      	b.n	8004ea0 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d104      	bne.n	8004ea0 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8004e96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e98:	f000 fbb4 	bl	8005604 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004e9c:	e000      	b.n	8004ea0 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004e9e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ea0:	4b07      	ldr	r3, [pc, #28]	; (8004ec0 <prvProcessReceivedCommands+0x15c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	1d39      	adds	r1, r7, #4
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7fe fa3b 	bl	8003324 <xQueueReceive>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f47f af5b 	bne.w	8004d6c <prvProcessReceivedCommands+0x8>
	}
}
 8004eb6:	bf00      	nop
 8004eb8:	3730      	adds	r7, #48	; 0x30
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	20000c7c 	.word	0x20000c7c

08004ec4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b088      	sub	sp, #32
 8004ec8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004eca:	e044      	b.n	8004f56 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ecc:	4b2b      	ldr	r3, [pc, #172]	; (8004f7c <prvSwitchTimerLists+0xb8>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ed6:	4b29      	ldr	r3, [pc, #164]	; (8004f7c <prvSwitchTimerLists+0xb8>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7fd fe75 	bl	8002bd4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d12d      	bne.n	8004f56 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	4413      	add	r3, r2
 8004f02:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d90e      	bls.n	8004f2a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f18:	4b18      	ldr	r3, [pc, #96]	; (8004f7c <prvSwitchTimerLists+0xb8>)
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	3304      	adds	r3, #4
 8004f20:	4619      	mov	r1, r3
 8004f22:	4610      	mov	r0, r2
 8004f24:	f7fd fe1d 	bl	8002b62 <vListInsert>
 8004f28:	e015      	b.n	8004f56 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	2300      	movs	r3, #0
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	2100      	movs	r1, #0
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f7ff fda3 	bl	8004a80 <xTimerGenericCommand>
 8004f3a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d109      	bne.n	8004f56 <prvSwitchTimerLists+0x92>
 8004f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	603b      	str	r3, [r7, #0]
 8004f54:	e7fe      	b.n	8004f54 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f56:	4b09      	ldr	r3, [pc, #36]	; (8004f7c <prvSwitchTimerLists+0xb8>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1b5      	bne.n	8004ecc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004f60:	4b06      	ldr	r3, [pc, #24]	; (8004f7c <prvSwitchTimerLists+0xb8>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004f66:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <prvSwitchTimerLists+0xbc>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a04      	ldr	r2, [pc, #16]	; (8004f7c <prvSwitchTimerLists+0xb8>)
 8004f6c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004f6e:	4a04      	ldr	r2, [pc, #16]	; (8004f80 <prvSwitchTimerLists+0xbc>)
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	6013      	str	r3, [r2, #0]
}
 8004f74:	bf00      	nop
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	20000c74 	.word	0x20000c74
 8004f80:	20000c78 	.word	0x20000c78

08004f84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004f8a:	f000 f95f 	bl	800524c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004f8e:	4b15      	ldr	r3, [pc, #84]	; (8004fe4 <prvCheckForValidListAndQueue+0x60>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d120      	bne.n	8004fd8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004f96:	4814      	ldr	r0, [pc, #80]	; (8004fe8 <prvCheckForValidListAndQueue+0x64>)
 8004f98:	f7fd fd92 	bl	8002ac0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004f9c:	4813      	ldr	r0, [pc, #76]	; (8004fec <prvCheckForValidListAndQueue+0x68>)
 8004f9e:	f7fd fd8f 	bl	8002ac0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004fa2:	4b13      	ldr	r3, [pc, #76]	; (8004ff0 <prvCheckForValidListAndQueue+0x6c>)
 8004fa4:	4a10      	ldr	r2, [pc, #64]	; (8004fe8 <prvCheckForValidListAndQueue+0x64>)
 8004fa6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004fa8:	4b12      	ldr	r3, [pc, #72]	; (8004ff4 <prvCheckForValidListAndQueue+0x70>)
 8004faa:	4a10      	ldr	r2, [pc, #64]	; (8004fec <prvCheckForValidListAndQueue+0x68>)
 8004fac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004fae:	2300      	movs	r3, #0
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	4b11      	ldr	r3, [pc, #68]	; (8004ff8 <prvCheckForValidListAndQueue+0x74>)
 8004fb4:	4a11      	ldr	r2, [pc, #68]	; (8004ffc <prvCheckForValidListAndQueue+0x78>)
 8004fb6:	2110      	movs	r1, #16
 8004fb8:	200a      	movs	r0, #10
 8004fba:	f7fd fe9d 	bl	8002cf8 <xQueueGenericCreateStatic>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	4b08      	ldr	r3, [pc, #32]	; (8004fe4 <prvCheckForValidListAndQueue+0x60>)
 8004fc2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004fc4:	4b07      	ldr	r3, [pc, #28]	; (8004fe4 <prvCheckForValidListAndQueue+0x60>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d005      	beq.n	8004fd8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004fcc:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <prvCheckForValidListAndQueue+0x60>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	490b      	ldr	r1, [pc, #44]	; (8005000 <prvCheckForValidListAndQueue+0x7c>)
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7fe fcb2 	bl	800393c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004fd8:	f000 f966 	bl	80052a8 <vPortExitCritical>
}
 8004fdc:	bf00      	nop
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20000c7c 	.word	0x20000c7c
 8004fe8:	20000c4c 	.word	0x20000c4c
 8004fec:	20000c60 	.word	0x20000c60
 8004ff0:	20000c74 	.word	0x20000c74
 8004ff4:	20000c78 	.word	0x20000c78
 8004ff8:	20000d28 	.word	0x20000d28
 8004ffc:	20000c88 	.word	0x20000c88
 8005000:	08006120 	.word	0x08006120

08005004 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	3b04      	subs	r3, #4
 8005014:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800501c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	3b04      	subs	r3, #4
 8005022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	f023 0201 	bic.w	r2, r3, #1
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	3b04      	subs	r3, #4
 8005032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005034:	4a0c      	ldr	r2, [pc, #48]	; (8005068 <pxPortInitialiseStack+0x64>)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	3b14      	subs	r3, #20
 800503e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	3b04      	subs	r3, #4
 800504a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f06f 0202 	mvn.w	r2, #2
 8005052:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	3b20      	subs	r3, #32
 8005058:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800505a:	68fb      	ldr	r3, [r7, #12]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	0800506d 	.word	0x0800506d

0800506c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005072:	2300      	movs	r3, #0
 8005074:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005076:	4b11      	ldr	r3, [pc, #68]	; (80050bc <prvTaskExitError+0x50>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507e:	d009      	beq.n	8005094 <prvTaskExitError+0x28>
 8005080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	e7fe      	b.n	8005092 <prvTaskExitError+0x26>
 8005094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005098:	f383 8811 	msr	BASEPRI, r3
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80050a6:	bf00      	nop
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0fc      	beq.n	80050a8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050ae:	bf00      	nop
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	20000008 	.word	0x20000008

080050c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80050c0:	4b07      	ldr	r3, [pc, #28]	; (80050e0 <pxCurrentTCBConst2>)
 80050c2:	6819      	ldr	r1, [r3, #0]
 80050c4:	6808      	ldr	r0, [r1, #0]
 80050c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ca:	f380 8809 	msr	PSP, r0
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f04f 0000 	mov.w	r0, #0
 80050d6:	f380 8811 	msr	BASEPRI, r0
 80050da:	4770      	bx	lr
 80050dc:	f3af 8000 	nop.w

080050e0 <pxCurrentTCBConst2>:
 80050e0:	2000074c 	.word	0x2000074c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80050e4:	bf00      	nop
 80050e6:	bf00      	nop

080050e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80050e8:	4808      	ldr	r0, [pc, #32]	; (800510c <prvPortStartFirstTask+0x24>)
 80050ea:	6800      	ldr	r0, [r0, #0]
 80050ec:	6800      	ldr	r0, [r0, #0]
 80050ee:	f380 8808 	msr	MSP, r0
 80050f2:	f04f 0000 	mov.w	r0, #0
 80050f6:	f380 8814 	msr	CONTROL, r0
 80050fa:	b662      	cpsie	i
 80050fc:	b661      	cpsie	f
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	f3bf 8f6f 	isb	sy
 8005106:	df00      	svc	0
 8005108:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800510a:	bf00      	nop
 800510c:	e000ed08 	.word	0xe000ed08

08005110 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005116:	4b44      	ldr	r3, [pc, #272]	; (8005228 <xPortStartScheduler+0x118>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a44      	ldr	r2, [pc, #272]	; (800522c <xPortStartScheduler+0x11c>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d109      	bne.n	8005134 <xPortStartScheduler+0x24>
 8005120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005124:	f383 8811 	msr	BASEPRI, r3
 8005128:	f3bf 8f6f 	isb	sy
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	613b      	str	r3, [r7, #16]
 8005132:	e7fe      	b.n	8005132 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005134:	4b3c      	ldr	r3, [pc, #240]	; (8005228 <xPortStartScheduler+0x118>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a3d      	ldr	r2, [pc, #244]	; (8005230 <xPortStartScheduler+0x120>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d109      	bne.n	8005152 <xPortStartScheduler+0x42>
 800513e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	e7fe      	b.n	8005150 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005152:	4b38      	ldr	r3, [pc, #224]	; (8005234 <xPortStartScheduler+0x124>)
 8005154:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	b2db      	uxtb	r3, r3
 800515c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	22ff      	movs	r2, #255	; 0xff
 8005162:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	b2db      	uxtb	r3, r3
 800516a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800516c:	78fb      	ldrb	r3, [r7, #3]
 800516e:	b2db      	uxtb	r3, r3
 8005170:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005174:	b2da      	uxtb	r2, r3
 8005176:	4b30      	ldr	r3, [pc, #192]	; (8005238 <xPortStartScheduler+0x128>)
 8005178:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800517a:	4b30      	ldr	r3, [pc, #192]	; (800523c <xPortStartScheduler+0x12c>)
 800517c:	2207      	movs	r2, #7
 800517e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005180:	e009      	b.n	8005196 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005182:	4b2e      	ldr	r3, [pc, #184]	; (800523c <xPortStartScheduler+0x12c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	3b01      	subs	r3, #1
 8005188:	4a2c      	ldr	r2, [pc, #176]	; (800523c <xPortStartScheduler+0x12c>)
 800518a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800518c:	78fb      	ldrb	r3, [r7, #3]
 800518e:	b2db      	uxtb	r3, r3
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	b2db      	uxtb	r3, r3
 8005194:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005196:	78fb      	ldrb	r3, [r7, #3]
 8005198:	b2db      	uxtb	r3, r3
 800519a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800519e:	2b80      	cmp	r3, #128	; 0x80
 80051a0:	d0ef      	beq.n	8005182 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80051a2:	4b26      	ldr	r3, [pc, #152]	; (800523c <xPortStartScheduler+0x12c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f1c3 0307 	rsb	r3, r3, #7
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d009      	beq.n	80051c2 <xPortStartScheduler+0xb2>
 80051ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	60bb      	str	r3, [r7, #8]
 80051c0:	e7fe      	b.n	80051c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051c2:	4b1e      	ldr	r3, [pc, #120]	; (800523c <xPortStartScheduler+0x12c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	021b      	lsls	r3, r3, #8
 80051c8:	4a1c      	ldr	r2, [pc, #112]	; (800523c <xPortStartScheduler+0x12c>)
 80051ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051cc:	4b1b      	ldr	r3, [pc, #108]	; (800523c <xPortStartScheduler+0x12c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051d4:	4a19      	ldr	r2, [pc, #100]	; (800523c <xPortStartScheduler+0x12c>)
 80051d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80051e0:	4b17      	ldr	r3, [pc, #92]	; (8005240 <xPortStartScheduler+0x130>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a16      	ldr	r2, [pc, #88]	; (8005240 <xPortStartScheduler+0x130>)
 80051e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80051ec:	4b14      	ldr	r3, [pc, #80]	; (8005240 <xPortStartScheduler+0x130>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a13      	ldr	r2, [pc, #76]	; (8005240 <xPortStartScheduler+0x130>)
 80051f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80051f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80051f8:	f000 f8d6 	bl	80053a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80051fc:	4b11      	ldr	r3, [pc, #68]	; (8005244 <xPortStartScheduler+0x134>)
 80051fe:	2200      	movs	r2, #0
 8005200:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005202:	f000 f8f5 	bl	80053f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005206:	4b10      	ldr	r3, [pc, #64]	; (8005248 <xPortStartScheduler+0x138>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a0f      	ldr	r2, [pc, #60]	; (8005248 <xPortStartScheduler+0x138>)
 800520c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005210:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005212:	f7ff ff69 	bl	80050e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005216:	f7fe ff91 	bl	800413c <vTaskSwitchContext>
	prvTaskExitError();
 800521a:	f7ff ff27 	bl	800506c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3718      	adds	r7, #24
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	e000ed00 	.word	0xe000ed00
 800522c:	410fc271 	.word	0x410fc271
 8005230:	410fc270 	.word	0x410fc270
 8005234:	e000e400 	.word	0xe000e400
 8005238:	20000d78 	.word	0x20000d78
 800523c:	20000d7c 	.word	0x20000d7c
 8005240:	e000ed20 	.word	0xe000ed20
 8005244:	20000008 	.word	0x20000008
 8005248:	e000ef34 	.word	0xe000ef34

0800524c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005256:	f383 8811 	msr	BASEPRI, r3
 800525a:	f3bf 8f6f 	isb	sy
 800525e:	f3bf 8f4f 	dsb	sy
 8005262:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005264:	4b0e      	ldr	r3, [pc, #56]	; (80052a0 <vPortEnterCritical+0x54>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	3301      	adds	r3, #1
 800526a:	4a0d      	ldr	r2, [pc, #52]	; (80052a0 <vPortEnterCritical+0x54>)
 800526c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800526e:	4b0c      	ldr	r3, [pc, #48]	; (80052a0 <vPortEnterCritical+0x54>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d10e      	bne.n	8005294 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005276:	4b0b      	ldr	r3, [pc, #44]	; (80052a4 <vPortEnterCritical+0x58>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	b2db      	uxtb	r3, r3
 800527c:	2b00      	cmp	r3, #0
 800527e:	d009      	beq.n	8005294 <vPortEnterCritical+0x48>
 8005280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	603b      	str	r3, [r7, #0]
 8005292:	e7fe      	b.n	8005292 <vPortEnterCritical+0x46>
	}
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	20000008 	.word	0x20000008
 80052a4:	e000ed04 	.word	0xe000ed04

080052a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80052ae:	4b11      	ldr	r3, [pc, #68]	; (80052f4 <vPortExitCritical+0x4c>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d109      	bne.n	80052ca <vPortExitCritical+0x22>
 80052b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	607b      	str	r3, [r7, #4]
 80052c8:	e7fe      	b.n	80052c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80052ca:	4b0a      	ldr	r3, [pc, #40]	; (80052f4 <vPortExitCritical+0x4c>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	3b01      	subs	r3, #1
 80052d0:	4a08      	ldr	r2, [pc, #32]	; (80052f4 <vPortExitCritical+0x4c>)
 80052d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80052d4:	4b07      	ldr	r3, [pc, #28]	; (80052f4 <vPortExitCritical+0x4c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d104      	bne.n	80052e6 <vPortExitCritical+0x3e>
 80052dc:	2300      	movs	r3, #0
 80052de:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	20000008 	.word	0x20000008
	...

08005300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005300:	f3ef 8009 	mrs	r0, PSP
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	4b15      	ldr	r3, [pc, #84]	; (8005360 <pxCurrentTCBConst>)
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	f01e 0f10 	tst.w	lr, #16
 8005310:	bf08      	it	eq
 8005312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800531a:	6010      	str	r0, [r2, #0]
 800531c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005320:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005324:	f380 8811 	msr	BASEPRI, r0
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f7fe ff04 	bl	800413c <vTaskSwitchContext>
 8005334:	f04f 0000 	mov.w	r0, #0
 8005338:	f380 8811 	msr	BASEPRI, r0
 800533c:	bc09      	pop	{r0, r3}
 800533e:	6819      	ldr	r1, [r3, #0]
 8005340:	6808      	ldr	r0, [r1, #0]
 8005342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005346:	f01e 0f10 	tst.w	lr, #16
 800534a:	bf08      	it	eq
 800534c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005350:	f380 8809 	msr	PSP, r0
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	f3af 8000 	nop.w

08005360 <pxCurrentTCBConst>:
 8005360:	2000074c 	.word	0x2000074c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005364:	bf00      	nop
 8005366:	bf00      	nop

08005368 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
	__asm volatile
 800536e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005380:	f7fe fe1e 	bl	8003fc0 <xTaskIncrementTick>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800538a:	4b06      	ldr	r3, [pc, #24]	; (80053a4 <SysTick_Handler+0x3c>)
 800538c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	2300      	movs	r3, #0
 8005394:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800539c:	bf00      	nop
 800539e:	3708      	adds	r7, #8
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	e000ed04 	.word	0xe000ed04

080053a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80053a8:	b480      	push	{r7}
 80053aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80053ac:	4b0b      	ldr	r3, [pc, #44]	; (80053dc <vPortSetupTimerInterrupt+0x34>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80053b2:	4b0b      	ldr	r3, [pc, #44]	; (80053e0 <vPortSetupTimerInterrupt+0x38>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80053b8:	4b0a      	ldr	r3, [pc, #40]	; (80053e4 <vPortSetupTimerInterrupt+0x3c>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a0a      	ldr	r2, [pc, #40]	; (80053e8 <vPortSetupTimerInterrupt+0x40>)
 80053be:	fba2 2303 	umull	r2, r3, r2, r3
 80053c2:	099b      	lsrs	r3, r3, #6
 80053c4:	4a09      	ldr	r2, [pc, #36]	; (80053ec <vPortSetupTimerInterrupt+0x44>)
 80053c6:	3b01      	subs	r3, #1
 80053c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80053ca:	4b04      	ldr	r3, [pc, #16]	; (80053dc <vPortSetupTimerInterrupt+0x34>)
 80053cc:	2207      	movs	r2, #7
 80053ce:	601a      	str	r2, [r3, #0]
}
 80053d0:	bf00      	nop
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	e000e010 	.word	0xe000e010
 80053e0:	e000e018 	.word	0xe000e018
 80053e4:	20000000 	.word	0x20000000
 80053e8:	10624dd3 	.word	0x10624dd3
 80053ec:	e000e014 	.word	0xe000e014

080053f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80053f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005400 <vPortEnableVFP+0x10>
 80053f4:	6801      	ldr	r1, [r0, #0]
 80053f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80053fa:	6001      	str	r1, [r0, #0]
 80053fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80053fe:	bf00      	nop
 8005400:	e000ed88 	.word	0xe000ed88

08005404 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800540a:	f3ef 8305 	mrs	r3, IPSR
 800540e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2b0f      	cmp	r3, #15
 8005414:	d913      	bls.n	800543e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005416:	4a16      	ldr	r2, [pc, #88]	; (8005470 <vPortValidateInterruptPriority+0x6c>)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4413      	add	r3, r2
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005420:	4b14      	ldr	r3, [pc, #80]	; (8005474 <vPortValidateInterruptPriority+0x70>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	7afa      	ldrb	r2, [r7, #11]
 8005426:	429a      	cmp	r2, r3
 8005428:	d209      	bcs.n	800543e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800542a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542e:	f383 8811 	msr	BASEPRI, r3
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	607b      	str	r3, [r7, #4]
 800543c:	e7fe      	b.n	800543c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800543e:	4b0e      	ldr	r3, [pc, #56]	; (8005478 <vPortValidateInterruptPriority+0x74>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005446:	4b0d      	ldr	r3, [pc, #52]	; (800547c <vPortValidateInterruptPriority+0x78>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d909      	bls.n	8005462 <vPortValidateInterruptPriority+0x5e>
 800544e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	603b      	str	r3, [r7, #0]
 8005460:	e7fe      	b.n	8005460 <vPortValidateInterruptPriority+0x5c>
	}
 8005462:	bf00      	nop
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	e000e3f0 	.word	0xe000e3f0
 8005474:	20000d78 	.word	0x20000d78
 8005478:	e000ed0c 	.word	0xe000ed0c
 800547c:	20000d7c 	.word	0x20000d7c

08005480 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b08a      	sub	sp, #40	; 0x28
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005488:	2300      	movs	r3, #0
 800548a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800548c:	f7fe fcde 	bl	8003e4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005490:	4b57      	ldr	r3, [pc, #348]	; (80055f0 <pvPortMalloc+0x170>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005498:	f000 f90c 	bl	80056b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800549c:	4b55      	ldr	r3, [pc, #340]	; (80055f4 <pvPortMalloc+0x174>)
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4013      	ands	r3, r2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f040 808c 	bne.w	80055c2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d01c      	beq.n	80054ea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80054b0:	2208      	movs	r2, #8
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4413      	add	r3, r2
 80054b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f003 0307 	and.w	r3, r3, #7
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d013      	beq.n	80054ea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f023 0307 	bic.w	r3, r3, #7
 80054c8:	3308      	adds	r3, #8
 80054ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d009      	beq.n	80054ea <pvPortMalloc+0x6a>
 80054d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054da:	f383 8811 	msr	BASEPRI, r3
 80054de:	f3bf 8f6f 	isb	sy
 80054e2:	f3bf 8f4f 	dsb	sy
 80054e6:	617b      	str	r3, [r7, #20]
 80054e8:	e7fe      	b.n	80054e8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d068      	beq.n	80055c2 <pvPortMalloc+0x142>
 80054f0:	4b41      	ldr	r3, [pc, #260]	; (80055f8 <pvPortMalloc+0x178>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d863      	bhi.n	80055c2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80054fa:	4b40      	ldr	r3, [pc, #256]	; (80055fc <pvPortMalloc+0x17c>)
 80054fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80054fe:	4b3f      	ldr	r3, [pc, #252]	; (80055fc <pvPortMalloc+0x17c>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005504:	e004      	b.n	8005510 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	429a      	cmp	r2, r3
 8005518:	d903      	bls.n	8005522 <pvPortMalloc+0xa2>
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1f1      	bne.n	8005506 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005522:	4b33      	ldr	r3, [pc, #204]	; (80055f0 <pvPortMalloc+0x170>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005528:	429a      	cmp	r2, r3
 800552a:	d04a      	beq.n	80055c2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800552c:	6a3b      	ldr	r3, [r7, #32]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2208      	movs	r2, #8
 8005532:	4413      	add	r3, r2
 8005534:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	1ad2      	subs	r2, r2, r3
 8005546:	2308      	movs	r3, #8
 8005548:	005b      	lsls	r3, r3, #1
 800554a:	429a      	cmp	r2, r3
 800554c:	d91e      	bls.n	800558c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800554e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4413      	add	r3, r2
 8005554:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	f003 0307 	and.w	r3, r3, #7
 800555c:	2b00      	cmp	r3, #0
 800555e:	d009      	beq.n	8005574 <pvPortMalloc+0xf4>
 8005560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005564:	f383 8811 	msr	BASEPRI, r3
 8005568:	f3bf 8f6f 	isb	sy
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	613b      	str	r3, [r7, #16]
 8005572:	e7fe      	b.n	8005572 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	1ad2      	subs	r2, r2, r3
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005586:	69b8      	ldr	r0, [r7, #24]
 8005588:	f000 f8f6 	bl	8005778 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800558c:	4b1a      	ldr	r3, [pc, #104]	; (80055f8 <pvPortMalloc+0x178>)
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	4a18      	ldr	r2, [pc, #96]	; (80055f8 <pvPortMalloc+0x178>)
 8005598:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800559a:	4b17      	ldr	r3, [pc, #92]	; (80055f8 <pvPortMalloc+0x178>)
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	4b18      	ldr	r3, [pc, #96]	; (8005600 <pvPortMalloc+0x180>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d203      	bcs.n	80055ae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80055a6:	4b14      	ldr	r3, [pc, #80]	; (80055f8 <pvPortMalloc+0x178>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a15      	ldr	r2, [pc, #84]	; (8005600 <pvPortMalloc+0x180>)
 80055ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	4b10      	ldr	r3, [pc, #64]	; (80055f4 <pvPortMalloc+0x174>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	431a      	orrs	r2, r3
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	2200      	movs	r2, #0
 80055c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80055c2:	f7fe fc51 	bl	8003e68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	f003 0307 	and.w	r3, r3, #7
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d009      	beq.n	80055e4 <pvPortMalloc+0x164>
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	e7fe      	b.n	80055e2 <pvPortMalloc+0x162>
	return pvReturn;
 80055e4:	69fb      	ldr	r3, [r7, #28]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3728      	adds	r7, #40	; 0x28
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	20004988 	.word	0x20004988
 80055f4:	20004994 	.word	0x20004994
 80055f8:	2000498c 	.word	0x2000498c
 80055fc:	20004980 	.word	0x20004980
 8005600:	20004990 	.word	0x20004990

08005604 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b086      	sub	sp, #24
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d046      	beq.n	80056a4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005616:	2308      	movs	r3, #8
 8005618:	425b      	negs	r3, r3
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	4413      	add	r3, r2
 800561e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	4b20      	ldr	r3, [pc, #128]	; (80056ac <vPortFree+0xa8>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4013      	ands	r3, r2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d109      	bne.n	8005646 <vPortFree+0x42>
 8005632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005636:	f383 8811 	msr	BASEPRI, r3
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	e7fe      	b.n	8005644 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d009      	beq.n	8005662 <vPortFree+0x5e>
 800564e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	60bb      	str	r3, [r7, #8]
 8005660:	e7fe      	b.n	8005660 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	4b11      	ldr	r3, [pc, #68]	; (80056ac <vPortFree+0xa8>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4013      	ands	r3, r2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d019      	beq.n	80056a4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d115      	bne.n	80056a4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	4b0b      	ldr	r3, [pc, #44]	; (80056ac <vPortFree+0xa8>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	43db      	mvns	r3, r3
 8005682:	401a      	ands	r2, r3
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005688:	f7fe fbe0 	bl	8003e4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	4b07      	ldr	r3, [pc, #28]	; (80056b0 <vPortFree+0xac>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4413      	add	r3, r2
 8005696:	4a06      	ldr	r2, [pc, #24]	; (80056b0 <vPortFree+0xac>)
 8005698:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800569a:	6938      	ldr	r0, [r7, #16]
 800569c:	f000 f86c 	bl	8005778 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80056a0:	f7fe fbe2 	bl	8003e68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80056a4:	bf00      	nop
 80056a6:	3718      	adds	r7, #24
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	20004994 	.word	0x20004994
 80056b0:	2000498c 	.word	0x2000498c

080056b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80056ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80056be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80056c0:	4b27      	ldr	r3, [pc, #156]	; (8005760 <prvHeapInit+0xac>)
 80056c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f003 0307 	and.w	r3, r3, #7
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00c      	beq.n	80056e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	3307      	adds	r3, #7
 80056d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 0307 	bic.w	r3, r3, #7
 80056da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	4a1f      	ldr	r2, [pc, #124]	; (8005760 <prvHeapInit+0xac>)
 80056e4:	4413      	add	r3, r2
 80056e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80056ec:	4a1d      	ldr	r2, [pc, #116]	; (8005764 <prvHeapInit+0xb0>)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80056f2:	4b1c      	ldr	r3, [pc, #112]	; (8005764 <prvHeapInit+0xb0>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	4413      	add	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005700:	2208      	movs	r2, #8
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	1a9b      	subs	r3, r3, r2
 8005706:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f023 0307 	bic.w	r3, r3, #7
 800570e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4a15      	ldr	r2, [pc, #84]	; (8005768 <prvHeapInit+0xb4>)
 8005714:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005716:	4b14      	ldr	r3, [pc, #80]	; (8005768 <prvHeapInit+0xb4>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2200      	movs	r2, #0
 800571c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800571e:	4b12      	ldr	r3, [pc, #72]	; (8005768 <prvHeapInit+0xb4>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2200      	movs	r2, #0
 8005724:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	1ad2      	subs	r2, r2, r3
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005734:	4b0c      	ldr	r3, [pc, #48]	; (8005768 <prvHeapInit+0xb4>)
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	4a0a      	ldr	r2, [pc, #40]	; (800576c <prvHeapInit+0xb8>)
 8005742:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	4a09      	ldr	r2, [pc, #36]	; (8005770 <prvHeapInit+0xbc>)
 800574a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800574c:	4b09      	ldr	r3, [pc, #36]	; (8005774 <prvHeapInit+0xc0>)
 800574e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005752:	601a      	str	r2, [r3, #0]
}
 8005754:	bf00      	nop
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	20000d80 	.word	0x20000d80
 8005764:	20004980 	.word	0x20004980
 8005768:	20004988 	.word	0x20004988
 800576c:	20004990 	.word	0x20004990
 8005770:	2000498c 	.word	0x2000498c
 8005774:	20004994 	.word	0x20004994

08005778 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005780:	4b28      	ldr	r3, [pc, #160]	; (8005824 <prvInsertBlockIntoFreeList+0xac>)
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	e002      	b.n	800578c <prvInsertBlockIntoFreeList+0x14>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	429a      	cmp	r2, r3
 8005794:	d8f7      	bhi.n	8005786 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	4413      	add	r3, r2
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d108      	bne.n	80057ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	441a      	add	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	441a      	add	r2, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d118      	bne.n	8005800 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	4b15      	ldr	r3, [pc, #84]	; (8005828 <prvInsertBlockIntoFreeList+0xb0>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d00d      	beq.n	80057f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	441a      	add	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	e008      	b.n	8005808 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80057f6:	4b0c      	ldr	r3, [pc, #48]	; (8005828 <prvInsertBlockIntoFreeList+0xb0>)
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	e003      	b.n	8005808 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	429a      	cmp	r2, r3
 800580e:	d002      	beq.n	8005816 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005816:	bf00      	nop
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	20004980 	.word	0x20004980
 8005828:	20004988 	.word	0x20004988

0800582c <__errno>:
 800582c:	4b01      	ldr	r3, [pc, #4]	; (8005834 <__errno+0x8>)
 800582e:	6818      	ldr	r0, [r3, #0]
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	2000000c 	.word	0x2000000c

08005838 <__libc_init_array>:
 8005838:	b570      	push	{r4, r5, r6, lr}
 800583a:	4e0d      	ldr	r6, [pc, #52]	; (8005870 <__libc_init_array+0x38>)
 800583c:	4c0d      	ldr	r4, [pc, #52]	; (8005874 <__libc_init_array+0x3c>)
 800583e:	1ba4      	subs	r4, r4, r6
 8005840:	10a4      	asrs	r4, r4, #2
 8005842:	2500      	movs	r5, #0
 8005844:	42a5      	cmp	r5, r4
 8005846:	d109      	bne.n	800585c <__libc_init_array+0x24>
 8005848:	4e0b      	ldr	r6, [pc, #44]	; (8005878 <__libc_init_array+0x40>)
 800584a:	4c0c      	ldr	r4, [pc, #48]	; (800587c <__libc_init_array+0x44>)
 800584c:	f000 fc28 	bl	80060a0 <_init>
 8005850:	1ba4      	subs	r4, r4, r6
 8005852:	10a4      	asrs	r4, r4, #2
 8005854:	2500      	movs	r5, #0
 8005856:	42a5      	cmp	r5, r4
 8005858:	d105      	bne.n	8005866 <__libc_init_array+0x2e>
 800585a:	bd70      	pop	{r4, r5, r6, pc}
 800585c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005860:	4798      	blx	r3
 8005862:	3501      	adds	r5, #1
 8005864:	e7ee      	b.n	8005844 <__libc_init_array+0xc>
 8005866:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800586a:	4798      	blx	r3
 800586c:	3501      	adds	r5, #1
 800586e:	e7f2      	b.n	8005856 <__libc_init_array+0x1e>
 8005870:	0800617c 	.word	0x0800617c
 8005874:	0800617c 	.word	0x0800617c
 8005878:	0800617c 	.word	0x0800617c
 800587c:	08006180 	.word	0x08006180

08005880 <memcpy>:
 8005880:	b510      	push	{r4, lr}
 8005882:	1e43      	subs	r3, r0, #1
 8005884:	440a      	add	r2, r1
 8005886:	4291      	cmp	r1, r2
 8005888:	d100      	bne.n	800588c <memcpy+0xc>
 800588a:	bd10      	pop	{r4, pc}
 800588c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005890:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005894:	e7f7      	b.n	8005886 <memcpy+0x6>

08005896 <memset>:
 8005896:	4402      	add	r2, r0
 8005898:	4603      	mov	r3, r0
 800589a:	4293      	cmp	r3, r2
 800589c:	d100      	bne.n	80058a0 <memset+0xa>
 800589e:	4770      	bx	lr
 80058a0:	f803 1b01 	strb.w	r1, [r3], #1
 80058a4:	e7f9      	b.n	800589a <memset+0x4>
	...

080058a8 <siprintf>:
 80058a8:	b40e      	push	{r1, r2, r3}
 80058aa:	b500      	push	{lr}
 80058ac:	b09c      	sub	sp, #112	; 0x70
 80058ae:	ab1d      	add	r3, sp, #116	; 0x74
 80058b0:	9002      	str	r0, [sp, #8]
 80058b2:	9006      	str	r0, [sp, #24]
 80058b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80058b8:	4809      	ldr	r0, [pc, #36]	; (80058e0 <siprintf+0x38>)
 80058ba:	9107      	str	r1, [sp, #28]
 80058bc:	9104      	str	r1, [sp, #16]
 80058be:	4909      	ldr	r1, [pc, #36]	; (80058e4 <siprintf+0x3c>)
 80058c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80058c4:	9105      	str	r1, [sp, #20]
 80058c6:	6800      	ldr	r0, [r0, #0]
 80058c8:	9301      	str	r3, [sp, #4]
 80058ca:	a902      	add	r1, sp, #8
 80058cc:	f000 f866 	bl	800599c <_svfiprintf_r>
 80058d0:	9b02      	ldr	r3, [sp, #8]
 80058d2:	2200      	movs	r2, #0
 80058d4:	701a      	strb	r2, [r3, #0]
 80058d6:	b01c      	add	sp, #112	; 0x70
 80058d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80058dc:	b003      	add	sp, #12
 80058de:	4770      	bx	lr
 80058e0:	2000000c 	.word	0x2000000c
 80058e4:	ffff0208 	.word	0xffff0208

080058e8 <__ssputs_r>:
 80058e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058ec:	688e      	ldr	r6, [r1, #8]
 80058ee:	429e      	cmp	r6, r3
 80058f0:	4682      	mov	sl, r0
 80058f2:	460c      	mov	r4, r1
 80058f4:	4690      	mov	r8, r2
 80058f6:	4699      	mov	r9, r3
 80058f8:	d837      	bhi.n	800596a <__ssputs_r+0x82>
 80058fa:	898a      	ldrh	r2, [r1, #12]
 80058fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005900:	d031      	beq.n	8005966 <__ssputs_r+0x7e>
 8005902:	6825      	ldr	r5, [r4, #0]
 8005904:	6909      	ldr	r1, [r1, #16]
 8005906:	1a6f      	subs	r7, r5, r1
 8005908:	6965      	ldr	r5, [r4, #20]
 800590a:	2302      	movs	r3, #2
 800590c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005910:	fb95 f5f3 	sdiv	r5, r5, r3
 8005914:	f109 0301 	add.w	r3, r9, #1
 8005918:	443b      	add	r3, r7
 800591a:	429d      	cmp	r5, r3
 800591c:	bf38      	it	cc
 800591e:	461d      	movcc	r5, r3
 8005920:	0553      	lsls	r3, r2, #21
 8005922:	d530      	bpl.n	8005986 <__ssputs_r+0x9e>
 8005924:	4629      	mov	r1, r5
 8005926:	f000 fb21 	bl	8005f6c <_malloc_r>
 800592a:	4606      	mov	r6, r0
 800592c:	b950      	cbnz	r0, 8005944 <__ssputs_r+0x5c>
 800592e:	230c      	movs	r3, #12
 8005930:	f8ca 3000 	str.w	r3, [sl]
 8005934:	89a3      	ldrh	r3, [r4, #12]
 8005936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800593a:	81a3      	strh	r3, [r4, #12]
 800593c:	f04f 30ff 	mov.w	r0, #4294967295
 8005940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005944:	463a      	mov	r2, r7
 8005946:	6921      	ldr	r1, [r4, #16]
 8005948:	f7ff ff9a 	bl	8005880 <memcpy>
 800594c:	89a3      	ldrh	r3, [r4, #12]
 800594e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005956:	81a3      	strh	r3, [r4, #12]
 8005958:	6126      	str	r6, [r4, #16]
 800595a:	6165      	str	r5, [r4, #20]
 800595c:	443e      	add	r6, r7
 800595e:	1bed      	subs	r5, r5, r7
 8005960:	6026      	str	r6, [r4, #0]
 8005962:	60a5      	str	r5, [r4, #8]
 8005964:	464e      	mov	r6, r9
 8005966:	454e      	cmp	r6, r9
 8005968:	d900      	bls.n	800596c <__ssputs_r+0x84>
 800596a:	464e      	mov	r6, r9
 800596c:	4632      	mov	r2, r6
 800596e:	4641      	mov	r1, r8
 8005970:	6820      	ldr	r0, [r4, #0]
 8005972:	f000 fa93 	bl	8005e9c <memmove>
 8005976:	68a3      	ldr	r3, [r4, #8]
 8005978:	1b9b      	subs	r3, r3, r6
 800597a:	60a3      	str	r3, [r4, #8]
 800597c:	6823      	ldr	r3, [r4, #0]
 800597e:	441e      	add	r6, r3
 8005980:	6026      	str	r6, [r4, #0]
 8005982:	2000      	movs	r0, #0
 8005984:	e7dc      	b.n	8005940 <__ssputs_r+0x58>
 8005986:	462a      	mov	r2, r5
 8005988:	f000 fb4a 	bl	8006020 <_realloc_r>
 800598c:	4606      	mov	r6, r0
 800598e:	2800      	cmp	r0, #0
 8005990:	d1e2      	bne.n	8005958 <__ssputs_r+0x70>
 8005992:	6921      	ldr	r1, [r4, #16]
 8005994:	4650      	mov	r0, sl
 8005996:	f000 fa9b 	bl	8005ed0 <_free_r>
 800599a:	e7c8      	b.n	800592e <__ssputs_r+0x46>

0800599c <_svfiprintf_r>:
 800599c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a0:	461d      	mov	r5, r3
 80059a2:	898b      	ldrh	r3, [r1, #12]
 80059a4:	061f      	lsls	r7, r3, #24
 80059a6:	b09d      	sub	sp, #116	; 0x74
 80059a8:	4680      	mov	r8, r0
 80059aa:	460c      	mov	r4, r1
 80059ac:	4616      	mov	r6, r2
 80059ae:	d50f      	bpl.n	80059d0 <_svfiprintf_r+0x34>
 80059b0:	690b      	ldr	r3, [r1, #16]
 80059b2:	b96b      	cbnz	r3, 80059d0 <_svfiprintf_r+0x34>
 80059b4:	2140      	movs	r1, #64	; 0x40
 80059b6:	f000 fad9 	bl	8005f6c <_malloc_r>
 80059ba:	6020      	str	r0, [r4, #0]
 80059bc:	6120      	str	r0, [r4, #16]
 80059be:	b928      	cbnz	r0, 80059cc <_svfiprintf_r+0x30>
 80059c0:	230c      	movs	r3, #12
 80059c2:	f8c8 3000 	str.w	r3, [r8]
 80059c6:	f04f 30ff 	mov.w	r0, #4294967295
 80059ca:	e0c8      	b.n	8005b5e <_svfiprintf_r+0x1c2>
 80059cc:	2340      	movs	r3, #64	; 0x40
 80059ce:	6163      	str	r3, [r4, #20]
 80059d0:	2300      	movs	r3, #0
 80059d2:	9309      	str	r3, [sp, #36]	; 0x24
 80059d4:	2320      	movs	r3, #32
 80059d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059da:	2330      	movs	r3, #48	; 0x30
 80059dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059e0:	9503      	str	r5, [sp, #12]
 80059e2:	f04f 0b01 	mov.w	fp, #1
 80059e6:	4637      	mov	r7, r6
 80059e8:	463d      	mov	r5, r7
 80059ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80059ee:	b10b      	cbz	r3, 80059f4 <_svfiprintf_r+0x58>
 80059f0:	2b25      	cmp	r3, #37	; 0x25
 80059f2:	d13e      	bne.n	8005a72 <_svfiprintf_r+0xd6>
 80059f4:	ebb7 0a06 	subs.w	sl, r7, r6
 80059f8:	d00b      	beq.n	8005a12 <_svfiprintf_r+0x76>
 80059fa:	4653      	mov	r3, sl
 80059fc:	4632      	mov	r2, r6
 80059fe:	4621      	mov	r1, r4
 8005a00:	4640      	mov	r0, r8
 8005a02:	f7ff ff71 	bl	80058e8 <__ssputs_r>
 8005a06:	3001      	adds	r0, #1
 8005a08:	f000 80a4 	beq.w	8005b54 <_svfiprintf_r+0x1b8>
 8005a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a0e:	4453      	add	r3, sl
 8005a10:	9309      	str	r3, [sp, #36]	; 0x24
 8005a12:	783b      	ldrb	r3, [r7, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f000 809d 	beq.w	8005b54 <_svfiprintf_r+0x1b8>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a24:	9304      	str	r3, [sp, #16]
 8005a26:	9307      	str	r3, [sp, #28]
 8005a28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a2c:	931a      	str	r3, [sp, #104]	; 0x68
 8005a2e:	462f      	mov	r7, r5
 8005a30:	2205      	movs	r2, #5
 8005a32:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005a36:	4850      	ldr	r0, [pc, #320]	; (8005b78 <_svfiprintf_r+0x1dc>)
 8005a38:	f7fa fbd2 	bl	80001e0 <memchr>
 8005a3c:	9b04      	ldr	r3, [sp, #16]
 8005a3e:	b9d0      	cbnz	r0, 8005a76 <_svfiprintf_r+0xda>
 8005a40:	06d9      	lsls	r1, r3, #27
 8005a42:	bf44      	itt	mi
 8005a44:	2220      	movmi	r2, #32
 8005a46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a4a:	071a      	lsls	r2, r3, #28
 8005a4c:	bf44      	itt	mi
 8005a4e:	222b      	movmi	r2, #43	; 0x2b
 8005a50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a54:	782a      	ldrb	r2, [r5, #0]
 8005a56:	2a2a      	cmp	r2, #42	; 0x2a
 8005a58:	d015      	beq.n	8005a86 <_svfiprintf_r+0xea>
 8005a5a:	9a07      	ldr	r2, [sp, #28]
 8005a5c:	462f      	mov	r7, r5
 8005a5e:	2000      	movs	r0, #0
 8005a60:	250a      	movs	r5, #10
 8005a62:	4639      	mov	r1, r7
 8005a64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a68:	3b30      	subs	r3, #48	; 0x30
 8005a6a:	2b09      	cmp	r3, #9
 8005a6c:	d94d      	bls.n	8005b0a <_svfiprintf_r+0x16e>
 8005a6e:	b1b8      	cbz	r0, 8005aa0 <_svfiprintf_r+0x104>
 8005a70:	e00f      	b.n	8005a92 <_svfiprintf_r+0xf6>
 8005a72:	462f      	mov	r7, r5
 8005a74:	e7b8      	b.n	80059e8 <_svfiprintf_r+0x4c>
 8005a76:	4a40      	ldr	r2, [pc, #256]	; (8005b78 <_svfiprintf_r+0x1dc>)
 8005a78:	1a80      	subs	r0, r0, r2
 8005a7a:	fa0b f000 	lsl.w	r0, fp, r0
 8005a7e:	4318      	orrs	r0, r3
 8005a80:	9004      	str	r0, [sp, #16]
 8005a82:	463d      	mov	r5, r7
 8005a84:	e7d3      	b.n	8005a2e <_svfiprintf_r+0x92>
 8005a86:	9a03      	ldr	r2, [sp, #12]
 8005a88:	1d11      	adds	r1, r2, #4
 8005a8a:	6812      	ldr	r2, [r2, #0]
 8005a8c:	9103      	str	r1, [sp, #12]
 8005a8e:	2a00      	cmp	r2, #0
 8005a90:	db01      	blt.n	8005a96 <_svfiprintf_r+0xfa>
 8005a92:	9207      	str	r2, [sp, #28]
 8005a94:	e004      	b.n	8005aa0 <_svfiprintf_r+0x104>
 8005a96:	4252      	negs	r2, r2
 8005a98:	f043 0302 	orr.w	r3, r3, #2
 8005a9c:	9207      	str	r2, [sp, #28]
 8005a9e:	9304      	str	r3, [sp, #16]
 8005aa0:	783b      	ldrb	r3, [r7, #0]
 8005aa2:	2b2e      	cmp	r3, #46	; 0x2e
 8005aa4:	d10c      	bne.n	8005ac0 <_svfiprintf_r+0x124>
 8005aa6:	787b      	ldrb	r3, [r7, #1]
 8005aa8:	2b2a      	cmp	r3, #42	; 0x2a
 8005aaa:	d133      	bne.n	8005b14 <_svfiprintf_r+0x178>
 8005aac:	9b03      	ldr	r3, [sp, #12]
 8005aae:	1d1a      	adds	r2, r3, #4
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	9203      	str	r2, [sp, #12]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	bfb8      	it	lt
 8005ab8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005abc:	3702      	adds	r7, #2
 8005abe:	9305      	str	r3, [sp, #20]
 8005ac0:	4d2e      	ldr	r5, [pc, #184]	; (8005b7c <_svfiprintf_r+0x1e0>)
 8005ac2:	7839      	ldrb	r1, [r7, #0]
 8005ac4:	2203      	movs	r2, #3
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	f7fa fb8a 	bl	80001e0 <memchr>
 8005acc:	b138      	cbz	r0, 8005ade <_svfiprintf_r+0x142>
 8005ace:	2340      	movs	r3, #64	; 0x40
 8005ad0:	1b40      	subs	r0, r0, r5
 8005ad2:	fa03 f000 	lsl.w	r0, r3, r0
 8005ad6:	9b04      	ldr	r3, [sp, #16]
 8005ad8:	4303      	orrs	r3, r0
 8005ada:	3701      	adds	r7, #1
 8005adc:	9304      	str	r3, [sp, #16]
 8005ade:	7839      	ldrb	r1, [r7, #0]
 8005ae0:	4827      	ldr	r0, [pc, #156]	; (8005b80 <_svfiprintf_r+0x1e4>)
 8005ae2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ae6:	2206      	movs	r2, #6
 8005ae8:	1c7e      	adds	r6, r7, #1
 8005aea:	f7fa fb79 	bl	80001e0 <memchr>
 8005aee:	2800      	cmp	r0, #0
 8005af0:	d038      	beq.n	8005b64 <_svfiprintf_r+0x1c8>
 8005af2:	4b24      	ldr	r3, [pc, #144]	; (8005b84 <_svfiprintf_r+0x1e8>)
 8005af4:	bb13      	cbnz	r3, 8005b3c <_svfiprintf_r+0x1a0>
 8005af6:	9b03      	ldr	r3, [sp, #12]
 8005af8:	3307      	adds	r3, #7
 8005afa:	f023 0307 	bic.w	r3, r3, #7
 8005afe:	3308      	adds	r3, #8
 8005b00:	9303      	str	r3, [sp, #12]
 8005b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b04:	444b      	add	r3, r9
 8005b06:	9309      	str	r3, [sp, #36]	; 0x24
 8005b08:	e76d      	b.n	80059e6 <_svfiprintf_r+0x4a>
 8005b0a:	fb05 3202 	mla	r2, r5, r2, r3
 8005b0e:	2001      	movs	r0, #1
 8005b10:	460f      	mov	r7, r1
 8005b12:	e7a6      	b.n	8005a62 <_svfiprintf_r+0xc6>
 8005b14:	2300      	movs	r3, #0
 8005b16:	3701      	adds	r7, #1
 8005b18:	9305      	str	r3, [sp, #20]
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	250a      	movs	r5, #10
 8005b1e:	4638      	mov	r0, r7
 8005b20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b24:	3a30      	subs	r2, #48	; 0x30
 8005b26:	2a09      	cmp	r2, #9
 8005b28:	d903      	bls.n	8005b32 <_svfiprintf_r+0x196>
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d0c8      	beq.n	8005ac0 <_svfiprintf_r+0x124>
 8005b2e:	9105      	str	r1, [sp, #20]
 8005b30:	e7c6      	b.n	8005ac0 <_svfiprintf_r+0x124>
 8005b32:	fb05 2101 	mla	r1, r5, r1, r2
 8005b36:	2301      	movs	r3, #1
 8005b38:	4607      	mov	r7, r0
 8005b3a:	e7f0      	b.n	8005b1e <_svfiprintf_r+0x182>
 8005b3c:	ab03      	add	r3, sp, #12
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	4622      	mov	r2, r4
 8005b42:	4b11      	ldr	r3, [pc, #68]	; (8005b88 <_svfiprintf_r+0x1ec>)
 8005b44:	a904      	add	r1, sp, #16
 8005b46:	4640      	mov	r0, r8
 8005b48:	f3af 8000 	nop.w
 8005b4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005b50:	4681      	mov	r9, r0
 8005b52:	d1d6      	bne.n	8005b02 <_svfiprintf_r+0x166>
 8005b54:	89a3      	ldrh	r3, [r4, #12]
 8005b56:	065b      	lsls	r3, r3, #25
 8005b58:	f53f af35 	bmi.w	80059c6 <_svfiprintf_r+0x2a>
 8005b5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b5e:	b01d      	add	sp, #116	; 0x74
 8005b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b64:	ab03      	add	r3, sp, #12
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	4622      	mov	r2, r4
 8005b6a:	4b07      	ldr	r3, [pc, #28]	; (8005b88 <_svfiprintf_r+0x1ec>)
 8005b6c:	a904      	add	r1, sp, #16
 8005b6e:	4640      	mov	r0, r8
 8005b70:	f000 f882 	bl	8005c78 <_printf_i>
 8005b74:	e7ea      	b.n	8005b4c <_svfiprintf_r+0x1b0>
 8005b76:	bf00      	nop
 8005b78:	08006140 	.word	0x08006140
 8005b7c:	08006146 	.word	0x08006146
 8005b80:	0800614a 	.word	0x0800614a
 8005b84:	00000000 	.word	0x00000000
 8005b88:	080058e9 	.word	0x080058e9

08005b8c <_printf_common>:
 8005b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b90:	4691      	mov	r9, r2
 8005b92:	461f      	mov	r7, r3
 8005b94:	688a      	ldr	r2, [r1, #8]
 8005b96:	690b      	ldr	r3, [r1, #16]
 8005b98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	bfb8      	it	lt
 8005ba0:	4613      	movlt	r3, r2
 8005ba2:	f8c9 3000 	str.w	r3, [r9]
 8005ba6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005baa:	4606      	mov	r6, r0
 8005bac:	460c      	mov	r4, r1
 8005bae:	b112      	cbz	r2, 8005bb6 <_printf_common+0x2a>
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	f8c9 3000 	str.w	r3, [r9]
 8005bb6:	6823      	ldr	r3, [r4, #0]
 8005bb8:	0699      	lsls	r1, r3, #26
 8005bba:	bf42      	ittt	mi
 8005bbc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005bc0:	3302      	addmi	r3, #2
 8005bc2:	f8c9 3000 	strmi.w	r3, [r9]
 8005bc6:	6825      	ldr	r5, [r4, #0]
 8005bc8:	f015 0506 	ands.w	r5, r5, #6
 8005bcc:	d107      	bne.n	8005bde <_printf_common+0x52>
 8005bce:	f104 0a19 	add.w	sl, r4, #25
 8005bd2:	68e3      	ldr	r3, [r4, #12]
 8005bd4:	f8d9 2000 	ldr.w	r2, [r9]
 8005bd8:	1a9b      	subs	r3, r3, r2
 8005bda:	42ab      	cmp	r3, r5
 8005bdc:	dc28      	bgt.n	8005c30 <_printf_common+0xa4>
 8005bde:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005be2:	6822      	ldr	r2, [r4, #0]
 8005be4:	3300      	adds	r3, #0
 8005be6:	bf18      	it	ne
 8005be8:	2301      	movne	r3, #1
 8005bea:	0692      	lsls	r2, r2, #26
 8005bec:	d42d      	bmi.n	8005c4a <_printf_common+0xbe>
 8005bee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bf2:	4639      	mov	r1, r7
 8005bf4:	4630      	mov	r0, r6
 8005bf6:	47c0      	blx	r8
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	d020      	beq.n	8005c3e <_printf_common+0xb2>
 8005bfc:	6823      	ldr	r3, [r4, #0]
 8005bfe:	68e5      	ldr	r5, [r4, #12]
 8005c00:	f8d9 2000 	ldr.w	r2, [r9]
 8005c04:	f003 0306 	and.w	r3, r3, #6
 8005c08:	2b04      	cmp	r3, #4
 8005c0a:	bf08      	it	eq
 8005c0c:	1aad      	subeq	r5, r5, r2
 8005c0e:	68a3      	ldr	r3, [r4, #8]
 8005c10:	6922      	ldr	r2, [r4, #16]
 8005c12:	bf0c      	ite	eq
 8005c14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c18:	2500      	movne	r5, #0
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	bfc4      	itt	gt
 8005c1e:	1a9b      	subgt	r3, r3, r2
 8005c20:	18ed      	addgt	r5, r5, r3
 8005c22:	f04f 0900 	mov.w	r9, #0
 8005c26:	341a      	adds	r4, #26
 8005c28:	454d      	cmp	r5, r9
 8005c2a:	d11a      	bne.n	8005c62 <_printf_common+0xd6>
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	e008      	b.n	8005c42 <_printf_common+0xb6>
 8005c30:	2301      	movs	r3, #1
 8005c32:	4652      	mov	r2, sl
 8005c34:	4639      	mov	r1, r7
 8005c36:	4630      	mov	r0, r6
 8005c38:	47c0      	blx	r8
 8005c3a:	3001      	adds	r0, #1
 8005c3c:	d103      	bne.n	8005c46 <_printf_common+0xba>
 8005c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c46:	3501      	adds	r5, #1
 8005c48:	e7c3      	b.n	8005bd2 <_printf_common+0x46>
 8005c4a:	18e1      	adds	r1, r4, r3
 8005c4c:	1c5a      	adds	r2, r3, #1
 8005c4e:	2030      	movs	r0, #48	; 0x30
 8005c50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c54:	4422      	add	r2, r4
 8005c56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c5e:	3302      	adds	r3, #2
 8005c60:	e7c5      	b.n	8005bee <_printf_common+0x62>
 8005c62:	2301      	movs	r3, #1
 8005c64:	4622      	mov	r2, r4
 8005c66:	4639      	mov	r1, r7
 8005c68:	4630      	mov	r0, r6
 8005c6a:	47c0      	blx	r8
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	d0e6      	beq.n	8005c3e <_printf_common+0xb2>
 8005c70:	f109 0901 	add.w	r9, r9, #1
 8005c74:	e7d8      	b.n	8005c28 <_printf_common+0x9c>
	...

08005c78 <_printf_i>:
 8005c78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005c80:	460c      	mov	r4, r1
 8005c82:	7e09      	ldrb	r1, [r1, #24]
 8005c84:	b085      	sub	sp, #20
 8005c86:	296e      	cmp	r1, #110	; 0x6e
 8005c88:	4617      	mov	r7, r2
 8005c8a:	4606      	mov	r6, r0
 8005c8c:	4698      	mov	r8, r3
 8005c8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c90:	f000 80b3 	beq.w	8005dfa <_printf_i+0x182>
 8005c94:	d822      	bhi.n	8005cdc <_printf_i+0x64>
 8005c96:	2963      	cmp	r1, #99	; 0x63
 8005c98:	d036      	beq.n	8005d08 <_printf_i+0x90>
 8005c9a:	d80a      	bhi.n	8005cb2 <_printf_i+0x3a>
 8005c9c:	2900      	cmp	r1, #0
 8005c9e:	f000 80b9 	beq.w	8005e14 <_printf_i+0x19c>
 8005ca2:	2958      	cmp	r1, #88	; 0x58
 8005ca4:	f000 8083 	beq.w	8005dae <_printf_i+0x136>
 8005ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005cb0:	e032      	b.n	8005d18 <_printf_i+0xa0>
 8005cb2:	2964      	cmp	r1, #100	; 0x64
 8005cb4:	d001      	beq.n	8005cba <_printf_i+0x42>
 8005cb6:	2969      	cmp	r1, #105	; 0x69
 8005cb8:	d1f6      	bne.n	8005ca8 <_printf_i+0x30>
 8005cba:	6820      	ldr	r0, [r4, #0]
 8005cbc:	6813      	ldr	r3, [r2, #0]
 8005cbe:	0605      	lsls	r5, r0, #24
 8005cc0:	f103 0104 	add.w	r1, r3, #4
 8005cc4:	d52a      	bpl.n	8005d1c <_printf_i+0xa4>
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6011      	str	r1, [r2, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	da03      	bge.n	8005cd6 <_printf_i+0x5e>
 8005cce:	222d      	movs	r2, #45	; 0x2d
 8005cd0:	425b      	negs	r3, r3
 8005cd2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005cd6:	486f      	ldr	r0, [pc, #444]	; (8005e94 <_printf_i+0x21c>)
 8005cd8:	220a      	movs	r2, #10
 8005cda:	e039      	b.n	8005d50 <_printf_i+0xd8>
 8005cdc:	2973      	cmp	r1, #115	; 0x73
 8005cde:	f000 809d 	beq.w	8005e1c <_printf_i+0x1a4>
 8005ce2:	d808      	bhi.n	8005cf6 <_printf_i+0x7e>
 8005ce4:	296f      	cmp	r1, #111	; 0x6f
 8005ce6:	d020      	beq.n	8005d2a <_printf_i+0xb2>
 8005ce8:	2970      	cmp	r1, #112	; 0x70
 8005cea:	d1dd      	bne.n	8005ca8 <_printf_i+0x30>
 8005cec:	6823      	ldr	r3, [r4, #0]
 8005cee:	f043 0320 	orr.w	r3, r3, #32
 8005cf2:	6023      	str	r3, [r4, #0]
 8005cf4:	e003      	b.n	8005cfe <_printf_i+0x86>
 8005cf6:	2975      	cmp	r1, #117	; 0x75
 8005cf8:	d017      	beq.n	8005d2a <_printf_i+0xb2>
 8005cfa:	2978      	cmp	r1, #120	; 0x78
 8005cfc:	d1d4      	bne.n	8005ca8 <_printf_i+0x30>
 8005cfe:	2378      	movs	r3, #120	; 0x78
 8005d00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d04:	4864      	ldr	r0, [pc, #400]	; (8005e98 <_printf_i+0x220>)
 8005d06:	e055      	b.n	8005db4 <_printf_i+0x13c>
 8005d08:	6813      	ldr	r3, [r2, #0]
 8005d0a:	1d19      	adds	r1, r3, #4
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6011      	str	r1, [r2, #0]
 8005d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e08c      	b.n	8005e36 <_printf_i+0x1be>
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6011      	str	r1, [r2, #0]
 8005d20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d24:	bf18      	it	ne
 8005d26:	b21b      	sxthne	r3, r3
 8005d28:	e7cf      	b.n	8005cca <_printf_i+0x52>
 8005d2a:	6813      	ldr	r3, [r2, #0]
 8005d2c:	6825      	ldr	r5, [r4, #0]
 8005d2e:	1d18      	adds	r0, r3, #4
 8005d30:	6010      	str	r0, [r2, #0]
 8005d32:	0628      	lsls	r0, r5, #24
 8005d34:	d501      	bpl.n	8005d3a <_printf_i+0xc2>
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	e002      	b.n	8005d40 <_printf_i+0xc8>
 8005d3a:	0668      	lsls	r0, r5, #25
 8005d3c:	d5fb      	bpl.n	8005d36 <_printf_i+0xbe>
 8005d3e:	881b      	ldrh	r3, [r3, #0]
 8005d40:	4854      	ldr	r0, [pc, #336]	; (8005e94 <_printf_i+0x21c>)
 8005d42:	296f      	cmp	r1, #111	; 0x6f
 8005d44:	bf14      	ite	ne
 8005d46:	220a      	movne	r2, #10
 8005d48:	2208      	moveq	r2, #8
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d50:	6865      	ldr	r5, [r4, #4]
 8005d52:	60a5      	str	r5, [r4, #8]
 8005d54:	2d00      	cmp	r5, #0
 8005d56:	f2c0 8095 	blt.w	8005e84 <_printf_i+0x20c>
 8005d5a:	6821      	ldr	r1, [r4, #0]
 8005d5c:	f021 0104 	bic.w	r1, r1, #4
 8005d60:	6021      	str	r1, [r4, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d13d      	bne.n	8005de2 <_printf_i+0x16a>
 8005d66:	2d00      	cmp	r5, #0
 8005d68:	f040 808e 	bne.w	8005e88 <_printf_i+0x210>
 8005d6c:	4665      	mov	r5, ip
 8005d6e:	2a08      	cmp	r2, #8
 8005d70:	d10b      	bne.n	8005d8a <_printf_i+0x112>
 8005d72:	6823      	ldr	r3, [r4, #0]
 8005d74:	07db      	lsls	r3, r3, #31
 8005d76:	d508      	bpl.n	8005d8a <_printf_i+0x112>
 8005d78:	6923      	ldr	r3, [r4, #16]
 8005d7a:	6862      	ldr	r2, [r4, #4]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	bfde      	ittt	le
 8005d80:	2330      	movle	r3, #48	; 0x30
 8005d82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d86:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d8a:	ebac 0305 	sub.w	r3, ip, r5
 8005d8e:	6123      	str	r3, [r4, #16]
 8005d90:	f8cd 8000 	str.w	r8, [sp]
 8005d94:	463b      	mov	r3, r7
 8005d96:	aa03      	add	r2, sp, #12
 8005d98:	4621      	mov	r1, r4
 8005d9a:	4630      	mov	r0, r6
 8005d9c:	f7ff fef6 	bl	8005b8c <_printf_common>
 8005da0:	3001      	adds	r0, #1
 8005da2:	d14d      	bne.n	8005e40 <_printf_i+0x1c8>
 8005da4:	f04f 30ff 	mov.w	r0, #4294967295
 8005da8:	b005      	add	sp, #20
 8005daa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005dae:	4839      	ldr	r0, [pc, #228]	; (8005e94 <_printf_i+0x21c>)
 8005db0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005db4:	6813      	ldr	r3, [r2, #0]
 8005db6:	6821      	ldr	r1, [r4, #0]
 8005db8:	1d1d      	adds	r5, r3, #4
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6015      	str	r5, [r2, #0]
 8005dbe:	060a      	lsls	r2, r1, #24
 8005dc0:	d50b      	bpl.n	8005dda <_printf_i+0x162>
 8005dc2:	07ca      	lsls	r2, r1, #31
 8005dc4:	bf44      	itt	mi
 8005dc6:	f041 0120 	orrmi.w	r1, r1, #32
 8005dca:	6021      	strmi	r1, [r4, #0]
 8005dcc:	b91b      	cbnz	r3, 8005dd6 <_printf_i+0x15e>
 8005dce:	6822      	ldr	r2, [r4, #0]
 8005dd0:	f022 0220 	bic.w	r2, r2, #32
 8005dd4:	6022      	str	r2, [r4, #0]
 8005dd6:	2210      	movs	r2, #16
 8005dd8:	e7b7      	b.n	8005d4a <_printf_i+0xd2>
 8005dda:	064d      	lsls	r5, r1, #25
 8005ddc:	bf48      	it	mi
 8005dde:	b29b      	uxthmi	r3, r3
 8005de0:	e7ef      	b.n	8005dc2 <_printf_i+0x14a>
 8005de2:	4665      	mov	r5, ip
 8005de4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005de8:	fb02 3311 	mls	r3, r2, r1, r3
 8005dec:	5cc3      	ldrb	r3, [r0, r3]
 8005dee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005df2:	460b      	mov	r3, r1
 8005df4:	2900      	cmp	r1, #0
 8005df6:	d1f5      	bne.n	8005de4 <_printf_i+0x16c>
 8005df8:	e7b9      	b.n	8005d6e <_printf_i+0xf6>
 8005dfa:	6813      	ldr	r3, [r2, #0]
 8005dfc:	6825      	ldr	r5, [r4, #0]
 8005dfe:	6961      	ldr	r1, [r4, #20]
 8005e00:	1d18      	adds	r0, r3, #4
 8005e02:	6010      	str	r0, [r2, #0]
 8005e04:	0628      	lsls	r0, r5, #24
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	d501      	bpl.n	8005e0e <_printf_i+0x196>
 8005e0a:	6019      	str	r1, [r3, #0]
 8005e0c:	e002      	b.n	8005e14 <_printf_i+0x19c>
 8005e0e:	066a      	lsls	r2, r5, #25
 8005e10:	d5fb      	bpl.n	8005e0a <_printf_i+0x192>
 8005e12:	8019      	strh	r1, [r3, #0]
 8005e14:	2300      	movs	r3, #0
 8005e16:	6123      	str	r3, [r4, #16]
 8005e18:	4665      	mov	r5, ip
 8005e1a:	e7b9      	b.n	8005d90 <_printf_i+0x118>
 8005e1c:	6813      	ldr	r3, [r2, #0]
 8005e1e:	1d19      	adds	r1, r3, #4
 8005e20:	6011      	str	r1, [r2, #0]
 8005e22:	681d      	ldr	r5, [r3, #0]
 8005e24:	6862      	ldr	r2, [r4, #4]
 8005e26:	2100      	movs	r1, #0
 8005e28:	4628      	mov	r0, r5
 8005e2a:	f7fa f9d9 	bl	80001e0 <memchr>
 8005e2e:	b108      	cbz	r0, 8005e34 <_printf_i+0x1bc>
 8005e30:	1b40      	subs	r0, r0, r5
 8005e32:	6060      	str	r0, [r4, #4]
 8005e34:	6863      	ldr	r3, [r4, #4]
 8005e36:	6123      	str	r3, [r4, #16]
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e3e:	e7a7      	b.n	8005d90 <_printf_i+0x118>
 8005e40:	6923      	ldr	r3, [r4, #16]
 8005e42:	462a      	mov	r2, r5
 8005e44:	4639      	mov	r1, r7
 8005e46:	4630      	mov	r0, r6
 8005e48:	47c0      	blx	r8
 8005e4a:	3001      	adds	r0, #1
 8005e4c:	d0aa      	beq.n	8005da4 <_printf_i+0x12c>
 8005e4e:	6823      	ldr	r3, [r4, #0]
 8005e50:	079b      	lsls	r3, r3, #30
 8005e52:	d413      	bmi.n	8005e7c <_printf_i+0x204>
 8005e54:	68e0      	ldr	r0, [r4, #12]
 8005e56:	9b03      	ldr	r3, [sp, #12]
 8005e58:	4298      	cmp	r0, r3
 8005e5a:	bfb8      	it	lt
 8005e5c:	4618      	movlt	r0, r3
 8005e5e:	e7a3      	b.n	8005da8 <_printf_i+0x130>
 8005e60:	2301      	movs	r3, #1
 8005e62:	464a      	mov	r2, r9
 8005e64:	4639      	mov	r1, r7
 8005e66:	4630      	mov	r0, r6
 8005e68:	47c0      	blx	r8
 8005e6a:	3001      	adds	r0, #1
 8005e6c:	d09a      	beq.n	8005da4 <_printf_i+0x12c>
 8005e6e:	3501      	adds	r5, #1
 8005e70:	68e3      	ldr	r3, [r4, #12]
 8005e72:	9a03      	ldr	r2, [sp, #12]
 8005e74:	1a9b      	subs	r3, r3, r2
 8005e76:	42ab      	cmp	r3, r5
 8005e78:	dcf2      	bgt.n	8005e60 <_printf_i+0x1e8>
 8005e7a:	e7eb      	b.n	8005e54 <_printf_i+0x1dc>
 8005e7c:	2500      	movs	r5, #0
 8005e7e:	f104 0919 	add.w	r9, r4, #25
 8005e82:	e7f5      	b.n	8005e70 <_printf_i+0x1f8>
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1ac      	bne.n	8005de2 <_printf_i+0x16a>
 8005e88:	7803      	ldrb	r3, [r0, #0]
 8005e8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e92:	e76c      	b.n	8005d6e <_printf_i+0xf6>
 8005e94:	08006151 	.word	0x08006151
 8005e98:	08006162 	.word	0x08006162

08005e9c <memmove>:
 8005e9c:	4288      	cmp	r0, r1
 8005e9e:	b510      	push	{r4, lr}
 8005ea0:	eb01 0302 	add.w	r3, r1, r2
 8005ea4:	d807      	bhi.n	8005eb6 <memmove+0x1a>
 8005ea6:	1e42      	subs	r2, r0, #1
 8005ea8:	4299      	cmp	r1, r3
 8005eaa:	d00a      	beq.n	8005ec2 <memmove+0x26>
 8005eac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eb0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005eb4:	e7f8      	b.n	8005ea8 <memmove+0xc>
 8005eb6:	4283      	cmp	r3, r0
 8005eb8:	d9f5      	bls.n	8005ea6 <memmove+0xa>
 8005eba:	1881      	adds	r1, r0, r2
 8005ebc:	1ad2      	subs	r2, r2, r3
 8005ebe:	42d3      	cmn	r3, r2
 8005ec0:	d100      	bne.n	8005ec4 <memmove+0x28>
 8005ec2:	bd10      	pop	{r4, pc}
 8005ec4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ec8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005ecc:	e7f7      	b.n	8005ebe <memmove+0x22>
	...

08005ed0 <_free_r>:
 8005ed0:	b538      	push	{r3, r4, r5, lr}
 8005ed2:	4605      	mov	r5, r0
 8005ed4:	2900      	cmp	r1, #0
 8005ed6:	d045      	beq.n	8005f64 <_free_r+0x94>
 8005ed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005edc:	1f0c      	subs	r4, r1, #4
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	bfb8      	it	lt
 8005ee2:	18e4      	addlt	r4, r4, r3
 8005ee4:	f000 f8d2 	bl	800608c <__malloc_lock>
 8005ee8:	4a1f      	ldr	r2, [pc, #124]	; (8005f68 <_free_r+0x98>)
 8005eea:	6813      	ldr	r3, [r2, #0]
 8005eec:	4610      	mov	r0, r2
 8005eee:	b933      	cbnz	r3, 8005efe <_free_r+0x2e>
 8005ef0:	6063      	str	r3, [r4, #4]
 8005ef2:	6014      	str	r4, [r2, #0]
 8005ef4:	4628      	mov	r0, r5
 8005ef6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005efa:	f000 b8c8 	b.w	800608e <__malloc_unlock>
 8005efe:	42a3      	cmp	r3, r4
 8005f00:	d90c      	bls.n	8005f1c <_free_r+0x4c>
 8005f02:	6821      	ldr	r1, [r4, #0]
 8005f04:	1862      	adds	r2, r4, r1
 8005f06:	4293      	cmp	r3, r2
 8005f08:	bf04      	itt	eq
 8005f0a:	681a      	ldreq	r2, [r3, #0]
 8005f0c:	685b      	ldreq	r3, [r3, #4]
 8005f0e:	6063      	str	r3, [r4, #4]
 8005f10:	bf04      	itt	eq
 8005f12:	1852      	addeq	r2, r2, r1
 8005f14:	6022      	streq	r2, [r4, #0]
 8005f16:	6004      	str	r4, [r0, #0]
 8005f18:	e7ec      	b.n	8005ef4 <_free_r+0x24>
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	b10a      	cbz	r2, 8005f24 <_free_r+0x54>
 8005f20:	42a2      	cmp	r2, r4
 8005f22:	d9fa      	bls.n	8005f1a <_free_r+0x4a>
 8005f24:	6819      	ldr	r1, [r3, #0]
 8005f26:	1858      	adds	r0, r3, r1
 8005f28:	42a0      	cmp	r0, r4
 8005f2a:	d10b      	bne.n	8005f44 <_free_r+0x74>
 8005f2c:	6820      	ldr	r0, [r4, #0]
 8005f2e:	4401      	add	r1, r0
 8005f30:	1858      	adds	r0, r3, r1
 8005f32:	4282      	cmp	r2, r0
 8005f34:	6019      	str	r1, [r3, #0]
 8005f36:	d1dd      	bne.n	8005ef4 <_free_r+0x24>
 8005f38:	6810      	ldr	r0, [r2, #0]
 8005f3a:	6852      	ldr	r2, [r2, #4]
 8005f3c:	605a      	str	r2, [r3, #4]
 8005f3e:	4401      	add	r1, r0
 8005f40:	6019      	str	r1, [r3, #0]
 8005f42:	e7d7      	b.n	8005ef4 <_free_r+0x24>
 8005f44:	d902      	bls.n	8005f4c <_free_r+0x7c>
 8005f46:	230c      	movs	r3, #12
 8005f48:	602b      	str	r3, [r5, #0]
 8005f4a:	e7d3      	b.n	8005ef4 <_free_r+0x24>
 8005f4c:	6820      	ldr	r0, [r4, #0]
 8005f4e:	1821      	adds	r1, r4, r0
 8005f50:	428a      	cmp	r2, r1
 8005f52:	bf04      	itt	eq
 8005f54:	6811      	ldreq	r1, [r2, #0]
 8005f56:	6852      	ldreq	r2, [r2, #4]
 8005f58:	6062      	str	r2, [r4, #4]
 8005f5a:	bf04      	itt	eq
 8005f5c:	1809      	addeq	r1, r1, r0
 8005f5e:	6021      	streq	r1, [r4, #0]
 8005f60:	605c      	str	r4, [r3, #4]
 8005f62:	e7c7      	b.n	8005ef4 <_free_r+0x24>
 8005f64:	bd38      	pop	{r3, r4, r5, pc}
 8005f66:	bf00      	nop
 8005f68:	20004998 	.word	0x20004998

08005f6c <_malloc_r>:
 8005f6c:	b570      	push	{r4, r5, r6, lr}
 8005f6e:	1ccd      	adds	r5, r1, #3
 8005f70:	f025 0503 	bic.w	r5, r5, #3
 8005f74:	3508      	adds	r5, #8
 8005f76:	2d0c      	cmp	r5, #12
 8005f78:	bf38      	it	cc
 8005f7a:	250c      	movcc	r5, #12
 8005f7c:	2d00      	cmp	r5, #0
 8005f7e:	4606      	mov	r6, r0
 8005f80:	db01      	blt.n	8005f86 <_malloc_r+0x1a>
 8005f82:	42a9      	cmp	r1, r5
 8005f84:	d903      	bls.n	8005f8e <_malloc_r+0x22>
 8005f86:	230c      	movs	r3, #12
 8005f88:	6033      	str	r3, [r6, #0]
 8005f8a:	2000      	movs	r0, #0
 8005f8c:	bd70      	pop	{r4, r5, r6, pc}
 8005f8e:	f000 f87d 	bl	800608c <__malloc_lock>
 8005f92:	4a21      	ldr	r2, [pc, #132]	; (8006018 <_malloc_r+0xac>)
 8005f94:	6814      	ldr	r4, [r2, #0]
 8005f96:	4621      	mov	r1, r4
 8005f98:	b991      	cbnz	r1, 8005fc0 <_malloc_r+0x54>
 8005f9a:	4c20      	ldr	r4, [pc, #128]	; (800601c <_malloc_r+0xb0>)
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	b91b      	cbnz	r3, 8005fa8 <_malloc_r+0x3c>
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	f000 f863 	bl	800606c <_sbrk_r>
 8005fa6:	6020      	str	r0, [r4, #0]
 8005fa8:	4629      	mov	r1, r5
 8005faa:	4630      	mov	r0, r6
 8005fac:	f000 f85e 	bl	800606c <_sbrk_r>
 8005fb0:	1c43      	adds	r3, r0, #1
 8005fb2:	d124      	bne.n	8005ffe <_malloc_r+0x92>
 8005fb4:	230c      	movs	r3, #12
 8005fb6:	6033      	str	r3, [r6, #0]
 8005fb8:	4630      	mov	r0, r6
 8005fba:	f000 f868 	bl	800608e <__malloc_unlock>
 8005fbe:	e7e4      	b.n	8005f8a <_malloc_r+0x1e>
 8005fc0:	680b      	ldr	r3, [r1, #0]
 8005fc2:	1b5b      	subs	r3, r3, r5
 8005fc4:	d418      	bmi.n	8005ff8 <_malloc_r+0x8c>
 8005fc6:	2b0b      	cmp	r3, #11
 8005fc8:	d90f      	bls.n	8005fea <_malloc_r+0x7e>
 8005fca:	600b      	str	r3, [r1, #0]
 8005fcc:	50cd      	str	r5, [r1, r3]
 8005fce:	18cc      	adds	r4, r1, r3
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	f000 f85c 	bl	800608e <__malloc_unlock>
 8005fd6:	f104 000b 	add.w	r0, r4, #11
 8005fda:	1d23      	adds	r3, r4, #4
 8005fdc:	f020 0007 	bic.w	r0, r0, #7
 8005fe0:	1ac3      	subs	r3, r0, r3
 8005fe2:	d0d3      	beq.n	8005f8c <_malloc_r+0x20>
 8005fe4:	425a      	negs	r2, r3
 8005fe6:	50e2      	str	r2, [r4, r3]
 8005fe8:	e7d0      	b.n	8005f8c <_malloc_r+0x20>
 8005fea:	428c      	cmp	r4, r1
 8005fec:	684b      	ldr	r3, [r1, #4]
 8005fee:	bf16      	itet	ne
 8005ff0:	6063      	strne	r3, [r4, #4]
 8005ff2:	6013      	streq	r3, [r2, #0]
 8005ff4:	460c      	movne	r4, r1
 8005ff6:	e7eb      	b.n	8005fd0 <_malloc_r+0x64>
 8005ff8:	460c      	mov	r4, r1
 8005ffa:	6849      	ldr	r1, [r1, #4]
 8005ffc:	e7cc      	b.n	8005f98 <_malloc_r+0x2c>
 8005ffe:	1cc4      	adds	r4, r0, #3
 8006000:	f024 0403 	bic.w	r4, r4, #3
 8006004:	42a0      	cmp	r0, r4
 8006006:	d005      	beq.n	8006014 <_malloc_r+0xa8>
 8006008:	1a21      	subs	r1, r4, r0
 800600a:	4630      	mov	r0, r6
 800600c:	f000 f82e 	bl	800606c <_sbrk_r>
 8006010:	3001      	adds	r0, #1
 8006012:	d0cf      	beq.n	8005fb4 <_malloc_r+0x48>
 8006014:	6025      	str	r5, [r4, #0]
 8006016:	e7db      	b.n	8005fd0 <_malloc_r+0x64>
 8006018:	20004998 	.word	0x20004998
 800601c:	2000499c 	.word	0x2000499c

08006020 <_realloc_r>:
 8006020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006022:	4607      	mov	r7, r0
 8006024:	4614      	mov	r4, r2
 8006026:	460e      	mov	r6, r1
 8006028:	b921      	cbnz	r1, 8006034 <_realloc_r+0x14>
 800602a:	4611      	mov	r1, r2
 800602c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006030:	f7ff bf9c 	b.w	8005f6c <_malloc_r>
 8006034:	b922      	cbnz	r2, 8006040 <_realloc_r+0x20>
 8006036:	f7ff ff4b 	bl	8005ed0 <_free_r>
 800603a:	4625      	mov	r5, r4
 800603c:	4628      	mov	r0, r5
 800603e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006040:	f000 f826 	bl	8006090 <_malloc_usable_size_r>
 8006044:	42a0      	cmp	r0, r4
 8006046:	d20f      	bcs.n	8006068 <_realloc_r+0x48>
 8006048:	4621      	mov	r1, r4
 800604a:	4638      	mov	r0, r7
 800604c:	f7ff ff8e 	bl	8005f6c <_malloc_r>
 8006050:	4605      	mov	r5, r0
 8006052:	2800      	cmp	r0, #0
 8006054:	d0f2      	beq.n	800603c <_realloc_r+0x1c>
 8006056:	4631      	mov	r1, r6
 8006058:	4622      	mov	r2, r4
 800605a:	f7ff fc11 	bl	8005880 <memcpy>
 800605e:	4631      	mov	r1, r6
 8006060:	4638      	mov	r0, r7
 8006062:	f7ff ff35 	bl	8005ed0 <_free_r>
 8006066:	e7e9      	b.n	800603c <_realloc_r+0x1c>
 8006068:	4635      	mov	r5, r6
 800606a:	e7e7      	b.n	800603c <_realloc_r+0x1c>

0800606c <_sbrk_r>:
 800606c:	b538      	push	{r3, r4, r5, lr}
 800606e:	4c06      	ldr	r4, [pc, #24]	; (8006088 <_sbrk_r+0x1c>)
 8006070:	2300      	movs	r3, #0
 8006072:	4605      	mov	r5, r0
 8006074:	4608      	mov	r0, r1
 8006076:	6023      	str	r3, [r4, #0]
 8006078:	f7fa fd60 	bl	8000b3c <_sbrk>
 800607c:	1c43      	adds	r3, r0, #1
 800607e:	d102      	bne.n	8006086 <_sbrk_r+0x1a>
 8006080:	6823      	ldr	r3, [r4, #0]
 8006082:	b103      	cbz	r3, 8006086 <_sbrk_r+0x1a>
 8006084:	602b      	str	r3, [r5, #0]
 8006086:	bd38      	pop	{r3, r4, r5, pc}
 8006088:	20004a70 	.word	0x20004a70

0800608c <__malloc_lock>:
 800608c:	4770      	bx	lr

0800608e <__malloc_unlock>:
 800608e:	4770      	bx	lr

08006090 <_malloc_usable_size_r>:
 8006090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006094:	1f18      	subs	r0, r3, #4
 8006096:	2b00      	cmp	r3, #0
 8006098:	bfbc      	itt	lt
 800609a:	580b      	ldrlt	r3, [r1, r0]
 800609c:	18c0      	addlt	r0, r0, r3
 800609e:	4770      	bx	lr

080060a0 <_init>:
 80060a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a2:	bf00      	nop
 80060a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060a6:	bc08      	pop	{r3}
 80060a8:	469e      	mov	lr, r3
 80060aa:	4770      	bx	lr

080060ac <_fini>:
 80060ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ae:	bf00      	nop
 80060b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060b2:	bc08      	pop	{r3}
 80060b4:	469e      	mov	lr, r3
 80060b6:	4770      	bx	lr
