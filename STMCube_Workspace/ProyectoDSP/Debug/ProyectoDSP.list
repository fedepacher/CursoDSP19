
ProyectoDSP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08009570  08009570  00019570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096ac  080096ac  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  080096ac  080096ac  000196ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096b4  080096b4  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096b4  080096b4  000196b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080096b8  080096b8  000196b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  080096bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008fb4  200000a8  08009764  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000905c  08009764  0002905c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000244f2  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004b88  00000000  00000000  000445ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e58  00000000  00000000  00049158  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c40  00000000  00000000  0004afb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bb9f  00000000  00000000  0004cbf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019721  00000000  00000000  0006878f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a1df5  00000000  00000000  00081eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00123ca5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008570  00000000  00000000  00123d20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a8 	.word	0x200000a8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009558 	.word	0x08009558

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ac 	.word	0x200000ac
 80001dc:	08009558 	.word	0x08009558

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <Accelerometer_Init>:
osThreadId_t tid_Thread_MsgQueue2;              // thread id 2
osThreadId_t accelerometerTaskHandle;


int8_t Accelerometer_Init()
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	; 0x28
 8000584:	af00      	add	r7, sp, #0
	uint8_t acc_status = ACCELERO_ERROR;
 8000586:	2301      	movs	r3, #1
 8000588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	acc_status = BSP_ACCELERO_Init();
 800058c:	f001 fb1c 	bl	8001bc8 <BSP_ACCELERO_Init>
 8000590:	4603      	mov	r3, r0
 8000592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(acc_status == ACCELERO_ERROR){
 8000596:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800059a:	2b01      	cmp	r3, #1
 800059c:	d102      	bne.n	80005a4 <Accelerometer_Init+0x24>
		return acc_status;
 800059e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80005a2:	e01e      	b.n	80005e2 <Accelerometer_Init+0x62>
	}
	if(acc_status == ACCELERO_OK){
 80005a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d118      	bne.n	80005de <Accelerometer_Init+0x5e>
		//Init_MsgQueue();

		const osThreadAttr_t accelerometerTask_attributes = {
 80005ac:	463b      	mov	r3, r7
 80005ae:	2224      	movs	r2, #36	; 0x24
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f008 f87f 	bl	80086b6 <memset>
 80005b8:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <Accelerometer_Init+0x6c>)
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c0:	617b      	str	r3, [r7, #20]
 80005c2:	2318      	movs	r3, #24
 80005c4:	61bb      	str	r3, [r7, #24]
		    .name = "defaultTask",
		    .priority = (osPriority_t) osPriorityNormal,
		    .stack_size = 4096
		  };
		accelerometerTaskHandle = osThreadNew(AccelerometerTask, NULL, &accelerometerTask_attributes);
 80005c6:	463b      	mov	r3, r7
 80005c8:	461a      	mov	r2, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	4808      	ldr	r0, [pc, #32]	; (80005f0 <Accelerometer_Init+0x70>)
 80005ce:	f004 fed7 	bl	8005380 <osThreadNew>
 80005d2:	4602      	mov	r2, r0
 80005d4:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <Accelerometer_Init+0x74>)
 80005d6:	601a      	str	r2, [r3, #0]

		return acc_status;
 80005d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80005dc:	e001      	b.n	80005e2 <Accelerometer_Init+0x62>
	}

	return acc_status;
 80005de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3728      	adds	r7, #40	; 0x28
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	08009570 	.word	0x08009570
 80005f0:	080005f9 	.word	0x080005f9
 80005f4:	20008e34 	.word	0x20008e34

080005f8 <AccelerometerTask>:
    }
  }
}

void AccelerometerTask(void *argument)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  for(;;)
  {

	  HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 8000600:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000604:	4803      	ldr	r0, [pc, #12]	; (8000614 <AccelerometerTask+0x1c>)
 8000606:	f001 ff56 	bl	80024b6 <HAL_GPIO_TogglePin>
	 // printf("Cuenta: %ld \n", contador);

	  /*char txData[50]= "";
	  sprintf(txData, "%d\n\r", contador);
	  HAL_UART_Transmit(&huart2, (uint8_t *) txData, sizeof(txData),1000);*/
	  osDelay(500);
 800060a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800060e:	f004 ff93 	bl	8005538 <osDelay>
	  HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 8000612:	e7f5      	b.n	8000600 <AccelerometerTask+0x8>
 8000614:	40020c00 	.word	0x40020c00

08000618 <board_getSw>:
		{LD5_GPIO_Port, LD5_Pin},
		{LD6_GPIO_Port, LD6_Pin},
};

bool board_getSw(board_swId_enum id)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
	return HAL_GPIO_ReadPin(board_gpioSw[id].gpio, board_gpioSw[id].pin);
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <board_getSw+0x38>)
 8000626:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	4a08      	ldr	r2, [pc, #32]	; (8000650 <board_getSw+0x38>)
 800062e:	00db      	lsls	r3, r3, #3
 8000630:	4413      	add	r3, r2
 8000632:	889b      	ldrh	r3, [r3, #4]
 8000634:	4619      	mov	r1, r3
 8000636:	f001 ff0d 	bl	8002454 <HAL_GPIO_ReadPin>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	bf14      	ite	ne
 8000640:	2301      	movne	r3, #1
 8000642:	2300      	moveq	r3, #0
 8000644:	b2db      	uxtb	r3, r3

}
 8000646:	4618      	mov	r0, r3
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	080095bc 	.word	0x080095bc

08000654 <board_set_led>:


void board_set_led(board_ledId_enum id)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_TogglePin(board_leds[id].gpio, board_leds[id].pin);
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	4a07      	ldr	r2, [pc, #28]	; (8000680 <board_set_led+0x2c>)
 8000662:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	4a05      	ldr	r2, [pc, #20]	; (8000680 <board_set_led+0x2c>)
 800066a:	00db      	lsls	r3, r3, #3
 800066c:	4413      	add	r3, r2
 800066e:	889b      	ldrh	r3, [r3, #4]
 8000670:	4619      	mov	r1, r3
 8000672:	f001 ff20 	bl	80024b6 <HAL_GPIO_TogglePin>
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	080095dc 	.word	0x080095dc

08000684 <Init_Events>:
osMessageQueueId_t mid_MsgQueue;                // message queue id
osThreadId_t tid_Thread_MsgQueue;              // thread id 1
/* USER CODE END PV */

int Init_Events (void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	//BSP_Init();
	SW_Init();
 8000688:	f000 fe24 	bl	80012d4 <SW_Init>
	evt_id = osEventFlagsNew(NULL);
 800068c:	2000      	movs	r0, #0
 800068e:	f004 ff81 	bl	8005594 <osEventFlagsNew>
 8000692:	4602      	mov	r2, r0
 8000694:	4b09      	ldr	r3, [pc, #36]	; (80006bc <Init_Events+0x38>)
 8000696:	601a      	str	r2, [r3, #0]
	/*const osThreadAttr_t eventTask_attributes = {
			.name = "EventTask",
			.priority = (osPriority_t) osPriorityNormal,
			.stack_size = 4096
	};*/
	tid_Thread_EventReceiver = osThreadNew(Thread_EventReceiver_Key, NULL, NULL);//&eventTask_attributes);
 8000698:	2200      	movs	r2, #0
 800069a:	2100      	movs	r1, #0
 800069c:	4808      	ldr	r0, [pc, #32]	; (80006c0 <Init_Events+0x3c>)
 800069e:	f004 fe6f 	bl	8005380 <osThreadNew>
 80006a2:	4602      	mov	r2, r0
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <Init_Events+0x40>)
 80006a6:	601a      	str	r2, [r3, #0]
	if (tid_Thread_EventReceiver == NULL) {
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <Init_Events+0x40>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d102      	bne.n	80006b6 <Init_Events+0x32>
		return(-1);
 80006b0:	f04f 33ff 	mov.w	r3, #4294967295
 80006b4:	e000      	b.n	80006b8 <Init_Events+0x34>

	tid_Thread_MsgQueue = osThreadNew(Thread_MsgQueue_Key, NULL, NULL);
	if (tid_Thread_MsgQueue == NULL) {
		return(-1);
	}*/
	return(0);
 80006b6:	2300      	movs	r3, #0
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20008e4c 	.word	0x20008e4c
 80006c0:	080006ed 	.word	0x080006ed
 80006c4:	20008e44 	.word	0x20008e44

080006c8 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	80fb      	strh	r3, [r7, #6]
	osEventFlagsSet(evt_id, FLAGS_INT_SW);
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <HAL_GPIO_EXTI_Callback+0x20>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2101      	movs	r1, #1
 80006d8:	4618      	mov	r0, r3
 80006da:	f004 ffad 	bl	8005638 <osEventFlagsSet>
	//osThreadYield();                            // suspend thread

}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20008e4c 	.word	0x20008e4c

080006ec <Thread_EventReceiver_Key>:



void Thread_EventReceiver_Key (void *argument) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  uint32_t flags;
  //board_gpioInfo_type msg;
  //int32_t id;

  while (1) {
    flags = osEventFlagsWait(evt_id, FLAGS_INT_SW, osFlagsWaitAny, osWaitForever);
 80006f4:	4b13      	ldr	r3, [pc, #76]	; (8000744 <Thread_EventReceiver_Key+0x58>)
 80006f6:	6818      	ldr	r0, [r3, #0]
 80006f8:	f04f 33ff 	mov.w	r3, #4294967295
 80006fc:	2200      	movs	r2, #0
 80006fe:	2101      	movs	r1, #1
 8000700:	f005 f836 	bl	8005770 <osEventFlagsWait>
 8000704:	60f8      	str	r0, [r7, #12]
    //	osDelay(250);//mando a dormir 50 msg para evitar rebote
    if(flags == FLAGS_INT_SW)//&& PULSADOR_Pin == GPIO_PIN_SET)
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d1f3      	bne.n	80006f4 <Thread_EventReceiver_Key+0x8>
    {
    	int16_t sw = SW_Status();
 800070c:	f000 fdfc 	bl	8001308 <SW_Status>
 8000710:	4603      	mov	r3, r0
 8000712:	817b      	strh	r3, [r7, #10]
    	osDelay(250);
 8000714:	20fa      	movs	r0, #250	; 0xfa
 8000716:	f004 ff0f 	bl	8005538 <osDelay>
    	if(sw < BOARD_SW_ID_TOTAL)
 800071a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800071e:	2b03      	cmp	r3, #3
 8000720:	dc06      	bgt.n	8000730 <Thread_EventReceiver_Key+0x44>
    	{
    		board_set_led(sw);
 8000722:	897b      	ldrh	r3, [r7, #10]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ff94 	bl	8000654 <board_set_led>
    		//osDelay(250);
    		SW_Init();
 800072c:	f000 fdd2 	bl	80012d4 <SW_Init>

    	//pongo mensaje de activacion de pulsador en la queue
    	//id = BSP_Sw_IT_Handler();


    	osEventFlagsClear(evt_id, FLAGS_INT_SW);	//limpio flag de evento
 8000730:	4b04      	ldr	r3, [pc, #16]	; (8000744 <Thread_EventReceiver_Key+0x58>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2101      	movs	r1, #1
 8000736:	4618      	mov	r0, r3
 8000738:	f004 ffd6 	bl	80056e8 <osEventFlagsClear>
    	//osMessageQueuePut(mid_MsgQueue, &id, 0U, 0U);
    	osThreadYield();
 800073c:	f004 feca 	bl	80054d4 <osThreadYield>
    flags = osEventFlagsWait(evt_id, FLAGS_INT_SW, osFlagsWaitAny, osWaitForever);
 8000740:	e7d8      	b.n	80006f4 <Thread_EventReceiver_Key+0x8>
 8000742:	bf00      	nop
 8000744:	20008e4c 	.word	0x20008e4c

08000748 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000750:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000754:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	2b00      	cmp	r3, #0
 800075e:	d013      	beq.n	8000788 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000760:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000764:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000768:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800076c:	2b00      	cmp	r3, #0
 800076e:	d00b      	beq.n	8000788 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000770:	e000      	b.n	8000774 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000772:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000774:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0f9      	beq.n	8000772 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800077e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	b2d2      	uxtb	r2, r2
 8000786:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000788:	687b      	ldr	r3, [r7, #4]
}
 800078a:	4618      	mov	r0, r3
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b082      	sub	sp, #8
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
	ITM_SendChar( ch );
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ffd1 	bl	8000748 <ITM_SendChar>
	return ch;
 80007a6:	687b      	ldr	r3, [r7, #4]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	; 0x28
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	contador = 0;
 80007b6:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <main+0x70>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007bc:	f001 fac2 	bl	8001d44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c0:	f000 f838 	bl	8000834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c4:	f000 f9a6 	bl	8000b14 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007c8:	f000 f8b8 	bl	800093c <MX_I2C1_Init>
  MX_I2S2_Init();
 80007cc:	f000 f8e4 	bl	8000998 <MX_I2S2_Init>
  MX_I2S3_Init();
 80007d0:	f000 f910 	bl	80009f4 <MX_I2S3_Init>
  MX_SPI1_Init();
 80007d4:	f000 f93e 	bl	8000a54 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80007d8:	f000 f972 	bl	8000ac0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  /* USER CODE END 2 */

  osKernelInitialize();
 80007dc:	f004 fd68 	bl	80052b0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  const osThreadAttr_t defaultTask_attributes = {
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	2224      	movs	r2, #36	; 0x24
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f007 ff65 	bl	80086b6 <memset>
 80007ec:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <main+0x74>)
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f4:	61bb      	str	r3, [r7, #24]
 80007f6:	2318      	movs	r3, #24
 80007f8:	61fb      	str	r3, [r7, #28]
    .name = "defaultTask",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 4096
  };
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	461a      	mov	r2, r3
 80007fe:	2100      	movs	r1, #0
 8000800:	4809      	ldr	r0, [pc, #36]	; (8000828 <main+0x78>)
 8000802:	f004 fdbd 	bl	8005380 <osThreadNew>
 8000806:	4602      	mov	r2, r0
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <main+0x7c>)
 800080a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  Init_Events(); //inicializacion de evento pulsador
 800080c:	f7ff ff3a 	bl	8000684 <Init_Events>
  Accelerometer_Init();
 8000810:	f7ff feb6 	bl	8000580 <Accelerometer_Init>
  printf("Iniciando \n");
 8000814:	4806      	ldr	r0, [pc, #24]	; (8000830 <main+0x80>)
 8000816:	f007 ffcb 	bl	80087b0 <puts>
  sprintf(txData, "%s", "inicio\r\n");
  HAL_UART_Transmit(&huart2, (uint8_t *) txData, sizeof(txData),1000);*/
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800081a:	f004 fd7d 	bl	8005318 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800081e:	e7fe      	b.n	800081e <main+0x6e>
 8000820:	20008ea8 	.word	0x20008ea8
 8000824:	0800957c 	.word	0x0800957c
 8000828:	08000d51 	.word	0x08000d51
 800082c:	20008e50 	.word	0x20008e50
 8000830:	08009588 	.word	0x08009588

08000834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b09a      	sub	sp, #104	; 0x68
 8000838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800083e:	2230      	movs	r2, #48	; 0x30
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f007 ff37 	bl	80086b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
 8000868:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	4b31      	ldr	r3, [pc, #196]	; (8000934 <SystemClock_Config+0x100>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	4a30      	ldr	r2, [pc, #192]	; (8000934 <SystemClock_Config+0x100>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000878:	6413      	str	r3, [r2, #64]	; 0x40
 800087a:	4b2e      	ldr	r3, [pc, #184]	; (8000934 <SystemClock_Config+0x100>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <SystemClock_Config+0x104>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a2a      	ldr	r2, [pc, #168]	; (8000938 <SystemClock_Config+0x104>)
 8000890:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000894:	6013      	str	r3, [r2, #0]
 8000896:	4b28      	ldr	r3, [pc, #160]	; (8000938 <SystemClock_Config+0x104>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a2:	2301      	movs	r3, #1
 80008a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008a6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ac:	2302      	movs	r3, #2
 80008ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008b4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008b6:	2304      	movs	r3, #4
 80008b8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 100;
 80008ba:	2364      	movs	r3, #100	; 0x64
 80008bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008be:	2302      	movs	r3, #2
 80008c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80008c2:	2308      	movs	r3, #8
 80008c4:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008ca:	4618      	mov	r0, r3
 80008cc:	f003 fa66 	bl	8003d9c <HAL_RCC_OscConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008d6:	f000 fa6d 	bl	8000db4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008da:	230f      	movs	r3, #15
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008de:	2302      	movs	r3, #2
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f4:	2103      	movs	r1, #3
 80008f6:	4618      	mov	r0, r3
 80008f8:	f003 fc92 	bl	8004220 <HAL_RCC_ClockConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000902:	f000 fa57 	bl	8000db4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000906:	2301      	movs	r3, #1
 8000908:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800090a:	23c8      	movs	r3, #200	; 0xc8
 800090c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 800090e:	2305      	movs	r3, #5
 8000910:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000912:	2302      	movs	r3, #2
 8000914:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000916:	f107 030c 	add.w	r3, r7, #12
 800091a:	4618      	mov	r0, r3
 800091c:	f003 fea0 	bl	8004660 <HAL_RCCEx_PeriphCLKConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000926:	f000 fa45 	bl	8000db4 <Error_Handler>
  }
}
 800092a:	bf00      	nop
 800092c:	3768      	adds	r7, #104	; 0x68
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800
 8000938:	40007000 	.word	0x40007000

0800093c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <MX_I2C1_Init+0x50>)
 8000942:	4a13      	ldr	r2, [pc, #76]	; (8000990 <MX_I2C1_Init+0x54>)
 8000944:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_I2C1_Init+0x50>)
 8000948:	4a12      	ldr	r2, [pc, #72]	; (8000994 <MX_I2C1_Init+0x58>)
 800094a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <MX_I2C1_Init+0x50>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_I2C1_Init+0x50>)
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_I2C1_Init+0x50>)
 800095a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800095e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000960:	4b0a      	ldr	r3, [pc, #40]	; (800098c <MX_I2C1_Init+0x50>)
 8000962:	2200      	movs	r2, #0
 8000964:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_I2C1_Init+0x50>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800096c:	4b07      	ldr	r3, [pc, #28]	; (800098c <MX_I2C1_Init+0x50>)
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_I2C1_Init+0x50>)
 8000974:	2200      	movs	r2, #0
 8000976:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000978:	4804      	ldr	r0, [pc, #16]	; (800098c <MX_I2C1_Init+0x50>)
 800097a:	f001 fdcf 	bl	800251c <HAL_I2C_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000984:	f000 fa16 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20008e54 	.word	0x20008e54
 8000990:	40005400 	.word	0x40005400
 8000994:	000186a0 	.word	0x000186a0

08000998 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <MX_I2S2_Init+0x50>)
 800099e:	4a13      	ldr	r2, [pc, #76]	; (80009ec <MX_I2S2_Init+0x54>)
 80009a0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_I2S2_Init+0x50>)
 80009a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009a8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_I2S2_Init+0x50>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80009b0:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <MX_I2S2_Init+0x50>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80009b6:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_I2S2_Init+0x50>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80009bc:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <MX_I2S2_Init+0x50>)
 80009be:	4a0c      	ldr	r2, [pc, #48]	; (80009f0 <MX_I2S2_Init+0x58>)
 80009c0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_I2S2_Init+0x50>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80009c8:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <MX_I2S2_Init+0x50>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_I2S2_Init+0x50>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80009d4:	4804      	ldr	r0, [pc, #16]	; (80009e8 <MX_I2S2_Init+0x50>)
 80009d6:	f002 fd5f 	bl	8003498 <HAL_I2S_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80009e0:	f000 f9e8 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20008f44 	.word	0x20008f44
 80009ec:	40003800 	.word	0x40003800
 80009f0:	00017700 	.word	0x00017700

080009f4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80009f8:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <MX_I2S3_Init+0x54>)
 80009fa:	4a14      	ldr	r2, [pc, #80]	; (8000a4c <MX_I2S3_Init+0x58>)
 80009fc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80009fe:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MX_I2S3_Init+0x54>)
 8000a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a04:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a06:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <MX_I2S3_Init+0x54>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a0c:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_I2S3_Init+0x54>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000a12:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <MX_I2S3_Init+0x54>)
 8000a14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a18:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <MX_I2S3_Init+0x54>)
 8000a1c:	4a0c      	ldr	r2, [pc, #48]	; (8000a50 <MX_I2S3_Init+0x5c>)
 8000a1e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_I2S3_Init+0x54>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <MX_I2S3_Init+0x54>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_I2S3_Init+0x54>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_I2S3_Init+0x54>)
 8000a34:	f002 fd30 	bl	8003498 <HAL_I2S_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000a3e:	f000 f9b9 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20008f8c 	.word	0x20008f8c
 8000a4c:	40003c00 	.word	0x40003c00
 8000a50:	00017700 	.word	0x00017700

08000a54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a58:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a5a:	4a18      	ldr	r2, [pc, #96]	; (8000abc <MX_SPI1_Init+0x68>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a66:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a98:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000aa0:	220a      	movs	r2, #10
 8000aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000aa6:	f003 ff29 	bl	80048fc <HAL_SPI_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ab0:	f000 f980 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20008eac 	.word	0x20008eac
 8000abc:	40013000 	.word	0x40013000

08000ac0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <MX_USART2_UART_Init+0x50>)
 8000ac8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_USART2_UART_Init+0x4c>)
 8000af8:	f004 f982 	bl	8004e00 <HAL_UART_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b02:	f000 f957 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20008f04 	.word	0x20008f04
 8000b10:	40004400 	.word	0x40004400

08000b14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08c      	sub	sp, #48	; 0x30
 8000b18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61bb      	str	r3, [r7, #24]
 8000b2e:	4b80      	ldr	r3, [pc, #512]	; (8000d30 <MX_GPIO_Init+0x21c>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a7f      	ldr	r2, [pc, #508]	; (8000d30 <MX_GPIO_Init+0x21c>)
 8000b34:	f043 0310 	orr.w	r3, r3, #16
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b7d      	ldr	r3, [pc, #500]	; (8000d30 <MX_GPIO_Init+0x21c>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0310 	and.w	r3, r3, #16
 8000b42:	61bb      	str	r3, [r7, #24]
 8000b44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	4b79      	ldr	r3, [pc, #484]	; (8000d30 <MX_GPIO_Init+0x21c>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a78      	ldr	r2, [pc, #480]	; (8000d30 <MX_GPIO_Init+0x21c>)
 8000b50:	f043 0304 	orr.w	r3, r3, #4
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b76      	ldr	r3, [pc, #472]	; (8000d30 <MX_GPIO_Init+0x21c>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0304 	and.w	r3, r3, #4
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b72      	ldr	r3, [pc, #456]	; (8000d30 <MX_GPIO_Init+0x21c>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a71      	ldr	r2, [pc, #452]	; (8000d30 <MX_GPIO_Init+0x21c>)
 8000b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b6f      	ldr	r3, [pc, #444]	; (8000d30 <MX_GPIO_Init+0x21c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b6b      	ldr	r3, [pc, #428]	; (8000d30 <MX_GPIO_Init+0x21c>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a6a      	ldr	r2, [pc, #424]	; (8000d30 <MX_GPIO_Init+0x21c>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b68      	ldr	r3, [pc, #416]	; (8000d30 <MX_GPIO_Init+0x21c>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	4b64      	ldr	r3, [pc, #400]	; (8000d30 <MX_GPIO_Init+0x21c>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a63      	ldr	r2, [pc, #396]	; (8000d30 <MX_GPIO_Init+0x21c>)
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b61      	ldr	r3, [pc, #388]	; (8000d30 <MX_GPIO_Init+0x21c>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	4b5d      	ldr	r3, [pc, #372]	; (8000d30 <MX_GPIO_Init+0x21c>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a5c      	ldr	r2, [pc, #368]	; (8000d30 <MX_GPIO_Init+0x21c>)
 8000bc0:	f043 0308 	orr.w	r3, r3, #8
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b5a      	ldr	r3, [pc, #360]	; (8000d30 <MX_GPIO_Init+0x21c>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0308 	and.w	r3, r3, #8
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2108      	movs	r1, #8
 8000bd6:	4857      	ldr	r0, [pc, #348]	; (8000d34 <MX_GPIO_Init+0x220>)
 8000bd8:	f001 fc54 	bl	8002484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2101      	movs	r1, #1
 8000be0:	4855      	ldr	r0, [pc, #340]	; (8000d38 <MX_GPIO_Init+0x224>)
 8000be2:	f001 fc4f 	bl	8002484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000be6:	2200      	movs	r2, #0
 8000be8:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000bec:	4853      	ldr	r0, [pc, #332]	; (8000d3c <MX_GPIO_Init+0x228>)
 8000bee:	f001 fc49 	bl	8002484 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_GPIO_Port, MOTOR_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2180      	movs	r1, #128	; 0x80
 8000bf6:	4852      	ldr	r0, [pc, #328]	; (8000d40 <MX_GPIO_Init+0x22c>)
 8000bf8:	f001 fc44 	bl	8002484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4849      	ldr	r0, [pc, #292]	; (8000d34 <MX_GPIO_Init+0x220>)
 8000c10:	f001 f9bc 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c14:	2308      	movs	r3, #8
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4842      	ldr	r0, [pc, #264]	; (8000d34 <MX_GPIO_Init+0x220>)
 8000c2c:	f001 f9ae 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin;
 8000c30:	2330      	movs	r3, #48	; 0x30
 8000c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c34:	4b43      	ldr	r3, [pc, #268]	; (8000d44 <MX_GPIO_Init+0x230>)
 8000c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c3c:	f107 031c 	add.w	r3, r7, #28
 8000c40:	4619      	mov	r1, r3
 8000c42:	483c      	ldr	r0, [pc, #240]	; (8000d34 <MX_GPIO_Init+0x220>)
 8000c44:	f001 f9a2 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4836      	ldr	r0, [pc, #216]	; (8000d38 <MX_GPIO_Init+0x224>)
 8000c60:	f001 f994 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PULSADOR0_Pin */
  GPIO_InitStruct.Pin = PULSADOR0_Pin;
 8000c64:	2301      	movs	r3, #1
 8000c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c68:	4b37      	ldr	r3, [pc, #220]	; (8000d48 <MX_GPIO_Init+0x234>)
 8000c6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PULSADOR0_GPIO_Port, &GPIO_InitStruct);
 8000c70:	f107 031c 	add.w	r3, r7, #28
 8000c74:	4619      	mov	r1, r3
 8000c76:	4835      	ldr	r0, [pc, #212]	; (8000d4c <MX_GPIO_Init+0x238>)
 8000c78:	f001 f988 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000c7c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000c80:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c8e:	f107 031c 	add.w	r3, r7, #28
 8000c92:	4619      	mov	r1, r3
 8000c94:	4829      	ldr	r0, [pc, #164]	; (8000d3c <MX_GPIO_Init+0x228>)
 8000c96:	f001 f979 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PULSADOR1_Pin PULSADOR2_Pin PULSADOR3_Pin */
  GPIO_InitStruct.Pin = PULSADOR1_Pin|PULSADOR2_Pin|PULSADOR3_Pin;
 8000c9a:	230e      	movs	r3, #14
 8000c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c9e:	4b2a      	ldr	r3, [pc, #168]	; (8000d48 <MX_GPIO_Init+0x234>)
 8000ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	4619      	mov	r1, r3
 8000cac:	4823      	ldr	r0, [pc, #140]	; (8000d3c <MX_GPIO_Init+0x228>)
 8000cae:	f001 f96d 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000cb2:	2320      	movs	r3, #32
 8000cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	481d      	ldr	r0, [pc, #116]	; (8000d3c <MX_GPIO_Init+0x228>)
 8000cc6:	f001 f961 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_Pin */
  GPIO_InitStruct.Pin = MOTOR_Pin;
 8000cca:	2380      	movs	r3, #128	; 0x80
 8000ccc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000cce:	2311      	movs	r3, #17
 8000cd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MOTOR_GPIO_Port, &GPIO_InitStruct);
 8000cda:	f107 031c 	add.w	r3, r7, #28
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4817      	ldr	r0, [pc, #92]	; (8000d40 <MX_GPIO_Init+0x22c>)
 8000ce2:	f001 f953 	bl	8001f8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2105      	movs	r1, #5
 8000cea:	2006      	movs	r0, #6
 8000cec:	f001 f924 	bl	8001f38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000cf0:	2006      	movs	r0, #6
 8000cf2:	f001 f93d 	bl	8001f70 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2105      	movs	r1, #5
 8000cfa:	2007      	movs	r0, #7
 8000cfc:	f001 f91c 	bl	8001f38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000d00:	2007      	movs	r0, #7
 8000d02:	f001 f935 	bl	8001f70 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2105      	movs	r1, #5
 8000d0a:	2008      	movs	r0, #8
 8000d0c:	f001 f914 	bl	8001f38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000d10:	2008      	movs	r0, #8
 8000d12:	f001 f92d 	bl	8001f70 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2105      	movs	r1, #5
 8000d1a:	2009      	movs	r0, #9
 8000d1c:	f001 f90c 	bl	8001f38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000d20:	2009      	movs	r0, #9
 8000d22:	f001 f925 	bl	8001f70 <HAL_NVIC_EnableIRQ>

}
 8000d26:	bf00      	nop
 8000d28:	3730      	adds	r7, #48	; 0x30
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40020800 	.word	0x40020800
 8000d3c:	40020c00 	.word	0x40020c00
 8000d40:	40020400 	.word	0x40020400
 8000d44:	10120000 	.word	0x10120000
 8000d48:	10110000 	.word	0x10110000
 8000d4c:	40020000 	.word	0x40020000

08000d50 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  for(;;)
  {
	  contador++;
 8000d58:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <StartDefaultTask+0x34>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	4a09      	ldr	r2, [pc, #36]	; (8000d84 <StartDefaultTask+0x34>)
 8000d60:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 8000d62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d66:	4808      	ldr	r0, [pc, #32]	; (8000d88 <StartDefaultTask+0x38>)
 8000d68:	f001 fba5 	bl	80024b6 <HAL_GPIO_TogglePin>
	  printf("Cuenta: %ld \n", contador);
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <StartDefaultTask+0x34>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4619      	mov	r1, r3
 8000d72:	4806      	ldr	r0, [pc, #24]	; (8000d8c <StartDefaultTask+0x3c>)
 8000d74:	f007 fca8 	bl	80086c8 <iprintf>

	  /*char txData[50]= "";
	  sprintf(txData, "%d\n\r", contador);
	  HAL_UART_Transmit(&huart2, (uint8_t *) txData, sizeof(txData),1000);*/
	  osDelay(500);
 8000d78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d7c:	f004 fbdc 	bl	8005538 <osDelay>
	  contador++;
 8000d80:	e7ea      	b.n	8000d58 <StartDefaultTask+0x8>
 8000d82:	bf00      	nop
 8000d84:	20008ea8 	.word	0x20008ea8
 8000d88:	40020c00 	.word	0x40020c00
 8000d8c:	08009594 	.word	0x08009594

08000d90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d101      	bne.n	8000da6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000da2:	f000 fff1 	bl	8001d88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40010000 	.word	0x40010000

08000db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <HAL_MspInit+0x54>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	4a11      	ldr	r2, [pc, #68]	; (8000e18 <HAL_MspInit+0x54>)
 8000dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dda:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <HAL_MspInit+0x54>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	603b      	str	r3, [r7, #0]
 8000dea:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <HAL_MspInit+0x54>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <HAL_MspInit+0x54>)
 8000df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df4:	6413      	str	r3, [r2, #64]	; 0x40
 8000df6:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <HAL_MspInit+0x54>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	210f      	movs	r1, #15
 8000e06:	f06f 0001 	mvn.w	r0, #1
 8000e0a:	f001 f895 	bl	8001f38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40023800 	.word	0x40023800

08000e1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	; 0x28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a19      	ldr	r2, [pc, #100]	; (8000ea0 <HAL_I2C_MspInit+0x84>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d12c      	bne.n	8000e98 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <HAL_I2C_MspInit+0x88>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a17      	ldr	r2, [pc, #92]	; (8000ea4 <HAL_I2C_MspInit+0x88>)
 8000e48:	f043 0302 	orr.w	r3, r3, #2
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <HAL_I2C_MspInit+0x88>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000e5a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e60:	2312      	movs	r3, #18
 8000e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e64:	2301      	movs	r3, #1
 8000e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	4619      	mov	r1, r3
 8000e76:	480c      	ldr	r0, [pc, #48]	; (8000ea8 <HAL_I2C_MspInit+0x8c>)
 8000e78:	f001 f888 	bl	8001f8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <HAL_I2C_MspInit+0x88>)
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	4a07      	ldr	r2, [pc, #28]	; (8000ea4 <HAL_I2C_MspInit+0x88>)
 8000e86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <HAL_I2C_MspInit+0x88>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e98:	bf00      	nop
 8000e9a:	3728      	adds	r7, #40	; 0x28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40005400 	.word	0x40005400
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020400 	.word	0x40020400

08000eac <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a08      	ldr	r2, [pc, #32]	; (8000edc <HAL_I2C_MspDeInit+0x30>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d10a      	bne.n	8000ed4 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000ebe:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <HAL_I2C_MspDeInit+0x34>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	4a07      	ldr	r2, [pc, #28]	; (8000ee0 <HAL_I2C_MspDeInit+0x34>)
 8000ec4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000ec8:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, Audio_SCL_Pin|Audio_SDA_Pin);
 8000eca:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <HAL_I2C_MspDeInit+0x38>)
 8000ed0:	f001 f9de 	bl	8002290 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40005400 	.word	0x40005400
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020400 	.word	0x40020400

08000ee8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08e      	sub	sp, #56	; 0x38
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a59      	ldr	r2, [pc, #356]	; (800106c <HAL_I2S_MspInit+0x184>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d15b      	bne.n	8000fc2 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	623b      	str	r3, [r7, #32]
 8000f0e:	4b58      	ldr	r3, [pc, #352]	; (8001070 <HAL_I2S_MspInit+0x188>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	4a57      	ldr	r2, [pc, #348]	; (8001070 <HAL_I2S_MspInit+0x188>)
 8000f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f18:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1a:	4b55      	ldr	r3, [pc, #340]	; (8001070 <HAL_I2S_MspInit+0x188>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f22:	623b      	str	r3, [r7, #32]
 8000f24:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
 8000f2a:	4b51      	ldr	r3, [pc, #324]	; (8001070 <HAL_I2S_MspInit+0x188>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a50      	ldr	r2, [pc, #320]	; (8001070 <HAL_I2S_MspInit+0x188>)
 8000f30:	f043 0304 	orr.w	r3, r3, #4
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b4e      	ldr	r3, [pc, #312]	; (8001070 <HAL_I2S_MspInit+0x188>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0304 	and.w	r3, r3, #4
 8000f3e:	61fb      	str	r3, [r7, #28]
 8000f40:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
 8000f46:	4b4a      	ldr	r3, [pc, #296]	; (8001070 <HAL_I2S_MspInit+0x188>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a49      	ldr	r2, [pc, #292]	; (8001070 <HAL_I2S_MspInit+0x188>)
 8000f4c:	f043 0302 	orr.w	r3, r3, #2
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b47      	ldr	r3, [pc, #284]	; (8001070 <HAL_I2S_MspInit+0x188>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	61bb      	str	r3, [r7, #24]
 8000f5c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f5e:	2304      	movs	r3, #4
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000f6e:	2306      	movs	r3, #6
 8000f70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f76:	4619      	mov	r1, r3
 8000f78:	483e      	ldr	r0, [pc, #248]	; (8001074 <HAL_I2S_MspInit+0x18c>)
 8000f7a:	f001 f807 	bl	8001f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000f7e:	2308      	movs	r3, #8
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f82:	2302      	movs	r3, #2
 8000f84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f8e:	2305      	movs	r3, #5
 8000f90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f96:	4619      	mov	r1, r3
 8000f98:	4836      	ldr	r0, [pc, #216]	; (8001074 <HAL_I2S_MspInit+0x18c>)
 8000f9a:	f000 fff7 	bl	8001f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000f9e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fb0:	2305      	movs	r3, #5
 8000fb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb8:	4619      	mov	r1, r3
 8000fba:	482f      	ldr	r0, [pc, #188]	; (8001078 <HAL_I2S_MspInit+0x190>)
 8000fbc:	f000 ffe6 	bl	8001f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000fc0:	e04f      	b.n	8001062 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a2d      	ldr	r2, [pc, #180]	; (800107c <HAL_I2S_MspInit+0x194>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d14a      	bne.n	8001062 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	4b27      	ldr	r3, [pc, #156]	; (8001070 <HAL_I2S_MspInit+0x188>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	4a26      	ldr	r2, [pc, #152]	; (8001070 <HAL_I2S_MspInit+0x188>)
 8000fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fda:	6413      	str	r3, [r2, #64]	; 0x40
 8000fdc:	4b24      	ldr	r3, [pc, #144]	; (8001070 <HAL_I2S_MspInit+0x188>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fe4:	617b      	str	r3, [r7, #20]
 8000fe6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe8:	2300      	movs	r3, #0
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	4b20      	ldr	r3, [pc, #128]	; (8001070 <HAL_I2S_MspInit+0x188>)
 8000fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff0:	4a1f      	ldr	r2, [pc, #124]	; (8001070 <HAL_I2S_MspInit+0x188>)
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff8:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <HAL_I2S_MspInit+0x188>)
 8000ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	4b19      	ldr	r3, [pc, #100]	; (8001070 <HAL_I2S_MspInit+0x188>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	4a18      	ldr	r2, [pc, #96]	; (8001070 <HAL_I2S_MspInit+0x188>)
 800100e:	f043 0304 	orr.w	r3, r3, #4
 8001012:	6313      	str	r3, [r2, #48]	; 0x30
 8001014:	4b16      	ldr	r3, [pc, #88]	; (8001070 <HAL_I2S_MspInit+0x188>)
 8001016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001018:	f003 0304 	and.w	r3, r3, #4
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001020:	2310      	movs	r3, #16
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001030:	2306      	movs	r3, #6
 8001032:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001038:	4619      	mov	r1, r3
 800103a:	4811      	ldr	r0, [pc, #68]	; (8001080 <HAL_I2S_MspInit+0x198>)
 800103c:	f000 ffa6 	bl	8001f8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001040:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001052:	2306      	movs	r3, #6
 8001054:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105a:	4619      	mov	r1, r3
 800105c:	4805      	ldr	r0, [pc, #20]	; (8001074 <HAL_I2S_MspInit+0x18c>)
 800105e:	f000 ff95 	bl	8001f8c <HAL_GPIO_Init>
}
 8001062:	bf00      	nop
 8001064:	3738      	adds	r7, #56	; 0x38
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40003800 	.word	0x40003800
 8001070:	40023800 	.word	0x40023800
 8001074:	40020800 	.word	0x40020800
 8001078:	40020400 	.word	0x40020400
 800107c:	40003c00 	.word	0x40003c00
 8001080:	40020000 	.word	0x40020000

08001084 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a19      	ldr	r2, [pc, #100]	; (8001108 <HAL_SPI_MspInit+0x84>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d12b      	bne.n	80010fe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	4b18      	ldr	r3, [pc, #96]	; (800110c <HAL_SPI_MspInit+0x88>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	4a17      	ldr	r2, [pc, #92]	; (800110c <HAL_SPI_MspInit+0x88>)
 80010b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010b4:	6453      	str	r3, [r2, #68]	; 0x44
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <HAL_SPI_MspInit+0x88>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <HAL_SPI_MspInit+0x88>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a10      	ldr	r2, [pc, #64]	; (800110c <HAL_SPI_MspInit+0x88>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <HAL_SPI_MspInit+0x88>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80010de:	23e0      	movs	r3, #224	; 0xe0
 80010e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ea:	2303      	movs	r3, #3
 80010ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010ee:	2305      	movs	r3, #5
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	4805      	ldr	r0, [pc, #20]	; (8001110 <HAL_SPI_MspInit+0x8c>)
 80010fa:	f000 ff47 	bl	8001f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010fe:	bf00      	nop
 8001100:	3728      	adds	r7, #40	; 0x28
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40013000 	.word	0x40013000
 800110c:	40023800 	.word	0x40023800
 8001110:	40020000 	.word	0x40020000

08001114 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	; 0x28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a19      	ldr	r2, [pc, #100]	; (8001198 <HAL_UART_MspInit+0x84>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d12b      	bne.n	800118e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	4b18      	ldr	r3, [pc, #96]	; (800119c <HAL_UART_MspInit+0x88>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	4a17      	ldr	r2, [pc, #92]	; (800119c <HAL_UART_MspInit+0x88>)
 8001140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001144:	6413      	str	r3, [r2, #64]	; 0x40
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <HAL_UART_MspInit+0x88>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b11      	ldr	r3, [pc, #68]	; (800119c <HAL_UART_MspInit+0x88>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a10      	ldr	r2, [pc, #64]	; (800119c <HAL_UART_MspInit+0x88>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <HAL_UART_MspInit+0x88>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800116e:	230c      	movs	r3, #12
 8001170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001176:	2301      	movs	r3, #1
 8001178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117a:	2303      	movs	r3, #3
 800117c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800117e:	2307      	movs	r3, #7
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	4805      	ldr	r0, [pc, #20]	; (80011a0 <HAL_UART_MspInit+0x8c>)
 800118a:	f000 feff 	bl	8001f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800118e:	bf00      	nop
 8001190:	3728      	adds	r7, #40	; 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40004400 	.word	0x40004400
 800119c:	40023800 	.word	0x40023800
 80011a0:	40020000 	.word	0x40020000

080011a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08c      	sub	sp, #48	; 0x30
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80011b4:	2200      	movs	r2, #0
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	2019      	movs	r0, #25
 80011ba:	f000 febd 	bl	8001f38 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80011be:	2019      	movs	r0, #25
 80011c0:	f000 fed6 	bl	8001f70 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	4b1e      	ldr	r3, [pc, #120]	; (8001244 <HAL_InitTick+0xa0>)
 80011ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011cc:	4a1d      	ldr	r2, [pc, #116]	; (8001244 <HAL_InitTick+0xa0>)
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	6453      	str	r3, [r2, #68]	; 0x44
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <HAL_InitTick+0xa0>)
 80011d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011e0:	f107 0210 	add.w	r2, r7, #16
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	4611      	mov	r1, r2
 80011ea:	4618      	mov	r0, r3
 80011ec:	f003 fa06 	bl	80045fc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80011f0:	f003 f9f0 	bl	80045d4 <HAL_RCC_GetPCLK2Freq>
 80011f4:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80011f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f8:	4a13      	ldr	r2, [pc, #76]	; (8001248 <HAL_InitTick+0xa4>)
 80011fa:	fba2 2303 	umull	r2, r3, r2, r3
 80011fe:	0c9b      	lsrs	r3, r3, #18
 8001200:	3b01      	subs	r3, #1
 8001202:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <HAL_InitTick+0xa8>)
 8001206:	4a12      	ldr	r2, [pc, #72]	; (8001250 <HAL_InitTick+0xac>)
 8001208:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <HAL_InitTick+0xa8>)
 800120c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001210:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001212:	4a0e      	ldr	r2, [pc, #56]	; (800124c <HAL_InitTick+0xa8>)
 8001214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001216:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <HAL_InitTick+0xa8>)
 800121a:	2200      	movs	r2, #0
 800121c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121e:	4b0b      	ldr	r3, [pc, #44]	; (800124c <HAL_InitTick+0xa8>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001224:	4809      	ldr	r0, [pc, #36]	; (800124c <HAL_InitTick+0xa8>)
 8001226:	f003 fbcd 	bl	80049c4 <HAL_TIM_Base_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d104      	bne.n	800123a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001230:	4806      	ldr	r0, [pc, #24]	; (800124c <HAL_InitTick+0xa8>)
 8001232:	f003 fbfc 	bl	8004a2e <HAL_TIM_Base_Start_IT>
 8001236:	4603      	mov	r3, r0
 8001238:	e000      	b.n	800123c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
}
 800123c:	4618      	mov	r0, r3
 800123e:	3730      	adds	r7, #48	; 0x30
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40023800 	.word	0x40023800
 8001248:	431bde83 	.word	0x431bde83
 800124c:	20008fd4 	.word	0x20008fd4
 8001250:	40010000 	.word	0x40010000

08001254 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <HardFault_Handler+0x4>

08001268 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <MemManage_Handler+0x4>

0800126e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <BusFault_Handler+0x4>

08001274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <UsageFault_Handler+0x4>

0800127a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800128c:	2001      	movs	r0, #1
 800128e:	f001 f92d 	bl	80024ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}

08001296 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800129a:	2002      	movs	r0, #2
 800129c:	f001 f926 	bl	80024ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80012a8:	2004      	movs	r0, #4
 80012aa:	f001 f91f 	bl	80024ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80012b6:	2008      	movs	r0, #8
 80012b8:	f001 f918 	bl	80024ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}

080012c0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012c4:	4802      	ldr	r0, [pc, #8]	; (80012d0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80012c6:	f003 fbd6 	bl	8004a76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20008fd4 	.word	0x20008fd4

080012d4 <SW_Init>:


static bool eventSW[BOARD_SW_ID_TOTAL];

void SW_Init(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
    int32_t i;

    for (i = 0 ; i < BOARD_SW_ID_TOTAL ; i++)
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	e007      	b.n	80012f0 <SW_Init+0x1c>
    {
        eventSW[i] = 0;
 80012e0:	4a08      	ldr	r2, [pc, #32]	; (8001304 <SW_Init+0x30>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]
    for (i = 0 ; i < BOARD_SW_ID_TOTAL ; i++)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3301      	adds	r3, #1
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b03      	cmp	r3, #3
 80012f4:	ddf4      	ble.n	80012e0 <SW_Init+0xc>
    }
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	200000c4 	.word	0x200000c4

08001308 <SW_Status>:

int16_t SW_Status()
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
	int16_t result = BOARD_SW_ID_TOTAL;
 800130e:	2304      	movs	r3, #4
 8001310:	80fb      	strh	r3, [r7, #6]
	int i = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	603b      	str	r3, [r7, #0]
	 for (i = 0 ; i < BOARD_SW_ID_TOTAL ; i++)
 8001316:	2300      	movs	r3, #0
 8001318:	603b      	str	r3, [r7, #0]
 800131a:	e011      	b.n	8001340 <SW_Status+0x38>
	 {
		 if (board_getSw(i))
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	b2db      	uxtb	r3, r3
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f979 	bl	8000618 <board_getSw>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d006      	beq.n	800133a <SW_Status+0x32>
		 {
			 eventSW[i] = 1;
 800132c:	4a09      	ldr	r2, [pc, #36]	; (8001354 <SW_Status+0x4c>)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	4413      	add	r3, r2
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
			 result = i;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	80fb      	strh	r3, [r7, #6]
	 for (i = 0 ; i < BOARD_SW_ID_TOTAL ; i++)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	3301      	adds	r3, #1
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	2b03      	cmp	r3, #3
 8001344:	ddea      	ble.n	800131c <SW_Status+0x14>
		 }
	 }
	 return result;
 8001346:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200000c4 	.word	0x200000c4

08001358 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	e00a      	b.n	8001380 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800136a:	f3af 8000 	nop.w
 800136e:	4601      	mov	r1, r0
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	1c5a      	adds	r2, r3, #1
 8001374:	60ba      	str	r2, [r7, #8]
 8001376:	b2ca      	uxtb	r2, r1
 8001378:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	3301      	adds	r3, #1
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	429a      	cmp	r2, r3
 8001386:	dbf0      	blt.n	800136a <_read+0x12>
	}

return len;
 8001388:	687b      	ldr	r3, [r7, #4]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b086      	sub	sp, #24
 8001396:	af00      	add	r7, sp, #0
 8001398:	60f8      	str	r0, [r7, #12]
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	e009      	b.n	80013b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	1c5a      	adds	r2, r3, #1
 80013a8:	60ba      	str	r2, [r7, #8]
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f9f2 	bl	8000796 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	3301      	adds	r3, #1
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	697a      	ldr	r2, [r7, #20]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	429a      	cmp	r2, r3
 80013be:	dbf1      	blt.n	80013a4 <_write+0x12>
	}
	return len;
 80013c0:	687b      	ldr	r3, [r7, #4]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <_close>:

int _close(int file)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
	return -1;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
 80013ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013f2:	605a      	str	r2, [r3, #4]
	return 0;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <_isatty>:

int _isatty(int file)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
	return 1;
 800140a:	2301      	movs	r3, #1
}
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
	return 0;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <_sbrk+0x50>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d102      	bne.n	800144a <_sbrk+0x16>
		heap_end = &end;
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <_sbrk+0x50>)
 8001446:	4a10      	ldr	r2, [pc, #64]	; (8001488 <_sbrk+0x54>)
 8001448:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <_sbrk+0x50>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <_sbrk+0x50>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4413      	add	r3, r2
 8001458:	466a      	mov	r2, sp
 800145a:	4293      	cmp	r3, r2
 800145c:	d907      	bls.n	800146e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800145e:	f007 f8f5 	bl	800864c <__errno>
 8001462:	4602      	mov	r2, r0
 8001464:	230c      	movs	r3, #12
 8001466:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001468:	f04f 33ff 	mov.w	r3, #4294967295
 800146c:	e006      	b.n	800147c <_sbrk+0x48>
	}

	heap_end += incr;
 800146e:	4b05      	ldr	r3, [pc, #20]	; (8001484 <_sbrk+0x50>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	4a03      	ldr	r2, [pc, #12]	; (8001484 <_sbrk+0x50>)
 8001478:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800147a:	68fb      	ldr	r3, [r7, #12]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	200000c8 	.word	0x200000c8
 8001488:	20009060 	.word	0x20009060

0800148c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001490:	4b16      	ldr	r3, [pc, #88]	; (80014ec <SystemInit+0x60>)
 8001492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001496:	4a15      	ldr	r2, [pc, #84]	; (80014ec <SystemInit+0x60>)
 8001498:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800149c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80014a0:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <SystemInit+0x64>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <SystemInit+0x64>)
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014ac:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <SystemInit+0x64>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80014b2:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <SystemInit+0x64>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a0e      	ldr	r2, [pc, #56]	; (80014f0 <SystemInit+0x64>)
 80014b8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80014bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <SystemInit+0x64>)
 80014c4:	4a0b      	ldr	r2, [pc, #44]	; (80014f4 <SystemInit+0x68>)
 80014c6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80014c8:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <SystemInit+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a08      	ldr	r2, [pc, #32]	; (80014f0 <SystemInit+0x64>)
 80014ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <SystemInit+0x64>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014da:	4b04      	ldr	r3, [pc, #16]	; (80014ec <SystemInit+0x60>)
 80014dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014e0:	609a      	str	r2, [r3, #8]
#endif
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000ed00 	.word	0xe000ed00
 80014f0:	40023800 	.word	0x40023800
 80014f4:	24003010 	.word	0x24003010

080014f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001530 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014fe:	e003      	b.n	8001508 <LoopCopyDataInit>

08001500 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001502:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001504:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001506:	3104      	adds	r1, #4

08001508 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001508:	480b      	ldr	r0, [pc, #44]	; (8001538 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800150a:	4b0c      	ldr	r3, [pc, #48]	; (800153c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800150c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800150e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001510:	d3f6      	bcc.n	8001500 <CopyDataInit>
  ldr  r2, =_sbss
 8001512:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001514:	e002      	b.n	800151c <LoopFillZerobss>

08001516 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001516:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001518:	f842 3b04 	str.w	r3, [r2], #4

0800151c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800151e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001520:	d3f9      	bcc.n	8001516 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001522:	f7ff ffb3 	bl	800148c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001526:	f007 f897 	bl	8008658 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800152a:	f7ff f941 	bl	80007b0 <main>
  bx  lr    
 800152e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001530:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001534:	080096bc 	.word	0x080096bc
  ldr  r0, =_sdata
 8001538:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800153c:	200000a8 	.word	0x200000a8
  ldr  r2, =_sbss
 8001540:	200000a8 	.word	0x200000a8
  ldr  r3, = _ebss
 8001544:	2000905c 	.word	0x2000905c

08001548 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001548:	e7fe      	b.n	8001548 <ADC_IRQHandler>

0800154a <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 800154a:	b580      	push	{r7, lr}
 800154c:	b084      	sub	sp, #16
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001554:	2300      	movs	r3, #0
 8001556:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8001558:	f000 fab8 	bl	8001acc <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800155c:	88fb      	ldrh	r3, [r7, #6]
 800155e:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8001560:	7bfb      	ldrb	r3, [r7, #15]
 8001562:	461a      	mov	r2, r3
 8001564:	2120      	movs	r1, #32
 8001566:	2032      	movs	r0, #50	; 0x32
 8001568:	f000 fb08 	bl	8001b7c <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 800156c:	2300      	movs	r3, #0
 800156e:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8001570:	7bfb      	ldrb	r3, [r7, #15]
 8001572:	461a      	mov	r2, r3
 8001574:	2123      	movs	r1, #35	; 0x23
 8001576:	2032      	movs	r0, #50	; 0x32
 8001578:	f000 fb00 	bl	8001b7c <COMPASSACCELERO_IO_Write>
}
 800157c:	bf00      	nop
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001598:	2300      	movs	r3, #0
 800159a:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 800159c:	f000 fa96 	bl	8001acc <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 80015a0:	210f      	movs	r1, #15
 80015a2:	2032      	movs	r0, #50	; 0x32
 80015a4:	f000 fafd 	bl	8001ba2 <COMPASSACCELERO_IO_Read>
 80015a8:	4603      	mov	r3, r0
 80015aa:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 80015ac:	79fb      	ldrb	r3, [r7, #7]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80015bc:	2124      	movs	r1, #36	; 0x24
 80015be:	2032      	movs	r0, #50	; 0x32
 80015c0:	f000 faef 	bl	8001ba2 <COMPASSACCELERO_IO_Read>
 80015c4:	4603      	mov	r3, r0
 80015c6:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015ce:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	461a      	mov	r2, r3
 80015d4:	2124      	movs	r1, #36	; 0x24
 80015d6:	2032      	movs	r0, #50	; 0x32
 80015d8:	f000 fad0 	bl	8001b7c <COMPASSACCELERO_IO_Write>
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80015ee:	2121      	movs	r1, #33	; 0x21
 80015f0:	2032      	movs	r0, #50	; 0x32
 80015f2:	f000 fad6 	bl	8001ba2 <COMPASSACCELERO_IO_Read>
 80015f6:	4603      	mov	r3, r0
 80015f8:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	f003 030c 	and.w	r3, r3, #12
 8001600:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8001602:	7bfa      	ldrb	r2, [r7, #15]
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	4313      	orrs	r3, r2
 8001608:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800160a:	7bfb      	ldrb	r3, [r7, #15]
 800160c:	461a      	mov	r2, r3
 800160e:	2121      	movs	r1, #33	; 0x21
 8001610:	2032      	movs	r0, #50	; 0x32
 8001612:	f000 fab3 	bl	8001b7c <COMPASSACCELERO_IO_Write>
}
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b084      	sub	sp, #16
 8001622:	af00      	add	r7, sp, #0
 8001624:	4603      	mov	r3, r0
 8001626:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001628:	2121      	movs	r1, #33	; 0x21
 800162a:	2032      	movs	r0, #50	; 0x32
 800162c:	f000 fab9 	bl	8001ba2 <COMPASSACCELERO_IO_Read>
 8001630:	4603      	mov	r3, r0
 8001632:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	f023 0308 	bic.w	r3, r3, #8
 800163a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 800163c:	7bfa      	ldrb	r2, [r7, #15]
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	4313      	orrs	r3, r2
 8001642:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	461a      	mov	r2, r3
 8001648:	2121      	movs	r1, #33	; 0x21
 800164a:	2032      	movs	r0, #50	; 0x32
 800164c:	f000 fa96 	bl	8001b7c <COMPASSACCELERO_IO_Write>
}
 8001650:	bf00      	nop
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8001660:	2300      	movs	r3, #0
 8001662:	753b      	strb	r3, [r7, #20]
 8001664:	2300      	movs	r3, #0
 8001666:	757b      	strb	r3, [r7, #21]
  int8_t buffer[6];
  uint8_t i = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 800166c:	2301      	movs	r3, #1
 800166e:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8001670:	2123      	movs	r1, #35	; 0x23
 8001672:	2032      	movs	r0, #50	; 0x32
 8001674:	f000 fa95 	bl	8001ba2 <COMPASSACCELERO_IO_Read>
 8001678:	4603      	mov	r3, r0
 800167a:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800167c:	2124      	movs	r1, #36	; 0x24
 800167e:	2032      	movs	r0, #50	; 0x32
 8001680:	f000 fa8f 	bl	8001ba2 <COMPASSACCELERO_IO_Read>
 8001684:	4603      	mov	r3, r0
 8001686:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8001688:	2128      	movs	r1, #40	; 0x28
 800168a:	2032      	movs	r0, #50	; 0x32
 800168c:	f000 fa89 	bl	8001ba2 <COMPASSACCELERO_IO_Read>
 8001690:	4603      	mov	r3, r0
 8001692:	b25b      	sxtb	r3, r3
 8001694:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8001696:	2129      	movs	r1, #41	; 0x29
 8001698:	2032      	movs	r0, #50	; 0x32
 800169a:	f000 fa82 	bl	8001ba2 <COMPASSACCELERO_IO_Read>
 800169e:	4603      	mov	r3, r0
 80016a0:	b25b      	sxtb	r3, r3
 80016a2:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 80016a4:	212a      	movs	r1, #42	; 0x2a
 80016a6:	2032      	movs	r0, #50	; 0x32
 80016a8:	f000 fa7b 	bl	8001ba2 <COMPASSACCELERO_IO_Read>
 80016ac:	4603      	mov	r3, r0
 80016ae:	b25b      	sxtb	r3, r3
 80016b0:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 80016b2:	212b      	movs	r1, #43	; 0x2b
 80016b4:	2032      	movs	r0, #50	; 0x32
 80016b6:	f000 fa74 	bl	8001ba2 <COMPASSACCELERO_IO_Read>
 80016ba:	4603      	mov	r3, r0
 80016bc:	b25b      	sxtb	r3, r3
 80016be:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 80016c0:	212c      	movs	r1, #44	; 0x2c
 80016c2:	2032      	movs	r0, #50	; 0x32
 80016c4:	f000 fa6d 	bl	8001ba2 <COMPASSACCELERO_IO_Read>
 80016c8:	4603      	mov	r3, r0
 80016ca:	b25b      	sxtb	r3, r3
 80016cc:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 80016ce:	212d      	movs	r1, #45	; 0x2d
 80016d0:	2032      	movs	r0, #50	; 0x32
 80016d2:	f000 fa66 	bl	8001ba2 <COMPASSACCELERO_IO_Read>
 80016d6:	4603      	mov	r3, r0
 80016d8:	b25b      	sxtb	r3, r3
 80016da:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 80016dc:	7d3b      	ldrb	r3, [r7, #20]
 80016de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d126      	bne.n	8001734 <LSM303DLHC_AccReadXYZ+0xdc>
  {
    for(i=0; i<3; i++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	77fb      	strb	r3, [r7, #31]
 80016ea:	e01f      	b.n	800172c <LSM303DLHC_AccReadXYZ+0xd4>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 80016ec:	7ffb      	ldrb	r3, [r7, #31]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	3301      	adds	r3, #1
 80016f2:	f107 0220 	add.w	r2, r7, #32
 80016f6:	4413      	add	r3, r2
 80016f8:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	021b      	lsls	r3, r3, #8
 8001700:	b29a      	uxth	r2, r3
 8001702:	7ffb      	ldrb	r3, [r7, #31]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	f107 0120 	add.w	r1, r7, #32
 800170a:	440b      	add	r3, r1
 800170c:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001710:	b29b      	uxth	r3, r3
 8001712:	4413      	add	r3, r2
 8001714:	b29a      	uxth	r2, r3
 8001716:	7ffb      	ldrb	r3, [r7, #31]
 8001718:	b212      	sxth	r2, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	f107 0120 	add.w	r1, r7, #32
 8001720:	440b      	add	r3, r1
 8001722:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001726:	7ffb      	ldrb	r3, [r7, #31]
 8001728:	3301      	adds	r3, #1
 800172a:	77fb      	strb	r3, [r7, #31]
 800172c:	7ffb      	ldrb	r3, [r7, #31]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d9dc      	bls.n	80016ec <LSM303DLHC_AccReadXYZ+0x94>
 8001732:	e025      	b.n	8001780 <LSM303DLHC_AccReadXYZ+0x128>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8001734:	2300      	movs	r3, #0
 8001736:	77fb      	strb	r3, [r7, #31]
 8001738:	e01f      	b.n	800177a <LSM303DLHC_AccReadXYZ+0x122>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 800173a:	7ffb      	ldrb	r3, [r7, #31]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	f107 0220 	add.w	r2, r7, #32
 8001742:	4413      	add	r3, r2
 8001744:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001748:	b29b      	uxth	r3, r3
 800174a:	021b      	lsls	r3, r3, #8
 800174c:	b29a      	uxth	r2, r3
 800174e:	7ffb      	ldrb	r3, [r7, #31]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	3301      	adds	r3, #1
 8001754:	f107 0120 	add.w	r1, r7, #32
 8001758:	440b      	add	r3, r1
 800175a:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800175e:	b29b      	uxth	r3, r3
 8001760:	4413      	add	r3, r2
 8001762:	b29a      	uxth	r2, r3
 8001764:	7ffb      	ldrb	r3, [r7, #31]
 8001766:	b212      	sxth	r2, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	f107 0120 	add.w	r1, r7, #32
 800176e:	440b      	add	r3, r1
 8001770:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001774:	7ffb      	ldrb	r3, [r7, #31]
 8001776:	3301      	adds	r3, #1
 8001778:	77fb      	strb	r3, [r7, #31]
 800177a:	7ffb      	ldrb	r3, [r7, #31]
 800177c:	2b02      	cmp	r3, #2
 800177e:	d9dc      	bls.n	800173a <LSM303DLHC_AccReadXYZ+0xe2>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8001780:	7d3b      	ldrb	r3, [r7, #20]
 8001782:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001786:	2b10      	cmp	r3, #16
 8001788:	d00c      	beq.n	80017a4 <LSM303DLHC_AccReadXYZ+0x14c>
 800178a:	2b10      	cmp	r3, #16
 800178c:	dc02      	bgt.n	8001794 <LSM303DLHC_AccReadXYZ+0x13c>
 800178e:	2b00      	cmp	r3, #0
 8001790:	d005      	beq.n	800179e <LSM303DLHC_AccReadXYZ+0x146>
 8001792:	e010      	b.n	80017b6 <LSM303DLHC_AccReadXYZ+0x15e>
 8001794:	2b20      	cmp	r3, #32
 8001796:	d008      	beq.n	80017aa <LSM303DLHC_AccReadXYZ+0x152>
 8001798:	2b30      	cmp	r3, #48	; 0x30
 800179a:	d009      	beq.n	80017b0 <LSM303DLHC_AccReadXYZ+0x158>
 800179c:	e00b      	b.n	80017b6 <LSM303DLHC_AccReadXYZ+0x15e>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 800179e:	2301      	movs	r3, #1
 80017a0:	77bb      	strb	r3, [r7, #30]
    break;
 80017a2:	e008      	b.n	80017b6 <LSM303DLHC_AccReadXYZ+0x15e>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 80017a4:	2302      	movs	r3, #2
 80017a6:	77bb      	strb	r3, [r7, #30]
    break;
 80017a8:	e005      	b.n	80017b6 <LSM303DLHC_AccReadXYZ+0x15e>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 80017aa:	2304      	movs	r3, #4
 80017ac:	77bb      	strb	r3, [r7, #30]
    break;
 80017ae:	e002      	b.n	80017b6 <LSM303DLHC_AccReadXYZ+0x15e>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 80017b0:	230c      	movs	r3, #12
 80017b2:	77bb      	strb	r3, [r7, #30]
    break;
 80017b4:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80017b6:	2300      	movs	r3, #0
 80017b8:	77fb      	strb	r3, [r7, #31]
 80017ba:	e015      	b.n	80017e8 <LSM303DLHC_AccReadXYZ+0x190>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 80017bc:	7ffb      	ldrb	r3, [r7, #31]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	f107 0220 	add.w	r2, r7, #32
 80017c4:	4413      	add	r3, r2
 80017c6:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	7fbb      	ldrb	r3, [r7, #30]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	fb12 f303 	smulbb	r3, r2, r3
 80017d4:	b299      	uxth	r1, r3
 80017d6:	7ffb      	ldrb	r3, [r7, #31]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	4413      	add	r3, r2
 80017de:	b20a      	sxth	r2, r1
 80017e0:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80017e2:	7ffb      	ldrb	r3, [r7, #31]
 80017e4:	3301      	adds	r3, #1
 80017e6:	77fb      	strb	r3, [r7, #31]
 80017e8:	7ffb      	ldrb	r3, [r7, #31]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d9e6      	bls.n	80017bc <LSM303DLHC_AccReadXYZ+0x164>
  }
}
 80017ee:	bf00      	nop
 80017f0:	3720      	adds	r7, #32
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b084      	sub	sp, #16
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	4603      	mov	r3, r0
 80017fe:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8001800:	2300      	movs	r3, #0
 8001802:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001804:	2121      	movs	r1, #33	; 0x21
 8001806:	2032      	movs	r0, #50	; 0x32
 8001808:	f000 f9cb 	bl	8001ba2 <COMPASSACCELERO_IO_Read>
 800180c:	4603      	mov	r3, r0
 800180e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	f023 0304 	bic.w	r3, r3, #4
 8001816:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8001818:	7bfa      	ldrb	r2, [r7, #15]
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	4313      	orrs	r3, r2
 800181e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	461a      	mov	r2, r3
 8001824:	2121      	movs	r1, #33	; 0x21
 8001826:	2032      	movs	r0, #50	; 0x32
 8001828:	f000 f9a8 	bl	8001b7c <COMPASSACCELERO_IO_Write>
}
 800182c:	bf00      	nop
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 800183e:	2300      	movs	r3, #0
 8001840:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8001842:	2122      	movs	r1, #34	; 0x22
 8001844:	2032      	movs	r0, #50	; 0x32
 8001846:	f000 f9ac 	bl	8001ba2 <COMPASSACCELERO_IO_Read>
 800184a:	4603      	mov	r3, r0
 800184c:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 800184e:	7bfa      	ldrb	r2, [r7, #15]
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	4313      	orrs	r3, r2
 8001854:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	461a      	mov	r2, r3
 800185a:	2122      	movs	r1, #34	; 0x22
 800185c:	2032      	movs	r0, #50	; 0x32
 800185e:	f000 f98d 	bl	8001b7c <COMPASSACCELERO_IO_Write>
}
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 800186a:	b580      	push	{r7, lr}
 800186c:	b084      	sub	sp, #16
 800186e:	af00      	add	r7, sp, #0
 8001870:	4603      	mov	r3, r0
 8001872:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001874:	2300      	movs	r3, #0
 8001876:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8001878:	2138      	movs	r1, #56	; 0x38
 800187a:	2032      	movs	r0, #50	; 0x32
 800187c:	f000 f991 	bl	8001ba2 <COMPASSACCELERO_IO_Read>
 8001880:	4603      	mov	r3, r0
 8001882:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8001884:	7bfa      	ldrb	r2, [r7, #15]
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	4313      	orrs	r3, r2
 800188a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	461a      	mov	r2, r3
 8001890:	2138      	movs	r1, #56	; 0x38
 8001892:	2032      	movs	r0, #50	; 0x32
 8001894:	f000 f972 	bl	8001b7c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8001898:	230a      	movs	r3, #10
 800189a:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	461a      	mov	r2, r3
 80018a0:	213a      	movs	r1, #58	; 0x3a
 80018a2:	2032      	movs	r0, #50	; 0x32
 80018a4:	f000 f96a 	bl	8001b7c <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 80018a8:	2305      	movs	r3, #5
 80018aa:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
 80018ae:	461a      	mov	r2, r3
 80018b0:	213b      	movs	r1, #59	; 0x3b
 80018b2:	2032      	movs	r0, #50	; 0x32
 80018b4:	f000 f962 	bl	8001b7c <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	461a      	mov	r2, r3
 80018bc:	213c      	movs	r1, #60	; 0x3c
 80018be:	2032      	movs	r0, #50	; 0x32
 80018c0:	f000 f95c 	bl	8001b7c <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 80018c4:	2332      	movs	r3, #50	; 0x32
 80018c6:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
 80018ca:	461a      	mov	r2, r3
 80018cc:	213d      	movs	r1, #61	; 0x3d
 80018ce:	2032      	movs	r0, #50	; 0x32
 80018d0:	f000 f954 	bl	8001b7c <COMPASSACCELERO_IO_Write>
}
 80018d4:	bf00      	nop
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 80018e0:	f000 f91c 	bl	8001b1c <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 80018e4:	2080      	movs	r0, #128	; 0x80
 80018e6:	f7ff ffa5 	bl	8001834 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 80018ea:	2004      	movs	r0, #4
 80018ec:	f7ff ff83 	bl	80017f6 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 80018f0:	2010      	movs	r0, #16
 80018f2:	f7ff ffba 	bl	800186a <LSM303DLHC_AccClickITEnable>
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8001900:	4814      	ldr	r0, [pc, #80]	; (8001954 <I2Cx_Init+0x58>)
 8001902:	f001 fa83 	bl	8002e0c <HAL_I2C_GetState>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d121      	bne.n	8001950 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <I2Cx_Init+0x58>)
 800190e:	4a12      	ldr	r2, [pc, #72]	; (8001958 <I2Cx_Init+0x5c>)
 8001910:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  0x43;
 8001912:	4b10      	ldr	r3, [pc, #64]	; (8001954 <I2Cx_Init+0x58>)
 8001914:	2243      	movs	r2, #67	; 0x43
 8001916:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.ClockSpeed = I2Cx_MAX_COMMUNICATION_FREQ;
 8001918:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <I2Cx_Init+0x58>)
 800191a:	4a10      	ldr	r2, [pc, #64]	; (800195c <I2Cx_Init+0x60>)
 800191c:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800191e:	4b0d      	ldr	r3, [pc, #52]	; (8001954 <I2Cx_Init+0x58>)
 8001920:	2200      	movs	r2, #0
 8001922:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <I2Cx_Init+0x58>)
 8001926:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800192a:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 800192c:	4b09      	ldr	r3, [pc, #36]	; (8001954 <I2Cx_Init+0x58>)
 800192e:	2200      	movs	r2, #0
 8001930:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2 = 0x00;
 8001932:	4b08      	ldr	r3, [pc, #32]	; (8001954 <I2Cx_Init+0x58>)
 8001934:	2200      	movs	r2, #0
 8001936:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <I2Cx_Init+0x58>)
 800193a:	2200      	movs	r2, #0
 800193c:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 800193e:	4b05      	ldr	r3, [pc, #20]	; (8001954 <I2Cx_Init+0x58>)
 8001940:	2200      	movs	r2, #0
 8001942:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8001944:	4803      	ldr	r0, [pc, #12]	; (8001954 <I2Cx_Init+0x58>)
 8001946:	f000 f86b 	bl	8001a20 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800194a:	4802      	ldr	r0, [pc, #8]	; (8001954 <I2Cx_Init+0x58>)
 800194c:	f000 fde6 	bl	800251c <HAL_I2C_Init>
  }
}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	200000cc 	.word	0x200000cc
 8001958:	40005400 	.word	0x40005400
 800195c:	000186a0 	.word	0x000186a0

08001960 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af04      	add	r7, sp, #16
 8001966:	4603      	mov	r3, r0
 8001968:	80fb      	strh	r3, [r7, #6]
 800196a:	460b      	mov	r3, r1
 800196c:	717b      	strb	r3, [r7, #5]
 800196e:	4613      	mov	r3, r2
 8001970:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8001976:	797b      	ldrb	r3, [r7, #5]
 8001978:	b29a      	uxth	r2, r3
 800197a:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <I2Cx_WriteData+0x48>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	88f9      	ldrh	r1, [r7, #6]
 8001980:	9302      	str	r3, [sp, #8]
 8001982:	2301      	movs	r3, #1
 8001984:	9301      	str	r3, [sp, #4]
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	2301      	movs	r3, #1
 800198c:	4807      	ldr	r0, [pc, #28]	; (80019ac <I2Cx_WriteData+0x4c>)
 800198e:	f000 ff1d 	bl	80027cc <HAL_I2C_Mem_Write>
 8001992:	4603      	mov	r3, r0
 8001994:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001996:	7bfb      	ldrb	r3, [r7, #15]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 800199c:	f000 f834 	bl	8001a08 <I2Cx_Error>
  }
}
 80019a0:	bf00      	nop
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000038 	.word	0x20000038
 80019ac:	200000cc 	.word	0x200000cc

080019b0 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af04      	add	r7, sp, #16
 80019b6:	4603      	mov	r3, r0
 80019b8:	460a      	mov	r2, r1
 80019ba:	80fb      	strh	r3, [r7, #6]
 80019bc:	4613      	mov	r3, r2
 80019be:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80019c0:	2300      	movs	r3, #0
 80019c2:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80019c8:	797b      	ldrb	r3, [r7, #5]
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <I2Cx_ReadData+0x50>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	88f9      	ldrh	r1, [r7, #6]
 80019d2:	9302      	str	r3, [sp, #8]
 80019d4:	2301      	movs	r3, #1
 80019d6:	9301      	str	r3, [sp, #4]
 80019d8:	f107 030e 	add.w	r3, r7, #14
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	2301      	movs	r3, #1
 80019e0:	4808      	ldr	r0, [pc, #32]	; (8001a04 <I2Cx_ReadData+0x54>)
 80019e2:	f000 ffed 	bl	80029c0 <HAL_I2C_Mem_Read>
 80019e6:	4603      	mov	r3, r0
 80019e8:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 80019f0:	f000 f80a 	bl	8001a08 <I2Cx_Error>
  }
  return value;
 80019f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000038 	.word	0x20000038
 8001a04:	200000cc 	.word	0x200000cc

08001a08 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function.
  */
static void I2Cx_Error(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8001a0c:	4803      	ldr	r0, [pc, #12]	; (8001a1c <I2Cx_Error+0x14>)
 8001a0e:	f000 fead 	bl	800276c <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8001a12:	f7ff ff73 	bl	80018fc <I2Cx_Init>
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200000cc 	.word	0x200000cc

08001a20 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Init.
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the I2C peripheral */
  DISCOVERY_I2Cx_CLOCK_ENABLE();
 8001a28:	2300      	movs	r3, #0
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	4b25      	ldr	r3, [pc, #148]	; (8001ac4 <I2Cx_MspInit+0xa4>)
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	4a24      	ldr	r2, [pc, #144]	; (8001ac4 <I2Cx_MspInit+0xa4>)
 8001a32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a36:	6413      	str	r3, [r2, #64]	; 0x40
 8001a38:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <I2Cx_MspInit+0xa4>)
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	693b      	ldr	r3, [r7, #16]

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <I2Cx_MspInit+0xa4>)
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4c:	4a1d      	ldr	r2, [pc, #116]	; (8001ac4 <I2Cx_MspInit+0xa4>)
 8001a4e:	f043 0302 	orr.w	r3, r3, #2
 8001a52:	6313      	str	r3, [r2, #48]	; 0x30
 8001a54:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <I2Cx_MspInit+0xa4>)
 8001a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	68fb      	ldr	r3, [r7, #12]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN;
 8001a60:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8001a66:	2312      	movs	r3, #18
 8001a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8001a72:	2304      	movs	r3, #4
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
  
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4812      	ldr	r0, [pc, #72]	; (8001ac8 <I2Cx_MspInit+0xa8>)
 8001a7e:	f000 fa85 	bl	8001f8c <HAL_GPIO_Init>

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <I2Cx_MspInit+0xa4>)
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	4a0f      	ldr	r2, [pc, #60]	; (8001ac4 <I2Cx_MspInit+0xa4>)
 8001a88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a8c:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001a8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ac4 <I2Cx_MspInit+0xa4>)
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	4a0c      	ldr	r2, [pc, #48]	; (8001ac4 <I2Cx_MspInit+0xa4>)
 8001a94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a98:	6213      	str	r3, [r2, #32]

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	210f      	movs	r1, #15
 8001a9e:	201f      	movs	r0, #31
 8001aa0:	f000 fa4a 	bl	8001f38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001aa4:	201f      	movs	r0, #31
 8001aa6:	f000 fa63 	bl	8001f70 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	210f      	movs	r1, #15
 8001aae:	2020      	movs	r0, #32
 8001ab0:	f000 fa42 	bl	8001f38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn); 
 8001ab4:	2020      	movs	r0, #32
 8001ab6:	f000 fa5b 	bl	8001f70 <HAL_NVIC_EnableIRQ>
}
 8001aba:	bf00      	nop
 8001abc:	3728      	adds	r7, #40	; 0x28
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40020400 	.word	0x40020400

08001acc <COMPASSACCELERO_IO_Init>:

/**
  * @brief  Configures COMPASS / ACCELERO I2C interface.
  */
void COMPASSACCELERO_IO_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	603b      	str	r3, [r7, #0]
 8001ad6:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <COMPASSACCELERO_IO_Init+0x48>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a0e      	ldr	r2, [pc, #56]	; (8001b14 <COMPASSACCELERO_IO_Init+0x48>)
 8001adc:	f043 0310 	orr.w	r3, r3, #16
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <COMPASSACCELERO_IO_Init+0x48>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0310 	and.w	r3, r3, #16
 8001aea:	603b      	str	r3, [r7, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]
  
  /* MEMS DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8001aee:	2304      	movs	r3, #4
 8001af0:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001afa:	2302      	movs	r3, #2
 8001afc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8001afe:	1d3b      	adds	r3, r7, #4
 8001b00:	4619      	mov	r1, r3
 8001b02:	4805      	ldr	r0, [pc, #20]	; (8001b18 <COMPASSACCELERO_IO_Init+0x4c>)
 8001b04:	f000 fa42 	bl	8001f8c <HAL_GPIO_Init>
  
  I2Cx_Init();
 8001b08:	f7ff fef8 	bl	80018fc <I2Cx_Init>
}
 8001b0c:	bf00      	nop
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40021000 	.word	0x40021000

08001b1c <COMPASSACCELERO_IO_ITConfig>:

/**
  * @brief  Configures COMPASS / ACCELERO click IT.
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 and INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	603b      	str	r3, [r7, #0]
 8001b26:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <COMPASSACCELERO_IO_ITConfig+0x54>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a11      	ldr	r2, [pc, #68]	; (8001b70 <COMPASSACCELERO_IO_ITConfig+0x54>)
 8001b2c:	f043 0310 	orr.w	r3, r3, #16
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <COMPASSACCELERO_IO_ITConfig+0x54>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0310 	and.w	r3, r3, #16
 8001b3a:	603b      	str	r3, [r7, #0]
 8001b3c:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8001b3e:	2330      	movs	r3, #48	; 0x30
 8001b40:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8001b42:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <COMPASSACCELERO_IO_ITConfig+0x58>)
 8001b44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001b46:	2302      	movs	r3, #2
 8001b48:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	4619      	mov	r1, r3
 8001b52:	4809      	ldr	r0, [pc, #36]	; (8001b78 <COMPASSACCELERO_IO_ITConfig+0x5c>)
 8001b54:	f000 fa1a 	bl	8001f8c <HAL_GPIO_Init>
  
  /* Enable and set COMPASS / ACCELERO Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	210f      	movs	r1, #15
 8001b5c:	200a      	movs	r0, #10
 8001b5e:	f000 f9eb 	bl	8001f38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 8001b62:	200a      	movs	r0, #10
 8001b64:	f000 fa04 	bl	8001f70 <HAL_NVIC_EnableIRQ>
}
 8001b68:	bf00      	nop
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40023800 	.word	0x40023800
 8001b74:	10110000 	.word	0x10110000
 8001b78:	40021000 	.word	0x40021000

08001b7c <COMPASSACCELERO_IO_Write>:
  * @param  DeviceAddr: the slave address to be programmed
  * @param  RegisterAddr: the COMPASS / ACCELERO register to be written
  * @param  Value: Data to be written
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	80fb      	strh	r3, [r7, #6]
 8001b86:	460b      	mov	r3, r1
 8001b88:	717b      	strb	r3, [r7, #5]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	713b      	strb	r3, [r7, #4]
  /* Call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 8001b8e:	793a      	ldrb	r2, [r7, #4]
 8001b90:	7979      	ldrb	r1, [r7, #5]
 8001b92:	88fb      	ldrh	r3, [r7, #6]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fee3 	bl	8001960 <I2Cx_WriteData>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr: the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr: the COMPASS / ACCELERO internal address register to read from
  * @retval COMPASS / ACCELERO register value
  */
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	4603      	mov	r3, r0
 8001baa:	460a      	mov	r2, r1
 8001bac:	80fb      	strh	r3, [r7, #6]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	717b      	strb	r3, [r7, #5]
  /* Call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8001bb2:	797a      	ldrb	r2, [r7, #5]
 8001bb4:	88fb      	ldrh	r3, [r7, #6]
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fef9 	bl	80019b0 <I2Cx_ReadData>
 8001bbe:	4603      	mov	r3, r0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <BSP_ACCELERO_Init>:
/**
  * @brief  Set Accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         LSM303DLHC_InitStructure;
  ACCELERO_FilterConfigTypeDef LSM303DLHC_FilterStructure = {0,0,0,0};
 8001bd6:	1d3b      	adds	r3, r7, #4
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	809a      	strh	r2, [r3, #4]
  
  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 8001bde:	4b2e      	ldr	r3, [pc, #184]	; (8001c98 <BSP_ACCELERO_Init+0xd0>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	4798      	blx	r3
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b33      	cmp	r3, #51	; 0x33
 8001be8:	d14f      	bne.n	8001c8a <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the Accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 8001bea:	4b2c      	ldr	r3, [pc, #176]	; (8001c9c <BSP_ACCELERO_Init+0xd4>)
 8001bec:	4a2a      	ldr	r2, [pc, #168]	; (8001c98 <BSP_ACCELERO_Init+0xd0>)
 8001bee:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the Accelerometer structure */
    LSM303DLHC_InitStructure.Power_Mode = LSM303DLHC_NORMAL_MODE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	733b      	strb	r3, [r7, #12]
    LSM303DLHC_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 8001bf4:	2340      	movs	r3, #64	; 0x40
 8001bf6:	737b      	strb	r3, [r7, #13]
    LSM303DLHC_InitStructure.Axes_Enable = LSM303DLHC_AXES_ENABLE;
 8001bf8:	2307      	movs	r3, #7
 8001bfa:	73bb      	strb	r3, [r7, #14]
    LSM303DLHC_InitStructure.AccFull_Scale = LSM303DLHC_FULLSCALE_2G;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	74bb      	strb	r3, [r7, #18]
    LSM303DLHC_InitStructure.BlockData_Update = LSM303DLHC_BlockUpdate_Continous;
 8001c00:	2300      	movs	r3, #0
 8001c02:	743b      	strb	r3, [r7, #16]
    LSM303DLHC_InitStructure.Endianness = LSM303DLHC_BLE_LSB;
 8001c04:	2300      	movs	r3, #0
 8001c06:	747b      	strb	r3, [r7, #17]
    LSM303DLHC_InitStructure.High_Resolution = LSM303DLHC_HR_ENABLE;
 8001c08:	2308      	movs	r3, #8
 8001c0a:	73fb      	strb	r3, [r7, #15]
    
    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (LSM303DLHC_InitStructure.Power_Mode | LSM303DLHC_InitStructure.AccOutput_DataRate | \
 8001c0c:	7b3a      	ldrb	r2, [r7, #12]
 8001c0e:	7b7b      	ldrb	r3, [r7, #13]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	b2da      	uxtb	r2, r3
                       LSM303DLHC_InitStructure.Axes_Enable);
 8001c14:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (LSM303DLHC_InitStructure.Power_Mode | LSM303DLHC_InitStructure.AccOutput_DataRate | \
 8001c16:	4313      	orrs	r3, r2
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	8abb      	ldrh	r3, [r7, #20]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	82bb      	strh	r3, [r7, #20]
    
    ctrl |= ((LSM303DLHC_InitStructure.BlockData_Update | LSM303DLHC_InitStructure.Endianness | \
 8001c22:	7c3a      	ldrb	r2, [r7, #16]
 8001c24:	7c7b      	ldrb	r3, [r7, #17]
                      LSM303DLHC_InitStructure.AccFull_Scale | LSM303DLHC_InitStructure.High_Resolution) << 8);
 8001c26:	4313      	orrs	r3, r2
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	7cbb      	ldrb	r3, [r7, #18]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	021b      	lsls	r3, r3, #8
    ctrl |= ((LSM303DLHC_InitStructure.BlockData_Update | LSM303DLHC_InitStructure.Endianness | \
 8001c38:	b21a      	sxth	r2, r3
 8001c3a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	b21b      	sxth	r3, r3
 8001c42:	82bb      	strh	r3, [r7, #20]
    
    /* Configure the Accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001c44:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <BSP_ACCELERO_Init+0xd4>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	8aba      	ldrh	r2, [r7, #20]
 8001c4c:	4610      	mov	r0, r2
 8001c4e:	4798      	blx	r3
    
    /* Fill the Accelerometer LPF structure */
    LSM303DLHC_FilterStructure.HighPassFilter_Mode_Selection =LSM303DLHC_HPM_NORMAL_MODE;
 8001c50:	2380      	movs	r3, #128	; 0x80
 8001c52:	713b      	strb	r3, [r7, #4]
    LSM303DLHC_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 8001c54:	2310      	movs	r3, #16
 8001c56:	717b      	strb	r3, [r7, #5]
    LSM303DLHC_FilterStructure.HighPassFilter_AOI1 = LSM303DLHC_HPF_AOI1_DISABLE;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	71bb      	strb	r3, [r7, #6]
    LSM303DLHC_FilterStructure.HighPassFilter_AOI2 = LSM303DLHC_HPF_AOI2_DISABLE;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	71fb      	strb	r3, [r7, #7]
    
    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (LSM303DLHC_FilterStructure.HighPassFilter_Mode_Selection |\
 8001c60:	793a      	ldrb	r2, [r7, #4]
                      LSM303DLHC_FilterStructure.HighPassFilter_CutOff_Frequency|\
 8001c62:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (LSM303DLHC_FilterStructure.HighPassFilter_Mode_Selection |\
 8001c64:	4313      	orrs	r3, r2
 8001c66:	b2da      	uxtb	r2, r3
                      LSM303DLHC_FilterStructure.HighPassFilter_AOI1|\
 8001c68:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (LSM303DLHC_FilterStructure.HighPassFilter_Mode_Selection |\
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	b2da      	uxtb	r2, r3
                      LSM303DLHC_FilterStructure.HighPassFilter_AOI2);
 8001c6e:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (LSM303DLHC_FilterStructure.HighPassFilter_Mode_Selection |\
 8001c70:	4313      	orrs	r3, r2
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	82bb      	strh	r3, [r7, #20]

    /* Configure the Accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <BSP_ACCELERO_Init+0xd4>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7c:	8aba      	ldrh	r2, [r7, #20]
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	4610      	mov	r0, r2
 8001c82:	4798      	blx	r3

    ret = ACCELERO_OK;
 8001c84:	2300      	movs	r3, #0
 8001c86:	75fb      	strb	r3, [r7, #23]
 8001c88:	e001      	b.n	8001c8e <BSP_ACCELERO_Init+0xc6>
  }
  else
  {
    ret = ACCELERO_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8001c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000004 	.word	0x20000004
 8001c9c:	20000120 	.word	0x20000120

08001ca0 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == I2S3)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <HAL_I2S_TxCpltCallback+0x20>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d101      	bne.n	8001cb6 <HAL_I2S_TxCpltCallback+0x16>
  {
    /* Call the user function which will manage directly transfer complete */  
    BSP_AUDIO_OUT_TransferComplete_CallBack();       
 8001cb2:	f000 f807 	bl	8001cc4 <BSP_AUDIO_OUT_TransferComplete_CallBack>
  }
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40003c00 	.word	0x40003c00

08001cc4 <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Rx Transfer completed callbacks
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8001ce8:	f000 f804 	bl	8001cf4 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <BSP_AUDIO_IN_Error_Callback>:

/**
  * @brief  Audio IN Error callback function.
  */
__weak void BSP_AUDIO_IN_Error_Callback(void)
{   
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8001d06:	bf00      	nop
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f411e_discovery_audio.h) */ 
  if(hi2s->Instance == I2S3)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a07      	ldr	r2, [pc, #28]	; (8001d3c <HAL_I2S_ErrorCallback+0x2c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d101      	bne.n	8001d26 <HAL_I2S_ErrorCallback+0x16>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8001d22:	f7ff ffd6 	bl	8001cd2 <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a05      	ldr	r2, [pc, #20]	; (8001d40 <HAL_I2S_ErrorCallback+0x30>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d101      	bne.n	8001d34 <HAL_I2S_ErrorCallback+0x24>
  {
    BSP_AUDIO_IN_Error_Callback();
 8001d30:	f7ff ffe7 	bl	8001d02 <BSP_AUDIO_IN_Error_Callback>
  }
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40003c00 	.word	0x40003c00
 8001d40:	40003800 	.word	0x40003800

08001d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d48:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <HAL_Init+0x40>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a0d      	ldr	r2, [pc, #52]	; (8001d84 <HAL_Init+0x40>)
 8001d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d54:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <HAL_Init+0x40>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <HAL_Init+0x40>)
 8001d5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d60:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <HAL_Init+0x40>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a07      	ldr	r2, [pc, #28]	; (8001d84 <HAL_Init+0x40>)
 8001d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d6c:	2003      	movs	r0, #3
 8001d6e:	f000 f8d8 	bl	8001f22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d72:	2000      	movs	r0, #0
 8001d74:	f7ff fa16 	bl	80011a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d78:	f7ff f824 	bl	8000dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40023c00 	.word	0x40023c00

08001d88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_IncTick+0x20>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	461a      	mov	r2, r3
 8001d92:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_IncTick+0x24>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4413      	add	r3, r2
 8001d98:	4a04      	ldr	r2, [pc, #16]	; (8001dac <HAL_IncTick+0x24>)
 8001d9a:	6013      	str	r3, [r2, #0]
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	2000003c 	.word	0x2000003c
 8001dac:	20009014 	.word	0x20009014

08001db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return uwTick;
 8001db4:	4b03      	ldr	r3, [pc, #12]	; (8001dc4 <HAL_GetTick+0x14>)
 8001db6:	681b      	ldr	r3, [r3, #0]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	20009014 	.word	0x20009014

08001dc8 <__NVIC_SetPriorityGrouping>:
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <__NVIC_SetPriorityGrouping+0x44>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001de4:	4013      	ands	r3, r2
 8001de6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfa:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <__NVIC_SetPriorityGrouping+0x44>)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	60d3      	str	r3, [r2, #12]
}
 8001e00:	bf00      	nop
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <__NVIC_GetPriorityGrouping>:
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e14:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <__NVIC_GetPriorityGrouping+0x18>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	0a1b      	lsrs	r3, r3, #8
 8001e1a:	f003 0307 	and.w	r3, r3, #7
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <__NVIC_EnableIRQ>:
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	db0b      	blt.n	8001e56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	f003 021f 	and.w	r2, r3, #31
 8001e44:	4907      	ldr	r1, [pc, #28]	; (8001e64 <__NVIC_EnableIRQ+0x38>)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	095b      	lsrs	r3, r3, #5
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	e000e100 	.word	0xe000e100

08001e68 <__NVIC_SetPriority>:
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	6039      	str	r1, [r7, #0]
 8001e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	db0a      	blt.n	8001e92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	490c      	ldr	r1, [pc, #48]	; (8001eb4 <__NVIC_SetPriority+0x4c>)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	0112      	lsls	r2, r2, #4
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e90:	e00a      	b.n	8001ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	4908      	ldr	r1, [pc, #32]	; (8001eb8 <__NVIC_SetPriority+0x50>)
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	3b04      	subs	r3, #4
 8001ea0:	0112      	lsls	r2, r2, #4
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	761a      	strb	r2, [r3, #24]
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000e100 	.word	0xe000e100
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <NVIC_EncodePriority>:
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b089      	sub	sp, #36	; 0x24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f1c3 0307 	rsb	r3, r3, #7
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	bf28      	it	cs
 8001eda:	2304      	movcs	r3, #4
 8001edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	2b06      	cmp	r3, #6
 8001ee4:	d902      	bls.n	8001eec <NVIC_EncodePriority+0x30>
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3b03      	subs	r3, #3
 8001eea:	e000      	b.n	8001eee <NVIC_EncodePriority+0x32>
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43da      	mvns	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	401a      	ands	r2, r3
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f04:	f04f 31ff 	mov.w	r1, #4294967295
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0e:	43d9      	mvns	r1, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f14:	4313      	orrs	r3, r2
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3724      	adds	r7, #36	; 0x24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff ff4c 	bl	8001dc8 <__NVIC_SetPriorityGrouping>
}
 8001f30:	bf00      	nop
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
 8001f44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f4a:	f7ff ff61 	bl	8001e10 <__NVIC_GetPriorityGrouping>
 8001f4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	68b9      	ldr	r1, [r7, #8]
 8001f54:	6978      	ldr	r0, [r7, #20]
 8001f56:	f7ff ffb1 	bl	8001ebc <NVIC_EncodePriority>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f60:	4611      	mov	r1, r2
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff ff80 	bl	8001e68 <__NVIC_SetPriority>
}
 8001f68:	bf00      	nop
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff ff54 	bl	8001e2c <__NVIC_EnableIRQ>
}
 8001f84:	bf00      	nop
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	; 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	e159      	b.n	800225c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fa8:	2201      	movs	r2, #1
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	f040 8148 	bne.w	8002256 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_Init+0x4a>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b12      	cmp	r3, #18
 8001fd4:	d123      	bne.n	800201e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	08da      	lsrs	r2, r3, #3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3208      	adds	r2, #8
 8001fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	220f      	movs	r2, #15
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	691a      	ldr	r2, [r3, #16]
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4313      	orrs	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	08da      	lsrs	r2, r3, #3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3208      	adds	r2, #8
 8002018:	69b9      	ldr	r1, [r7, #24]
 800201a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	2203      	movs	r2, #3
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4013      	ands	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f003 0203 	and.w	r2, r3, #3
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d00b      	beq.n	8002072 <HAL_GPIO_Init+0xe6>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b02      	cmp	r3, #2
 8002060:	d007      	beq.n	8002072 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002066:	2b11      	cmp	r3, #17
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b12      	cmp	r3, #18
 8002070:	d130      	bne.n	80020d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	2203      	movs	r2, #3
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020a8:	2201      	movs	r2, #1
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	091b      	lsrs	r3, r3, #4
 80020be:	f003 0201 	and.w	r2, r3, #1
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	2203      	movs	r2, #3
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 80a2 	beq.w	8002256 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	4b56      	ldr	r3, [pc, #344]	; (8002270 <HAL_GPIO_Init+0x2e4>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211a:	4a55      	ldr	r2, [pc, #340]	; (8002270 <HAL_GPIO_Init+0x2e4>)
 800211c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002120:	6453      	str	r3, [r2, #68]	; 0x44
 8002122:	4b53      	ldr	r3, [pc, #332]	; (8002270 <HAL_GPIO_Init+0x2e4>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800212e:	4a51      	ldr	r2, [pc, #324]	; (8002274 <HAL_GPIO_Init+0x2e8>)
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	089b      	lsrs	r3, r3, #2
 8002134:	3302      	adds	r3, #2
 8002136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	220f      	movs	r2, #15
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a48      	ldr	r2, [pc, #288]	; (8002278 <HAL_GPIO_Init+0x2ec>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d019      	beq.n	800218e <HAL_GPIO_Init+0x202>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a47      	ldr	r2, [pc, #284]	; (800227c <HAL_GPIO_Init+0x2f0>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d013      	beq.n	800218a <HAL_GPIO_Init+0x1fe>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a46      	ldr	r2, [pc, #280]	; (8002280 <HAL_GPIO_Init+0x2f4>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d00d      	beq.n	8002186 <HAL_GPIO_Init+0x1fa>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a45      	ldr	r2, [pc, #276]	; (8002284 <HAL_GPIO_Init+0x2f8>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d007      	beq.n	8002182 <HAL_GPIO_Init+0x1f6>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a44      	ldr	r2, [pc, #272]	; (8002288 <HAL_GPIO_Init+0x2fc>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d101      	bne.n	800217e <HAL_GPIO_Init+0x1f2>
 800217a:	2304      	movs	r3, #4
 800217c:	e008      	b.n	8002190 <HAL_GPIO_Init+0x204>
 800217e:	2307      	movs	r3, #7
 8002180:	e006      	b.n	8002190 <HAL_GPIO_Init+0x204>
 8002182:	2303      	movs	r3, #3
 8002184:	e004      	b.n	8002190 <HAL_GPIO_Init+0x204>
 8002186:	2302      	movs	r3, #2
 8002188:	e002      	b.n	8002190 <HAL_GPIO_Init+0x204>
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <HAL_GPIO_Init+0x204>
 800218e:	2300      	movs	r3, #0
 8002190:	69fa      	ldr	r2, [r7, #28]
 8002192:	f002 0203 	and.w	r2, r2, #3
 8002196:	0092      	lsls	r2, r2, #2
 8002198:	4093      	lsls	r3, r2
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021a0:	4934      	ldr	r1, [pc, #208]	; (8002274 <HAL_GPIO_Init+0x2e8>)
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	089b      	lsrs	r3, r3, #2
 80021a6:	3302      	adds	r3, #2
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021ae:	4b37      	ldr	r3, [pc, #220]	; (800228c <HAL_GPIO_Init+0x300>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	43db      	mvns	r3, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4013      	ands	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021d2:	4a2e      	ldr	r2, [pc, #184]	; (800228c <HAL_GPIO_Init+0x300>)
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021d8:	4b2c      	ldr	r3, [pc, #176]	; (800228c <HAL_GPIO_Init+0x300>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021fc:	4a23      	ldr	r2, [pc, #140]	; (800228c <HAL_GPIO_Init+0x300>)
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002202:	4b22      	ldr	r3, [pc, #136]	; (800228c <HAL_GPIO_Init+0x300>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	43db      	mvns	r3, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4013      	ands	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002226:	4a19      	ldr	r2, [pc, #100]	; (800228c <HAL_GPIO_Init+0x300>)
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800222c:	4b17      	ldr	r3, [pc, #92]	; (800228c <HAL_GPIO_Init+0x300>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002250:	4a0e      	ldr	r2, [pc, #56]	; (800228c <HAL_GPIO_Init+0x300>)
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	3301      	adds	r3, #1
 800225a:	61fb      	str	r3, [r7, #28]
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	2b0f      	cmp	r3, #15
 8002260:	f67f aea2 	bls.w	8001fa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002264:	bf00      	nop
 8002266:	3724      	adds	r7, #36	; 0x24
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	40023800 	.word	0x40023800
 8002274:	40013800 	.word	0x40013800
 8002278:	40020000 	.word	0x40020000
 800227c:	40020400 	.word	0x40020400
 8002280:	40020800 	.word	0x40020800
 8002284:	40020c00 	.word	0x40020c00
 8002288:	40021000 	.word	0x40021000
 800228c:	40013c00 	.word	0x40013c00

08002290 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002290:	b480      	push	{r7}
 8002292:	b087      	sub	sp, #28
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800229a:	2300      	movs	r3, #0
 800229c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	e0bb      	b.n	8002424 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022ac:	2201      	movs	r2, #1
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4013      	ands	r3, r2
 80022bc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	f040 80ab 	bne.w	800241e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80022c8:	4a5b      	ldr	r2, [pc, #364]	; (8002438 <HAL_GPIO_DeInit+0x1a8>)
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	089b      	lsrs	r3, r3, #2
 80022ce:	3302      	adds	r3, #2
 80022d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	220f      	movs	r2, #15
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	4013      	ands	r3, r2
 80022e8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a53      	ldr	r2, [pc, #332]	; (800243c <HAL_GPIO_DeInit+0x1ac>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d019      	beq.n	8002326 <HAL_GPIO_DeInit+0x96>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a52      	ldr	r2, [pc, #328]	; (8002440 <HAL_GPIO_DeInit+0x1b0>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d013      	beq.n	8002322 <HAL_GPIO_DeInit+0x92>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a51      	ldr	r2, [pc, #324]	; (8002444 <HAL_GPIO_DeInit+0x1b4>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d00d      	beq.n	800231e <HAL_GPIO_DeInit+0x8e>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a50      	ldr	r2, [pc, #320]	; (8002448 <HAL_GPIO_DeInit+0x1b8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d007      	beq.n	800231a <HAL_GPIO_DeInit+0x8a>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a4f      	ldr	r2, [pc, #316]	; (800244c <HAL_GPIO_DeInit+0x1bc>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d101      	bne.n	8002316 <HAL_GPIO_DeInit+0x86>
 8002312:	2304      	movs	r3, #4
 8002314:	e008      	b.n	8002328 <HAL_GPIO_DeInit+0x98>
 8002316:	2307      	movs	r3, #7
 8002318:	e006      	b.n	8002328 <HAL_GPIO_DeInit+0x98>
 800231a:	2303      	movs	r3, #3
 800231c:	e004      	b.n	8002328 <HAL_GPIO_DeInit+0x98>
 800231e:	2302      	movs	r3, #2
 8002320:	e002      	b.n	8002328 <HAL_GPIO_DeInit+0x98>
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <HAL_GPIO_DeInit+0x98>
 8002326:	2300      	movs	r3, #0
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	f002 0203 	and.w	r2, r2, #3
 800232e:	0092      	lsls	r2, r2, #2
 8002330:	4093      	lsls	r3, r2
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	429a      	cmp	r2, r3
 8002336:	d132      	bne.n	800239e <HAL_GPIO_DeInit+0x10e>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	220f      	movs	r2, #15
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002348:	4a3b      	ldr	r2, [pc, #236]	; (8002438 <HAL_GPIO_DeInit+0x1a8>)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	089b      	lsrs	r3, r3, #2
 800234e:	3302      	adds	r3, #2
 8002350:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	43da      	mvns	r2, r3
 8002358:	4837      	ldr	r0, [pc, #220]	; (8002438 <HAL_GPIO_DeInit+0x1a8>)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	089b      	lsrs	r3, r3, #2
 800235e:	400a      	ands	r2, r1
 8002360:	3302      	adds	r3, #2
 8002362:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002366:	4b3a      	ldr	r3, [pc, #232]	; (8002450 <HAL_GPIO_DeInit+0x1c0>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	43db      	mvns	r3, r3
 800236e:	4938      	ldr	r1, [pc, #224]	; (8002450 <HAL_GPIO_DeInit+0x1c0>)
 8002370:	4013      	ands	r3, r2
 8002372:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002374:	4b36      	ldr	r3, [pc, #216]	; (8002450 <HAL_GPIO_DeInit+0x1c0>)
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	43db      	mvns	r3, r3
 800237c:	4934      	ldr	r1, [pc, #208]	; (8002450 <HAL_GPIO_DeInit+0x1c0>)
 800237e:	4013      	ands	r3, r2
 8002380:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002382:	4b33      	ldr	r3, [pc, #204]	; (8002450 <HAL_GPIO_DeInit+0x1c0>)
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	43db      	mvns	r3, r3
 800238a:	4931      	ldr	r1, [pc, #196]	; (8002450 <HAL_GPIO_DeInit+0x1c0>)
 800238c:	4013      	ands	r3, r2
 800238e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002390:	4b2f      	ldr	r3, [pc, #188]	; (8002450 <HAL_GPIO_DeInit+0x1c0>)
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	43db      	mvns	r3, r3
 8002398:	492d      	ldr	r1, [pc, #180]	; (8002450 <HAL_GPIO_DeInit+0x1c0>)
 800239a:	4013      	ands	r3, r2
 800239c:	60cb      	str	r3, [r1, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	2103      	movs	r1, #3
 80023a8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	401a      	ands	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	08da      	lsrs	r2, r3, #3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3208      	adds	r2, #8
 80023bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	220f      	movs	r2, #15
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	08d2      	lsrs	r2, r2, #3
 80023d4:	4019      	ands	r1, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3208      	adds	r2, #8
 80023da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	2103      	movs	r1, #3
 80023e8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	401a      	ands	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	2101      	movs	r1, #1
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	401a      	ands	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	2103      	movs	r1, #3
 8002412:	fa01 f303 	lsl.w	r3, r1, r3
 8002416:	43db      	mvns	r3, r3
 8002418:	401a      	ands	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	60da      	str	r2, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	3301      	adds	r3, #1
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	2b0f      	cmp	r3, #15
 8002428:	f67f af40 	bls.w	80022ac <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800242c:	bf00      	nop
 800242e:	371c      	adds	r7, #28
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	40013800 	.word	0x40013800
 800243c:	40020000 	.word	0x40020000
 8002440:	40020400 	.word	0x40020400
 8002444:	40020800 	.word	0x40020800
 8002448:	40020c00 	.word	0x40020c00
 800244c:	40021000 	.word	0x40021000
 8002450:	40013c00 	.word	0x40013c00

08002454 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691a      	ldr	r2, [r3, #16]
 8002464:	887b      	ldrh	r3, [r7, #2]
 8002466:	4013      	ands	r3, r2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d002      	beq.n	8002472 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800246c:	2301      	movs	r3, #1
 800246e:	73fb      	strb	r3, [r7, #15]
 8002470:	e001      	b.n	8002476 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002472:	2300      	movs	r3, #0
 8002474:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002476:	7bfb      	ldrb	r3, [r7, #15]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	807b      	strh	r3, [r7, #2]
 8002490:	4613      	mov	r3, r2
 8002492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002494:	787b      	ldrb	r3, [r7, #1]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800249a:	887a      	ldrh	r2, [r7, #2]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024a0:	e003      	b.n	80024aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024a2:	887b      	ldrh	r3, [r7, #2]
 80024a4:	041a      	lsls	r2, r3, #16
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	619a      	str	r2, [r3, #24]
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	460b      	mov	r3, r1
 80024c0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	695a      	ldr	r2, [r3, #20]
 80024c6:	887b      	ldrh	r3, [r7, #2]
 80024c8:	401a      	ands	r2, r3
 80024ca:	887b      	ldrh	r3, [r7, #2]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d104      	bne.n	80024da <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80024d0:	887b      	ldrh	r3, [r7, #2]
 80024d2:	041a      	lsls	r2, r3, #16
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80024d8:	e002      	b.n	80024e0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80024da:	887a      	ldrh	r2, [r7, #2]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	619a      	str	r2, [r3, #24]
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80024f6:	4b08      	ldr	r3, [pc, #32]	; (8002518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024f8:	695a      	ldr	r2, [r3, #20]
 80024fa:	88fb      	ldrh	r3, [r7, #6]
 80024fc:	4013      	ands	r3, r2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d006      	beq.n	8002510 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002502:	4a05      	ldr	r2, [pc, #20]	; (8002518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002504:	88fb      	ldrh	r3, [r7, #6]
 8002506:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002508:	88fb      	ldrh	r3, [r7, #6]
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe f8dc 	bl	80006c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002510:	bf00      	nop
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40013c00 	.word	0x40013c00

0800251c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e10f      	b.n	800274e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d106      	bne.n	8002548 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7fe fc6a 	bl	8000e1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2224      	movs	r2, #36	; 0x24
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0201 	bic.w	r2, r2, #1
 800255e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002560:	f002 f824 	bl	80045ac <HAL_RCC_GetPCLK1Freq>
 8002564:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	4a7b      	ldr	r2, [pc, #492]	; (8002758 <HAL_I2C_Init+0x23c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d807      	bhi.n	8002580 <HAL_I2C_Init+0x64>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4a7a      	ldr	r2, [pc, #488]	; (800275c <HAL_I2C_Init+0x240>)
 8002574:	4293      	cmp	r3, r2
 8002576:	bf94      	ite	ls
 8002578:	2301      	movls	r3, #1
 800257a:	2300      	movhi	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	e006      	b.n	800258e <HAL_I2C_Init+0x72>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4a77      	ldr	r2, [pc, #476]	; (8002760 <HAL_I2C_Init+0x244>)
 8002584:	4293      	cmp	r3, r2
 8002586:	bf94      	ite	ls
 8002588:	2301      	movls	r3, #1
 800258a:	2300      	movhi	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e0db      	b.n	800274e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	4a72      	ldr	r2, [pc, #456]	; (8002764 <HAL_I2C_Init+0x248>)
 800259a:	fba2 2303 	umull	r2, r3, r2, r3
 800259e:	0c9b      	lsrs	r3, r3, #18
 80025a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	4a64      	ldr	r2, [pc, #400]	; (8002758 <HAL_I2C_Init+0x23c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d802      	bhi.n	80025d0 <HAL_I2C_Init+0xb4>
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	3301      	adds	r3, #1
 80025ce:	e009      	b.n	80025e4 <HAL_I2C_Init+0xc8>
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025d6:	fb02 f303 	mul.w	r3, r2, r3
 80025da:	4a63      	ldr	r2, [pc, #396]	; (8002768 <HAL_I2C_Init+0x24c>)
 80025dc:	fba2 2303 	umull	r2, r3, r2, r3
 80025e0:	099b      	lsrs	r3, r3, #6
 80025e2:	3301      	adds	r3, #1
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6812      	ldr	r2, [r2, #0]
 80025e8:	430b      	orrs	r3, r1
 80025ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	4956      	ldr	r1, [pc, #344]	; (8002758 <HAL_I2C_Init+0x23c>)
 8002600:	428b      	cmp	r3, r1
 8002602:	d80d      	bhi.n	8002620 <HAL_I2C_Init+0x104>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	1e59      	subs	r1, r3, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002612:	3301      	adds	r3, #1
 8002614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002618:	2b04      	cmp	r3, #4
 800261a:	bf38      	it	cc
 800261c:	2304      	movcc	r3, #4
 800261e:	e04f      	b.n	80026c0 <HAL_I2C_Init+0x1a4>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d111      	bne.n	800264c <HAL_I2C_Init+0x130>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	1e58      	subs	r0, r3, #1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6859      	ldr	r1, [r3, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	440b      	add	r3, r1
 8002636:	fbb0 f3f3 	udiv	r3, r0, r3
 800263a:	3301      	adds	r3, #1
 800263c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002640:	2b00      	cmp	r3, #0
 8002642:	bf0c      	ite	eq
 8002644:	2301      	moveq	r3, #1
 8002646:	2300      	movne	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	e012      	b.n	8002672 <HAL_I2C_Init+0x156>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	1e58      	subs	r0, r3, #1
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6859      	ldr	r1, [r3, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	0099      	lsls	r1, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002662:	3301      	adds	r3, #1
 8002664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002668:	2b00      	cmp	r3, #0
 800266a:	bf0c      	ite	eq
 800266c:	2301      	moveq	r3, #1
 800266e:	2300      	movne	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_I2C_Init+0x15e>
 8002676:	2301      	movs	r3, #1
 8002678:	e022      	b.n	80026c0 <HAL_I2C_Init+0x1a4>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10e      	bne.n	80026a0 <HAL_I2C_Init+0x184>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	1e58      	subs	r0, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6859      	ldr	r1, [r3, #4]
 800268a:	460b      	mov	r3, r1
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	440b      	add	r3, r1
 8002690:	fbb0 f3f3 	udiv	r3, r0, r3
 8002694:	3301      	adds	r3, #1
 8002696:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800269a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800269e:	e00f      	b.n	80026c0 <HAL_I2C_Init+0x1a4>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	1e58      	subs	r0, r3, #1
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6859      	ldr	r1, [r3, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	0099      	lsls	r1, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026b6:	3301      	adds	r3, #1
 80026b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	6809      	ldr	r1, [r1, #0]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69da      	ldr	r2, [r3, #28]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6911      	ldr	r1, [r2, #16]
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	68d2      	ldr	r2, [r2, #12]
 80026fa:	4311      	orrs	r1, r2
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6812      	ldr	r2, [r2, #0]
 8002700:	430b      	orrs	r3, r1
 8002702:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695a      	ldr	r2, [r3, #20]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0201 	orr.w	r2, r2, #1
 800272e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2220      	movs	r2, #32
 800273a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	000186a0 	.word	0x000186a0
 800275c:	001e847f 	.word	0x001e847f
 8002760:	003d08ff 	.word	0x003d08ff
 8002764:	431bde83 	.word	0x431bde83
 8002768:	10624dd3 	.word	0x10624dd3

0800276c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e021      	b.n	80027c2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2224      	movs	r2, #36	; 0x24
 8002782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0201 	bic.w	r2, r2, #1
 8002794:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7fe fb88 	bl	8000eac <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b088      	sub	sp, #32
 80027d0:	af02      	add	r7, sp, #8
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	4608      	mov	r0, r1
 80027d6:	4611      	mov	r1, r2
 80027d8:	461a      	mov	r2, r3
 80027da:	4603      	mov	r3, r0
 80027dc:	817b      	strh	r3, [r7, #10]
 80027de:	460b      	mov	r3, r1
 80027e0:	813b      	strh	r3, [r7, #8]
 80027e2:	4613      	mov	r3, r2
 80027e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027e6:	f7ff fae3 	bl	8001db0 <HAL_GetTick>
 80027ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b20      	cmp	r3, #32
 80027f6:	f040 80d9 	bne.w	80029ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	2319      	movs	r3, #25
 8002800:	2201      	movs	r2, #1
 8002802:	496d      	ldr	r1, [pc, #436]	; (80029b8 <HAL_I2C_Mem_Write+0x1ec>)
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 fc69 	bl	80030dc <I2C_WaitOnFlagUntilTimeout>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002810:	2302      	movs	r3, #2
 8002812:	e0cc      	b.n	80029ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800281a:	2b01      	cmp	r3, #1
 800281c:	d101      	bne.n	8002822 <HAL_I2C_Mem_Write+0x56>
 800281e:	2302      	movs	r3, #2
 8002820:	e0c5      	b.n	80029ae <HAL_I2C_Mem_Write+0x1e2>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b01      	cmp	r3, #1
 8002836:	d007      	beq.n	8002848 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0201 	orr.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002856:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2221      	movs	r2, #33	; 0x21
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2240      	movs	r2, #64	; 0x40
 8002864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a3a      	ldr	r2, [r7, #32]
 8002872:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002878:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287e:	b29a      	uxth	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4a4d      	ldr	r2, [pc, #308]	; (80029bc <HAL_I2C_Mem_Write+0x1f0>)
 8002888:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800288a:	88f8      	ldrh	r0, [r7, #6]
 800288c:	893a      	ldrh	r2, [r7, #8]
 800288e:	8979      	ldrh	r1, [r7, #10]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	9301      	str	r3, [sp, #4]
 8002894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	4603      	mov	r3, r0
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 fac4 	bl	8002e28 <I2C_RequestMemoryWrite>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d052      	beq.n	800294c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e081      	b.n	80029ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 fcea 	bl	8003288 <I2C_WaitOnTXEFlagUntilTimeout>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00d      	beq.n	80028d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d107      	bne.n	80028d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e06b      	b.n	80029ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	781a      	ldrb	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b04      	cmp	r3, #4
 8002912:	d11b      	bne.n	800294c <HAL_I2C_Mem_Write+0x180>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002918:	2b00      	cmp	r3, #0
 800291a:	d017      	beq.n	800294c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	781a      	ldrb	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002936:	3b01      	subs	r3, #1
 8002938:	b29a      	uxth	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002942:	b29b      	uxth	r3, r3
 8002944:	3b01      	subs	r3, #1
 8002946:	b29a      	uxth	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1aa      	bne.n	80028aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 fcd6 	bl	800330a <I2C_WaitOnBTFFlagUntilTimeout>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00d      	beq.n	8002980 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	2b04      	cmp	r3, #4
 800296a:	d107      	bne.n	800297c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800297a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e016      	b.n	80029ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800298e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2220      	movs	r2, #32
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029a8:	2300      	movs	r3, #0
 80029aa:	e000      	b.n	80029ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80029ac:	2302      	movs	r3, #2
  }
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	00100002 	.word	0x00100002
 80029bc:	ffff0000 	.word	0xffff0000

080029c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08c      	sub	sp, #48	; 0x30
 80029c4:	af02      	add	r7, sp, #8
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	4608      	mov	r0, r1
 80029ca:	4611      	mov	r1, r2
 80029cc:	461a      	mov	r2, r3
 80029ce:	4603      	mov	r3, r0
 80029d0:	817b      	strh	r3, [r7, #10]
 80029d2:	460b      	mov	r3, r1
 80029d4:	813b      	strh	r3, [r7, #8]
 80029d6:	4613      	mov	r3, r2
 80029d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029da:	f7ff f9e9 	bl	8001db0 <HAL_GetTick>
 80029de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b20      	cmp	r3, #32
 80029ea:	f040 8208 	bne.w	8002dfe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	2319      	movs	r3, #25
 80029f4:	2201      	movs	r2, #1
 80029f6:	497b      	ldr	r1, [pc, #492]	; (8002be4 <HAL_I2C_Mem_Read+0x224>)
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f000 fb6f 	bl	80030dc <I2C_WaitOnFlagUntilTimeout>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002a04:	2302      	movs	r3, #2
 8002a06:	e1fb      	b.n	8002e00 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <HAL_I2C_Mem_Read+0x56>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e1f4      	b.n	8002e00 <HAL_I2C_Mem_Read+0x440>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d007      	beq.n	8002a3c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0201 	orr.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2222      	movs	r2, #34	; 0x22
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2240      	movs	r2, #64	; 0x40
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4a5b      	ldr	r2, [pc, #364]	; (8002be8 <HAL_I2C_Mem_Read+0x228>)
 8002a7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a7e:	88f8      	ldrh	r0, [r7, #6]
 8002a80:	893a      	ldrh	r2, [r7, #8]
 8002a82:	8979      	ldrh	r1, [r7, #10]
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	9301      	str	r3, [sp, #4]
 8002a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 fa54 	bl	8002f3c <I2C_RequestMemoryRead>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e1b0      	b.n	8002e00 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d113      	bne.n	8002ace <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	623b      	str	r3, [r7, #32]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	623b      	str	r3, [r7, #32]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	623b      	str	r3, [r7, #32]
 8002aba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	e184      	b.n	8002dd8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d11b      	bne.n	8002b0e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	61fb      	str	r3, [r7, #28]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	61fb      	str	r3, [r7, #28]
 8002afa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	e164      	b.n	8002dd8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d11b      	bne.n	8002b4e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b24:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b36:	2300      	movs	r3, #0
 8002b38:	61bb      	str	r3, [r7, #24]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	61bb      	str	r3, [r7, #24]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	61bb      	str	r3, [r7, #24]
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	e144      	b.n	8002dd8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002b64:	e138      	b.n	8002dd8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	f200 80f1 	bhi.w	8002d52 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d123      	bne.n	8002bc0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 fc05 	bl	800338c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e139      	b.n	8002e00 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	691a      	ldr	r2, [r3, #16]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	1c5a      	adds	r2, r3, #1
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bbe:	e10b      	b.n	8002dd8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d14e      	bne.n	8002c66 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bce:	2200      	movs	r2, #0
 8002bd0:	4906      	ldr	r1, [pc, #24]	; (8002bec <HAL_I2C_Mem_Read+0x22c>)
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	f000 fa82 	bl	80030dc <I2C_WaitOnFlagUntilTimeout>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d008      	beq.n	8002bf0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e10e      	b.n	8002e00 <HAL_I2C_Mem_Read+0x440>
 8002be2:	bf00      	nop
 8002be4:	00100002 	.word	0x00100002
 8002be8:	ffff0000 	.word	0xffff0000
 8002bec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	691a      	ldr	r2, [r3, #16]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	1c5a      	adds	r2, r3, #1
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	691a      	ldr	r2, [r3, #16]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	1c5a      	adds	r2, r3, #1
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c64:	e0b8      	b.n	8002dd8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	4966      	ldr	r1, [pc, #408]	; (8002e08 <HAL_I2C_Mem_Read+0x448>)
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 fa33 	bl	80030dc <I2C_WaitOnFlagUntilTimeout>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0bf      	b.n	8002e00 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691a      	ldr	r2, [r3, #16]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc8:	2200      	movs	r2, #0
 8002cca:	494f      	ldr	r1, [pc, #316]	; (8002e08 <HAL_I2C_Mem_Read+0x448>)
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 fa05 	bl	80030dc <I2C_WaitOnFlagUntilTimeout>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e091      	b.n	8002e00 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	691a      	ldr	r2, [r3, #16]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	1c5a      	adds	r2, r3, #1
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	691a      	ldr	r2, [r3, #16]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	1c5a      	adds	r2, r3, #1
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d50:	e042      	b.n	8002dd8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 fb18 	bl	800338c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e04c      	b.n	8002e00 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	691a      	ldr	r2, [r3, #16]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	1c5a      	adds	r2, r3, #1
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d82:	3b01      	subs	r3, #1
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d118      	bne.n	8002dd8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	691a      	ldr	r2, [r3, #16]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f47f aec2 	bne.w	8002b66 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2220      	movs	r2, #32
 8002de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	e000      	b.n	8002e00 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002dfe:	2302      	movs	r3, #2
  }
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3728      	adds	r7, #40	; 0x28
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	00010004 	.word	0x00010004

08002e0c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e1a:	b2db      	uxtb	r3, r3
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b088      	sub	sp, #32
 8002e2c:	af02      	add	r7, sp, #8
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	4608      	mov	r0, r1
 8002e32:	4611      	mov	r1, r2
 8002e34:	461a      	mov	r2, r3
 8002e36:	4603      	mov	r3, r0
 8002e38:	817b      	strh	r3, [r7, #10]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	813b      	strh	r3, [r7, #8]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 f93c 	bl	80030dc <I2C_WaitOnFlagUntilTimeout>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e05f      	b.n	8002f2e <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e6e:	897b      	ldrh	r3, [r7, #10]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	461a      	mov	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	6a3a      	ldr	r2, [r7, #32]
 8002e82:	492d      	ldr	r1, [pc, #180]	; (8002f38 <I2C_RequestMemoryWrite+0x110>)
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 f980 	bl	800318a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e04c      	b.n	8002f2e <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eac:	6a39      	ldr	r1, [r7, #32]
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f9ea 	bl	8003288 <I2C_WaitOnTXEFlagUntilTimeout>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00d      	beq.n	8002ed6 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	d107      	bne.n	8002ed2 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e02b      	b.n	8002f2e <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ed6:	88fb      	ldrh	r3, [r7, #6]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d105      	bne.n	8002ee8 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002edc:	893b      	ldrh	r3, [r7, #8]
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	611a      	str	r2, [r3, #16]
 8002ee6:	e021      	b.n	8002f2c <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ee8:	893b      	ldrh	r3, [r7, #8]
 8002eea:	0a1b      	lsrs	r3, r3, #8
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef8:	6a39      	ldr	r1, [r7, #32]
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 f9c4 	bl	8003288 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00d      	beq.n	8002f22 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d107      	bne.n	8002f1e <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e005      	b.n	8002f2e <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f22:	893b      	ldrh	r3, [r7, #8]
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	00010002 	.word	0x00010002

08002f3c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b088      	sub	sp, #32
 8002f40:	af02      	add	r7, sp, #8
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	4608      	mov	r0, r1
 8002f46:	4611      	mov	r1, r2
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	817b      	strh	r3, [r7, #10]
 8002f4e:	460b      	mov	r3, r1
 8002f50:	813b      	strh	r3, [r7, #8]
 8002f52:	4613      	mov	r3, r2
 8002f54:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f64:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 f8aa 	bl	80030dc <I2C_WaitOnFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e09e      	b.n	80030d0 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f92:	897b      	ldrh	r3, [r7, #10]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	461a      	mov	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fa0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	6a3a      	ldr	r2, [r7, #32]
 8002fa6:	494c      	ldr	r1, [pc, #304]	; (80030d8 <I2C_RequestMemoryRead+0x19c>)
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 f8ee 	bl	800318a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e08b      	b.n	80030d0 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	617b      	str	r3, [r7, #20]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd0:	6a39      	ldr	r1, [r7, #32]
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 f958 	bl	8003288 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00d      	beq.n	8002ffa <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d107      	bne.n	8002ff6 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ff4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e06a      	b.n	80030d0 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ffa:	88fb      	ldrh	r3, [r7, #6]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d105      	bne.n	800300c <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003000:	893b      	ldrh	r3, [r7, #8]
 8003002:	b2da      	uxtb	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	611a      	str	r2, [r3, #16]
 800300a:	e021      	b.n	8003050 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800300c:	893b      	ldrh	r3, [r7, #8]
 800300e:	0a1b      	lsrs	r3, r3, #8
 8003010:	b29b      	uxth	r3, r3
 8003012:	b2da      	uxtb	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800301a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800301c:	6a39      	ldr	r1, [r7, #32]
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 f932 	bl	8003288 <I2C_WaitOnTXEFlagUntilTimeout>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00d      	beq.n	8003046 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	2b04      	cmp	r3, #4
 8003030:	d107      	bne.n	8003042 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003040:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e044      	b.n	80030d0 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003046:	893b      	ldrh	r3, [r7, #8]
 8003048:	b2da      	uxtb	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003052:	6a39      	ldr	r1, [r7, #32]
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 f917 	bl	8003288 <I2C_WaitOnTXEFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00d      	beq.n	800307c <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	2b04      	cmp	r3, #4
 8003066:	d107      	bne.n	8003078 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003076:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e029      	b.n	80030d0 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800308a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	2200      	movs	r2, #0
 8003094:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 f81f 	bl	80030dc <I2C_WaitOnFlagUntilTimeout>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e013      	b.n	80030d0 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80030a8:	897b      	ldrh	r3, [r7, #10]
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	f043 0301 	orr.w	r3, r3, #1
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	6a3a      	ldr	r2, [r7, #32]
 80030bc:	4906      	ldr	r1, [pc, #24]	; (80030d8 <I2C_RequestMemoryRead+0x19c>)
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f863 	bl	800318a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e000      	b.n	80030d0 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	00010002 	.word	0x00010002

080030dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	4613      	mov	r3, r2
 80030ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030ec:	e025      	b.n	800313a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f4:	d021      	beq.n	800313a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f6:	f7fe fe5b 	bl	8001db0 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d302      	bcc.n	800310c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d116      	bne.n	800313a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2220      	movs	r2, #32
 8003116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	f043 0220 	orr.w	r2, r3, #32
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e023      	b.n	8003182 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	0c1b      	lsrs	r3, r3, #16
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b01      	cmp	r3, #1
 8003142:	d10d      	bne.n	8003160 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	43da      	mvns	r2, r3
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	4013      	ands	r3, r2
 8003150:	b29b      	uxth	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	bf0c      	ite	eq
 8003156:	2301      	moveq	r3, #1
 8003158:	2300      	movne	r3, #0
 800315a:	b2db      	uxtb	r3, r3
 800315c:	461a      	mov	r2, r3
 800315e:	e00c      	b.n	800317a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	43da      	mvns	r2, r3
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	4013      	ands	r3, r2
 800316c:	b29b      	uxth	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	bf0c      	ite	eq
 8003172:	2301      	moveq	r3, #1
 8003174:	2300      	movne	r3, #0
 8003176:	b2db      	uxtb	r3, r3
 8003178:	461a      	mov	r2, r3
 800317a:	79fb      	ldrb	r3, [r7, #7]
 800317c:	429a      	cmp	r2, r3
 800317e:	d0b6      	beq.n	80030ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b084      	sub	sp, #16
 800318e:	af00      	add	r7, sp, #0
 8003190:	60f8      	str	r0, [r7, #12]
 8003192:	60b9      	str	r1, [r7, #8]
 8003194:	607a      	str	r2, [r7, #4]
 8003196:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003198:	e051      	b.n	800323e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a8:	d123      	bne.n	80031f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	f043 0204 	orr.w	r2, r3, #4
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e046      	b.n	8003280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f8:	d021      	beq.n	800323e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031fa:	f7fe fdd9 	bl	8001db0 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	429a      	cmp	r2, r3
 8003208:	d302      	bcc.n	8003210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d116      	bne.n	800323e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2220      	movs	r2, #32
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	f043 0220 	orr.w	r2, r3, #32
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e020      	b.n	8003280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	0c1b      	lsrs	r3, r3, #16
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b01      	cmp	r3, #1
 8003246:	d10c      	bne.n	8003262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	43da      	mvns	r2, r3
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	4013      	ands	r3, r2
 8003254:	b29b      	uxth	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	bf14      	ite	ne
 800325a:	2301      	movne	r3, #1
 800325c:	2300      	moveq	r3, #0
 800325e:	b2db      	uxtb	r3, r3
 8003260:	e00b      	b.n	800327a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	43da      	mvns	r2, r3
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	4013      	ands	r3, r2
 800326e:	b29b      	uxth	r3, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	bf14      	ite	ne
 8003274:	2301      	movne	r3, #1
 8003276:	2300      	moveq	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d18d      	bne.n	800319a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003294:	e02d      	b.n	80032f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 f8ce 	bl	8003438 <I2C_IsAcknowledgeFailed>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e02d      	b.n	8003302 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ac:	d021      	beq.n	80032f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ae:	f7fe fd7f 	bl	8001db0 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d302      	bcc.n	80032c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d116      	bne.n	80032f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2220      	movs	r2, #32
 80032ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	f043 0220 	orr.w	r2, r3, #32
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e007      	b.n	8003302 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fc:	2b80      	cmp	r3, #128	; 0x80
 80032fe:	d1ca      	bne.n	8003296 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b084      	sub	sp, #16
 800330e:	af00      	add	r7, sp, #0
 8003310:	60f8      	str	r0, [r7, #12]
 8003312:	60b9      	str	r1, [r7, #8]
 8003314:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003316:	e02d      	b.n	8003374 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f88d 	bl	8003438 <I2C_IsAcknowledgeFailed>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e02d      	b.n	8003384 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332e:	d021      	beq.n	8003374 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003330:	f7fe fd3e 	bl	8001db0 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	429a      	cmp	r2, r3
 800333e:	d302      	bcc.n	8003346 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d116      	bne.n	8003374 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	f043 0220 	orr.w	r2, r3, #32
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e007      	b.n	8003384 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	2b04      	cmp	r3, #4
 8003380:	d1ca      	bne.n	8003318 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003398:	e042      	b.n	8003420 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	f003 0310 	and.w	r3, r3, #16
 80033a4:	2b10      	cmp	r3, #16
 80033a6:	d119      	bne.n	80033dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f06f 0210 	mvn.w	r2, #16
 80033b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e029      	b.n	8003430 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033dc:	f7fe fce8 	bl	8001db0 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d302      	bcc.n	80033f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d116      	bne.n	8003420 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	f043 0220 	orr.w	r2, r3, #32
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e007      	b.n	8003430 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342a:	2b40      	cmp	r3, #64	; 0x40
 800342c:	d1b5      	bne.n	800339a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800344a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800344e:	d11b      	bne.n	8003488 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003458:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003474:	f043 0204 	orr.w	r2, r3, #4
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e000      	b.n	800348a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
	...

08003498 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b088      	sub	sp, #32
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e128      	b.n	80036fc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d109      	bne.n	80034ca <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a90      	ldr	r2, [pc, #576]	; (8003704 <HAL_I2S_Init+0x26c>)
 80034c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7fd fd0f 	bl	8000ee8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2202      	movs	r2, #2
 80034ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6812      	ldr	r2, [r2, #0]
 80034dc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034e0:	f023 030f 	bic.w	r3, r3, #15
 80034e4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2202      	movs	r2, #2
 80034ec:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d060      	beq.n	80035b8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d102      	bne.n	8003504 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80034fe:	2310      	movs	r3, #16
 8003500:	617b      	str	r3, [r7, #20]
 8003502:	e001      	b.n	8003508 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003504:	2320      	movs	r3, #32
 8003506:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	2b20      	cmp	r3, #32
 800350e:	d802      	bhi.n	8003516 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003516:	2001      	movs	r0, #1
 8003518:	f001 f992 	bl	8004840 <HAL_RCCEx_GetPeriphCLKFreq>
 800351c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003526:	d125      	bne.n	8003574 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d010      	beq.n	8003552 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	fbb2 f2f3 	udiv	r2, r2, r3
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	461a      	mov	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	fbb2 f3f3 	udiv	r3, r2, r3
 800354c:	3305      	adds	r3, #5
 800354e:	613b      	str	r3, [r7, #16]
 8003550:	e01f      	b.n	8003592 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	fbb2 f2f3 	udiv	r2, r2, r3
 800355c:	4613      	mov	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	461a      	mov	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	fbb2 f3f3 	udiv	r3, r2, r3
 800356e:	3305      	adds	r3, #5
 8003570:	613b      	str	r3, [r7, #16]
 8003572:	e00e      	b.n	8003592 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	fbb2 f2f3 	udiv	r2, r2, r3
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	461a      	mov	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	fbb2 f3f3 	udiv	r3, r2, r3
 800358e:	3305      	adds	r3, #5
 8003590:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	4a5c      	ldr	r2, [pc, #368]	; (8003708 <HAL_I2S_Init+0x270>)
 8003596:	fba2 2303 	umull	r2, r3, r2, r3
 800359a:	08db      	lsrs	r3, r3, #3
 800359c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	085b      	lsrs	r3, r3, #1
 80035ae:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	021b      	lsls	r3, r3, #8
 80035b4:	61bb      	str	r3, [r7, #24]
 80035b6:	e003      	b.n	80035c0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80035b8:	2302      	movs	r3, #2
 80035ba:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80035bc:	2300      	movs	r3, #0
 80035be:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d902      	bls.n	80035cc <HAL_I2S_Init+0x134>
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	2bff      	cmp	r3, #255	; 0xff
 80035ca:	d907      	bls.n	80035dc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d0:	f043 0210 	orr.w	r2, r3, #16
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e08f      	b.n	80036fc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691a      	ldr	r2, [r3, #16]
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	ea42 0103 	orr.w	r1, r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	69fa      	ldr	r2, [r7, #28]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80035fa:	f023 030f 	bic.w	r3, r3, #15
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6851      	ldr	r1, [r2, #4]
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6892      	ldr	r2, [r2, #8]
 8003606:	4311      	orrs	r1, r2
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	68d2      	ldr	r2, [r2, #12]
 800360c:	4311      	orrs	r1, r2
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	6992      	ldr	r2, [r2, #24]
 8003612:	430a      	orrs	r2, r1
 8003614:	431a      	orrs	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800361e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d161      	bne.n	80036ec <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a38      	ldr	r2, [pc, #224]	; (800370c <HAL_I2S_Init+0x274>)
 800362c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a37      	ldr	r2, [pc, #220]	; (8003710 <HAL_I2S_Init+0x278>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d101      	bne.n	800363c <HAL_I2S_Init+0x1a4>
 8003638:	4b36      	ldr	r3, [pc, #216]	; (8003714 <HAL_I2S_Init+0x27c>)
 800363a:	e001      	b.n	8003640 <HAL_I2S_Init+0x1a8>
 800363c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6812      	ldr	r2, [r2, #0]
 8003646:	4932      	ldr	r1, [pc, #200]	; (8003710 <HAL_I2S_Init+0x278>)
 8003648:	428a      	cmp	r2, r1
 800364a:	d101      	bne.n	8003650 <HAL_I2S_Init+0x1b8>
 800364c:	4a31      	ldr	r2, [pc, #196]	; (8003714 <HAL_I2S_Init+0x27c>)
 800364e:	e001      	b.n	8003654 <HAL_I2S_Init+0x1bc>
 8003650:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003654:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003658:	f023 030f 	bic.w	r3, r3, #15
 800365c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a2b      	ldr	r2, [pc, #172]	; (8003710 <HAL_I2S_Init+0x278>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d101      	bne.n	800366c <HAL_I2S_Init+0x1d4>
 8003668:	4b2a      	ldr	r3, [pc, #168]	; (8003714 <HAL_I2S_Init+0x27c>)
 800366a:	e001      	b.n	8003670 <HAL_I2S_Init+0x1d8>
 800366c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003670:	2202      	movs	r2, #2
 8003672:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a25      	ldr	r2, [pc, #148]	; (8003710 <HAL_I2S_Init+0x278>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d101      	bne.n	8003682 <HAL_I2S_Init+0x1ea>
 800367e:	4b25      	ldr	r3, [pc, #148]	; (8003714 <HAL_I2S_Init+0x27c>)
 8003680:	e001      	b.n	8003686 <HAL_I2S_Init+0x1ee>
 8003682:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003692:	d003      	beq.n	800369c <HAL_I2S_Init+0x204>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d103      	bne.n	80036a4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800369c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036a0:	613b      	str	r3, [r7, #16]
 80036a2:	e001      	b.n	80036a8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80036a4:	2300      	movs	r3, #0
 80036a6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	b299      	uxth	r1, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80036be:	4303      	orrs	r3, r0
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	430b      	orrs	r3, r1
 80036c4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80036c6:	4313      	orrs	r3, r2
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	897b      	ldrh	r3, [r7, #10]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036d4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a0d      	ldr	r2, [pc, #52]	; (8003710 <HAL_I2S_Init+0x278>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d101      	bne.n	80036e4 <HAL_I2S_Init+0x24c>
 80036e0:	4b0c      	ldr	r3, [pc, #48]	; (8003714 <HAL_I2S_Init+0x27c>)
 80036e2:	e001      	b.n	80036e8 <HAL_I2S_Init+0x250>
 80036e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036e8:	897a      	ldrh	r2, [r7, #10]
 80036ea:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3720      	adds	r7, #32
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	080037d3 	.word	0x080037d3
 8003708:	cccccccd 	.word	0xcccccccd
 800370c:	080038e9 	.word	0x080038e9
 8003710:	40003800 	.word	0x40003800
 8003714:	40003400 	.word	0x40003400

08003718 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	881a      	ldrh	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	1c9a      	adds	r2, r3, #2
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373a:	b29b      	uxth	r3, r3
 800373c:	3b01      	subs	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003748:	b29b      	uxth	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10e      	bne.n	800376c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800375c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7fe fa9a 	bl	8001ca0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800376c:	bf00      	nop
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003786:	b292      	uxth	r2, r2
 8003788:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378e:	1c9a      	adds	r2, r3, #2
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003798:	b29b      	uxth	r3, r3
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10e      	bne.n	80037ca <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037ba:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7fe fa8b 	bl	8001ce0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80037ca:	bf00      	nop
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b086      	sub	sp, #24
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d13a      	bne.n	8003864 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d109      	bne.n	800380c <I2S_IRQHandler+0x3a>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003802:	2b40      	cmp	r3, #64	; 0x40
 8003804:	d102      	bne.n	800380c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7ff ffb4 	bl	8003774 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003812:	2b40      	cmp	r3, #64	; 0x40
 8003814:	d126      	bne.n	8003864 <I2S_IRQHandler+0x92>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 0320 	and.w	r3, r3, #32
 8003820:	2b20      	cmp	r3, #32
 8003822:	d11f      	bne.n	8003864 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003832:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003834:	2300      	movs	r3, #0
 8003836:	613b      	str	r3, [r7, #16]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	613b      	str	r3, [r7, #16]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	f043 0202 	orr.w	r2, r3, #2
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fe fa56 	bl	8001d10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b03      	cmp	r3, #3
 800386e:	d136      	bne.n	80038de <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b02      	cmp	r3, #2
 8003878:	d109      	bne.n	800388e <I2S_IRQHandler+0xbc>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003884:	2b80      	cmp	r3, #128	; 0x80
 8003886:	d102      	bne.n	800388e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7ff ff45 	bl	8003718 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f003 0308 	and.w	r3, r3, #8
 8003894:	2b08      	cmp	r3, #8
 8003896:	d122      	bne.n	80038de <I2S_IRQHandler+0x10c>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f003 0320 	and.w	r3, r3, #32
 80038a2:	2b20      	cmp	r3, #32
 80038a4:	d11b      	bne.n	80038de <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038b4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80038b6:	2300      	movs	r3, #0
 80038b8:	60fb      	str	r3, [r7, #12]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	60fb      	str	r3, [r7, #12]
 80038c2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d0:	f043 0204 	orr.w	r2, r3, #4
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7fe fa19 	bl	8001d10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038de:	bf00      	nop
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b088      	sub	sp, #32
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4aa2      	ldr	r2, [pc, #648]	; (8003b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d101      	bne.n	8003906 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003902:	4ba2      	ldr	r3, [pc, #648]	; (8003b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003904:	e001      	b.n	800390a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003906:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a9b      	ldr	r2, [pc, #620]	; (8003b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d101      	bne.n	8003924 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003920:	4b9a      	ldr	r3, [pc, #616]	; (8003b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003922:	e001      	b.n	8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003924:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003934:	d004      	beq.n	8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	f040 8099 	bne.w	8003a72 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b02      	cmp	r3, #2
 8003948:	d107      	bne.n	800395a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f925 	bl	8003ba4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b01      	cmp	r3, #1
 8003962:	d107      	bne.n	8003974 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f9c8 	bl	8003d04 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397a:	2b40      	cmp	r3, #64	; 0x40
 800397c:	d13a      	bne.n	80039f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f003 0320 	and.w	r3, r3, #32
 8003984:	2b00      	cmp	r3, #0
 8003986:	d035      	beq.n	80039f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a7e      	ldr	r2, [pc, #504]	; (8003b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d101      	bne.n	8003996 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003992:	4b7e      	ldr	r3, [pc, #504]	; (8003b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003994:	e001      	b.n	800399a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003996:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4979      	ldr	r1, [pc, #484]	; (8003b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039a2:	428b      	cmp	r3, r1
 80039a4:	d101      	bne.n	80039aa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80039a6:	4b79      	ldr	r3, [pc, #484]	; (8003b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039a8:	e001      	b.n	80039ae <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80039aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039b2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039c2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80039c4:	2300      	movs	r3, #0
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	60fb      	str	r3, [r7, #12]
 80039d8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e6:	f043 0202 	orr.w	r2, r3, #2
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7fe f98e 	bl	8001d10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	f040 80be 	bne.w	8003b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f003 0320 	and.w	r3, r3, #32
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 80b8 	beq.w	8003b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a1a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a59      	ldr	r2, [pc, #356]	; (8003b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d101      	bne.n	8003a2a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003a26:	4b59      	ldr	r3, [pc, #356]	; (8003b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a28:	e001      	b.n	8003a2e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003a2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4954      	ldr	r1, [pc, #336]	; (8003b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a36:	428b      	cmp	r3, r1
 8003a38:	d101      	bne.n	8003a3e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003a3a:	4b54      	ldr	r3, [pc, #336]	; (8003b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a3c:	e001      	b.n	8003a42 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003a3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a46:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003a48:	2300      	movs	r3, #0
 8003a4a:	60bb      	str	r3, [r7, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	60bb      	str	r3, [r7, #8]
 8003a54:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a62:	f043 0204 	orr.w	r2, r3, #4
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fe f950 	bl	8001d10 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a70:	e084      	b.n	8003b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d107      	bne.n	8003a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d002      	beq.n	8003a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f8be 	bl	8003c08 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d107      	bne.n	8003aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 f8fd 	bl	8003ca0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aac:	2b40      	cmp	r3, #64	; 0x40
 8003aae:	d12f      	bne.n	8003b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f003 0320 	and.w	r3, r3, #32
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d02a      	beq.n	8003b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ac8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a2e      	ldr	r2, [pc, #184]	; (8003b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d101      	bne.n	8003ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003ad4:	4b2d      	ldr	r3, [pc, #180]	; (8003b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ad6:	e001      	b.n	8003adc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003ad8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4929      	ldr	r1, [pc, #164]	; (8003b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ae4:	428b      	cmp	r3, r1
 8003ae6:	d101      	bne.n	8003aec <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003ae8:	4b28      	ldr	r3, [pc, #160]	; (8003b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003aea:	e001      	b.n	8003af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003aec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003af0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003af4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b02:	f043 0202 	orr.w	r2, r3, #2
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7fe f900 	bl	8001d10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	f003 0308 	and.w	r3, r3, #8
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	d131      	bne.n	8003b7e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f003 0320 	and.w	r3, r3, #32
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d02c      	beq.n	8003b7e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a17      	ldr	r2, [pc, #92]	; (8003b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d101      	bne.n	8003b32 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003b2e:	4b17      	ldr	r3, [pc, #92]	; (8003b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b30:	e001      	b.n	8003b36 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003b32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4912      	ldr	r1, [pc, #72]	; (8003b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b3e:	428b      	cmp	r3, r1
 8003b40:	d101      	bne.n	8003b46 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003b42:	4b12      	ldr	r3, [pc, #72]	; (8003b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b44:	e001      	b.n	8003b4a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003b46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b4a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b4e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b5e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6c:	f043 0204 	orr.w	r2, r3, #4
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7fe f8cb 	bl	8001d10 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b7a:	e000      	b.n	8003b7e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b7c:	bf00      	nop
}
 8003b7e:	bf00      	nop
 8003b80:	3720      	adds	r7, #32
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40003800 	.word	0x40003800
 8003b8c:	40003400 	.word	0x40003400

08003b90 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb0:	1c99      	adds	r1, r3, #2
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6251      	str	r1, [r2, #36]	; 0x24
 8003bb6:	881a      	ldrh	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d113      	bne.n	8003bfe <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003be4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d106      	bne.n	8003bfe <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f7ff ffc9 	bl	8003b90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bfe:	bf00      	nop
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
	...

08003c08 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	1c99      	adds	r1, r3, #2
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6251      	str	r1, [r2, #36]	; 0x24
 8003c1a:	8819      	ldrh	r1, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a1d      	ldr	r2, [pc, #116]	; (8003c98 <I2SEx_TxISR_I2SExt+0x90>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d101      	bne.n	8003c2a <I2SEx_TxISR_I2SExt+0x22>
 8003c26:	4b1d      	ldr	r3, [pc, #116]	; (8003c9c <I2SEx_TxISR_I2SExt+0x94>)
 8003c28:	e001      	b.n	8003c2e <I2SEx_TxISR_I2SExt+0x26>
 8003c2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c2e:	460a      	mov	r2, r1
 8003c30:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d121      	bne.n	8003c8e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a12      	ldr	r2, [pc, #72]	; (8003c98 <I2SEx_TxISR_I2SExt+0x90>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d101      	bne.n	8003c58 <I2SEx_TxISR_I2SExt+0x50>
 8003c54:	4b11      	ldr	r3, [pc, #68]	; (8003c9c <I2SEx_TxISR_I2SExt+0x94>)
 8003c56:	e001      	b.n	8003c5c <I2SEx_TxISR_I2SExt+0x54>
 8003c58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	490d      	ldr	r1, [pc, #52]	; (8003c98 <I2SEx_TxISR_I2SExt+0x90>)
 8003c64:	428b      	cmp	r3, r1
 8003c66:	d101      	bne.n	8003c6c <I2SEx_TxISR_I2SExt+0x64>
 8003c68:	4b0c      	ldr	r3, [pc, #48]	; (8003c9c <I2SEx_TxISR_I2SExt+0x94>)
 8003c6a:	e001      	b.n	8003c70 <I2SEx_TxISR_I2SExt+0x68>
 8003c6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c74:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d106      	bne.n	8003c8e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7ff ff81 	bl	8003b90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c8e:	bf00      	nop
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	40003800 	.word	0x40003800
 8003c9c:	40003400 	.word	0x40003400

08003ca0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68d8      	ldr	r0, [r3, #12]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	1c99      	adds	r1, r3, #2
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003cb8:	b282      	uxth	r2, r0
 8003cba:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d113      	bne.n	8003cfc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ce2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d106      	bne.n	8003cfc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7ff ff4a 	bl	8003b90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cfc:	bf00      	nop
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a20      	ldr	r2, [pc, #128]	; (8003d94 <I2SEx_RxISR_I2SExt+0x90>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d101      	bne.n	8003d1a <I2SEx_RxISR_I2SExt+0x16>
 8003d16:	4b20      	ldr	r3, [pc, #128]	; (8003d98 <I2SEx_RxISR_I2SExt+0x94>)
 8003d18:	e001      	b.n	8003d1e <I2SEx_RxISR_I2SExt+0x1a>
 8003d1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d1e:	68d8      	ldr	r0, [r3, #12]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d24:	1c99      	adds	r1, r3, #2
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003d2a:	b282      	uxth	r2, r0
 8003d2c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d121      	bne.n	8003d8a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a12      	ldr	r2, [pc, #72]	; (8003d94 <I2SEx_RxISR_I2SExt+0x90>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d101      	bne.n	8003d54 <I2SEx_RxISR_I2SExt+0x50>
 8003d50:	4b11      	ldr	r3, [pc, #68]	; (8003d98 <I2SEx_RxISR_I2SExt+0x94>)
 8003d52:	e001      	b.n	8003d58 <I2SEx_RxISR_I2SExt+0x54>
 8003d54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	490d      	ldr	r1, [pc, #52]	; (8003d94 <I2SEx_RxISR_I2SExt+0x90>)
 8003d60:	428b      	cmp	r3, r1
 8003d62:	d101      	bne.n	8003d68 <I2SEx_RxISR_I2SExt+0x64>
 8003d64:	4b0c      	ldr	r3, [pc, #48]	; (8003d98 <I2SEx_RxISR_I2SExt+0x94>)
 8003d66:	e001      	b.n	8003d6c <I2SEx_RxISR_I2SExt+0x68>
 8003d68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d6c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d70:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d106      	bne.n	8003d8a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff ff03 	bl	8003b90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d8a:	bf00      	nop
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	40003800 	.word	0x40003800
 8003d98:	40003400 	.word	0x40003400

08003d9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e22d      	b.n	800420a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d075      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dba:	4ba3      	ldr	r3, [pc, #652]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 030c 	and.w	r3, r3, #12
 8003dc2:	2b04      	cmp	r3, #4
 8003dc4:	d00c      	beq.n	8003de0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dc6:	4ba0      	ldr	r3, [pc, #640]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d112      	bne.n	8003df8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dd2:	4b9d      	ldr	r3, [pc, #628]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dde:	d10b      	bne.n	8003df8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de0:	4b99      	ldr	r3, [pc, #612]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d05b      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x108>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d157      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e208      	b.n	800420a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e00:	d106      	bne.n	8003e10 <HAL_RCC_OscConfig+0x74>
 8003e02:	4b91      	ldr	r3, [pc, #580]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a90      	ldr	r2, [pc, #576]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	e01d      	b.n	8003e4c <HAL_RCC_OscConfig+0xb0>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e18:	d10c      	bne.n	8003e34 <HAL_RCC_OscConfig+0x98>
 8003e1a:	4b8b      	ldr	r3, [pc, #556]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a8a      	ldr	r2, [pc, #552]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	4b88      	ldr	r3, [pc, #544]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a87      	ldr	r2, [pc, #540]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	e00b      	b.n	8003e4c <HAL_RCC_OscConfig+0xb0>
 8003e34:	4b84      	ldr	r3, [pc, #528]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a83      	ldr	r2, [pc, #524]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	4b81      	ldr	r3, [pc, #516]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a80      	ldr	r2, [pc, #512]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d013      	beq.n	8003e7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e54:	f7fd ffac 	bl	8001db0 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e5c:	f7fd ffa8 	bl	8001db0 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b64      	cmp	r3, #100	; 0x64
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e1cd      	b.n	800420a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6e:	4b76      	ldr	r3, [pc, #472]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0f0      	beq.n	8003e5c <HAL_RCC_OscConfig+0xc0>
 8003e7a:	e014      	b.n	8003ea6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7c:	f7fd ff98 	bl	8001db0 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e84:	f7fd ff94 	bl	8001db0 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b64      	cmp	r3, #100	; 0x64
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e1b9      	b.n	800420a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e96:	4b6c      	ldr	r3, [pc, #432]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f0      	bne.n	8003e84 <HAL_RCC_OscConfig+0xe8>
 8003ea2:	e000      	b.n	8003ea6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d063      	beq.n	8003f7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eb2:	4b65      	ldr	r3, [pc, #404]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 030c 	and.w	r3, r3, #12
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00b      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ebe:	4b62      	ldr	r3, [pc, #392]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d11c      	bne.n	8003f04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eca:	4b5f      	ldr	r3, [pc, #380]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d116      	bne.n	8003f04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ed6:	4b5c      	ldr	r3, [pc, #368]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d005      	beq.n	8003eee <HAL_RCC_OscConfig+0x152>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d001      	beq.n	8003eee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e18d      	b.n	800420a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eee:	4b56      	ldr	r3, [pc, #344]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	4952      	ldr	r1, [pc, #328]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f02:	e03a      	b.n	8003f7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d020      	beq.n	8003f4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f0c:	4b4f      	ldr	r3, [pc, #316]	; (800404c <HAL_RCC_OscConfig+0x2b0>)
 8003f0e:	2201      	movs	r2, #1
 8003f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f12:	f7fd ff4d 	bl	8001db0 <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f1a:	f7fd ff49 	bl	8001db0 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e16e      	b.n	800420a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2c:	4b46      	ldr	r3, [pc, #280]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0f0      	beq.n	8003f1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f38:	4b43      	ldr	r3, [pc, #268]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	4940      	ldr	r1, [pc, #256]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	600b      	str	r3, [r1, #0]
 8003f4c:	e015      	b.n	8003f7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f4e:	4b3f      	ldr	r3, [pc, #252]	; (800404c <HAL_RCC_OscConfig+0x2b0>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f54:	f7fd ff2c 	bl	8001db0 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f5c:	f7fd ff28 	bl	8001db0 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e14d      	b.n	800420a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f6e:	4b36      	ldr	r3, [pc, #216]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1f0      	bne.n	8003f5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d030      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d016      	beq.n	8003fbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f8e:	4b30      	ldr	r3, [pc, #192]	; (8004050 <HAL_RCC_OscConfig+0x2b4>)
 8003f90:	2201      	movs	r2, #1
 8003f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f94:	f7fd ff0c 	bl	8001db0 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f9c:	f7fd ff08 	bl	8001db0 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e12d      	b.n	800420a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fae:	4b26      	ldr	r3, [pc, #152]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0f0      	beq.n	8003f9c <HAL_RCC_OscConfig+0x200>
 8003fba:	e015      	b.n	8003fe8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fbc:	4b24      	ldr	r3, [pc, #144]	; (8004050 <HAL_RCC_OscConfig+0x2b4>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fc2:	f7fd fef5 	bl	8001db0 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fc8:	e008      	b.n	8003fdc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fca:	f7fd fef1 	bl	8001db0 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e116      	b.n	800420a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fdc:	4b1a      	ldr	r3, [pc, #104]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1f0      	bne.n	8003fca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 80a0 	beq.w	8004136 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ffa:	4b13      	ldr	r3, [pc, #76]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10f      	bne.n	8004026 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004006:	2300      	movs	r3, #0
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	4b0f      	ldr	r3, [pc, #60]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	4a0e      	ldr	r2, [pc, #56]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8004010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004014:	6413      	str	r3, [r2, #64]	; 0x40
 8004016:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <HAL_RCC_OscConfig+0x2ac>)
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004022:	2301      	movs	r3, #1
 8004024:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004026:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <HAL_RCC_OscConfig+0x2b8>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402e:	2b00      	cmp	r3, #0
 8004030:	d121      	bne.n	8004076 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004032:	4b08      	ldr	r3, [pc, #32]	; (8004054 <HAL_RCC_OscConfig+0x2b8>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a07      	ldr	r2, [pc, #28]	; (8004054 <HAL_RCC_OscConfig+0x2b8>)
 8004038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800403c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800403e:	f7fd feb7 	bl	8001db0 <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004044:	e011      	b.n	800406a <HAL_RCC_OscConfig+0x2ce>
 8004046:	bf00      	nop
 8004048:	40023800 	.word	0x40023800
 800404c:	42470000 	.word	0x42470000
 8004050:	42470e80 	.word	0x42470e80
 8004054:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004058:	f7fd feaa 	bl	8001db0 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e0cf      	b.n	800420a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800406a:	4b6a      	ldr	r3, [pc, #424]	; (8004214 <HAL_RCC_OscConfig+0x478>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0f0      	beq.n	8004058 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d106      	bne.n	800408c <HAL_RCC_OscConfig+0x2f0>
 800407e:	4b66      	ldr	r3, [pc, #408]	; (8004218 <HAL_RCC_OscConfig+0x47c>)
 8004080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004082:	4a65      	ldr	r2, [pc, #404]	; (8004218 <HAL_RCC_OscConfig+0x47c>)
 8004084:	f043 0301 	orr.w	r3, r3, #1
 8004088:	6713      	str	r3, [r2, #112]	; 0x70
 800408a:	e01c      	b.n	80040c6 <HAL_RCC_OscConfig+0x32a>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b05      	cmp	r3, #5
 8004092:	d10c      	bne.n	80040ae <HAL_RCC_OscConfig+0x312>
 8004094:	4b60      	ldr	r3, [pc, #384]	; (8004218 <HAL_RCC_OscConfig+0x47c>)
 8004096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004098:	4a5f      	ldr	r2, [pc, #380]	; (8004218 <HAL_RCC_OscConfig+0x47c>)
 800409a:	f043 0304 	orr.w	r3, r3, #4
 800409e:	6713      	str	r3, [r2, #112]	; 0x70
 80040a0:	4b5d      	ldr	r3, [pc, #372]	; (8004218 <HAL_RCC_OscConfig+0x47c>)
 80040a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a4:	4a5c      	ldr	r2, [pc, #368]	; (8004218 <HAL_RCC_OscConfig+0x47c>)
 80040a6:	f043 0301 	orr.w	r3, r3, #1
 80040aa:	6713      	str	r3, [r2, #112]	; 0x70
 80040ac:	e00b      	b.n	80040c6 <HAL_RCC_OscConfig+0x32a>
 80040ae:	4b5a      	ldr	r3, [pc, #360]	; (8004218 <HAL_RCC_OscConfig+0x47c>)
 80040b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b2:	4a59      	ldr	r2, [pc, #356]	; (8004218 <HAL_RCC_OscConfig+0x47c>)
 80040b4:	f023 0301 	bic.w	r3, r3, #1
 80040b8:	6713      	str	r3, [r2, #112]	; 0x70
 80040ba:	4b57      	ldr	r3, [pc, #348]	; (8004218 <HAL_RCC_OscConfig+0x47c>)
 80040bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040be:	4a56      	ldr	r2, [pc, #344]	; (8004218 <HAL_RCC_OscConfig+0x47c>)
 80040c0:	f023 0304 	bic.w	r3, r3, #4
 80040c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d015      	beq.n	80040fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ce:	f7fd fe6f 	bl	8001db0 <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d4:	e00a      	b.n	80040ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040d6:	f7fd fe6b 	bl	8001db0 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e08e      	b.n	800420a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ec:	4b4a      	ldr	r3, [pc, #296]	; (8004218 <HAL_RCC_OscConfig+0x47c>)
 80040ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0ee      	beq.n	80040d6 <HAL_RCC_OscConfig+0x33a>
 80040f8:	e014      	b.n	8004124 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040fa:	f7fd fe59 	bl	8001db0 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004100:	e00a      	b.n	8004118 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004102:	f7fd fe55 	bl	8001db0 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004110:	4293      	cmp	r3, r2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e078      	b.n	800420a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004118:	4b3f      	ldr	r3, [pc, #252]	; (8004218 <HAL_RCC_OscConfig+0x47c>)
 800411a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1ee      	bne.n	8004102 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004124:	7dfb      	ldrb	r3, [r7, #23]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d105      	bne.n	8004136 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800412a:	4b3b      	ldr	r3, [pc, #236]	; (8004218 <HAL_RCC_OscConfig+0x47c>)
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	4a3a      	ldr	r2, [pc, #232]	; (8004218 <HAL_RCC_OscConfig+0x47c>)
 8004130:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004134:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d064      	beq.n	8004208 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800413e:	4b36      	ldr	r3, [pc, #216]	; (8004218 <HAL_RCC_OscConfig+0x47c>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 030c 	and.w	r3, r3, #12
 8004146:	2b08      	cmp	r3, #8
 8004148:	d05c      	beq.n	8004204 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	2b02      	cmp	r3, #2
 8004150:	d141      	bne.n	80041d6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004152:	4b32      	ldr	r3, [pc, #200]	; (800421c <HAL_RCC_OscConfig+0x480>)
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004158:	f7fd fe2a 	bl	8001db0 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004160:	f7fd fe26 	bl	8001db0 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e04b      	b.n	800420a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004172:	4b29      	ldr	r3, [pc, #164]	; (8004218 <HAL_RCC_OscConfig+0x47c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1f0      	bne.n	8004160 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69da      	ldr	r2, [r3, #28]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	019b      	lsls	r3, r3, #6
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004194:	085b      	lsrs	r3, r3, #1
 8004196:	3b01      	subs	r3, #1
 8004198:	041b      	lsls	r3, r3, #16
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	061b      	lsls	r3, r3, #24
 80041a2:	491d      	ldr	r1, [pc, #116]	; (8004218 <HAL_RCC_OscConfig+0x47c>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041a8:	4b1c      	ldr	r3, [pc, #112]	; (800421c <HAL_RCC_OscConfig+0x480>)
 80041aa:	2201      	movs	r2, #1
 80041ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ae:	f7fd fdff 	bl	8001db0 <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b4:	e008      	b.n	80041c8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041b6:	f7fd fdfb 	bl	8001db0 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e020      	b.n	800420a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041c8:	4b13      	ldr	r3, [pc, #76]	; (8004218 <HAL_RCC_OscConfig+0x47c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0f0      	beq.n	80041b6 <HAL_RCC_OscConfig+0x41a>
 80041d4:	e018      	b.n	8004208 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041d6:	4b11      	ldr	r3, [pc, #68]	; (800421c <HAL_RCC_OscConfig+0x480>)
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041dc:	f7fd fde8 	bl	8001db0 <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041e4:	f7fd fde4 	bl	8001db0 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e009      	b.n	800420a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041f6:	4b08      	ldr	r3, [pc, #32]	; (8004218 <HAL_RCC_OscConfig+0x47c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1f0      	bne.n	80041e4 <HAL_RCC_OscConfig+0x448>
 8004202:	e001      	b.n	8004208 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e000      	b.n	800420a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	40007000 	.word	0x40007000
 8004218:	40023800 	.word	0x40023800
 800421c:	42470060 	.word	0x42470060

08004220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e0ca      	b.n	80043ca <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004234:	4b67      	ldr	r3, [pc, #412]	; (80043d4 <HAL_RCC_ClockConfig+0x1b4>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 030f 	and.w	r3, r3, #15
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	429a      	cmp	r2, r3
 8004240:	d90c      	bls.n	800425c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004242:	4b64      	ldr	r3, [pc, #400]	; (80043d4 <HAL_RCC_ClockConfig+0x1b4>)
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	b2d2      	uxtb	r2, r2
 8004248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800424a:	4b62      	ldr	r3, [pc, #392]	; (80043d4 <HAL_RCC_ClockConfig+0x1b4>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	429a      	cmp	r2, r3
 8004256:	d001      	beq.n	800425c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e0b6      	b.n	80043ca <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d020      	beq.n	80042aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d005      	beq.n	8004280 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004274:	4b58      	ldr	r3, [pc, #352]	; (80043d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	4a57      	ldr	r2, [pc, #348]	; (80043d8 <HAL_RCC_ClockConfig+0x1b8>)
 800427a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800427e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	2b00      	cmp	r3, #0
 800428a:	d005      	beq.n	8004298 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800428c:	4b52      	ldr	r3, [pc, #328]	; (80043d8 <HAL_RCC_ClockConfig+0x1b8>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	4a51      	ldr	r2, [pc, #324]	; (80043d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004292:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004296:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004298:	4b4f      	ldr	r3, [pc, #316]	; (80043d8 <HAL_RCC_ClockConfig+0x1b8>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	494c      	ldr	r1, [pc, #304]	; (80043d8 <HAL_RCC_ClockConfig+0x1b8>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d044      	beq.n	8004340 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d107      	bne.n	80042ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042be:	4b46      	ldr	r3, [pc, #280]	; (80043d8 <HAL_RCC_ClockConfig+0x1b8>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d119      	bne.n	80042fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e07d      	b.n	80043ca <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d003      	beq.n	80042de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042da:	2b03      	cmp	r3, #3
 80042dc:	d107      	bne.n	80042ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042de:	4b3e      	ldr	r3, [pc, #248]	; (80043d8 <HAL_RCC_ClockConfig+0x1b8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d109      	bne.n	80042fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e06d      	b.n	80043ca <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ee:	4b3a      	ldr	r3, [pc, #232]	; (80043d8 <HAL_RCC_ClockConfig+0x1b8>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e065      	b.n	80043ca <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042fe:	4b36      	ldr	r3, [pc, #216]	; (80043d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f023 0203 	bic.w	r2, r3, #3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	4933      	ldr	r1, [pc, #204]	; (80043d8 <HAL_RCC_ClockConfig+0x1b8>)
 800430c:	4313      	orrs	r3, r2
 800430e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004310:	f7fd fd4e 	bl	8001db0 <HAL_GetTick>
 8004314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004316:	e00a      	b.n	800432e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004318:	f7fd fd4a 	bl	8001db0 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	f241 3288 	movw	r2, #5000	; 0x1388
 8004326:	4293      	cmp	r3, r2
 8004328:	d901      	bls.n	800432e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e04d      	b.n	80043ca <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800432e:	4b2a      	ldr	r3, [pc, #168]	; (80043d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 020c 	and.w	r2, r3, #12
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	429a      	cmp	r2, r3
 800433e:	d1eb      	bne.n	8004318 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004340:	4b24      	ldr	r3, [pc, #144]	; (80043d4 <HAL_RCC_ClockConfig+0x1b4>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d20c      	bcs.n	8004368 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800434e:	4b21      	ldr	r3, [pc, #132]	; (80043d4 <HAL_RCC_ClockConfig+0x1b4>)
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004356:	4b1f      	ldr	r3, [pc, #124]	; (80043d4 <HAL_RCC_ClockConfig+0x1b4>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 030f 	and.w	r3, r3, #15
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d001      	beq.n	8004368 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e030      	b.n	80043ca <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	d008      	beq.n	8004386 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004374:	4b18      	ldr	r3, [pc, #96]	; (80043d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	4915      	ldr	r1, [pc, #84]	; (80043d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004382:	4313      	orrs	r3, r2
 8004384:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d009      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004392:	4b11      	ldr	r3, [pc, #68]	; (80043d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	490d      	ldr	r1, [pc, #52]	; (80043d8 <HAL_RCC_ClockConfig+0x1b8>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043a6:	f000 f81d 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 80043aa:	4601      	mov	r1, r0
 80043ac:	4b0a      	ldr	r3, [pc, #40]	; (80043d8 <HAL_RCC_ClockConfig+0x1b8>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	091b      	lsrs	r3, r3, #4
 80043b2:	f003 030f 	and.w	r3, r3, #15
 80043b6:	4a09      	ldr	r2, [pc, #36]	; (80043dc <HAL_RCC_ClockConfig+0x1bc>)
 80043b8:	5cd3      	ldrb	r3, [r2, r3]
 80043ba:	fa21 f303 	lsr.w	r3, r1, r3
 80043be:	4a08      	ldr	r2, [pc, #32]	; (80043e0 <HAL_RCC_ClockConfig+0x1c0>)
 80043c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80043c2:	2000      	movs	r0, #0
 80043c4:	f7fc feee 	bl	80011a4 <HAL_InitTick>

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	40023c00 	.word	0x40023c00
 80043d8:	40023800 	.word	0x40023800
 80043dc:	080095fc 	.word	0x080095fc
 80043e0:	20000000 	.word	0x20000000

080043e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043ea:	2300      	movs	r3, #0
 80043ec:	607b      	str	r3, [r7, #4]
 80043ee:	2300      	movs	r3, #0
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	2300      	movs	r3, #0
 80043f4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043fa:	4b63      	ldr	r3, [pc, #396]	; (8004588 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 030c 	and.w	r3, r3, #12
 8004402:	2b04      	cmp	r3, #4
 8004404:	d007      	beq.n	8004416 <HAL_RCC_GetSysClockFreq+0x32>
 8004406:	2b08      	cmp	r3, #8
 8004408:	d008      	beq.n	800441c <HAL_RCC_GetSysClockFreq+0x38>
 800440a:	2b00      	cmp	r3, #0
 800440c:	f040 80b4 	bne.w	8004578 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004410:	4b5e      	ldr	r3, [pc, #376]	; (800458c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004412:	60bb      	str	r3, [r7, #8]
       break;
 8004414:	e0b3      	b.n	800457e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004416:	4b5e      	ldr	r3, [pc, #376]	; (8004590 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004418:	60bb      	str	r3, [r7, #8]
      break;
 800441a:	e0b0      	b.n	800457e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800441c:	4b5a      	ldr	r3, [pc, #360]	; (8004588 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004424:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004426:	4b58      	ldr	r3, [pc, #352]	; (8004588 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d04a      	beq.n	80044c8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004432:	4b55      	ldr	r3, [pc, #340]	; (8004588 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	099b      	lsrs	r3, r3, #6
 8004438:	f04f 0400 	mov.w	r4, #0
 800443c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004440:	f04f 0200 	mov.w	r2, #0
 8004444:	ea03 0501 	and.w	r5, r3, r1
 8004448:	ea04 0602 	and.w	r6, r4, r2
 800444c:	4629      	mov	r1, r5
 800444e:	4632      	mov	r2, r6
 8004450:	f04f 0300 	mov.w	r3, #0
 8004454:	f04f 0400 	mov.w	r4, #0
 8004458:	0154      	lsls	r4, r2, #5
 800445a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800445e:	014b      	lsls	r3, r1, #5
 8004460:	4619      	mov	r1, r3
 8004462:	4622      	mov	r2, r4
 8004464:	1b49      	subs	r1, r1, r5
 8004466:	eb62 0206 	sbc.w	r2, r2, r6
 800446a:	f04f 0300 	mov.w	r3, #0
 800446e:	f04f 0400 	mov.w	r4, #0
 8004472:	0194      	lsls	r4, r2, #6
 8004474:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004478:	018b      	lsls	r3, r1, #6
 800447a:	1a5b      	subs	r3, r3, r1
 800447c:	eb64 0402 	sbc.w	r4, r4, r2
 8004480:	f04f 0100 	mov.w	r1, #0
 8004484:	f04f 0200 	mov.w	r2, #0
 8004488:	00e2      	lsls	r2, r4, #3
 800448a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800448e:	00d9      	lsls	r1, r3, #3
 8004490:	460b      	mov	r3, r1
 8004492:	4614      	mov	r4, r2
 8004494:	195b      	adds	r3, r3, r5
 8004496:	eb44 0406 	adc.w	r4, r4, r6
 800449a:	f04f 0100 	mov.w	r1, #0
 800449e:	f04f 0200 	mov.w	r2, #0
 80044a2:	0262      	lsls	r2, r4, #9
 80044a4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80044a8:	0259      	lsls	r1, r3, #9
 80044aa:	460b      	mov	r3, r1
 80044ac:	4614      	mov	r4, r2
 80044ae:	4618      	mov	r0, r3
 80044b0:	4621      	mov	r1, r4
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f04f 0400 	mov.w	r4, #0
 80044b8:	461a      	mov	r2, r3
 80044ba:	4623      	mov	r3, r4
 80044bc:	f7fb fee0 	bl	8000280 <__aeabi_uldivmod>
 80044c0:	4603      	mov	r3, r0
 80044c2:	460c      	mov	r4, r1
 80044c4:	60fb      	str	r3, [r7, #12]
 80044c6:	e049      	b.n	800455c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044c8:	4b2f      	ldr	r3, [pc, #188]	; (8004588 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	099b      	lsrs	r3, r3, #6
 80044ce:	f04f 0400 	mov.w	r4, #0
 80044d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80044d6:	f04f 0200 	mov.w	r2, #0
 80044da:	ea03 0501 	and.w	r5, r3, r1
 80044de:	ea04 0602 	and.w	r6, r4, r2
 80044e2:	4629      	mov	r1, r5
 80044e4:	4632      	mov	r2, r6
 80044e6:	f04f 0300 	mov.w	r3, #0
 80044ea:	f04f 0400 	mov.w	r4, #0
 80044ee:	0154      	lsls	r4, r2, #5
 80044f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80044f4:	014b      	lsls	r3, r1, #5
 80044f6:	4619      	mov	r1, r3
 80044f8:	4622      	mov	r2, r4
 80044fa:	1b49      	subs	r1, r1, r5
 80044fc:	eb62 0206 	sbc.w	r2, r2, r6
 8004500:	f04f 0300 	mov.w	r3, #0
 8004504:	f04f 0400 	mov.w	r4, #0
 8004508:	0194      	lsls	r4, r2, #6
 800450a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800450e:	018b      	lsls	r3, r1, #6
 8004510:	1a5b      	subs	r3, r3, r1
 8004512:	eb64 0402 	sbc.w	r4, r4, r2
 8004516:	f04f 0100 	mov.w	r1, #0
 800451a:	f04f 0200 	mov.w	r2, #0
 800451e:	00e2      	lsls	r2, r4, #3
 8004520:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004524:	00d9      	lsls	r1, r3, #3
 8004526:	460b      	mov	r3, r1
 8004528:	4614      	mov	r4, r2
 800452a:	195b      	adds	r3, r3, r5
 800452c:	eb44 0406 	adc.w	r4, r4, r6
 8004530:	f04f 0100 	mov.w	r1, #0
 8004534:	f04f 0200 	mov.w	r2, #0
 8004538:	02a2      	lsls	r2, r4, #10
 800453a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800453e:	0299      	lsls	r1, r3, #10
 8004540:	460b      	mov	r3, r1
 8004542:	4614      	mov	r4, r2
 8004544:	4618      	mov	r0, r3
 8004546:	4621      	mov	r1, r4
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f04f 0400 	mov.w	r4, #0
 800454e:	461a      	mov	r2, r3
 8004550:	4623      	mov	r3, r4
 8004552:	f7fb fe95 	bl	8000280 <__aeabi_uldivmod>
 8004556:	4603      	mov	r3, r0
 8004558:	460c      	mov	r4, r1
 800455a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800455c:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	0c1b      	lsrs	r3, r3, #16
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	3301      	adds	r3, #1
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	fbb2 f3f3 	udiv	r3, r2, r3
 8004574:	60bb      	str	r3, [r7, #8]
      break;
 8004576:	e002      	b.n	800457e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004578:	4b04      	ldr	r3, [pc, #16]	; (800458c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800457a:	60bb      	str	r3, [r7, #8]
      break;
 800457c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800457e:	68bb      	ldr	r3, [r7, #8]
}
 8004580:	4618      	mov	r0, r3
 8004582:	3714      	adds	r7, #20
 8004584:	46bd      	mov	sp, r7
 8004586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004588:	40023800 	.word	0x40023800
 800458c:	00f42400 	.word	0x00f42400
 8004590:	007a1200 	.word	0x007a1200

08004594 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004598:	4b03      	ldr	r3, [pc, #12]	; (80045a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800459a:	681b      	ldr	r3, [r3, #0]
}
 800459c:	4618      	mov	r0, r3
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	20000000 	.word	0x20000000

080045ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045b0:	f7ff fff0 	bl	8004594 <HAL_RCC_GetHCLKFreq>
 80045b4:	4601      	mov	r1, r0
 80045b6:	4b05      	ldr	r3, [pc, #20]	; (80045cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	0a9b      	lsrs	r3, r3, #10
 80045bc:	f003 0307 	and.w	r3, r3, #7
 80045c0:	4a03      	ldr	r2, [pc, #12]	; (80045d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045c2:	5cd3      	ldrb	r3, [r2, r3]
 80045c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	40023800 	.word	0x40023800
 80045d0:	0800960c 	.word	0x0800960c

080045d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045d8:	f7ff ffdc 	bl	8004594 <HAL_RCC_GetHCLKFreq>
 80045dc:	4601      	mov	r1, r0
 80045de:	4b05      	ldr	r3, [pc, #20]	; (80045f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	0b5b      	lsrs	r3, r3, #13
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	4a03      	ldr	r2, [pc, #12]	; (80045f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045ea:	5cd3      	ldrb	r3, [r2, r3]
 80045ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40023800 	.word	0x40023800
 80045f8:	0800960c 	.word	0x0800960c

080045fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	220f      	movs	r2, #15
 800460a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800460c:	4b12      	ldr	r3, [pc, #72]	; (8004658 <HAL_RCC_GetClockConfig+0x5c>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f003 0203 	and.w	r2, r3, #3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004618:	4b0f      	ldr	r3, [pc, #60]	; (8004658 <HAL_RCC_GetClockConfig+0x5c>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004624:	4b0c      	ldr	r3, [pc, #48]	; (8004658 <HAL_RCC_GetClockConfig+0x5c>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004630:	4b09      	ldr	r3, [pc, #36]	; (8004658 <HAL_RCC_GetClockConfig+0x5c>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	08db      	lsrs	r3, r3, #3
 8004636:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800463e:	4b07      	ldr	r3, [pc, #28]	; (800465c <HAL_RCC_GetClockConfig+0x60>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 020f 	and.w	r2, r3, #15
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	601a      	str	r2, [r3, #0]
}
 800464a:	bf00      	nop
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40023800 	.word	0x40023800
 800465c:	40023c00 	.word	0x40023c00

08004660 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b00      	cmp	r3, #0
 800467a:	d105      	bne.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004684:	2b00      	cmp	r3, #0
 8004686:	d038      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004688:	4b68      	ldr	r3, [pc, #416]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800468a:	2200      	movs	r2, #0
 800468c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800468e:	f7fd fb8f 	bl	8001db0 <HAL_GetTick>
 8004692:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004694:	e008      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004696:	f7fd fb8b 	bl	8001db0 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e0bd      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046a8:	4b61      	ldr	r3, [pc, #388]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1f0      	bne.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	019b      	lsls	r3, r3, #6
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	071b      	lsls	r3, r3, #28
 80046c6:	495a      	ldr	r1, [pc, #360]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046ce:	4b57      	ldr	r3, [pc, #348]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80046d0:	2201      	movs	r2, #1
 80046d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046d4:	f7fd fb6c 	bl	8001db0 <HAL_GetTick>
 80046d8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046da:	e008      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046dc:	f7fd fb68 	bl	8001db0 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d901      	bls.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e09a      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046ee:	4b50      	ldr	r3, [pc, #320]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0f0      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	f000 8083 	beq.w	800480e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004708:	2300      	movs	r3, #0
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	4b48      	ldr	r3, [pc, #288]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	4a47      	ldr	r2, [pc, #284]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004716:	6413      	str	r3, [r2, #64]	; 0x40
 8004718:	4b45      	ldr	r3, [pc, #276]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800471a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004720:	60fb      	str	r3, [r7, #12]
 8004722:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004724:	4b43      	ldr	r3, [pc, #268]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a42      	ldr	r2, [pc, #264]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800472a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800472e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004730:	f7fd fb3e 	bl	8001db0 <HAL_GetTick>
 8004734:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004736:	e008      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004738:	f7fd fb3a 	bl	8001db0 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d901      	bls.n	800474a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e06c      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800474a:	4b3a      	ldr	r3, [pc, #232]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0f0      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004756:	4b36      	ldr	r3, [pc, #216]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800475e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d02f      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	429a      	cmp	r2, r3
 8004772:	d028      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004774:	4b2e      	ldr	r3, [pc, #184]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800477c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800477e:	4b2e      	ldr	r3, [pc, #184]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004780:	2201      	movs	r2, #1
 8004782:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004784:	4b2c      	ldr	r3, [pc, #176]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004786:	2200      	movs	r2, #0
 8004788:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800478a:	4a29      	ldr	r2, [pc, #164]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004790:	4b27      	ldr	r3, [pc, #156]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b01      	cmp	r3, #1
 800479a:	d114      	bne.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800479c:	f7fd fb08 	bl	8001db0 <HAL_GetTick>
 80047a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a2:	e00a      	b.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047a4:	f7fd fb04 	bl	8001db0 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d901      	bls.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e034      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ba:	4b1d      	ldr	r3, [pc, #116]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d0ee      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047d2:	d10d      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80047d4:	4b16      	ldr	r3, [pc, #88]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80047e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e8:	4911      	ldr	r1, [pc, #68]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	608b      	str	r3, [r1, #8]
 80047ee:	e005      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80047f0:	4b0f      	ldr	r3, [pc, #60]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	4a0e      	ldr	r2, [pc, #56]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80047fa:	6093      	str	r3, [r2, #8]
 80047fc:	4b0c      	ldr	r3, [pc, #48]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004808:	4909      	ldr	r1, [pc, #36]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800480a:	4313      	orrs	r3, r2
 800480c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	7d1a      	ldrb	r2, [r3, #20]
 800481e:	4b07      	ldr	r3, [pc, #28]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004820:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	42470068 	.word	0x42470068
 8004830:	40023800 	.word	0x40023800
 8004834:	40007000 	.word	0x40007000
 8004838:	42470e40 	.word	0x42470e40
 800483c:	424711e0 	.word	0x424711e0

08004840 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d13f      	bne.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800485e:	4b23      	ldr	r3, [pc, #140]	; (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004866:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d004      	beq.n	8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800486e:	2b01      	cmp	r3, #1
 8004870:	d131      	bne.n	80048d6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004872:	4b1f      	ldr	r3, [pc, #124]	; (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004874:	617b      	str	r3, [r7, #20]
          break;
 8004876:	e031      	b.n	80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004878:	4b1c      	ldr	r3, [pc, #112]	; (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004880:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004884:	d109      	bne.n	800489a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004886:	4b19      	ldr	r3, [pc, #100]	; (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004888:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800488c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004890:	4a18      	ldr	r2, [pc, #96]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004892:	fbb2 f3f3 	udiv	r3, r2, r3
 8004896:	613b      	str	r3, [r7, #16]
 8004898:	e008      	b.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800489a:	4b14      	ldr	r3, [pc, #80]	; (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800489c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048a4:	4a14      	ldr	r2, [pc, #80]	; (80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80048a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048aa:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80048ac:	4b0f      	ldr	r3, [pc, #60]	; (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048b2:	099b      	lsrs	r3, r3, #6
 80048b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	fb02 f303 	mul.w	r3, r2, r3
 80048be:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80048c0:	4b0a      	ldr	r3, [pc, #40]	; (80048ec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048c6:	0f1b      	lsrs	r3, r3, #28
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d2:	617b      	str	r3, [r7, #20]
          break;
 80048d4:	e002      	b.n	80048dc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	617b      	str	r3, [r7, #20]
          break;
 80048da:	bf00      	nop
        }
      }
      break;
 80048dc:	bf00      	nop
    }
  }
  return frequency;
 80048de:	697b      	ldr	r3, [r7, #20]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	371c      	adds	r7, #28
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	40023800 	.word	0x40023800
 80048f0:	00bb8000 	.word	0x00bb8000
 80048f4:	007a1200 	.word	0x007a1200
 80048f8:	00f42400 	.word	0x00f42400

080048fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e056      	b.n	80049bc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d106      	bne.n	800492e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f7fc fbab 	bl	8001084 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2202      	movs	r2, #2
 8004932:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004944:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	431a      	orrs	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	431a      	orrs	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800496a:	431a      	orrs	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	431a      	orrs	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	ea42 0103 	orr.w	r1, r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	0c1b      	lsrs	r3, r3, #16
 800498c:	f003 0104 	and.w	r1, r3, #4
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	69da      	ldr	r2, [r3, #28]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e01d      	b.n	8004a12 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d106      	bne.n	80049f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f815 	bl	8004a1a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2202      	movs	r2, #2
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3304      	adds	r3, #4
 8004a00:	4619      	mov	r1, r3
 8004a02:	4610      	mov	r0, r2
 8004a04:	f000 f968 	bl	8004cd8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3708      	adds	r7, #8
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b085      	sub	sp, #20
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68da      	ldr	r2, [r3, #12]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f042 0201 	orr.w	r2, r2, #1
 8004a44:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2b06      	cmp	r3, #6
 8004a56:	d007      	beq.n	8004a68 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0201 	orr.w	r2, r2, #1
 8004a66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b082      	sub	sp, #8
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d122      	bne.n	8004ad2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d11b      	bne.n	8004ad2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f06f 0202 	mvn.w	r2, #2
 8004aa2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	f003 0303 	and.w	r3, r3, #3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f8ee 	bl	8004c9a <HAL_TIM_IC_CaptureCallback>
 8004abe:	e005      	b.n	8004acc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 f8e0 	bl	8004c86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f8f1 	bl	8004cae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b04      	cmp	r3, #4
 8004ade:	d122      	bne.n	8004b26 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f003 0304 	and.w	r3, r3, #4
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d11b      	bne.n	8004b26 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f06f 0204 	mvn.w	r2, #4
 8004af6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2202      	movs	r2, #2
 8004afc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d003      	beq.n	8004b14 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f8c4 	bl	8004c9a <HAL_TIM_IC_CaptureCallback>
 8004b12:	e005      	b.n	8004b20 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 f8b6 	bl	8004c86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f8c7 	bl	8004cae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	f003 0308 	and.w	r3, r3, #8
 8004b30:	2b08      	cmp	r3, #8
 8004b32:	d122      	bne.n	8004b7a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f003 0308 	and.w	r3, r3, #8
 8004b3e:	2b08      	cmp	r3, #8
 8004b40:	d11b      	bne.n	8004b7a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f06f 0208 	mvn.w	r2, #8
 8004b4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2204      	movs	r2, #4
 8004b50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	69db      	ldr	r3, [r3, #28]
 8004b58:	f003 0303 	and.w	r3, r3, #3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f89a 	bl	8004c9a <HAL_TIM_IC_CaptureCallback>
 8004b66:	e005      	b.n	8004b74 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f88c 	bl	8004c86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f89d 	bl	8004cae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	f003 0310 	and.w	r3, r3, #16
 8004b84:	2b10      	cmp	r3, #16
 8004b86:	d122      	bne.n	8004bce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f003 0310 	and.w	r3, r3, #16
 8004b92:	2b10      	cmp	r3, #16
 8004b94:	d11b      	bne.n	8004bce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f06f 0210 	mvn.w	r2, #16
 8004b9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2208      	movs	r2, #8
 8004ba4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d003      	beq.n	8004bbc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f870 	bl	8004c9a <HAL_TIM_IC_CaptureCallback>
 8004bba:	e005      	b.n	8004bc8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f862 	bl	8004c86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f873 	bl	8004cae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d10e      	bne.n	8004bfa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d107      	bne.n	8004bfa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f06f 0201 	mvn.w	r2, #1
 8004bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7fc f8cb 	bl	8000d90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c04:	2b80      	cmp	r3, #128	; 0x80
 8004c06:	d10e      	bne.n	8004c26 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c12:	2b80      	cmp	r3, #128	; 0x80
 8004c14:	d107      	bne.n	8004c26 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f8e3 	bl	8004dec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c30:	2b40      	cmp	r3, #64	; 0x40
 8004c32:	d10e      	bne.n	8004c52 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3e:	2b40      	cmp	r3, #64	; 0x40
 8004c40:	d107      	bne.n	8004c52 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 f838 	bl	8004cc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	f003 0320 	and.w	r3, r3, #32
 8004c5c:	2b20      	cmp	r3, #32
 8004c5e:	d10e      	bne.n	8004c7e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	f003 0320 	and.w	r3, r3, #32
 8004c6a:	2b20      	cmp	r3, #32
 8004c6c:	d107      	bne.n	8004c7e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f06f 0220 	mvn.w	r2, #32
 8004c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 f8ad 	bl	8004dd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c7e:	bf00      	nop
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c8e:	bf00      	nop
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b083      	sub	sp, #12
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
	...

08004cd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a34      	ldr	r2, [pc, #208]	; (8004dbc <TIM_Base_SetConfig+0xe4>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d00f      	beq.n	8004d10 <TIM_Base_SetConfig+0x38>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf6:	d00b      	beq.n	8004d10 <TIM_Base_SetConfig+0x38>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a31      	ldr	r2, [pc, #196]	; (8004dc0 <TIM_Base_SetConfig+0xe8>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d007      	beq.n	8004d10 <TIM_Base_SetConfig+0x38>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a30      	ldr	r2, [pc, #192]	; (8004dc4 <TIM_Base_SetConfig+0xec>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d003      	beq.n	8004d10 <TIM_Base_SetConfig+0x38>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a2f      	ldr	r2, [pc, #188]	; (8004dc8 <TIM_Base_SetConfig+0xf0>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d108      	bne.n	8004d22 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a25      	ldr	r2, [pc, #148]	; (8004dbc <TIM_Base_SetConfig+0xe4>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d01b      	beq.n	8004d62 <TIM_Base_SetConfig+0x8a>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d30:	d017      	beq.n	8004d62 <TIM_Base_SetConfig+0x8a>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a22      	ldr	r2, [pc, #136]	; (8004dc0 <TIM_Base_SetConfig+0xe8>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d013      	beq.n	8004d62 <TIM_Base_SetConfig+0x8a>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a21      	ldr	r2, [pc, #132]	; (8004dc4 <TIM_Base_SetConfig+0xec>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d00f      	beq.n	8004d62 <TIM_Base_SetConfig+0x8a>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a20      	ldr	r2, [pc, #128]	; (8004dc8 <TIM_Base_SetConfig+0xf0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d00b      	beq.n	8004d62 <TIM_Base_SetConfig+0x8a>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a1f      	ldr	r2, [pc, #124]	; (8004dcc <TIM_Base_SetConfig+0xf4>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d007      	beq.n	8004d62 <TIM_Base_SetConfig+0x8a>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a1e      	ldr	r2, [pc, #120]	; (8004dd0 <TIM_Base_SetConfig+0xf8>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d003      	beq.n	8004d62 <TIM_Base_SetConfig+0x8a>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a1d      	ldr	r2, [pc, #116]	; (8004dd4 <TIM_Base_SetConfig+0xfc>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d108      	bne.n	8004d74 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a08      	ldr	r2, [pc, #32]	; (8004dbc <TIM_Base_SetConfig+0xe4>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d103      	bne.n	8004da8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	691a      	ldr	r2, [r3, #16]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	615a      	str	r2, [r3, #20]
}
 8004dae:	bf00      	nop
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	40010000 	.word	0x40010000
 8004dc0:	40000400 	.word	0x40000400
 8004dc4:	40000800 	.word	0x40000800
 8004dc8:	40000c00 	.word	0x40000c00
 8004dcc:	40014000 	.word	0x40014000
 8004dd0:	40014400 	.word	0x40014400
 8004dd4:	40014800 	.word	0x40014800

08004dd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e03f      	b.n	8004e92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d106      	bne.n	8004e2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7fc f974 	bl	8001114 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2224      	movs	r2, #36	; 0x24
 8004e30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68da      	ldr	r2, [r3, #12]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f829 	bl	8004e9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	691a      	ldr	r2, [r3, #16]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	695a      	ldr	r2, [r3, #20]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68da      	ldr	r2, [r3, #12]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e9c:	b5b0      	push	{r4, r5, r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68da      	ldr	r2, [r3, #12]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689a      	ldr	r2, [r3, #8]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004edc:	f023 030c 	bic.w	r3, r3, #12
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	6812      	ldr	r2, [r2, #0]
 8004ee4:	68f9      	ldr	r1, [r7, #12]
 8004ee6:	430b      	orrs	r3, r1
 8004ee8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	699a      	ldr	r2, [r3, #24]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	69db      	ldr	r3, [r3, #28]
 8004f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f08:	f040 80e4 	bne.w	80050d4 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4aab      	ldr	r2, [pc, #684]	; (80051c0 <UART_SetConfig+0x324>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d004      	beq.n	8004f20 <UART_SetConfig+0x84>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4aaa      	ldr	r2, [pc, #680]	; (80051c4 <UART_SetConfig+0x328>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d16c      	bne.n	8004ffa <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004f20:	f7ff fb58 	bl	80045d4 <HAL_RCC_GetPCLK2Freq>
 8004f24:	4602      	mov	r2, r0
 8004f26:	4613      	mov	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	009a      	lsls	r2, r3, #2
 8004f2e:	441a      	add	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3a:	4aa3      	ldr	r2, [pc, #652]	; (80051c8 <UART_SetConfig+0x32c>)
 8004f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f40:	095b      	lsrs	r3, r3, #5
 8004f42:	011c      	lsls	r4, r3, #4
 8004f44:	f7ff fb46 	bl	80045d4 <HAL_RCC_GetPCLK2Freq>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4413      	add	r3, r2
 8004f50:	009a      	lsls	r2, r3, #2
 8004f52:	441a      	add	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	fbb2 f5f3 	udiv	r5, r2, r3
 8004f5e:	f7ff fb39 	bl	80045d4 <HAL_RCC_GetPCLK2Freq>
 8004f62:	4602      	mov	r2, r0
 8004f64:	4613      	mov	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	009a      	lsls	r2, r3, #2
 8004f6c:	441a      	add	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	005b      	lsls	r3, r3, #1
 8004f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f78:	4a93      	ldr	r2, [pc, #588]	; (80051c8 <UART_SetConfig+0x32c>)
 8004f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7e:	095b      	lsrs	r3, r3, #5
 8004f80:	2264      	movs	r2, #100	; 0x64
 8004f82:	fb02 f303 	mul.w	r3, r2, r3
 8004f86:	1aeb      	subs	r3, r5, r3
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	3332      	adds	r3, #50	; 0x32
 8004f8c:	4a8e      	ldr	r2, [pc, #568]	; (80051c8 <UART_SetConfig+0x32c>)
 8004f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f92:	095b      	lsrs	r3, r3, #5
 8004f94:	005b      	lsls	r3, r3, #1
 8004f96:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f9a:	441c      	add	r4, r3
 8004f9c:	f7ff fb1a 	bl	80045d4 <HAL_RCC_GetPCLK2Freq>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	4413      	add	r3, r2
 8004fa8:	009a      	lsls	r2, r3, #2
 8004faa:	441a      	add	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	fbb2 f5f3 	udiv	r5, r2, r3
 8004fb6:	f7ff fb0d 	bl	80045d4 <HAL_RCC_GetPCLK2Freq>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	009a      	lsls	r2, r3, #2
 8004fc4:	441a      	add	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd0:	4a7d      	ldr	r2, [pc, #500]	; (80051c8 <UART_SetConfig+0x32c>)
 8004fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd6:	095b      	lsrs	r3, r3, #5
 8004fd8:	2264      	movs	r2, #100	; 0x64
 8004fda:	fb02 f303 	mul.w	r3, r2, r3
 8004fde:	1aeb      	subs	r3, r5, r3
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	3332      	adds	r3, #50	; 0x32
 8004fe4:	4a78      	ldr	r2, [pc, #480]	; (80051c8 <UART_SetConfig+0x32c>)
 8004fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fea:	095b      	lsrs	r3, r3, #5
 8004fec:	f003 0207 	and.w	r2, r3, #7
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4422      	add	r2, r4
 8004ff6:	609a      	str	r2, [r3, #8]
 8004ff8:	e154      	b.n	80052a4 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004ffa:	f7ff fad7 	bl	80045ac <HAL_RCC_GetPCLK1Freq>
 8004ffe:	4602      	mov	r2, r0
 8005000:	4613      	mov	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	009a      	lsls	r2, r3, #2
 8005008:	441a      	add	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	fbb2 f3f3 	udiv	r3, r2, r3
 8005014:	4a6c      	ldr	r2, [pc, #432]	; (80051c8 <UART_SetConfig+0x32c>)
 8005016:	fba2 2303 	umull	r2, r3, r2, r3
 800501a:	095b      	lsrs	r3, r3, #5
 800501c:	011c      	lsls	r4, r3, #4
 800501e:	f7ff fac5 	bl	80045ac <HAL_RCC_GetPCLK1Freq>
 8005022:	4602      	mov	r2, r0
 8005024:	4613      	mov	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	009a      	lsls	r2, r3, #2
 800502c:	441a      	add	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	fbb2 f5f3 	udiv	r5, r2, r3
 8005038:	f7ff fab8 	bl	80045ac <HAL_RCC_GetPCLK1Freq>
 800503c:	4602      	mov	r2, r0
 800503e:	4613      	mov	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	009a      	lsls	r2, r3, #2
 8005046:	441a      	add	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005052:	4a5d      	ldr	r2, [pc, #372]	; (80051c8 <UART_SetConfig+0x32c>)
 8005054:	fba2 2303 	umull	r2, r3, r2, r3
 8005058:	095b      	lsrs	r3, r3, #5
 800505a:	2264      	movs	r2, #100	; 0x64
 800505c:	fb02 f303 	mul.w	r3, r2, r3
 8005060:	1aeb      	subs	r3, r5, r3
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	3332      	adds	r3, #50	; 0x32
 8005066:	4a58      	ldr	r2, [pc, #352]	; (80051c8 <UART_SetConfig+0x32c>)
 8005068:	fba2 2303 	umull	r2, r3, r2, r3
 800506c:	095b      	lsrs	r3, r3, #5
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005074:	441c      	add	r4, r3
 8005076:	f7ff fa99 	bl	80045ac <HAL_RCC_GetPCLK1Freq>
 800507a:	4602      	mov	r2, r0
 800507c:	4613      	mov	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	009a      	lsls	r2, r3, #2
 8005084:	441a      	add	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	005b      	lsls	r3, r3, #1
 800508c:	fbb2 f5f3 	udiv	r5, r2, r3
 8005090:	f7ff fa8c 	bl	80045ac <HAL_RCC_GetPCLK1Freq>
 8005094:	4602      	mov	r2, r0
 8005096:	4613      	mov	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	009a      	lsls	r2, r3, #2
 800509e:	441a      	add	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050aa:	4a47      	ldr	r2, [pc, #284]	; (80051c8 <UART_SetConfig+0x32c>)
 80050ac:	fba2 2303 	umull	r2, r3, r2, r3
 80050b0:	095b      	lsrs	r3, r3, #5
 80050b2:	2264      	movs	r2, #100	; 0x64
 80050b4:	fb02 f303 	mul.w	r3, r2, r3
 80050b8:	1aeb      	subs	r3, r5, r3
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	3332      	adds	r3, #50	; 0x32
 80050be:	4a42      	ldr	r2, [pc, #264]	; (80051c8 <UART_SetConfig+0x32c>)
 80050c0:	fba2 2303 	umull	r2, r3, r2, r3
 80050c4:	095b      	lsrs	r3, r3, #5
 80050c6:	f003 0207 	and.w	r2, r3, #7
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4422      	add	r2, r4
 80050d0:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80050d2:	e0e7      	b.n	80052a4 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a39      	ldr	r2, [pc, #228]	; (80051c0 <UART_SetConfig+0x324>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d004      	beq.n	80050e8 <UART_SetConfig+0x24c>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a38      	ldr	r2, [pc, #224]	; (80051c4 <UART_SetConfig+0x328>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d171      	bne.n	80051cc <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80050e8:	f7ff fa74 	bl	80045d4 <HAL_RCC_GetPCLK2Freq>
 80050ec:	4602      	mov	r2, r0
 80050ee:	4613      	mov	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	009a      	lsls	r2, r3, #2
 80050f6:	441a      	add	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005102:	4a31      	ldr	r2, [pc, #196]	; (80051c8 <UART_SetConfig+0x32c>)
 8005104:	fba2 2303 	umull	r2, r3, r2, r3
 8005108:	095b      	lsrs	r3, r3, #5
 800510a:	011c      	lsls	r4, r3, #4
 800510c:	f7ff fa62 	bl	80045d4 <HAL_RCC_GetPCLK2Freq>
 8005110:	4602      	mov	r2, r0
 8005112:	4613      	mov	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	009a      	lsls	r2, r3, #2
 800511a:	441a      	add	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	fbb2 f5f3 	udiv	r5, r2, r3
 8005126:	f7ff fa55 	bl	80045d4 <HAL_RCC_GetPCLK2Freq>
 800512a:	4602      	mov	r2, r0
 800512c:	4613      	mov	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	009a      	lsls	r2, r3, #2
 8005134:	441a      	add	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005140:	4a21      	ldr	r2, [pc, #132]	; (80051c8 <UART_SetConfig+0x32c>)
 8005142:	fba2 2303 	umull	r2, r3, r2, r3
 8005146:	095b      	lsrs	r3, r3, #5
 8005148:	2264      	movs	r2, #100	; 0x64
 800514a:	fb02 f303 	mul.w	r3, r2, r3
 800514e:	1aeb      	subs	r3, r5, r3
 8005150:	011b      	lsls	r3, r3, #4
 8005152:	3332      	adds	r3, #50	; 0x32
 8005154:	4a1c      	ldr	r2, [pc, #112]	; (80051c8 <UART_SetConfig+0x32c>)
 8005156:	fba2 2303 	umull	r2, r3, r2, r3
 800515a:	095b      	lsrs	r3, r3, #5
 800515c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005160:	441c      	add	r4, r3
 8005162:	f7ff fa37 	bl	80045d4 <HAL_RCC_GetPCLK2Freq>
 8005166:	4602      	mov	r2, r0
 8005168:	4613      	mov	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4413      	add	r3, r2
 800516e:	009a      	lsls	r2, r3, #2
 8005170:	441a      	add	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	fbb2 f5f3 	udiv	r5, r2, r3
 800517c:	f7ff fa2a 	bl	80045d4 <HAL_RCC_GetPCLK2Freq>
 8005180:	4602      	mov	r2, r0
 8005182:	4613      	mov	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4413      	add	r3, r2
 8005188:	009a      	lsls	r2, r3, #2
 800518a:	441a      	add	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	fbb2 f3f3 	udiv	r3, r2, r3
 8005196:	4a0c      	ldr	r2, [pc, #48]	; (80051c8 <UART_SetConfig+0x32c>)
 8005198:	fba2 2303 	umull	r2, r3, r2, r3
 800519c:	095b      	lsrs	r3, r3, #5
 800519e:	2264      	movs	r2, #100	; 0x64
 80051a0:	fb02 f303 	mul.w	r3, r2, r3
 80051a4:	1aeb      	subs	r3, r5, r3
 80051a6:	011b      	lsls	r3, r3, #4
 80051a8:	3332      	adds	r3, #50	; 0x32
 80051aa:	4a07      	ldr	r2, [pc, #28]	; (80051c8 <UART_SetConfig+0x32c>)
 80051ac:	fba2 2303 	umull	r2, r3, r2, r3
 80051b0:	095b      	lsrs	r3, r3, #5
 80051b2:	f003 020f 	and.w	r2, r3, #15
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4422      	add	r2, r4
 80051bc:	609a      	str	r2, [r3, #8]
 80051be:	e071      	b.n	80052a4 <UART_SetConfig+0x408>
 80051c0:	40011000 	.word	0x40011000
 80051c4:	40011400 	.word	0x40011400
 80051c8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80051cc:	f7ff f9ee 	bl	80045ac <HAL_RCC_GetPCLK1Freq>
 80051d0:	4602      	mov	r2, r0
 80051d2:	4613      	mov	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4413      	add	r3, r2
 80051d8:	009a      	lsls	r2, r3, #2
 80051da:	441a      	add	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e6:	4a31      	ldr	r2, [pc, #196]	; (80052ac <UART_SetConfig+0x410>)
 80051e8:	fba2 2303 	umull	r2, r3, r2, r3
 80051ec:	095b      	lsrs	r3, r3, #5
 80051ee:	011c      	lsls	r4, r3, #4
 80051f0:	f7ff f9dc 	bl	80045ac <HAL_RCC_GetPCLK1Freq>
 80051f4:	4602      	mov	r2, r0
 80051f6:	4613      	mov	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	009a      	lsls	r2, r3, #2
 80051fe:	441a      	add	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	fbb2 f5f3 	udiv	r5, r2, r3
 800520a:	f7ff f9cf 	bl	80045ac <HAL_RCC_GetPCLK1Freq>
 800520e:	4602      	mov	r2, r0
 8005210:	4613      	mov	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	009a      	lsls	r2, r3, #2
 8005218:	441a      	add	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	fbb2 f3f3 	udiv	r3, r2, r3
 8005224:	4a21      	ldr	r2, [pc, #132]	; (80052ac <UART_SetConfig+0x410>)
 8005226:	fba2 2303 	umull	r2, r3, r2, r3
 800522a:	095b      	lsrs	r3, r3, #5
 800522c:	2264      	movs	r2, #100	; 0x64
 800522e:	fb02 f303 	mul.w	r3, r2, r3
 8005232:	1aeb      	subs	r3, r5, r3
 8005234:	011b      	lsls	r3, r3, #4
 8005236:	3332      	adds	r3, #50	; 0x32
 8005238:	4a1c      	ldr	r2, [pc, #112]	; (80052ac <UART_SetConfig+0x410>)
 800523a:	fba2 2303 	umull	r2, r3, r2, r3
 800523e:	095b      	lsrs	r3, r3, #5
 8005240:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005244:	441c      	add	r4, r3
 8005246:	f7ff f9b1 	bl	80045ac <HAL_RCC_GetPCLK1Freq>
 800524a:	4602      	mov	r2, r0
 800524c:	4613      	mov	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4413      	add	r3, r2
 8005252:	009a      	lsls	r2, r3, #2
 8005254:	441a      	add	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	fbb2 f5f3 	udiv	r5, r2, r3
 8005260:	f7ff f9a4 	bl	80045ac <HAL_RCC_GetPCLK1Freq>
 8005264:	4602      	mov	r2, r0
 8005266:	4613      	mov	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	009a      	lsls	r2, r3, #2
 800526e:	441a      	add	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	fbb2 f3f3 	udiv	r3, r2, r3
 800527a:	4a0c      	ldr	r2, [pc, #48]	; (80052ac <UART_SetConfig+0x410>)
 800527c:	fba2 2303 	umull	r2, r3, r2, r3
 8005280:	095b      	lsrs	r3, r3, #5
 8005282:	2264      	movs	r2, #100	; 0x64
 8005284:	fb02 f303 	mul.w	r3, r2, r3
 8005288:	1aeb      	subs	r3, r5, r3
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	3332      	adds	r3, #50	; 0x32
 800528e:	4a07      	ldr	r2, [pc, #28]	; (80052ac <UART_SetConfig+0x410>)
 8005290:	fba2 2303 	umull	r2, r3, r2, r3
 8005294:	095b      	lsrs	r3, r3, #5
 8005296:	f003 020f 	and.w	r2, r3, #15
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4422      	add	r2, r4
 80052a0:	609a      	str	r2, [r3, #8]
}
 80052a2:	e7ff      	b.n	80052a4 <UART_SetConfig+0x408>
 80052a4:	bf00      	nop
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bdb0      	pop	{r4, r5, r7, pc}
 80052ac:	51eb851f 	.word	0x51eb851f

080052b0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052b6:	f3ef 8305 	mrs	r3, IPSR
 80052ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80052bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10f      	bne.n	80052e2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052c2:	f3ef 8310 	mrs	r3, PRIMASK
 80052c6:	607b      	str	r3, [r7, #4]
  return(result);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d109      	bne.n	80052e2 <osKernelInitialize+0x32>
 80052ce:	4b11      	ldr	r3, [pc, #68]	; (8005314 <osKernelInitialize+0x64>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d109      	bne.n	80052ea <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80052d6:	f3ef 8311 	mrs	r3, BASEPRI
 80052da:	603b      	str	r3, [r7, #0]
  return(result);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80052e2:	f06f 0305 	mvn.w	r3, #5
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	e00c      	b.n	8005304 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80052ea:	4b0a      	ldr	r3, [pc, #40]	; (8005314 <osKernelInitialize+0x64>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d105      	bne.n	80052fe <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80052f2:	4b08      	ldr	r3, [pc, #32]	; (8005314 <osKernelInitialize+0x64>)
 80052f4:	2201      	movs	r2, #1
 80052f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80052f8:	2300      	movs	r3, #0
 80052fa:	60fb      	str	r3, [r7, #12]
 80052fc:	e002      	b.n	8005304 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80052fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005302:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005304:	68fb      	ldr	r3, [r7, #12]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	20000124 	.word	0x20000124

08005318 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800531e:	f3ef 8305 	mrs	r3, IPSR
 8005322:	60bb      	str	r3, [r7, #8]
  return(result);
 8005324:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10f      	bne.n	800534a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800532a:	f3ef 8310 	mrs	r3, PRIMASK
 800532e:	607b      	str	r3, [r7, #4]
  return(result);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d109      	bne.n	800534a <osKernelStart+0x32>
 8005336:	4b11      	ldr	r3, [pc, #68]	; (800537c <osKernelStart+0x64>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2b02      	cmp	r3, #2
 800533c:	d109      	bne.n	8005352 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800533e:	f3ef 8311 	mrs	r3, BASEPRI
 8005342:	603b      	str	r3, [r7, #0]
  return(result);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <osKernelStart+0x3a>
    stat = osErrorISR;
 800534a:	f06f 0305 	mvn.w	r3, #5
 800534e:	60fb      	str	r3, [r7, #12]
 8005350:	e00e      	b.n	8005370 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005352:	4b0a      	ldr	r3, [pc, #40]	; (800537c <osKernelStart+0x64>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d107      	bne.n	800536a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800535a:	4b08      	ldr	r3, [pc, #32]	; (800537c <osKernelStart+0x64>)
 800535c:	2202      	movs	r2, #2
 800535e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005360:	f001 fc60 	bl	8006c24 <vTaskStartScheduler>
      stat = osOK;
 8005364:	2300      	movs	r3, #0
 8005366:	60fb      	str	r3, [r7, #12]
 8005368:	e002      	b.n	8005370 <osKernelStart+0x58>
    } else {
      stat = osError;
 800536a:	f04f 33ff 	mov.w	r3, #4294967295
 800536e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005370:	68fb      	ldr	r3, [r7, #12]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	20000124 	.word	0x20000124

08005380 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005380:	b580      	push	{r7, lr}
 8005382:	b092      	sub	sp, #72	; 0x48
 8005384:	af04      	add	r7, sp, #16
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800538c:	2300      	movs	r3, #0
 800538e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005390:	f3ef 8305 	mrs	r3, IPSR
 8005394:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005398:	2b00      	cmp	r3, #0
 800539a:	f040 8094 	bne.w	80054c6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800539e:	f3ef 8310 	mrs	r3, PRIMASK
 80053a2:	623b      	str	r3, [r7, #32]
  return(result);
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f040 808d 	bne.w	80054c6 <osThreadNew+0x146>
 80053ac:	4b48      	ldr	r3, [pc, #288]	; (80054d0 <osThreadNew+0x150>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d106      	bne.n	80053c2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053b4:	f3ef 8311 	mrs	r3, BASEPRI
 80053b8:	61fb      	str	r3, [r7, #28]
  return(result);
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f040 8082 	bne.w	80054c6 <osThreadNew+0x146>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d07e      	beq.n	80054c6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80053c8:	2380      	movs	r3, #128	; 0x80
 80053ca:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80053cc:	2318      	movs	r3, #24
 80053ce:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80053d0:	2300      	movs	r3, #0
 80053d2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80053d4:	f107 031b 	add.w	r3, r7, #27
 80053d8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80053da:	f04f 33ff 	mov.w	r3, #4294967295
 80053de:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d045      	beq.n	8005472 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d002      	beq.n	80053f4 <osThreadNew+0x74>
        name = attr->name;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d002      	beq.n	8005402 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005404:	2b00      	cmp	r3, #0
 8005406:	d008      	beq.n	800541a <osThreadNew+0x9a>
 8005408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540a:	2b38      	cmp	r3, #56	; 0x38
 800540c:	d805      	bhi.n	800541a <osThreadNew+0x9a>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <osThreadNew+0x9e>
        return (NULL);
 800541a:	2300      	movs	r3, #0
 800541c:	e054      	b.n	80054c8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	089b      	lsrs	r3, r3, #2
 800542c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00e      	beq.n	8005454 <osThreadNew+0xd4>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	2b5b      	cmp	r3, #91	; 0x5b
 800543c:	d90a      	bls.n	8005454 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005442:	2b00      	cmp	r3, #0
 8005444:	d006      	beq.n	8005454 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d002      	beq.n	8005454 <osThreadNew+0xd4>
        mem = 1;
 800544e:	2301      	movs	r3, #1
 8005450:	62bb      	str	r3, [r7, #40]	; 0x28
 8005452:	e010      	b.n	8005476 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10c      	bne.n	8005476 <osThreadNew+0xf6>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d108      	bne.n	8005476 <osThreadNew+0xf6>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d104      	bne.n	8005476 <osThreadNew+0xf6>
          mem = 0;
 800546c:	2300      	movs	r3, #0
 800546e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005470:	e001      	b.n	8005476 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005472:	2300      	movs	r3, #0
 8005474:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005478:	2b01      	cmp	r3, #1
 800547a:	d110      	bne.n	800549e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005484:	9202      	str	r2, [sp, #8]
 8005486:	9301      	str	r3, [sp, #4]
 8005488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005490:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f001 f9fe 	bl	8006894 <xTaskCreateStatic>
 8005498:	4603      	mov	r3, r0
 800549a:	617b      	str	r3, [r7, #20]
 800549c:	e013      	b.n	80054c6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800549e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d110      	bne.n	80054c6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80054a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	f107 0314 	add.w	r3, r7, #20
 80054ac:	9301      	str	r3, [sp, #4]
 80054ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f001 fa45 	bl	8006946 <xTaskCreate>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d001      	beq.n	80054c6 <osThreadNew+0x146>
          hTask = NULL;
 80054c2:	2300      	movs	r3, #0
 80054c4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80054c6:	697b      	ldr	r3, [r7, #20]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3738      	adds	r7, #56	; 0x38
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	20000124 	.word	0x20000124

080054d4 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054da:	f3ef 8305 	mrs	r3, IPSR
 80054de:	60bb      	str	r3, [r7, #8]
  return(result);
 80054e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10f      	bne.n	8005506 <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054e6:	f3ef 8310 	mrs	r3, PRIMASK
 80054ea:	607b      	str	r3, [r7, #4]
  return(result);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d109      	bne.n	8005506 <osThreadYield+0x32>
 80054f2:	4b0f      	ldr	r3, [pc, #60]	; (8005530 <osThreadYield+0x5c>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d109      	bne.n	800550e <osThreadYield+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80054fa:	f3ef 8311 	mrs	r3, BASEPRI
 80054fe:	603b      	str	r3, [r7, #0]
  return(result);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d003      	beq.n	800550e <osThreadYield+0x3a>
    stat = osErrorISR;
 8005506:	f06f 0305 	mvn.w	r3, #5
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	e009      	b.n	8005522 <osThreadYield+0x4e>
  } else {
    stat = osOK;
 800550e:	2300      	movs	r3, #0
 8005510:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 8005512:	4b08      	ldr	r3, [pc, #32]	; (8005534 <osThreadYield+0x60>)
 8005514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005518:	601a      	str	r2, [r3, #0]
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8005522:	68fb      	ldr	r3, [r7, #12]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3714      	adds	r7, #20
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr
 8005530:	20000124 	.word	0x20000124
 8005534:	e000ed04 	.word	0xe000ed04

08005538 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005540:	f3ef 8305 	mrs	r3, IPSR
 8005544:	613b      	str	r3, [r7, #16]
  return(result);
 8005546:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10f      	bne.n	800556c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800554c:	f3ef 8310 	mrs	r3, PRIMASK
 8005550:	60fb      	str	r3, [r7, #12]
  return(result);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d109      	bne.n	800556c <osDelay+0x34>
 8005558:	4b0d      	ldr	r3, [pc, #52]	; (8005590 <osDelay+0x58>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b02      	cmp	r3, #2
 800555e:	d109      	bne.n	8005574 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005560:	f3ef 8311 	mrs	r3, BASEPRI
 8005564:	60bb      	str	r3, [r7, #8]
  return(result);
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d003      	beq.n	8005574 <osDelay+0x3c>
    stat = osErrorISR;
 800556c:	f06f 0305 	mvn.w	r3, #5
 8005570:	617b      	str	r3, [r7, #20]
 8005572:	e007      	b.n	8005584 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005574:	2300      	movs	r3, #0
 8005576:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d002      	beq.n	8005584 <osDelay+0x4c>
      vTaskDelay(ticks);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f001 fb1c 	bl	8006bbc <vTaskDelay>
    }
  }

  return (stat);
 8005584:	697b      	ldr	r3, [r7, #20]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3718      	adds	r7, #24
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	20000124 	.word	0x20000124

08005594 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8005594:	b580      	push	{r7, lr}
 8005596:	b088      	sub	sp, #32
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800559c:	2300      	movs	r3, #0
 800559e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055a0:	f3ef 8305 	mrs	r3, IPSR
 80055a4:	617b      	str	r3, [r7, #20]
  return(result);
 80055a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d13d      	bne.n	8005628 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055ac:	f3ef 8310 	mrs	r3, PRIMASK
 80055b0:	613b      	str	r3, [r7, #16]
  return(result);
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d137      	bne.n	8005628 <osEventFlagsNew+0x94>
 80055b8:	4b1e      	ldr	r3, [pc, #120]	; (8005634 <osEventFlagsNew+0xa0>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d105      	bne.n	80055cc <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055c0:	f3ef 8311 	mrs	r3, BASEPRI
 80055c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d12d      	bne.n	8005628 <osEventFlagsNew+0x94>
    mem = -1;
 80055cc:	f04f 33ff 	mov.w	r3, #4294967295
 80055d0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d015      	beq.n	8005604 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d006      	beq.n	80055ee <osEventFlagsNew+0x5a>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	2b1f      	cmp	r3, #31
 80055e6:	d902      	bls.n	80055ee <osEventFlagsNew+0x5a>
        mem = 1;
 80055e8:	2301      	movs	r3, #1
 80055ea:	61bb      	str	r3, [r7, #24]
 80055ec:	e00c      	b.n	8005608 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d108      	bne.n	8005608 <osEventFlagsNew+0x74>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d104      	bne.n	8005608 <osEventFlagsNew+0x74>
          mem = 0;
 80055fe:	2300      	movs	r3, #0
 8005600:	61bb      	str	r3, [r7, #24]
 8005602:	e001      	b.n	8005608 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8005604:	2300      	movs	r3, #0
 8005606:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d106      	bne.n	800561c <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	4618      	mov	r0, r3
 8005614:	f000 f956 	bl	80058c4 <xEventGroupCreateStatic>
 8005618:	61f8      	str	r0, [r7, #28]
 800561a:	e005      	b.n	8005628 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d102      	bne.n	8005628 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8005622:	f000 f984 	bl	800592e <xEventGroupCreate>
 8005626:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8005628:	69fb      	ldr	r3, [r7, #28]
}
 800562a:	4618      	mov	r0, r3
 800562c:	3720      	adds	r7, #32
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	20000124 	.word	0x20000124

08005638 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8005638:	b580      	push	{r7, lr}
 800563a:	b088      	sub	sp, #32
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d004      	beq.n	8005656 <osEventFlagsSet+0x1e>
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8005656:	f06f 0303 	mvn.w	r3, #3
 800565a:	61fb      	str	r3, [r7, #28]
 800565c:	e03a      	b.n	80056d4 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800565e:	f3ef 8305 	mrs	r3, IPSR
 8005662:	617b      	str	r3, [r7, #20]
  return(result);
 8005664:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10f      	bne.n	800568a <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800566a:	f3ef 8310 	mrs	r3, PRIMASK
 800566e:	613b      	str	r3, [r7, #16]
  return(result);
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d109      	bne.n	800568a <osEventFlagsSet+0x52>
 8005676:	4b1a      	ldr	r3, [pc, #104]	; (80056e0 <osEventFlagsSet+0xa8>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b02      	cmp	r3, #2
 800567c:	d123      	bne.n	80056c6 <osEventFlagsSet+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800567e:	f3ef 8311 	mrs	r3, BASEPRI
 8005682:	60fb      	str	r3, [r7, #12]
  return(result);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d01d      	beq.n	80056c6 <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 800568a:	2300      	movs	r3, #0
 800568c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 800568e:	f107 0308 	add.w	r3, r7, #8
 8005692:	461a      	mov	r2, r3
 8005694:	6839      	ldr	r1, [r7, #0]
 8005696:	69b8      	ldr	r0, [r7, #24]
 8005698:	f000 fb60 	bl	8005d5c <xEventGroupSetBitsFromISR>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 80056a2:	f06f 0302 	mvn.w	r3, #2
 80056a6:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80056a8:	e013      	b.n	80056d2 <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00e      	beq.n	80056d2 <osEventFlagsSet+0x9a>
 80056b4:	4b0b      	ldr	r3, [pc, #44]	; (80056e4 <osEventFlagsSet+0xac>)
 80056b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80056c4:	e005      	b.n	80056d2 <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80056c6:	6839      	ldr	r1, [r7, #0]
 80056c8:	69b8      	ldr	r0, [r7, #24]
 80056ca:	f000 fa82 	bl	8005bd2 <xEventGroupSetBits>
 80056ce:	61f8      	str	r0, [r7, #28]
 80056d0:	e000      	b.n	80056d4 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80056d2:	bf00      	nop
  }

  return (rflags);
 80056d4:	69fb      	ldr	r3, [r7, #28]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3720      	adds	r7, #32
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	20000124 	.word	0x20000124
 80056e4:	e000ed04 	.word	0xe000ed04

080056e8 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b088      	sub	sp, #32
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d004      	beq.n	8005706 <osEventFlagsClear+0x1e>
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8005706:	f06f 0303 	mvn.w	r3, #3
 800570a:	61fb      	str	r3, [r7, #28]
 800570c:	e029      	b.n	8005762 <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800570e:	f3ef 8305 	mrs	r3, IPSR
 8005712:	617b      	str	r3, [r7, #20]
  return(result);
 8005714:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10f      	bne.n	800573a <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800571a:	f3ef 8310 	mrs	r3, PRIMASK
 800571e:	613b      	str	r3, [r7, #16]
  return(result);
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d109      	bne.n	800573a <osEventFlagsClear+0x52>
 8005726:	4b11      	ldr	r3, [pc, #68]	; (800576c <osEventFlagsClear+0x84>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2b02      	cmp	r3, #2
 800572c:	d114      	bne.n	8005758 <osEventFlagsClear+0x70>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800572e:	f3ef 8311 	mrs	r3, BASEPRI
 8005732:	60fb      	str	r3, [r7, #12]
  return(result);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00e      	beq.n	8005758 <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 800573a:	69b8      	ldr	r0, [r7, #24]
 800573c:	f000 fa26 	bl	8005b8c <xEventGroupGetBitsFromISR>
 8005740:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8005742:	6839      	ldr	r1, [r7, #0]
 8005744:	69b8      	ldr	r0, [r7, #24]
 8005746:	f000 fa0d 	bl	8005b64 <xEventGroupClearBitsFromISR>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d108      	bne.n	8005762 <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 8005750:	f06f 0302 	mvn.w	r3, #2
 8005754:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8005756:	e004      	b.n	8005762 <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8005758:	6839      	ldr	r1, [r7, #0]
 800575a:	69b8      	ldr	r0, [r7, #24]
 800575c:	f000 f9cc 	bl	8005af8 <xEventGroupClearBits>
 8005760:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 8005762:	69fb      	ldr	r3, [r7, #28]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3720      	adds	r7, #32
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	20000124 	.word	0x20000124

08005770 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8005770:	b580      	push	{r7, lr}
 8005772:	b08e      	sub	sp, #56	; 0x38
 8005774:	af02      	add	r7, sp, #8
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
 800577c:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d004      	beq.n	8005792 <osEventFlagsWait+0x22>
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8005792:	f06f 0303 	mvn.w	r3, #3
 8005796:	627b      	str	r3, [r7, #36]	; 0x24
 8005798:	e059      	b.n	800584e <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800579a:	f3ef 8305 	mrs	r3, IPSR
 800579e:	61fb      	str	r3, [r7, #28]
  return(result);
 80057a0:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10f      	bne.n	80057c6 <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057a6:	f3ef 8310 	mrs	r3, PRIMASK
 80057aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d109      	bne.n	80057c6 <osEventFlagsWait+0x56>
 80057b2:	4b29      	ldr	r3, [pc, #164]	; (8005858 <osEventFlagsWait+0xe8>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d109      	bne.n	80057ce <osEventFlagsWait+0x5e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80057ba:	f3ef 8311 	mrs	r3, BASEPRI
 80057be:	617b      	str	r3, [r7, #20]
  return(result);
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d003      	beq.n	80057ce <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 80057c6:	f06f 0305 	mvn.w	r3, #5
 80057ca:	627b      	str	r3, [r7, #36]	; 0x24
 80057cc:	e03f      	b.n	800584e <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d002      	beq.n	80057de <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 80057d8:	2301      	movs	r3, #1
 80057da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057dc:	e001      	b.n	80057e2 <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 80057de:	2300      	movs	r3, #0
 80057e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 80057ec:	2300      	movs	r3, #0
 80057ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80057f0:	e001      	b.n	80057f6 <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 80057f2:	2301      	movs	r3, #1
 80057f4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057fe:	68b9      	ldr	r1, [r7, #8]
 8005800:	6a38      	ldr	r0, [r7, #32]
 8005802:	f000 f8af 	bl	8005964 <xEventGroupWaitBits>
 8005806:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00e      	beq.n	8005830 <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	429a      	cmp	r2, r3
 8005818:	d019      	beq.n	800584e <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d003      	beq.n	8005828 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 8005820:	f06f 0301 	mvn.w	r3, #1
 8005824:	627b      	str	r3, [r7, #36]	; 0x24
 8005826:	e012      	b.n	800584e <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8005828:	f06f 0302 	mvn.w	r3, #2
 800582c:	627b      	str	r3, [r7, #36]	; 0x24
 800582e:	e00e      	b.n	800584e <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005834:	4013      	ands	r3, r2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d109      	bne.n	800584e <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d003      	beq.n	8005848 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 8005840:	f06f 0301 	mvn.w	r3, #1
 8005844:	627b      	str	r3, [r7, #36]	; 0x24
 8005846:	e002      	b.n	800584e <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8005848:	f06f 0302 	mvn.w	r3, #2
 800584c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005850:	4618      	mov	r0, r3
 8005852:	3730      	adds	r7, #48	; 0x30
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	20000124 	.word	0x20000124

0800585c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	4a07      	ldr	r2, [pc, #28]	; (8005888 <vApplicationGetIdleTaskMemory+0x2c>)
 800586c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	4a06      	ldr	r2, [pc, #24]	; (800588c <vApplicationGetIdleTaskMemory+0x30>)
 8005872:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2280      	movs	r2, #128	; 0x80
 8005878:	601a      	str	r2, [r3, #0]
}
 800587a:	bf00      	nop
 800587c:	3714      	adds	r7, #20
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	20000128 	.word	0x20000128
 800588c:	20000184 	.word	0x20000184

08005890 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	4a07      	ldr	r2, [pc, #28]	; (80058bc <vApplicationGetTimerTaskMemory+0x2c>)
 80058a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	4a06      	ldr	r2, [pc, #24]	; (80058c0 <vApplicationGetTimerTaskMemory+0x30>)
 80058a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058ae:	601a      	str	r2, [r3, #0]
}
 80058b0:	bf00      	nop
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	20000384 	.word	0x20000384
 80058c0:	200003e0 	.word	0x200003e0

080058c4 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d109      	bne.n	80058e6 <xEventGroupCreateStatic+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80058d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	613b      	str	r3, [r7, #16]
 80058e4:	e7fe      	b.n	80058e4 <xEventGroupCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80058e6:	2320      	movs	r3, #32
 80058e8:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	2b20      	cmp	r3, #32
 80058ee:	d009      	beq.n	8005904 <xEventGroupCreateStatic+0x40>
 80058f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f4:	f383 8811 	msr	BASEPRI, r3
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	60fb      	str	r3, [r7, #12]
 8005902:	e7fe      	b.n	8005902 <xEventGroupCreateStatic+0x3e>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00a      	beq.n	8005924 <xEventGroupCreateStatic+0x60>
		{
			pxEventBits->uxEventBits = 0;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	3304      	adds	r3, #4
 8005918:	4618      	mov	r0, r3
 800591a:	f000 fa33 	bl	8005d84 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	2201      	movs	r2, #1
 8005922:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8005924:	697b      	ldr	r3, [r7, #20]
	}
 8005926:	4618      	mov	r0, r3
 8005928:	3718      	adds	r7, #24
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800592e:	b580      	push	{r7, lr}
 8005930:	b082      	sub	sp, #8
 8005932:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8005934:	2020      	movs	r0, #32
 8005936:	f002 fcb3 	bl	80082a0 <pvPortMalloc>
 800593a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00a      	beq.n	8005958 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	3304      	adds	r3, #4
 800594c:	4618      	mov	r0, r3
 800594e:	f000 fa19 	bl	8005d84 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8005958:	687b      	ldr	r3, [r7, #4]
	}
 800595a:	4618      	mov	r0, r3
 800595c:	3708      	adds	r7, #8
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
	...

08005964 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b090      	sub	sp, #64	; 0x40
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
 8005970:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8005976:	2300      	movs	r3, #0
 8005978:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800597a:	2300      	movs	r3, #0
 800597c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d109      	bne.n	8005998 <xEventGroupWaitBits+0x34>
 8005984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005988:	f383 8811 	msr	BASEPRI, r3
 800598c:	f3bf 8f6f 	isb	sy
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	623b      	str	r3, [r7, #32]
 8005996:	e7fe      	b.n	8005996 <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d009      	beq.n	80059b6 <xEventGroupWaitBits+0x52>
 80059a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a6:	f383 8811 	msr	BASEPRI, r3
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	61fb      	str	r3, [r7, #28]
 80059b4:	e7fe      	b.n	80059b4 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d109      	bne.n	80059d0 <xEventGroupWaitBits+0x6c>
 80059bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c0:	f383 8811 	msr	BASEPRI, r3
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	61bb      	str	r3, [r7, #24]
 80059ce:	e7fe      	b.n	80059ce <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059d0:	f001 fe04 	bl	80075dc <xTaskGetSchedulerState>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d102      	bne.n	80059e0 <xEventGroupWaitBits+0x7c>
 80059da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d101      	bne.n	80059e4 <xEventGroupWaitBits+0x80>
 80059e0:	2301      	movs	r3, #1
 80059e2:	e000      	b.n	80059e6 <xEventGroupWaitBits+0x82>
 80059e4:	2300      	movs	r3, #0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d109      	bne.n	80059fe <xEventGroupWaitBits+0x9a>
 80059ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ee:	f383 8811 	msr	BASEPRI, r3
 80059f2:	f3bf 8f6f 	isb	sy
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	617b      	str	r3, [r7, #20]
 80059fc:	e7fe      	b.n	80059fc <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 80059fe:	f001 f975 	bl	8006cec <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	68b9      	ldr	r1, [r7, #8]
 8005a0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a0e:	f000 f983 	bl	8005d18 <prvTestWaitCondition>
 8005a12:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8005a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00e      	beq.n	8005a38 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8005a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d028      	beq.n	8005a7a <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	43db      	mvns	r3, r3
 8005a30:	401a      	ands	r2, r3
 8005a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	e020      	b.n	8005a7a <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005a38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d104      	bne.n	8005a48 <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8005a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a40:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8005a42:	2301      	movs	r3, #1
 8005a44:	633b      	str	r3, [r7, #48]	; 0x30
 8005a46:	e018      	b.n	8005a7a <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8005a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a54:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d003      	beq.n	8005a64 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a62:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a66:	1d18      	adds	r0, r3, #4
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a70:	4619      	mov	r1, r3
 8005a72:	f001 fb33 	bl	80070dc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8005a76:	2300      	movs	r3, #0
 8005a78:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8005a7a:	f001 f945 	bl	8006d08 <xTaskResumeAll>
 8005a7e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8005a80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d031      	beq.n	8005aea <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d107      	bne.n	8005a9c <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 8005a8c:	4b19      	ldr	r3, [pc, #100]	; (8005af4 <xEventGroupWaitBits+0x190>)
 8005a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8005a9c:	f001 fe28 	bl	80076f0 <uxTaskResetEventItemValue>
 8005aa0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d11a      	bne.n	8005ae2 <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 8005aac:	f002 fade 	bl	800806c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8005ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8005ab6:	683a      	ldr	r2, [r7, #0]
 8005ab8:	68b9      	ldr	r1, [r7, #8]
 8005aba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005abc:	f000 f92c 	bl	8005d18 <prvTestWaitCondition>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d009      	beq.n	8005ada <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d006      	beq.n	8005ada <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	43db      	mvns	r3, r3
 8005ad4:	401a      	ands	r2, r3
 8005ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8005ada:	2301      	movs	r3, #1
 8005adc:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8005ade:	f002 faf3 	bl	80080c8 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ae4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8005aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3740      	adds	r7, #64	; 0x40
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	e000ed04 	.word	0xe000ed04

08005af8 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d109      	bne.n	8005b20 <xEventGroupClearBits+0x28>
 8005b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	e7fe      	b.n	8005b1e <xEventGroupClearBits+0x26>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d009      	beq.n	8005b3e <xEventGroupClearBits+0x46>
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	60bb      	str	r3, [r7, #8]
 8005b3c:	e7fe      	b.n	8005b3c <xEventGroupClearBits+0x44>

	taskENTER_CRITICAL();
 8005b3e:	f002 fa95 	bl	800806c <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	43db      	mvns	r3, r3
 8005b50:	401a      	ands	r2, r3
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8005b56:	f002 fab7 	bl	80080c8 <vPortExitCritical>

	return uxReturn;
 8005b5a:	693b      	ldr	r3, [r7, #16]
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3718      	adds	r7, #24
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL );
 8005b6e:	2300      	movs	r3, #0
 8005b70:	683a      	ldr	r2, [r7, #0]
 8005b72:	6879      	ldr	r1, [r7, #4]
 8005b74:	4804      	ldr	r0, [pc, #16]	; (8005b88 <xEventGroupClearBitsFromISR+0x24>)
 8005b76:	f002 f931 	bl	8007ddc <xTimerPendFunctionCallFromISR>
 8005b7a:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
	}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	08005cff 	.word	0x08005cff

08005b8c <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b089      	sub	sp, #36	; 0x24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005b98:	f3ef 8211 	mrs	r2, BASEPRI
 8005b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba0:	f383 8811 	msr	BASEPRI, r3
 8005ba4:	f3bf 8f6f 	isb	sy
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	60fa      	str	r2, [r7, #12]
 8005bae:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005bb2:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	617b      	str	r3, [r7, #20]
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f383 8811 	msr	BASEPRI, r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8005bc4:	697b      	ldr	r3, [r7, #20]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3724      	adds	r7, #36	; 0x24
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr

08005bd2 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b08e      	sub	sp, #56	; 0x38
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8005be4:	2300      	movs	r3, #0
 8005be6:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d109      	bne.n	8005c02 <xEventGroupSetBits+0x30>
	__asm volatile
 8005bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf2:	f383 8811 	msr	BASEPRI, r3
 8005bf6:	f3bf 8f6f 	isb	sy
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	613b      	str	r3, [r7, #16]
 8005c00:	e7fe      	b.n	8005c00 <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d009      	beq.n	8005c20 <xEventGroupSetBits+0x4e>
 8005c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	e7fe      	b.n	8005c1e <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8005c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c22:	3304      	adds	r3, #4
 8005c24:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	3308      	adds	r3, #8
 8005c2a:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8005c2c:	f001 f85e 	bl	8006cec <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c40:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8005c42:	e03c      	b.n	8005cbe <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 8005c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8005c50:	2300      	movs	r3, #0
 8005c52:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005c5a:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005c62:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d108      	bne.n	8005c80 <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	4013      	ands	r3, r2
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00b      	beq.n	8005c92 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c7e:	e008      	b.n	8005c92 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	4013      	ands	r3, r2
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d101      	bne.n	8005c92 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d010      	beq.n	8005cba <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005ca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005cb2:	4619      	mov	r1, r3
 8005cb4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005cb6:	f001 fad7 	bl	8007268 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8005cbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d1be      	bne.n	8005c44 <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ccc:	43db      	mvns	r3, r3
 8005cce:	401a      	ands	r2, r3
 8005cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd2:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8005cd4:	f001 f818 	bl	8006d08 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8005cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cda:	681b      	ldr	r3, [r3, #0]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3738      	adds	r7, #56	; 0x38
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8005cee:	6839      	ldr	r1, [r7, #0]
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7ff ff6e 	bl	8005bd2 <xEventGroupSetBits>
}
 8005cf6:	bf00      	nop
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b082      	sub	sp, #8
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
 8005d06:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 8005d08:	6839      	ldr	r1, [r7, #0]
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f7ff fef4 	bl	8005af8 <xEventGroupClearBits>
}
 8005d10:	bf00      	nop
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b087      	sub	sp, #28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8005d24:	2300      	movs	r3, #0
 8005d26:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d107      	bne.n	8005d3e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	4013      	ands	r3, r2
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00a      	beq.n	8005d4e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	617b      	str	r3, [r7, #20]
 8005d3c:	e007      	b.n	8005d4e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	4013      	ands	r3, r2
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d101      	bne.n	8005d4e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8005d4e:	697b      	ldr	r3, [r7, #20]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	371c      	adds	r7, #28
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	68f9      	ldr	r1, [r7, #12]
 8005d6e:	4804      	ldr	r0, [pc, #16]	; (8005d80 <xEventGroupSetBitsFromISR+0x24>)
 8005d70:	f002 f834 	bl	8007ddc <xTimerPendFunctionCallFromISR>
 8005d74:	6178      	str	r0, [r7, #20]

		return xReturn;
 8005d76:	697b      	ldr	r3, [r7, #20]
	}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3718      	adds	r7, #24
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	08005ce5 	.word	0x08005ce5

08005d84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f103 0208 	add.w	r2, r3, #8
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f04f 32ff 	mov.w	r2, #4294967295
 8005d9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f103 0208 	add.w	r2, r3, #8
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f103 0208 	add.w	r2, r3, #8
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005dd2:	bf00      	nop
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005dde:	b480      	push	{r7}
 8005de0:	b085      	sub	sp, #20
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	689a      	ldr	r2, [r3, #8]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	1c5a      	adds	r2, r3, #1
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	601a      	str	r2, [r3, #0]
}
 8005e1a:	bf00      	nop
 8005e1c:	3714      	adds	r7, #20
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e26:	b480      	push	{r7}
 8005e28:	b085      	sub	sp, #20
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
 8005e2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e3c:	d103      	bne.n	8005e46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	60fb      	str	r3, [r7, #12]
 8005e44:	e00c      	b.n	8005e60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	3308      	adds	r3, #8
 8005e4a:	60fb      	str	r3, [r7, #12]
 8005e4c:	e002      	b.n	8005e54 <vListInsert+0x2e>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d2f6      	bcs.n	8005e4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	683a      	ldr	r2, [r7, #0]
 8005e7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	1c5a      	adds	r2, r3, #1
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	601a      	str	r2, [r3, #0]
}
 8005e8c:	bf00      	nop
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	6892      	ldr	r2, [r2, #8]
 8005eae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	6852      	ldr	r2, [r2, #4]
 8005eb8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d103      	bne.n	8005ecc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689a      	ldr	r2, [r3, #8]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	1e5a      	subs	r2, r3, #1
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3714      	adds	r7, #20
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d109      	bne.n	8005f14 <xQueueGenericReset+0x28>
 8005f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	60bb      	str	r3, [r7, #8]
 8005f12:	e7fe      	b.n	8005f12 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005f14:	f002 f8aa 	bl	800806c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f20:	68f9      	ldr	r1, [r7, #12]
 8005f22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f24:	fb01 f303 	mul.w	r3, r1, r3
 8005f28:	441a      	add	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f44:	3b01      	subs	r3, #1
 8005f46:	68f9      	ldr	r1, [r7, #12]
 8005f48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f4a:	fb01 f303 	mul.w	r3, r1, r3
 8005f4e:	441a      	add	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	22ff      	movs	r2, #255	; 0xff
 8005f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	22ff      	movs	r2, #255	; 0xff
 8005f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d114      	bne.n	8005f94 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d01a      	beq.n	8005fa8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	3310      	adds	r3, #16
 8005f76:	4618      	mov	r0, r3
 8005f78:	f001 f914 	bl	80071a4 <xTaskRemoveFromEventList>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d012      	beq.n	8005fa8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005f82:	4b0d      	ldr	r3, [pc, #52]	; (8005fb8 <xQueueGenericReset+0xcc>)
 8005f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f88:	601a      	str	r2, [r3, #0]
 8005f8a:	f3bf 8f4f 	dsb	sy
 8005f8e:	f3bf 8f6f 	isb	sy
 8005f92:	e009      	b.n	8005fa8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	3310      	adds	r3, #16
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7ff fef3 	bl	8005d84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	3324      	adds	r3, #36	; 0x24
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7ff feee 	bl	8005d84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005fa8:	f002 f88e 	bl	80080c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005fac:	2301      	movs	r3, #1
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	e000ed04 	.word	0xe000ed04

08005fbc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b08e      	sub	sp, #56	; 0x38
 8005fc0:	af02      	add	r7, sp, #8
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
 8005fc8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d109      	bne.n	8005fe4 <xQueueGenericCreateStatic+0x28>
 8005fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fe2:	e7fe      	b.n	8005fe2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d109      	bne.n	8005ffe <xQueueGenericCreateStatic+0x42>
 8005fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fee:	f383 8811 	msr	BASEPRI, r3
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8005ffc:	e7fe      	b.n	8005ffc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d002      	beq.n	800600a <xQueueGenericCreateStatic+0x4e>
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <xQueueGenericCreateStatic+0x52>
 800600a:	2301      	movs	r3, #1
 800600c:	e000      	b.n	8006010 <xQueueGenericCreateStatic+0x54>
 800600e:	2300      	movs	r3, #0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d109      	bne.n	8006028 <xQueueGenericCreateStatic+0x6c>
 8006014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006018:	f383 8811 	msr	BASEPRI, r3
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	f3bf 8f4f 	dsb	sy
 8006024:	623b      	str	r3, [r7, #32]
 8006026:	e7fe      	b.n	8006026 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d102      	bne.n	8006034 <xQueueGenericCreateStatic+0x78>
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <xQueueGenericCreateStatic+0x7c>
 8006034:	2301      	movs	r3, #1
 8006036:	e000      	b.n	800603a <xQueueGenericCreateStatic+0x7e>
 8006038:	2300      	movs	r3, #0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d109      	bne.n	8006052 <xQueueGenericCreateStatic+0x96>
 800603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	61fb      	str	r3, [r7, #28]
 8006050:	e7fe      	b.n	8006050 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006052:	2350      	movs	r3, #80	; 0x50
 8006054:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	2b50      	cmp	r3, #80	; 0x50
 800605a:	d009      	beq.n	8006070 <xQueueGenericCreateStatic+0xb4>
 800605c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	61bb      	str	r3, [r7, #24]
 800606e:	e7fe      	b.n	800606e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00d      	beq.n	8006096 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800607a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006082:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	4613      	mov	r3, r2
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	68b9      	ldr	r1, [r7, #8]
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f000 f805 	bl	80060a0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006098:	4618      	mov	r0, r3
 800609a:	3730      	adds	r7, #48	; 0x30
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
 80060ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d103      	bne.n	80060bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	601a      	str	r2, [r3, #0]
 80060ba:	e002      	b.n	80060c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80060ce:	2101      	movs	r1, #1
 80060d0:	69b8      	ldr	r0, [r7, #24]
 80060d2:	f7ff ff0b 	bl	8005eec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	78fa      	ldrb	r2, [r7, #3]
 80060da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80060de:	bf00      	nop
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
	...

080060e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b08e      	sub	sp, #56	; 0x38
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
 80060f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80060f6:	2300      	movs	r3, #0
 80060f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80060fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006100:	2b00      	cmp	r3, #0
 8006102:	d109      	bne.n	8006118 <xQueueGenericSend+0x30>
 8006104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006108:	f383 8811 	msr	BASEPRI, r3
 800610c:	f3bf 8f6f 	isb	sy
 8006110:	f3bf 8f4f 	dsb	sy
 8006114:	62bb      	str	r3, [r7, #40]	; 0x28
 8006116:	e7fe      	b.n	8006116 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d103      	bne.n	8006126 <xQueueGenericSend+0x3e>
 800611e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <xQueueGenericSend+0x42>
 8006126:	2301      	movs	r3, #1
 8006128:	e000      	b.n	800612c <xQueueGenericSend+0x44>
 800612a:	2300      	movs	r3, #0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d109      	bne.n	8006144 <xQueueGenericSend+0x5c>
 8006130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006134:	f383 8811 	msr	BASEPRI, r3
 8006138:	f3bf 8f6f 	isb	sy
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	627b      	str	r3, [r7, #36]	; 0x24
 8006142:	e7fe      	b.n	8006142 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	2b02      	cmp	r3, #2
 8006148:	d103      	bne.n	8006152 <xQueueGenericSend+0x6a>
 800614a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800614e:	2b01      	cmp	r3, #1
 8006150:	d101      	bne.n	8006156 <xQueueGenericSend+0x6e>
 8006152:	2301      	movs	r3, #1
 8006154:	e000      	b.n	8006158 <xQueueGenericSend+0x70>
 8006156:	2300      	movs	r3, #0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d109      	bne.n	8006170 <xQueueGenericSend+0x88>
 800615c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006160:	f383 8811 	msr	BASEPRI, r3
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	623b      	str	r3, [r7, #32]
 800616e:	e7fe      	b.n	800616e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006170:	f001 fa34 	bl	80075dc <xTaskGetSchedulerState>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d102      	bne.n	8006180 <xQueueGenericSend+0x98>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <xQueueGenericSend+0x9c>
 8006180:	2301      	movs	r3, #1
 8006182:	e000      	b.n	8006186 <xQueueGenericSend+0x9e>
 8006184:	2300      	movs	r3, #0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d109      	bne.n	800619e <xQueueGenericSend+0xb6>
 800618a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	61fb      	str	r3, [r7, #28]
 800619c:	e7fe      	b.n	800619c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800619e:	f001 ff65 	bl	800806c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80061a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d302      	bcc.n	80061b4 <xQueueGenericSend+0xcc>
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d129      	bne.n	8006208 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	68b9      	ldr	r1, [r7, #8]
 80061b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061ba:	f000 f9ff 	bl	80065bc <prvCopyDataToQueue>
 80061be:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d010      	beq.n	80061ea <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ca:	3324      	adds	r3, #36	; 0x24
 80061cc:	4618      	mov	r0, r3
 80061ce:	f000 ffe9 	bl	80071a4 <xTaskRemoveFromEventList>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d013      	beq.n	8006200 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80061d8:	4b3f      	ldr	r3, [pc, #252]	; (80062d8 <xQueueGenericSend+0x1f0>)
 80061da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061de:	601a      	str	r2, [r3, #0]
 80061e0:	f3bf 8f4f 	dsb	sy
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	e00a      	b.n	8006200 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80061ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d007      	beq.n	8006200 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80061f0:	4b39      	ldr	r3, [pc, #228]	; (80062d8 <xQueueGenericSend+0x1f0>)
 80061f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061f6:	601a      	str	r2, [r3, #0]
 80061f8:	f3bf 8f4f 	dsb	sy
 80061fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006200:	f001 ff62 	bl	80080c8 <vPortExitCritical>
				return pdPASS;
 8006204:	2301      	movs	r3, #1
 8006206:	e063      	b.n	80062d0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d103      	bne.n	8006216 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800620e:	f001 ff5b 	bl	80080c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006212:	2300      	movs	r3, #0
 8006214:	e05c      	b.n	80062d0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006218:	2b00      	cmp	r3, #0
 800621a:	d106      	bne.n	800622a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800621c:	f107 0314 	add.w	r3, r7, #20
 8006220:	4618      	mov	r0, r3
 8006222:	f001 f881 	bl	8007328 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006226:	2301      	movs	r3, #1
 8006228:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800622a:	f001 ff4d 	bl	80080c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800622e:	f000 fd5d 	bl	8006cec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006232:	f001 ff1b 	bl	800806c <vPortEnterCritical>
 8006236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006238:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800623c:	b25b      	sxtb	r3, r3
 800623e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006242:	d103      	bne.n	800624c <xQueueGenericSend+0x164>
 8006244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006246:	2200      	movs	r2, #0
 8006248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800624c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006252:	b25b      	sxtb	r3, r3
 8006254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006258:	d103      	bne.n	8006262 <xQueueGenericSend+0x17a>
 800625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006262:	f001 ff31 	bl	80080c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006266:	1d3a      	adds	r2, r7, #4
 8006268:	f107 0314 	add.w	r3, r7, #20
 800626c:	4611      	mov	r1, r2
 800626e:	4618      	mov	r0, r3
 8006270:	f001 f870 	bl	8007354 <xTaskCheckForTimeOut>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d124      	bne.n	80062c4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800627a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800627c:	f000 fa96 	bl	80067ac <prvIsQueueFull>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d018      	beq.n	80062b8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006288:	3310      	adds	r3, #16
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	4611      	mov	r1, r2
 800628e:	4618      	mov	r0, r3
 8006290:	f000 ff00 	bl	8007094 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006294:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006296:	f000 fa21 	bl	80066dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800629a:	f000 fd35 	bl	8006d08 <xTaskResumeAll>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f47f af7c 	bne.w	800619e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80062a6:	4b0c      	ldr	r3, [pc, #48]	; (80062d8 <xQueueGenericSend+0x1f0>)
 80062a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	e772      	b.n	800619e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80062b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062ba:	f000 fa0f 	bl	80066dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062be:	f000 fd23 	bl	8006d08 <xTaskResumeAll>
 80062c2:	e76c      	b.n	800619e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80062c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062c6:	f000 fa09 	bl	80066dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062ca:	f000 fd1d 	bl	8006d08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80062ce:	2300      	movs	r3, #0
		}
	}
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3738      	adds	r7, #56	; 0x38
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	e000ed04 	.word	0xe000ed04

080062dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b08e      	sub	sp, #56	; 0x38
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
 80062e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80062ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d109      	bne.n	8006308 <xQueueGenericSendFromISR+0x2c>
 80062f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f8:	f383 8811 	msr	BASEPRI, r3
 80062fc:	f3bf 8f6f 	isb	sy
 8006300:	f3bf 8f4f 	dsb	sy
 8006304:	627b      	str	r3, [r7, #36]	; 0x24
 8006306:	e7fe      	b.n	8006306 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d103      	bne.n	8006316 <xQueueGenericSendFromISR+0x3a>
 800630e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006312:	2b00      	cmp	r3, #0
 8006314:	d101      	bne.n	800631a <xQueueGenericSendFromISR+0x3e>
 8006316:	2301      	movs	r3, #1
 8006318:	e000      	b.n	800631c <xQueueGenericSendFromISR+0x40>
 800631a:	2300      	movs	r3, #0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d109      	bne.n	8006334 <xQueueGenericSendFromISR+0x58>
 8006320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	623b      	str	r3, [r7, #32]
 8006332:	e7fe      	b.n	8006332 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	2b02      	cmp	r3, #2
 8006338:	d103      	bne.n	8006342 <xQueueGenericSendFromISR+0x66>
 800633a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800633e:	2b01      	cmp	r3, #1
 8006340:	d101      	bne.n	8006346 <xQueueGenericSendFromISR+0x6a>
 8006342:	2301      	movs	r3, #1
 8006344:	e000      	b.n	8006348 <xQueueGenericSendFromISR+0x6c>
 8006346:	2300      	movs	r3, #0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d109      	bne.n	8006360 <xQueueGenericSendFromISR+0x84>
 800634c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	61fb      	str	r3, [r7, #28]
 800635e:	e7fe      	b.n	800635e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006360:	f001 ff60 	bl	8008224 <vPortValidateInterruptPriority>
	__asm volatile
 8006364:	f3ef 8211 	mrs	r2, BASEPRI
 8006368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636c:	f383 8811 	msr	BASEPRI, r3
 8006370:	f3bf 8f6f 	isb	sy
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	61ba      	str	r2, [r7, #24]
 800637a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800637c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800637e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006388:	429a      	cmp	r2, r3
 800638a:	d302      	bcc.n	8006392 <xQueueGenericSendFromISR+0xb6>
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	2b02      	cmp	r3, #2
 8006390:	d12c      	bne.n	80063ec <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006394:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006398:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800639c:	683a      	ldr	r2, [r7, #0]
 800639e:	68b9      	ldr	r1, [r7, #8]
 80063a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063a2:	f000 f90b 	bl	80065bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80063a6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80063aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ae:	d112      	bne.n	80063d6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d016      	beq.n	80063e6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ba:	3324      	adds	r3, #36	; 0x24
 80063bc:	4618      	mov	r0, r3
 80063be:	f000 fef1 	bl	80071a4 <xTaskRemoveFromEventList>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00e      	beq.n	80063e6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00b      	beq.n	80063e6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	e007      	b.n	80063e6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80063d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80063da:	3301      	adds	r3, #1
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	b25a      	sxtb	r2, r3
 80063e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80063e6:	2301      	movs	r3, #1
 80063e8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80063ea:	e001      	b.n	80063f0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80063ec:	2300      	movs	r3, #0
 80063ee:	637b      	str	r3, [r7, #52]	; 0x34
 80063f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f2:	613b      	str	r3, [r7, #16]
	__asm volatile
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3738      	adds	r7, #56	; 0x38
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b08c      	sub	sp, #48	; 0x30
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006410:	2300      	movs	r3, #0
 8006412:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641a:	2b00      	cmp	r3, #0
 800641c:	d109      	bne.n	8006432 <xQueueReceive+0x2e>
	__asm volatile
 800641e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	623b      	str	r3, [r7, #32]
 8006430:	e7fe      	b.n	8006430 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d103      	bne.n	8006440 <xQueueReceive+0x3c>
 8006438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643c:	2b00      	cmp	r3, #0
 800643e:	d101      	bne.n	8006444 <xQueueReceive+0x40>
 8006440:	2301      	movs	r3, #1
 8006442:	e000      	b.n	8006446 <xQueueReceive+0x42>
 8006444:	2300      	movs	r3, #0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d109      	bne.n	800645e <xQueueReceive+0x5a>
 800644a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	61fb      	str	r3, [r7, #28]
 800645c:	e7fe      	b.n	800645c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800645e:	f001 f8bd 	bl	80075dc <xTaskGetSchedulerState>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d102      	bne.n	800646e <xQueueReceive+0x6a>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <xQueueReceive+0x6e>
 800646e:	2301      	movs	r3, #1
 8006470:	e000      	b.n	8006474 <xQueueReceive+0x70>
 8006472:	2300      	movs	r3, #0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d109      	bne.n	800648c <xQueueReceive+0x88>
 8006478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647c:	f383 8811 	msr	BASEPRI, r3
 8006480:	f3bf 8f6f 	isb	sy
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	61bb      	str	r3, [r7, #24]
 800648a:	e7fe      	b.n	800648a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800648c:	f001 fdee 	bl	800806c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006494:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	2b00      	cmp	r3, #0
 800649a:	d01f      	beq.n	80064dc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800649c:	68b9      	ldr	r1, [r7, #8]
 800649e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064a0:	f000 f8f6 	bl	8006690 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	1e5a      	subs	r2, r3, #1
 80064a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064aa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00f      	beq.n	80064d4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b6:	3310      	adds	r3, #16
 80064b8:	4618      	mov	r0, r3
 80064ba:	f000 fe73 	bl	80071a4 <xTaskRemoveFromEventList>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d007      	beq.n	80064d4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80064c4:	4b3c      	ldr	r3, [pc, #240]	; (80065b8 <xQueueReceive+0x1b4>)
 80064c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ca:	601a      	str	r2, [r3, #0]
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80064d4:	f001 fdf8 	bl	80080c8 <vPortExitCritical>
				return pdPASS;
 80064d8:	2301      	movs	r3, #1
 80064da:	e069      	b.n	80065b0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d103      	bne.n	80064ea <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064e2:	f001 fdf1 	bl	80080c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80064e6:	2300      	movs	r3, #0
 80064e8:	e062      	b.n	80065b0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d106      	bne.n	80064fe <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064f0:	f107 0310 	add.w	r3, r7, #16
 80064f4:	4618      	mov	r0, r3
 80064f6:	f000 ff17 	bl	8007328 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064fa:	2301      	movs	r3, #1
 80064fc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064fe:	f001 fde3 	bl	80080c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006502:	f000 fbf3 	bl	8006cec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006506:	f001 fdb1 	bl	800806c <vPortEnterCritical>
 800650a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006510:	b25b      	sxtb	r3, r3
 8006512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006516:	d103      	bne.n	8006520 <xQueueReceive+0x11c>
 8006518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651a:	2200      	movs	r2, #0
 800651c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006522:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006526:	b25b      	sxtb	r3, r3
 8006528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652c:	d103      	bne.n	8006536 <xQueueReceive+0x132>
 800652e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006530:	2200      	movs	r2, #0
 8006532:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006536:	f001 fdc7 	bl	80080c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800653a:	1d3a      	adds	r2, r7, #4
 800653c:	f107 0310 	add.w	r3, r7, #16
 8006540:	4611      	mov	r1, r2
 8006542:	4618      	mov	r0, r3
 8006544:	f000 ff06 	bl	8007354 <xTaskCheckForTimeOut>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d123      	bne.n	8006596 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800654e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006550:	f000 f916 	bl	8006780 <prvIsQueueEmpty>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d017      	beq.n	800658a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800655a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655c:	3324      	adds	r3, #36	; 0x24
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	4611      	mov	r1, r2
 8006562:	4618      	mov	r0, r3
 8006564:	f000 fd96 	bl	8007094 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006568:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800656a:	f000 f8b7 	bl	80066dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800656e:	f000 fbcb 	bl	8006d08 <xTaskResumeAll>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d189      	bne.n	800648c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006578:	4b0f      	ldr	r3, [pc, #60]	; (80065b8 <xQueueReceive+0x1b4>)
 800657a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800657e:	601a      	str	r2, [r3, #0]
 8006580:	f3bf 8f4f 	dsb	sy
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	e780      	b.n	800648c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800658a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800658c:	f000 f8a6 	bl	80066dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006590:	f000 fbba 	bl	8006d08 <xTaskResumeAll>
 8006594:	e77a      	b.n	800648c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006596:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006598:	f000 f8a0 	bl	80066dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800659c:	f000 fbb4 	bl	8006d08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065a2:	f000 f8ed 	bl	8006780 <prvIsQueueEmpty>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f43f af6f 	beq.w	800648c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80065ae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3730      	adds	r7, #48	; 0x30
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	e000ed04 	.word	0xe000ed04

080065bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80065c8:	2300      	movs	r3, #0
 80065ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10d      	bne.n	80065f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d14d      	bne.n	800667e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f001 f816 	bl	8007618 <xTaskPriorityDisinherit>
 80065ec:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	605a      	str	r2, [r3, #4]
 80065f4:	e043      	b.n	800667e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d119      	bne.n	8006630 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6898      	ldr	r0, [r3, #8]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006604:	461a      	mov	r2, r3
 8006606:	68b9      	ldr	r1, [r7, #8]
 8006608:	f002 f84a 	bl	80086a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	689a      	ldr	r2, [r3, #8]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006614:	441a      	add	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	689a      	ldr	r2, [r3, #8]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	429a      	cmp	r2, r3
 8006624:	d32b      	bcc.n	800667e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	609a      	str	r2, [r3, #8]
 800662e:	e026      	b.n	800667e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	68d8      	ldr	r0, [r3, #12]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006638:	461a      	mov	r2, r3
 800663a:	68b9      	ldr	r1, [r7, #8]
 800663c:	f002 f830 	bl	80086a0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	68da      	ldr	r2, [r3, #12]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006648:	425b      	negs	r3, r3
 800664a:	441a      	add	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	68da      	ldr	r2, [r3, #12]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	429a      	cmp	r2, r3
 800665a:	d207      	bcs.n	800666c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006664:	425b      	negs	r3, r3
 8006666:	441a      	add	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b02      	cmp	r3, #2
 8006670:	d105      	bne.n	800667e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d002      	beq.n	800667e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	3b01      	subs	r3, #1
 800667c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	1c5a      	adds	r2, r3, #1
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006686:	697b      	ldr	r3, [r7, #20]
}
 8006688:	4618      	mov	r0, r3
 800668a:	3718      	adds	r7, #24
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d018      	beq.n	80066d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	68da      	ldr	r2, [r3, #12]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	441a      	add	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68da      	ldr	r2, [r3, #12]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d303      	bcc.n	80066c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	68d9      	ldr	r1, [r3, #12]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066cc:	461a      	mov	r2, r3
 80066ce:	6838      	ldr	r0, [r7, #0]
 80066d0:	f001 ffe6 	bl	80086a0 <memcpy>
	}
}
 80066d4:	bf00      	nop
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80066e4:	f001 fcc2 	bl	800806c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066f0:	e011      	b.n	8006716 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d012      	beq.n	8006720 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	3324      	adds	r3, #36	; 0x24
 80066fe:	4618      	mov	r0, r3
 8006700:	f000 fd50 	bl	80071a4 <xTaskRemoveFromEventList>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d001      	beq.n	800670e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800670a:	f000 fe83 	bl	8007414 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800670e:	7bfb      	ldrb	r3, [r7, #15]
 8006710:	3b01      	subs	r3, #1
 8006712:	b2db      	uxtb	r3, r3
 8006714:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800671a:	2b00      	cmp	r3, #0
 800671c:	dce9      	bgt.n	80066f2 <prvUnlockQueue+0x16>
 800671e:	e000      	b.n	8006722 <prvUnlockQueue+0x46>
					break;
 8006720:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	22ff      	movs	r2, #255	; 0xff
 8006726:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800672a:	f001 fccd 	bl	80080c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800672e:	f001 fc9d 	bl	800806c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006738:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800673a:	e011      	b.n	8006760 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d012      	beq.n	800676a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	3310      	adds	r3, #16
 8006748:	4618      	mov	r0, r3
 800674a:	f000 fd2b 	bl	80071a4 <xTaskRemoveFromEventList>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d001      	beq.n	8006758 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006754:	f000 fe5e 	bl	8007414 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006758:	7bbb      	ldrb	r3, [r7, #14]
 800675a:	3b01      	subs	r3, #1
 800675c:	b2db      	uxtb	r3, r3
 800675e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006760:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006764:	2b00      	cmp	r3, #0
 8006766:	dce9      	bgt.n	800673c <prvUnlockQueue+0x60>
 8006768:	e000      	b.n	800676c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800676a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	22ff      	movs	r2, #255	; 0xff
 8006770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006774:	f001 fca8 	bl	80080c8 <vPortExitCritical>
}
 8006778:	bf00      	nop
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006788:	f001 fc70 	bl	800806c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006790:	2b00      	cmp	r3, #0
 8006792:	d102      	bne.n	800679a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006794:	2301      	movs	r3, #1
 8006796:	60fb      	str	r3, [r7, #12]
 8006798:	e001      	b.n	800679e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800679a:	2300      	movs	r3, #0
 800679c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800679e:	f001 fc93 	bl	80080c8 <vPortExitCritical>

	return xReturn;
 80067a2:	68fb      	ldr	r3, [r7, #12]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067b4:	f001 fc5a 	bl	800806c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d102      	bne.n	80067ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80067c4:	2301      	movs	r3, #1
 80067c6:	60fb      	str	r3, [r7, #12]
 80067c8:	e001      	b.n	80067ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80067ca:	2300      	movs	r3, #0
 80067cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067ce:	f001 fc7b 	bl	80080c8 <vPortExitCritical>

	return xReturn;
 80067d2:	68fb      	ldr	r3, [r7, #12]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067e6:	2300      	movs	r3, #0
 80067e8:	60fb      	str	r3, [r7, #12]
 80067ea:	e014      	b.n	8006816 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80067ec:	4a0e      	ldr	r2, [pc, #56]	; (8006828 <vQueueAddToRegistry+0x4c>)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10b      	bne.n	8006810 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80067f8:	490b      	ldr	r1, [pc, #44]	; (8006828 <vQueueAddToRegistry+0x4c>)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006802:	4a09      	ldr	r2, [pc, #36]	; (8006828 <vQueueAddToRegistry+0x4c>)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	00db      	lsls	r3, r3, #3
 8006808:	4413      	add	r3, r2
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800680e:	e005      	b.n	800681c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	3301      	adds	r3, #1
 8006814:	60fb      	str	r3, [r7, #12]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2b07      	cmp	r3, #7
 800681a:	d9e7      	bls.n	80067ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800681c:	bf00      	nop
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr
 8006828:	20009018 	.word	0x20009018

0800682c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800683c:	f001 fc16 	bl	800806c <vPortEnterCritical>
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006846:	b25b      	sxtb	r3, r3
 8006848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800684c:	d103      	bne.n	8006856 <vQueueWaitForMessageRestricted+0x2a>
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800685c:	b25b      	sxtb	r3, r3
 800685e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006862:	d103      	bne.n	800686c <vQueueWaitForMessageRestricted+0x40>
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800686c:	f001 fc2c 	bl	80080c8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006874:	2b00      	cmp	r3, #0
 8006876:	d106      	bne.n	8006886 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	3324      	adds	r3, #36	; 0x24
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	68b9      	ldr	r1, [r7, #8]
 8006880:	4618      	mov	r0, r3
 8006882:	f000 fc65 	bl	8007150 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006886:	6978      	ldr	r0, [r7, #20]
 8006888:	f7ff ff28 	bl	80066dc <prvUnlockQueue>
	}
 800688c:	bf00      	nop
 800688e:	3718      	adds	r7, #24
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006894:	b580      	push	{r7, lr}
 8006896:	b08e      	sub	sp, #56	; 0x38
 8006898:	af04      	add	r7, sp, #16
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
 80068a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80068a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d109      	bne.n	80068bc <xTaskCreateStatic+0x28>
 80068a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ac:	f383 8811 	msr	BASEPRI, r3
 80068b0:	f3bf 8f6f 	isb	sy
 80068b4:	f3bf 8f4f 	dsb	sy
 80068b8:	623b      	str	r3, [r7, #32]
 80068ba:	e7fe      	b.n	80068ba <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80068bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d109      	bne.n	80068d6 <xTaskCreateStatic+0x42>
 80068c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c6:	f383 8811 	msr	BASEPRI, r3
 80068ca:	f3bf 8f6f 	isb	sy
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	61fb      	str	r3, [r7, #28]
 80068d4:	e7fe      	b.n	80068d4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80068d6:	235c      	movs	r3, #92	; 0x5c
 80068d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	2b5c      	cmp	r3, #92	; 0x5c
 80068de:	d009      	beq.n	80068f4 <xTaskCreateStatic+0x60>
 80068e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e4:	f383 8811 	msr	BASEPRI, r3
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	61bb      	str	r3, [r7, #24]
 80068f2:	e7fe      	b.n	80068f2 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80068f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d01e      	beq.n	8006938 <xTaskCreateStatic+0xa4>
 80068fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d01b      	beq.n	8006938 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006902:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006908:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800690a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690c:	2202      	movs	r2, #2
 800690e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006912:	2300      	movs	r3, #0
 8006914:	9303      	str	r3, [sp, #12]
 8006916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006918:	9302      	str	r3, [sp, #8]
 800691a:	f107 0314 	add.w	r3, r7, #20
 800691e:	9301      	str	r3, [sp, #4]
 8006920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	68b9      	ldr	r1, [r7, #8]
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f000 f850 	bl	80069d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006930:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006932:	f000 f8d3 	bl	8006adc <prvAddNewTaskToReadyList>
 8006936:	e001      	b.n	800693c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8006938:	2300      	movs	r3, #0
 800693a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800693c:	697b      	ldr	r3, [r7, #20]
	}
 800693e:	4618      	mov	r0, r3
 8006940:	3728      	adds	r7, #40	; 0x28
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006946:	b580      	push	{r7, lr}
 8006948:	b08c      	sub	sp, #48	; 0x30
 800694a:	af04      	add	r7, sp, #16
 800694c:	60f8      	str	r0, [r7, #12]
 800694e:	60b9      	str	r1, [r7, #8]
 8006950:	603b      	str	r3, [r7, #0]
 8006952:	4613      	mov	r3, r2
 8006954:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006956:	88fb      	ldrh	r3, [r7, #6]
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4618      	mov	r0, r3
 800695c:	f001 fca0 	bl	80082a0 <pvPortMalloc>
 8006960:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00e      	beq.n	8006986 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006968:	205c      	movs	r0, #92	; 0x5c
 800696a:	f001 fc99 	bl	80082a0 <pvPortMalloc>
 800696e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d003      	beq.n	800697e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	697a      	ldr	r2, [r7, #20]
 800697a:	631a      	str	r2, [r3, #48]	; 0x30
 800697c:	e005      	b.n	800698a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800697e:	6978      	ldr	r0, [r7, #20]
 8006980:	f001 fd50 	bl	8008424 <vPortFree>
 8006984:	e001      	b.n	800698a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006986:	2300      	movs	r3, #0
 8006988:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d017      	beq.n	80069c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006998:	88fa      	ldrh	r2, [r7, #6]
 800699a:	2300      	movs	r3, #0
 800699c:	9303      	str	r3, [sp, #12]
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	9302      	str	r3, [sp, #8]
 80069a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a4:	9301      	str	r3, [sp, #4]
 80069a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	68b9      	ldr	r1, [r7, #8]
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f000 f80e 	bl	80069d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069b4:	69f8      	ldr	r0, [r7, #28]
 80069b6:	f000 f891 	bl	8006adc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80069ba:	2301      	movs	r3, #1
 80069bc:	61bb      	str	r3, [r7, #24]
 80069be:	e002      	b.n	80069c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80069c0:	f04f 33ff 	mov.w	r3, #4294967295
 80069c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80069c6:	69bb      	ldr	r3, [r7, #24]
	}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3720      	adds	r7, #32
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b088      	sub	sp, #32
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
 80069dc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80069de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	461a      	mov	r2, r3
 80069e8:	21a5      	movs	r1, #165	; 0xa5
 80069ea:	f001 fe64 	bl	80086b6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80069ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80069f8:	3b01      	subs	r3, #1
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	4413      	add	r3, r2
 80069fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	f023 0307 	bic.w	r3, r3, #7
 8006a06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	f003 0307 	and.w	r3, r3, #7
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d009      	beq.n	8006a26 <prvInitialiseNewTask+0x56>
 8006a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a16:	f383 8811 	msr	BASEPRI, r3
 8006a1a:	f3bf 8f6f 	isb	sy
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	617b      	str	r3, [r7, #20]
 8006a24:	e7fe      	b.n	8006a24 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a26:	2300      	movs	r3, #0
 8006a28:	61fb      	str	r3, [r7, #28]
 8006a2a:	e012      	b.n	8006a52 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	4413      	add	r3, r2
 8006a32:	7819      	ldrb	r1, [r3, #0]
 8006a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	4413      	add	r3, r2
 8006a3a:	3334      	adds	r3, #52	; 0x34
 8006a3c:	460a      	mov	r2, r1
 8006a3e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	4413      	add	r3, r2
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d006      	beq.n	8006a5a <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	61fb      	str	r3, [r7, #28]
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	2b0f      	cmp	r3, #15
 8006a56:	d9e9      	bls.n	8006a2c <prvInitialiseNewTask+0x5c>
 8006a58:	e000      	b.n	8006a5c <prvInitialiseNewTask+0x8c>
		{
			break;
 8006a5a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a66:	2b37      	cmp	r3, #55	; 0x37
 8006a68:	d901      	bls.n	8006a6e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006a6a:	2337      	movs	r3, #55	; 0x37
 8006a6c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a72:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a78:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a82:	3304      	adds	r3, #4
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7ff f99d 	bl	8005dc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	3318      	adds	r3, #24
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7ff f998 	bl	8005dc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a98:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aa8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aac:	2200      	movs	r2, #0
 8006aae:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006ab8:	683a      	ldr	r2, [r7, #0]
 8006aba:	68f9      	ldr	r1, [r7, #12]
 8006abc:	69b8      	ldr	r0, [r7, #24]
 8006abe:	f001 f9ad 	bl	8007e1c <pxPortInitialiseStack>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d002      	beq.n	8006ad4 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ad2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ad4:	bf00      	nop
 8006ad6:	3720      	adds	r7, #32
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006ae4:	f001 fac2 	bl	800806c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006ae8:	4b2d      	ldr	r3, [pc, #180]	; (8006ba0 <prvAddNewTaskToReadyList+0xc4>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	3301      	adds	r3, #1
 8006aee:	4a2c      	ldr	r2, [pc, #176]	; (8006ba0 <prvAddNewTaskToReadyList+0xc4>)
 8006af0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006af2:	4b2c      	ldr	r3, [pc, #176]	; (8006ba4 <prvAddNewTaskToReadyList+0xc8>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d109      	bne.n	8006b0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006afa:	4a2a      	ldr	r2, [pc, #168]	; (8006ba4 <prvAddNewTaskToReadyList+0xc8>)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006b00:	4b27      	ldr	r3, [pc, #156]	; (8006ba0 <prvAddNewTaskToReadyList+0xc4>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d110      	bne.n	8006b2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006b08:	f000 fca8 	bl	800745c <prvInitialiseTaskLists>
 8006b0c:	e00d      	b.n	8006b2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006b0e:	4b26      	ldr	r3, [pc, #152]	; (8006ba8 <prvAddNewTaskToReadyList+0xcc>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d109      	bne.n	8006b2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006b16:	4b23      	ldr	r3, [pc, #140]	; (8006ba4 <prvAddNewTaskToReadyList+0xc8>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d802      	bhi.n	8006b2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006b24:	4a1f      	ldr	r2, [pc, #124]	; (8006ba4 <prvAddNewTaskToReadyList+0xc8>)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006b2a:	4b20      	ldr	r3, [pc, #128]	; (8006bac <prvAddNewTaskToReadyList+0xd0>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	4a1e      	ldr	r2, [pc, #120]	; (8006bac <prvAddNewTaskToReadyList+0xd0>)
 8006b32:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006b34:	4b1d      	ldr	r3, [pc, #116]	; (8006bac <prvAddNewTaskToReadyList+0xd0>)
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b40:	4b1b      	ldr	r3, [pc, #108]	; (8006bb0 <prvAddNewTaskToReadyList+0xd4>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d903      	bls.n	8006b50 <prvAddNewTaskToReadyList+0x74>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4c:	4a18      	ldr	r2, [pc, #96]	; (8006bb0 <prvAddNewTaskToReadyList+0xd4>)
 8006b4e:	6013      	str	r3, [r2, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b54:	4613      	mov	r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4a15      	ldr	r2, [pc, #84]	; (8006bb4 <prvAddNewTaskToReadyList+0xd8>)
 8006b5e:	441a      	add	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	3304      	adds	r3, #4
 8006b64:	4619      	mov	r1, r3
 8006b66:	4610      	mov	r0, r2
 8006b68:	f7ff f939 	bl	8005dde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006b6c:	f001 faac 	bl	80080c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006b70:	4b0d      	ldr	r3, [pc, #52]	; (8006ba8 <prvAddNewTaskToReadyList+0xcc>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00e      	beq.n	8006b96 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006b78:	4b0a      	ldr	r3, [pc, #40]	; (8006ba4 <prvAddNewTaskToReadyList+0xc8>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d207      	bcs.n	8006b96 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006b86:	4b0c      	ldr	r3, [pc, #48]	; (8006bb8 <prvAddNewTaskToReadyList+0xdc>)
 8006b88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b8c:	601a      	str	r2, [r3, #0]
 8006b8e:	f3bf 8f4f 	dsb	sy
 8006b92:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b96:	bf00      	nop
 8006b98:	3708      	adds	r7, #8
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	20000cb4 	.word	0x20000cb4
 8006ba4:	200007e0 	.word	0x200007e0
 8006ba8:	20000cc0 	.word	0x20000cc0
 8006bac:	20000cd0 	.word	0x20000cd0
 8006bb0:	20000cbc 	.word	0x20000cbc
 8006bb4:	200007e4 	.word	0x200007e4
 8006bb8:	e000ed04 	.word	0xe000ed04

08006bbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d016      	beq.n	8006bfc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006bce:	4b13      	ldr	r3, [pc, #76]	; (8006c1c <vTaskDelay+0x60>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d009      	beq.n	8006bea <vTaskDelay+0x2e>
 8006bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bda:	f383 8811 	msr	BASEPRI, r3
 8006bde:	f3bf 8f6f 	isb	sy
 8006be2:	f3bf 8f4f 	dsb	sy
 8006be6:	60bb      	str	r3, [r7, #8]
 8006be8:	e7fe      	b.n	8006be8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006bea:	f000 f87f 	bl	8006cec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006bee:	2100      	movs	r1, #0
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fd95 	bl	8007720 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006bf6:	f000 f887 	bl	8006d08 <xTaskResumeAll>
 8006bfa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d107      	bne.n	8006c12 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006c02:	4b07      	ldr	r3, [pc, #28]	; (8006c20 <vTaskDelay+0x64>)
 8006c04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c08:	601a      	str	r2, [r3, #0]
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c12:	bf00      	nop
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	20000cdc 	.word	0x20000cdc
 8006c20:	e000ed04 	.word	0xe000ed04

08006c24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b08a      	sub	sp, #40	; 0x28
 8006c28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006c32:	463a      	mov	r2, r7
 8006c34:	1d39      	adds	r1, r7, #4
 8006c36:	f107 0308 	add.w	r3, r7, #8
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7fe fe0e 	bl	800585c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006c40:	6839      	ldr	r1, [r7, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	68ba      	ldr	r2, [r7, #8]
 8006c46:	9202      	str	r2, [sp, #8]
 8006c48:	9301      	str	r3, [sp, #4]
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	9300      	str	r3, [sp, #0]
 8006c4e:	2300      	movs	r3, #0
 8006c50:	460a      	mov	r2, r1
 8006c52:	4920      	ldr	r1, [pc, #128]	; (8006cd4 <vTaskStartScheduler+0xb0>)
 8006c54:	4820      	ldr	r0, [pc, #128]	; (8006cd8 <vTaskStartScheduler+0xb4>)
 8006c56:	f7ff fe1d 	bl	8006894 <xTaskCreateStatic>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	4b1f      	ldr	r3, [pc, #124]	; (8006cdc <vTaskStartScheduler+0xb8>)
 8006c5e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c60:	4b1e      	ldr	r3, [pc, #120]	; (8006cdc <vTaskStartScheduler+0xb8>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d002      	beq.n	8006c6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	617b      	str	r3, [r7, #20]
 8006c6c:	e001      	b.n	8006c72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d102      	bne.n	8006c7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006c78:	f000 fda6 	bl	80077c8 <xTimerCreateTimerTask>
 8006c7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d115      	bne.n	8006cb0 <vTaskStartScheduler+0x8c>
 8006c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c96:	4b12      	ldr	r3, [pc, #72]	; (8006ce0 <vTaskStartScheduler+0xbc>)
 8006c98:	f04f 32ff 	mov.w	r2, #4294967295
 8006c9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c9e:	4b11      	ldr	r3, [pc, #68]	; (8006ce4 <vTaskStartScheduler+0xc0>)
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006ca4:	4b10      	ldr	r3, [pc, #64]	; (8006ce8 <vTaskStartScheduler+0xc4>)
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006caa:	f001 f941 	bl	8007f30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006cae:	e00d      	b.n	8006ccc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb6:	d109      	bne.n	8006ccc <vTaskStartScheduler+0xa8>
 8006cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbc:	f383 8811 	msr	BASEPRI, r3
 8006cc0:	f3bf 8f6f 	isb	sy
 8006cc4:	f3bf 8f4f 	dsb	sy
 8006cc8:	60fb      	str	r3, [r7, #12]
 8006cca:	e7fe      	b.n	8006cca <vTaskStartScheduler+0xa6>
}
 8006ccc:	bf00      	nop
 8006cce:	3718      	adds	r7, #24
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	080095a4 	.word	0x080095a4
 8006cd8:	0800742d 	.word	0x0800742d
 8006cdc:	20000cd8 	.word	0x20000cd8
 8006ce0:	20000cd4 	.word	0x20000cd4
 8006ce4:	20000cc0 	.word	0x20000cc0
 8006ce8:	20000cb8 	.word	0x20000cb8

08006cec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006cec:	b480      	push	{r7}
 8006cee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006cf0:	4b04      	ldr	r3, [pc, #16]	; (8006d04 <vTaskSuspendAll+0x18>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	4a03      	ldr	r2, [pc, #12]	; (8006d04 <vTaskSuspendAll+0x18>)
 8006cf8:	6013      	str	r3, [r2, #0]
}
 8006cfa:	bf00      	nop
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr
 8006d04:	20000cdc 	.word	0x20000cdc

08006d08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006d12:	2300      	movs	r3, #0
 8006d14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006d16:	4b41      	ldr	r3, [pc, #260]	; (8006e1c <xTaskResumeAll+0x114>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d109      	bne.n	8006d32 <xTaskResumeAll+0x2a>
 8006d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d22:	f383 8811 	msr	BASEPRI, r3
 8006d26:	f3bf 8f6f 	isb	sy
 8006d2a:	f3bf 8f4f 	dsb	sy
 8006d2e:	603b      	str	r3, [r7, #0]
 8006d30:	e7fe      	b.n	8006d30 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d32:	f001 f99b 	bl	800806c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d36:	4b39      	ldr	r3, [pc, #228]	; (8006e1c <xTaskResumeAll+0x114>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	4a37      	ldr	r2, [pc, #220]	; (8006e1c <xTaskResumeAll+0x114>)
 8006d3e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d40:	4b36      	ldr	r3, [pc, #216]	; (8006e1c <xTaskResumeAll+0x114>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d162      	bne.n	8006e0e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d48:	4b35      	ldr	r3, [pc, #212]	; (8006e20 <xTaskResumeAll+0x118>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d05e      	beq.n	8006e0e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d50:	e02f      	b.n	8006db2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006d52:	4b34      	ldr	r3, [pc, #208]	; (8006e24 <xTaskResumeAll+0x11c>)
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	3318      	adds	r3, #24
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7ff f89a 	bl	8005e98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	3304      	adds	r3, #4
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7ff f895 	bl	8005e98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d72:	4b2d      	ldr	r3, [pc, #180]	; (8006e28 <xTaskResumeAll+0x120>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d903      	bls.n	8006d82 <xTaskResumeAll+0x7a>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7e:	4a2a      	ldr	r2, [pc, #168]	; (8006e28 <xTaskResumeAll+0x120>)
 8006d80:	6013      	str	r3, [r2, #0]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d86:	4613      	mov	r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	4413      	add	r3, r2
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4a27      	ldr	r2, [pc, #156]	; (8006e2c <xTaskResumeAll+0x124>)
 8006d90:	441a      	add	r2, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	3304      	adds	r3, #4
 8006d96:	4619      	mov	r1, r3
 8006d98:	4610      	mov	r0, r2
 8006d9a:	f7ff f820 	bl	8005dde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da2:	4b23      	ldr	r3, [pc, #140]	; (8006e30 <xTaskResumeAll+0x128>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d302      	bcc.n	8006db2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006dac:	4b21      	ldr	r3, [pc, #132]	; (8006e34 <xTaskResumeAll+0x12c>)
 8006dae:	2201      	movs	r2, #1
 8006db0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006db2:	4b1c      	ldr	r3, [pc, #112]	; (8006e24 <xTaskResumeAll+0x11c>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1cb      	bne.n	8006d52 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d001      	beq.n	8006dc4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006dc0:	f000 fbe6 	bl	8007590 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006dc4:	4b1c      	ldr	r3, [pc, #112]	; (8006e38 <xTaskResumeAll+0x130>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d010      	beq.n	8006df2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006dd0:	f000 f846 	bl	8006e60 <xTaskIncrementTick>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d002      	beq.n	8006de0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006dda:	4b16      	ldr	r3, [pc, #88]	; (8006e34 <xTaskResumeAll+0x12c>)
 8006ddc:	2201      	movs	r2, #1
 8006dde:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	3b01      	subs	r3, #1
 8006de4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1f1      	bne.n	8006dd0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006dec:	4b12      	ldr	r3, [pc, #72]	; (8006e38 <xTaskResumeAll+0x130>)
 8006dee:	2200      	movs	r2, #0
 8006df0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006df2:	4b10      	ldr	r3, [pc, #64]	; (8006e34 <xTaskResumeAll+0x12c>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d009      	beq.n	8006e0e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006dfe:	4b0f      	ldr	r3, [pc, #60]	; (8006e3c <xTaskResumeAll+0x134>)
 8006e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e0e:	f001 f95b 	bl	80080c8 <vPortExitCritical>

	return xAlreadyYielded;
 8006e12:	68bb      	ldr	r3, [r7, #8]
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	20000cdc 	.word	0x20000cdc
 8006e20:	20000cb4 	.word	0x20000cb4
 8006e24:	20000c74 	.word	0x20000c74
 8006e28:	20000cbc 	.word	0x20000cbc
 8006e2c:	200007e4 	.word	0x200007e4
 8006e30:	200007e0 	.word	0x200007e0
 8006e34:	20000cc8 	.word	0x20000cc8
 8006e38:	20000cc4 	.word	0x20000cc4
 8006e3c:	e000ed04 	.word	0xe000ed04

08006e40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006e46:	4b05      	ldr	r3, [pc, #20]	; (8006e5c <xTaskGetTickCount+0x1c>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006e4c:	687b      	ldr	r3, [r7, #4]
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	20000cb8 	.word	0x20000cb8

08006e60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e66:	2300      	movs	r3, #0
 8006e68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e6a:	4b51      	ldr	r3, [pc, #324]	; (8006fb0 <xTaskIncrementTick+0x150>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f040 808d 	bne.w	8006f8e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e74:	4b4f      	ldr	r3, [pc, #316]	; (8006fb4 <xTaskIncrementTick+0x154>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e7c:	4a4d      	ldr	r2, [pc, #308]	; (8006fb4 <xTaskIncrementTick+0x154>)
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d11f      	bne.n	8006ec8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e88:	4b4b      	ldr	r3, [pc, #300]	; (8006fb8 <xTaskIncrementTick+0x158>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d009      	beq.n	8006ea6 <xTaskIncrementTick+0x46>
 8006e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e96:	f383 8811 	msr	BASEPRI, r3
 8006e9a:	f3bf 8f6f 	isb	sy
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	603b      	str	r3, [r7, #0]
 8006ea4:	e7fe      	b.n	8006ea4 <xTaskIncrementTick+0x44>
 8006ea6:	4b44      	ldr	r3, [pc, #272]	; (8006fb8 <xTaskIncrementTick+0x158>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	60fb      	str	r3, [r7, #12]
 8006eac:	4b43      	ldr	r3, [pc, #268]	; (8006fbc <xTaskIncrementTick+0x15c>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a41      	ldr	r2, [pc, #260]	; (8006fb8 <xTaskIncrementTick+0x158>)
 8006eb2:	6013      	str	r3, [r2, #0]
 8006eb4:	4a41      	ldr	r2, [pc, #260]	; (8006fbc <xTaskIncrementTick+0x15c>)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6013      	str	r3, [r2, #0]
 8006eba:	4b41      	ldr	r3, [pc, #260]	; (8006fc0 <xTaskIncrementTick+0x160>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	4a3f      	ldr	r2, [pc, #252]	; (8006fc0 <xTaskIncrementTick+0x160>)
 8006ec2:	6013      	str	r3, [r2, #0]
 8006ec4:	f000 fb64 	bl	8007590 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ec8:	4b3e      	ldr	r3, [pc, #248]	; (8006fc4 <xTaskIncrementTick+0x164>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d34e      	bcc.n	8006f70 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ed2:	4b39      	ldr	r3, [pc, #228]	; (8006fb8 <xTaskIncrementTick+0x158>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d101      	bne.n	8006ee0 <xTaskIncrementTick+0x80>
 8006edc:	2301      	movs	r3, #1
 8006ede:	e000      	b.n	8006ee2 <xTaskIncrementTick+0x82>
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d004      	beq.n	8006ef0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ee6:	4b37      	ldr	r3, [pc, #220]	; (8006fc4 <xTaskIncrementTick+0x164>)
 8006ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8006eec:	601a      	str	r2, [r3, #0]
					break;
 8006eee:	e03f      	b.n	8006f70 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006ef0:	4b31      	ldr	r3, [pc, #196]	; (8006fb8 <xTaskIncrementTick+0x158>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d203      	bcs.n	8006f10 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006f08:	4a2e      	ldr	r2, [pc, #184]	; (8006fc4 <xTaskIncrementTick+0x164>)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6013      	str	r3, [r2, #0]
						break;
 8006f0e:	e02f      	b.n	8006f70 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	3304      	adds	r3, #4
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7fe ffbf 	bl	8005e98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d004      	beq.n	8006f2c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	3318      	adds	r3, #24
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7fe ffb6 	bl	8005e98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f30:	4b25      	ldr	r3, [pc, #148]	; (8006fc8 <xTaskIncrementTick+0x168>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d903      	bls.n	8006f40 <xTaskIncrementTick+0xe0>
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3c:	4a22      	ldr	r2, [pc, #136]	; (8006fc8 <xTaskIncrementTick+0x168>)
 8006f3e:	6013      	str	r3, [r2, #0]
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f44:	4613      	mov	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4413      	add	r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	4a1f      	ldr	r2, [pc, #124]	; (8006fcc <xTaskIncrementTick+0x16c>)
 8006f4e:	441a      	add	r2, r3
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	3304      	adds	r3, #4
 8006f54:	4619      	mov	r1, r3
 8006f56:	4610      	mov	r0, r2
 8006f58:	f7fe ff41 	bl	8005dde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f60:	4b1b      	ldr	r3, [pc, #108]	; (8006fd0 <xTaskIncrementTick+0x170>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d3b3      	bcc.n	8006ed2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f6e:	e7b0      	b.n	8006ed2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f70:	4b17      	ldr	r3, [pc, #92]	; (8006fd0 <xTaskIncrementTick+0x170>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f76:	4915      	ldr	r1, [pc, #84]	; (8006fcc <xTaskIncrementTick+0x16c>)
 8006f78:	4613      	mov	r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4413      	add	r3, r2
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	440b      	add	r3, r1
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d907      	bls.n	8006f98 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	617b      	str	r3, [r7, #20]
 8006f8c:	e004      	b.n	8006f98 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006f8e:	4b11      	ldr	r3, [pc, #68]	; (8006fd4 <xTaskIncrementTick+0x174>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	3301      	adds	r3, #1
 8006f94:	4a0f      	ldr	r2, [pc, #60]	; (8006fd4 <xTaskIncrementTick+0x174>)
 8006f96:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006f98:	4b0f      	ldr	r3, [pc, #60]	; (8006fd8 <xTaskIncrementTick+0x178>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d001      	beq.n	8006fa4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006fa4:	697b      	ldr	r3, [r7, #20]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3718      	adds	r7, #24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20000cdc 	.word	0x20000cdc
 8006fb4:	20000cb8 	.word	0x20000cb8
 8006fb8:	20000c6c 	.word	0x20000c6c
 8006fbc:	20000c70 	.word	0x20000c70
 8006fc0:	20000ccc 	.word	0x20000ccc
 8006fc4:	20000cd4 	.word	0x20000cd4
 8006fc8:	20000cbc 	.word	0x20000cbc
 8006fcc:	200007e4 	.word	0x200007e4
 8006fd0:	200007e0 	.word	0x200007e0
 8006fd4:	20000cc4 	.word	0x20000cc4
 8006fd8:	20000cc8 	.word	0x20000cc8

08006fdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006fe2:	4b27      	ldr	r3, [pc, #156]	; (8007080 <vTaskSwitchContext+0xa4>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d003      	beq.n	8006ff2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006fea:	4b26      	ldr	r3, [pc, #152]	; (8007084 <vTaskSwitchContext+0xa8>)
 8006fec:	2201      	movs	r2, #1
 8006fee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ff0:	e040      	b.n	8007074 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006ff2:	4b24      	ldr	r3, [pc, #144]	; (8007084 <vTaskSwitchContext+0xa8>)
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006ff8:	4b23      	ldr	r3, [pc, #140]	; (8007088 <vTaskSwitchContext+0xac>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	60fb      	str	r3, [r7, #12]
 8006ffe:	e00f      	b.n	8007020 <vTaskSwitchContext+0x44>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d109      	bne.n	800701a <vTaskSwitchContext+0x3e>
 8007006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700a:	f383 8811 	msr	BASEPRI, r3
 800700e:	f3bf 8f6f 	isb	sy
 8007012:	f3bf 8f4f 	dsb	sy
 8007016:	607b      	str	r3, [r7, #4]
 8007018:	e7fe      	b.n	8007018 <vTaskSwitchContext+0x3c>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	3b01      	subs	r3, #1
 800701e:	60fb      	str	r3, [r7, #12]
 8007020:	491a      	ldr	r1, [pc, #104]	; (800708c <vTaskSwitchContext+0xb0>)
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	4613      	mov	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4413      	add	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	440b      	add	r3, r1
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d0e5      	beq.n	8007000 <vTaskSwitchContext+0x24>
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	4613      	mov	r3, r2
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4413      	add	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4a13      	ldr	r2, [pc, #76]	; (800708c <vTaskSwitchContext+0xb0>)
 8007040:	4413      	add	r3, r2
 8007042:	60bb      	str	r3, [r7, #8]
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	685a      	ldr	r2, [r3, #4]
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	605a      	str	r2, [r3, #4]
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	685a      	ldr	r2, [r3, #4]
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	3308      	adds	r3, #8
 8007056:	429a      	cmp	r2, r3
 8007058:	d104      	bne.n	8007064 <vTaskSwitchContext+0x88>
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	685a      	ldr	r2, [r3, #4]
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	605a      	str	r2, [r3, #4]
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	4a09      	ldr	r2, [pc, #36]	; (8007090 <vTaskSwitchContext+0xb4>)
 800706c:	6013      	str	r3, [r2, #0]
 800706e:	4a06      	ldr	r2, [pc, #24]	; (8007088 <vTaskSwitchContext+0xac>)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6013      	str	r3, [r2, #0]
}
 8007074:	bf00      	nop
 8007076:	3714      	adds	r7, #20
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr
 8007080:	20000cdc 	.word	0x20000cdc
 8007084:	20000cc8 	.word	0x20000cc8
 8007088:	20000cbc 	.word	0x20000cbc
 800708c:	200007e4 	.word	0x200007e4
 8007090:	200007e0 	.word	0x200007e0

08007094 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d109      	bne.n	80070b8 <vTaskPlaceOnEventList+0x24>
 80070a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a8:	f383 8811 	msr	BASEPRI, r3
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	f3bf 8f4f 	dsb	sy
 80070b4:	60fb      	str	r3, [r7, #12]
 80070b6:	e7fe      	b.n	80070b6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070b8:	4b07      	ldr	r3, [pc, #28]	; (80070d8 <vTaskPlaceOnEventList+0x44>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	3318      	adds	r3, #24
 80070be:	4619      	mov	r1, r3
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f7fe feb0 	bl	8005e26 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80070c6:	2101      	movs	r1, #1
 80070c8:	6838      	ldr	r0, [r7, #0]
 80070ca:	f000 fb29 	bl	8007720 <prvAddCurrentTaskToDelayedList>
}
 80070ce:	bf00      	nop
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	200007e0 	.word	0x200007e0

080070dc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b086      	sub	sp, #24
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d109      	bne.n	8007102 <vTaskPlaceOnUnorderedEventList+0x26>
 80070ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f2:	f383 8811 	msr	BASEPRI, r3
 80070f6:	f3bf 8f6f 	isb	sy
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	617b      	str	r3, [r7, #20]
 8007100:	e7fe      	b.n	8007100 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8007102:	4b11      	ldr	r3, [pc, #68]	; (8007148 <vTaskPlaceOnUnorderedEventList+0x6c>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d109      	bne.n	800711e <vTaskPlaceOnUnorderedEventList+0x42>
 800710a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	613b      	str	r3, [r7, #16]
 800711c:	e7fe      	b.n	800711c <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800711e:	4b0b      	ldr	r3, [pc, #44]	; (800714c <vTaskPlaceOnUnorderedEventList+0x70>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007128:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800712a:	4b08      	ldr	r3, [pc, #32]	; (800714c <vTaskPlaceOnUnorderedEventList+0x70>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	3318      	adds	r3, #24
 8007130:	4619      	mov	r1, r3
 8007132:	68f8      	ldr	r0, [r7, #12]
 8007134:	f7fe fe53 	bl	8005dde <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007138:	2101      	movs	r1, #1
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 faf0 	bl	8007720 <prvAddCurrentTaskToDelayedList>
}
 8007140:	bf00      	nop
 8007142:	3718      	adds	r7, #24
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	20000cdc 	.word	0x20000cdc
 800714c:	200007e0 	.word	0x200007e0

08007150 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d109      	bne.n	8007176 <vTaskPlaceOnEventListRestricted+0x26>
 8007162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007166:	f383 8811 	msr	BASEPRI, r3
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	f3bf 8f4f 	dsb	sy
 8007172:	617b      	str	r3, [r7, #20]
 8007174:	e7fe      	b.n	8007174 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007176:	4b0a      	ldr	r3, [pc, #40]	; (80071a0 <vTaskPlaceOnEventListRestricted+0x50>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	3318      	adds	r3, #24
 800717c:	4619      	mov	r1, r3
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f7fe fe2d 	bl	8005dde <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d002      	beq.n	8007190 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800718a:	f04f 33ff 	mov.w	r3, #4294967295
 800718e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007190:	6879      	ldr	r1, [r7, #4]
 8007192:	68b8      	ldr	r0, [r7, #8]
 8007194:	f000 fac4 	bl	8007720 <prvAddCurrentTaskToDelayedList>
	}
 8007198:	bf00      	nop
 800719a:	3718      	adds	r7, #24
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	200007e0 	.word	0x200007e0

080071a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d109      	bne.n	80071ce <xTaskRemoveFromEventList+0x2a>
 80071ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071be:	f383 8811 	msr	BASEPRI, r3
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	60fb      	str	r3, [r7, #12]
 80071cc:	e7fe      	b.n	80071cc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	3318      	adds	r3, #24
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fe fe60 	bl	8005e98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071d8:	4b1d      	ldr	r3, [pc, #116]	; (8007250 <xTaskRemoveFromEventList+0xac>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d11d      	bne.n	800721c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	3304      	adds	r3, #4
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7fe fe57 	bl	8005e98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ee:	4b19      	ldr	r3, [pc, #100]	; (8007254 <xTaskRemoveFromEventList+0xb0>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d903      	bls.n	80071fe <xTaskRemoveFromEventList+0x5a>
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fa:	4a16      	ldr	r2, [pc, #88]	; (8007254 <xTaskRemoveFromEventList+0xb0>)
 80071fc:	6013      	str	r3, [r2, #0]
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007202:	4613      	mov	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	4413      	add	r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4a13      	ldr	r2, [pc, #76]	; (8007258 <xTaskRemoveFromEventList+0xb4>)
 800720c:	441a      	add	r2, r3
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	3304      	adds	r3, #4
 8007212:	4619      	mov	r1, r3
 8007214:	4610      	mov	r0, r2
 8007216:	f7fe fde2 	bl	8005dde <vListInsertEnd>
 800721a:	e005      	b.n	8007228 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	3318      	adds	r3, #24
 8007220:	4619      	mov	r1, r3
 8007222:	480e      	ldr	r0, [pc, #56]	; (800725c <xTaskRemoveFromEventList+0xb8>)
 8007224:	f7fe fddb 	bl	8005dde <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800722c:	4b0c      	ldr	r3, [pc, #48]	; (8007260 <xTaskRemoveFromEventList+0xbc>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007232:	429a      	cmp	r2, r3
 8007234:	d905      	bls.n	8007242 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007236:	2301      	movs	r3, #1
 8007238:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800723a:	4b0a      	ldr	r3, [pc, #40]	; (8007264 <xTaskRemoveFromEventList+0xc0>)
 800723c:	2201      	movs	r2, #1
 800723e:	601a      	str	r2, [r3, #0]
 8007240:	e001      	b.n	8007246 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007242:	2300      	movs	r3, #0
 8007244:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007246:	697b      	ldr	r3, [r7, #20]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3718      	adds	r7, #24
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	20000cdc 	.word	0x20000cdc
 8007254:	20000cbc 	.word	0x20000cbc
 8007258:	200007e4 	.word	0x200007e4
 800725c:	20000c74 	.word	0x20000c74
 8007260:	200007e0 	.word	0x200007e0
 8007264:	20000cc8 	.word	0x20000cc8

08007268 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8007272:	4b28      	ldr	r3, [pc, #160]	; (8007314 <vTaskRemoveFromUnorderedEventList+0xac>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d109      	bne.n	800728e <vTaskRemoveFromUnorderedEventList+0x26>
 800727a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727e:	f383 8811 	msr	BASEPRI, r3
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	613b      	str	r3, [r7, #16]
 800728c:	e7fe      	b.n	800728c <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d109      	bne.n	80072b8 <vTaskRemoveFromUnorderedEventList+0x50>
 80072a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a8:	f383 8811 	msr	BASEPRI, r3
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	60fb      	str	r3, [r7, #12]
 80072b6:	e7fe      	b.n	80072b6 <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f7fe fded 	bl	8005e98 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	3304      	adds	r3, #4
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7fe fde8 	bl	8005e98 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072cc:	4b12      	ldr	r3, [pc, #72]	; (8007318 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d903      	bls.n	80072dc <vTaskRemoveFromUnorderedEventList+0x74>
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d8:	4a0f      	ldr	r2, [pc, #60]	; (8007318 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80072da:	6013      	str	r3, [r2, #0]
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072e0:	4613      	mov	r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	4413      	add	r3, r2
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	4a0c      	ldr	r2, [pc, #48]	; (800731c <vTaskRemoveFromUnorderedEventList+0xb4>)
 80072ea:	441a      	add	r2, r3
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	3304      	adds	r3, #4
 80072f0:	4619      	mov	r1, r3
 80072f2:	4610      	mov	r0, r2
 80072f4:	f7fe fd73 	bl	8005dde <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072fc:	4b08      	ldr	r3, [pc, #32]	; (8007320 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007302:	429a      	cmp	r2, r3
 8007304:	d902      	bls.n	800730c <vTaskRemoveFromUnorderedEventList+0xa4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8007306:	4b07      	ldr	r3, [pc, #28]	; (8007324 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8007308:	2201      	movs	r2, #1
 800730a:	601a      	str	r2, [r3, #0]
	}
}
 800730c:	bf00      	nop
 800730e:	3718      	adds	r7, #24
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	20000cdc 	.word	0x20000cdc
 8007318:	20000cbc 	.word	0x20000cbc
 800731c:	200007e4 	.word	0x200007e4
 8007320:	200007e0 	.word	0x200007e0
 8007324:	20000cc8 	.word	0x20000cc8

08007328 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007330:	4b06      	ldr	r3, [pc, #24]	; (800734c <vTaskInternalSetTimeOutState+0x24>)
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007338:	4b05      	ldr	r3, [pc, #20]	; (8007350 <vTaskInternalSetTimeOutState+0x28>)
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	605a      	str	r2, [r3, #4]
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr
 800734c:	20000ccc 	.word	0x20000ccc
 8007350:	20000cb8 	.word	0x20000cb8

08007354 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b088      	sub	sp, #32
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d109      	bne.n	8007378 <xTaskCheckForTimeOut+0x24>
 8007364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007368:	f383 8811 	msr	BASEPRI, r3
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	613b      	str	r3, [r7, #16]
 8007376:	e7fe      	b.n	8007376 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d109      	bne.n	8007392 <xTaskCheckForTimeOut+0x3e>
 800737e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	60fb      	str	r3, [r7, #12]
 8007390:	e7fe      	b.n	8007390 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007392:	f000 fe6b 	bl	800806c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007396:	4b1d      	ldr	r3, [pc, #116]	; (800740c <xTaskCheckForTimeOut+0xb8>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	69ba      	ldr	r2, [r7, #24]
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ae:	d102      	bne.n	80073b6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80073b0:	2300      	movs	r3, #0
 80073b2:	61fb      	str	r3, [r7, #28]
 80073b4:	e023      	b.n	80073fe <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	4b15      	ldr	r3, [pc, #84]	; (8007410 <xTaskCheckForTimeOut+0xbc>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d007      	beq.n	80073d2 <xTaskCheckForTimeOut+0x7e>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	69ba      	ldr	r2, [r7, #24]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d302      	bcc.n	80073d2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80073cc:	2301      	movs	r3, #1
 80073ce:	61fb      	str	r3, [r7, #28]
 80073d0:	e015      	b.n	80073fe <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d20b      	bcs.n	80073f4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	1ad2      	subs	r2, r2, r3
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f7ff ff9d 	bl	8007328 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80073ee:	2300      	movs	r3, #0
 80073f0:	61fb      	str	r3, [r7, #28]
 80073f2:	e004      	b.n	80073fe <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	2200      	movs	r2, #0
 80073f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80073fa:	2301      	movs	r3, #1
 80073fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80073fe:	f000 fe63 	bl	80080c8 <vPortExitCritical>

	return xReturn;
 8007402:	69fb      	ldr	r3, [r7, #28]
}
 8007404:	4618      	mov	r0, r3
 8007406:	3720      	adds	r7, #32
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	20000cb8 	.word	0x20000cb8
 8007410:	20000ccc 	.word	0x20000ccc

08007414 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007414:	b480      	push	{r7}
 8007416:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007418:	4b03      	ldr	r3, [pc, #12]	; (8007428 <vTaskMissedYield+0x14>)
 800741a:	2201      	movs	r2, #1
 800741c:	601a      	str	r2, [r3, #0]
}
 800741e:	bf00      	nop
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr
 8007428:	20000cc8 	.word	0x20000cc8

0800742c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007434:	f000 f852 	bl	80074dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007438:	4b06      	ldr	r3, [pc, #24]	; (8007454 <prvIdleTask+0x28>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2b01      	cmp	r3, #1
 800743e:	d9f9      	bls.n	8007434 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007440:	4b05      	ldr	r3, [pc, #20]	; (8007458 <prvIdleTask+0x2c>)
 8007442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007446:	601a      	str	r2, [r3, #0]
 8007448:	f3bf 8f4f 	dsb	sy
 800744c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007450:	e7f0      	b.n	8007434 <prvIdleTask+0x8>
 8007452:	bf00      	nop
 8007454:	200007e4 	.word	0x200007e4
 8007458:	e000ed04 	.word	0xe000ed04

0800745c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007462:	2300      	movs	r3, #0
 8007464:	607b      	str	r3, [r7, #4]
 8007466:	e00c      	b.n	8007482 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	4613      	mov	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	4413      	add	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4a12      	ldr	r2, [pc, #72]	; (80074bc <prvInitialiseTaskLists+0x60>)
 8007474:	4413      	add	r3, r2
 8007476:	4618      	mov	r0, r3
 8007478:	f7fe fc84 	bl	8005d84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	3301      	adds	r3, #1
 8007480:	607b      	str	r3, [r7, #4]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2b37      	cmp	r3, #55	; 0x37
 8007486:	d9ef      	bls.n	8007468 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007488:	480d      	ldr	r0, [pc, #52]	; (80074c0 <prvInitialiseTaskLists+0x64>)
 800748a:	f7fe fc7b 	bl	8005d84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800748e:	480d      	ldr	r0, [pc, #52]	; (80074c4 <prvInitialiseTaskLists+0x68>)
 8007490:	f7fe fc78 	bl	8005d84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007494:	480c      	ldr	r0, [pc, #48]	; (80074c8 <prvInitialiseTaskLists+0x6c>)
 8007496:	f7fe fc75 	bl	8005d84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800749a:	480c      	ldr	r0, [pc, #48]	; (80074cc <prvInitialiseTaskLists+0x70>)
 800749c:	f7fe fc72 	bl	8005d84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80074a0:	480b      	ldr	r0, [pc, #44]	; (80074d0 <prvInitialiseTaskLists+0x74>)
 80074a2:	f7fe fc6f 	bl	8005d84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80074a6:	4b0b      	ldr	r3, [pc, #44]	; (80074d4 <prvInitialiseTaskLists+0x78>)
 80074a8:	4a05      	ldr	r2, [pc, #20]	; (80074c0 <prvInitialiseTaskLists+0x64>)
 80074aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80074ac:	4b0a      	ldr	r3, [pc, #40]	; (80074d8 <prvInitialiseTaskLists+0x7c>)
 80074ae:	4a05      	ldr	r2, [pc, #20]	; (80074c4 <prvInitialiseTaskLists+0x68>)
 80074b0:	601a      	str	r2, [r3, #0]
}
 80074b2:	bf00      	nop
 80074b4:	3708      	adds	r7, #8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	200007e4 	.word	0x200007e4
 80074c0:	20000c44 	.word	0x20000c44
 80074c4:	20000c58 	.word	0x20000c58
 80074c8:	20000c74 	.word	0x20000c74
 80074cc:	20000c88 	.word	0x20000c88
 80074d0:	20000ca0 	.word	0x20000ca0
 80074d4:	20000c6c 	.word	0x20000c6c
 80074d8:	20000c70 	.word	0x20000c70

080074dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074e2:	e019      	b.n	8007518 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80074e4:	f000 fdc2 	bl	800806c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80074e8:	4b0f      	ldr	r3, [pc, #60]	; (8007528 <prvCheckTasksWaitingTermination+0x4c>)
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	3304      	adds	r3, #4
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7fe fccf 	bl	8005e98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80074fa:	4b0c      	ldr	r3, [pc, #48]	; (800752c <prvCheckTasksWaitingTermination+0x50>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	3b01      	subs	r3, #1
 8007500:	4a0a      	ldr	r2, [pc, #40]	; (800752c <prvCheckTasksWaitingTermination+0x50>)
 8007502:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007504:	4b0a      	ldr	r3, [pc, #40]	; (8007530 <prvCheckTasksWaitingTermination+0x54>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	3b01      	subs	r3, #1
 800750a:	4a09      	ldr	r2, [pc, #36]	; (8007530 <prvCheckTasksWaitingTermination+0x54>)
 800750c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800750e:	f000 fddb 	bl	80080c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f80e 	bl	8007534 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007518:	4b05      	ldr	r3, [pc, #20]	; (8007530 <prvCheckTasksWaitingTermination+0x54>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d1e1      	bne.n	80074e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007520:	bf00      	nop
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	20000c88 	.word	0x20000c88
 800752c:	20000cb4 	.word	0x20000cb4
 8007530:	20000c9c 	.word	0x20000c9c

08007534 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007542:	2b00      	cmp	r3, #0
 8007544:	d108      	bne.n	8007558 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754a:	4618      	mov	r0, r3
 800754c:	f000 ff6a 	bl	8008424 <vPortFree>
				vPortFree( pxTCB );
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 ff67 	bl	8008424 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007556:	e017      	b.n	8007588 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800755e:	2b01      	cmp	r3, #1
 8007560:	d103      	bne.n	800756a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 ff5e 	bl	8008424 <vPortFree>
	}
 8007568:	e00e      	b.n	8007588 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007570:	2b02      	cmp	r3, #2
 8007572:	d009      	beq.n	8007588 <prvDeleteTCB+0x54>
 8007574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007578:	f383 8811 	msr	BASEPRI, r3
 800757c:	f3bf 8f6f 	isb	sy
 8007580:	f3bf 8f4f 	dsb	sy
 8007584:	60fb      	str	r3, [r7, #12]
 8007586:	e7fe      	b.n	8007586 <prvDeleteTCB+0x52>
	}
 8007588:	bf00      	nop
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007596:	4b0f      	ldr	r3, [pc, #60]	; (80075d4 <prvResetNextTaskUnblockTime+0x44>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d101      	bne.n	80075a4 <prvResetNextTaskUnblockTime+0x14>
 80075a0:	2301      	movs	r3, #1
 80075a2:	e000      	b.n	80075a6 <prvResetNextTaskUnblockTime+0x16>
 80075a4:	2300      	movs	r3, #0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d004      	beq.n	80075b4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80075aa:	4b0b      	ldr	r3, [pc, #44]	; (80075d8 <prvResetNextTaskUnblockTime+0x48>)
 80075ac:	f04f 32ff 	mov.w	r2, #4294967295
 80075b0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80075b2:	e008      	b.n	80075c6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80075b4:	4b07      	ldr	r3, [pc, #28]	; (80075d4 <prvResetNextTaskUnblockTime+0x44>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	4a05      	ldr	r2, [pc, #20]	; (80075d8 <prvResetNextTaskUnblockTime+0x48>)
 80075c4:	6013      	str	r3, [r2, #0]
}
 80075c6:	bf00      	nop
 80075c8:	370c      	adds	r7, #12
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	20000c6c 	.word	0x20000c6c
 80075d8:	20000cd4 	.word	0x20000cd4

080075dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80075e2:	4b0b      	ldr	r3, [pc, #44]	; (8007610 <xTaskGetSchedulerState+0x34>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d102      	bne.n	80075f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80075ea:	2301      	movs	r3, #1
 80075ec:	607b      	str	r3, [r7, #4]
 80075ee:	e008      	b.n	8007602 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075f0:	4b08      	ldr	r3, [pc, #32]	; (8007614 <xTaskGetSchedulerState+0x38>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d102      	bne.n	80075fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80075f8:	2302      	movs	r3, #2
 80075fa:	607b      	str	r3, [r7, #4]
 80075fc:	e001      	b.n	8007602 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80075fe:	2300      	movs	r3, #0
 8007600:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007602:	687b      	ldr	r3, [r7, #4]
	}
 8007604:	4618      	mov	r0, r3
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr
 8007610:	20000cc0 	.word	0x20000cc0
 8007614:	20000cdc 	.word	0x20000cdc

08007618 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007618:	b580      	push	{r7, lr}
 800761a:	b086      	sub	sp, #24
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007624:	2300      	movs	r3, #0
 8007626:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d054      	beq.n	80076d8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800762e:	4b2d      	ldr	r3, [pc, #180]	; (80076e4 <xTaskPriorityDisinherit+0xcc>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	693a      	ldr	r2, [r7, #16]
 8007634:	429a      	cmp	r2, r3
 8007636:	d009      	beq.n	800764c <xTaskPriorityDisinherit+0x34>
 8007638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763c:	f383 8811 	msr	BASEPRI, r3
 8007640:	f3bf 8f6f 	isb	sy
 8007644:	f3bf 8f4f 	dsb	sy
 8007648:	60fb      	str	r3, [r7, #12]
 800764a:	e7fe      	b.n	800764a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007650:	2b00      	cmp	r3, #0
 8007652:	d109      	bne.n	8007668 <xTaskPriorityDisinherit+0x50>
 8007654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007658:	f383 8811 	msr	BASEPRI, r3
 800765c:	f3bf 8f6f 	isb	sy
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	60bb      	str	r3, [r7, #8]
 8007666:	e7fe      	b.n	8007666 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800766c:	1e5a      	subs	r2, r3, #1
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800767a:	429a      	cmp	r2, r3
 800767c:	d02c      	beq.n	80076d8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007682:	2b00      	cmp	r3, #0
 8007684:	d128      	bne.n	80076d8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	3304      	adds	r3, #4
 800768a:	4618      	mov	r0, r3
 800768c:	f7fe fc04 	bl	8005e98 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a8:	4b0f      	ldr	r3, [pc, #60]	; (80076e8 <xTaskPriorityDisinherit+0xd0>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d903      	bls.n	80076b8 <xTaskPriorityDisinherit+0xa0>
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b4:	4a0c      	ldr	r2, [pc, #48]	; (80076e8 <xTaskPriorityDisinherit+0xd0>)
 80076b6:	6013      	str	r3, [r2, #0]
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076bc:	4613      	mov	r3, r2
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	4413      	add	r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4a09      	ldr	r2, [pc, #36]	; (80076ec <xTaskPriorityDisinherit+0xd4>)
 80076c6:	441a      	add	r2, r3
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	3304      	adds	r3, #4
 80076cc:	4619      	mov	r1, r3
 80076ce:	4610      	mov	r0, r2
 80076d0:	f7fe fb85 	bl	8005dde <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80076d4:	2301      	movs	r3, #1
 80076d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80076d8:	697b      	ldr	r3, [r7, #20]
	}
 80076da:	4618      	mov	r0, r3
 80076dc:	3718      	adds	r7, #24
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	200007e0 	.word	0x200007e0
 80076e8:	20000cbc 	.word	0x20000cbc
 80076ec:	200007e4 	.word	0x200007e4

080076f0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80076f6:	4b09      	ldr	r3, [pc, #36]	; (800771c <uxTaskResetEventItemValue+0x2c>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	699b      	ldr	r3, [r3, #24]
 80076fc:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076fe:	4b07      	ldr	r3, [pc, #28]	; (800771c <uxTaskResetEventItemValue+0x2c>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007704:	4b05      	ldr	r3, [pc, #20]	; (800771c <uxTaskResetEventItemValue+0x2c>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800770c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800770e:	687b      	ldr	r3, [r7, #4]
}
 8007710:	4618      	mov	r0, r3
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	200007e0 	.word	0x200007e0

08007720 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800772a:	4b21      	ldr	r3, [pc, #132]	; (80077b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007730:	4b20      	ldr	r3, [pc, #128]	; (80077b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	3304      	adds	r3, #4
 8007736:	4618      	mov	r0, r3
 8007738:	f7fe fbae 	bl	8005e98 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007742:	d10a      	bne.n	800775a <prvAddCurrentTaskToDelayedList+0x3a>
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d007      	beq.n	800775a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800774a:	4b1a      	ldr	r3, [pc, #104]	; (80077b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	3304      	adds	r3, #4
 8007750:	4619      	mov	r1, r3
 8007752:	4819      	ldr	r0, [pc, #100]	; (80077b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007754:	f7fe fb43 	bl	8005dde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007758:	e026      	b.n	80077a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4413      	add	r3, r2
 8007760:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007762:	4b14      	ldr	r3, [pc, #80]	; (80077b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68ba      	ldr	r2, [r7, #8]
 8007768:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	429a      	cmp	r2, r3
 8007770:	d209      	bcs.n	8007786 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007772:	4b12      	ldr	r3, [pc, #72]	; (80077bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	4b0f      	ldr	r3, [pc, #60]	; (80077b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	3304      	adds	r3, #4
 800777c:	4619      	mov	r1, r3
 800777e:	4610      	mov	r0, r2
 8007780:	f7fe fb51 	bl	8005e26 <vListInsert>
}
 8007784:	e010      	b.n	80077a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007786:	4b0e      	ldr	r3, [pc, #56]	; (80077c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	4b0a      	ldr	r3, [pc, #40]	; (80077b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	3304      	adds	r3, #4
 8007790:	4619      	mov	r1, r3
 8007792:	4610      	mov	r0, r2
 8007794:	f7fe fb47 	bl	8005e26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007798:	4b0a      	ldr	r3, [pc, #40]	; (80077c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68ba      	ldr	r2, [r7, #8]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d202      	bcs.n	80077a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80077a2:	4a08      	ldr	r2, [pc, #32]	; (80077c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	6013      	str	r3, [r2, #0]
}
 80077a8:	bf00      	nop
 80077aa:	3710      	adds	r7, #16
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	20000cb8 	.word	0x20000cb8
 80077b4:	200007e0 	.word	0x200007e0
 80077b8:	20000ca0 	.word	0x20000ca0
 80077bc:	20000c70 	.word	0x20000c70
 80077c0:	20000c6c 	.word	0x20000c6c
 80077c4:	20000cd4 	.word	0x20000cd4

080077c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b08a      	sub	sp, #40	; 0x28
 80077cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80077ce:	2300      	movs	r3, #0
 80077d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80077d2:	f000 fac3 	bl	8007d5c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80077d6:	4b1c      	ldr	r3, [pc, #112]	; (8007848 <xTimerCreateTimerTask+0x80>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d021      	beq.n	8007822 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80077de:	2300      	movs	r3, #0
 80077e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80077e2:	2300      	movs	r3, #0
 80077e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80077e6:	1d3a      	adds	r2, r7, #4
 80077e8:	f107 0108 	add.w	r1, r7, #8
 80077ec:	f107 030c 	add.w	r3, r7, #12
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7fe f84d 	bl	8005890 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80077f6:	6879      	ldr	r1, [r7, #4]
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	9202      	str	r2, [sp, #8]
 80077fe:	9301      	str	r3, [sp, #4]
 8007800:	2302      	movs	r3, #2
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	2300      	movs	r3, #0
 8007806:	460a      	mov	r2, r1
 8007808:	4910      	ldr	r1, [pc, #64]	; (800784c <xTimerCreateTimerTask+0x84>)
 800780a:	4811      	ldr	r0, [pc, #68]	; (8007850 <xTimerCreateTimerTask+0x88>)
 800780c:	f7ff f842 	bl	8006894 <xTaskCreateStatic>
 8007810:	4602      	mov	r2, r0
 8007812:	4b10      	ldr	r3, [pc, #64]	; (8007854 <xTimerCreateTimerTask+0x8c>)
 8007814:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007816:	4b0f      	ldr	r3, [pc, #60]	; (8007854 <xTimerCreateTimerTask+0x8c>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d001      	beq.n	8007822 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800781e:	2301      	movs	r3, #1
 8007820:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d109      	bne.n	800783c <xTimerCreateTimerTask+0x74>
 8007828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782c:	f383 8811 	msr	BASEPRI, r3
 8007830:	f3bf 8f6f 	isb	sy
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	613b      	str	r3, [r7, #16]
 800783a:	e7fe      	b.n	800783a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800783c:	697b      	ldr	r3, [r7, #20]
}
 800783e:	4618      	mov	r0, r3
 8007840:	3718      	adds	r7, #24
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	20000d10 	.word	0x20000d10
 800784c:	080095ac 	.word	0x080095ac
 8007850:	08007971 	.word	0x08007971
 8007854:	20000d14 	.word	0x20000d14

08007858 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b08a      	sub	sp, #40	; 0x28
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	607a      	str	r2, [r7, #4]
 8007864:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007866:	2300      	movs	r3, #0
 8007868:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d109      	bne.n	8007884 <xTimerGenericCommand+0x2c>
 8007870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	623b      	str	r3, [r7, #32]
 8007882:	e7fe      	b.n	8007882 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007884:	4b19      	ldr	r3, [pc, #100]	; (80078ec <xTimerGenericCommand+0x94>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d02a      	beq.n	80078e2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	2b05      	cmp	r3, #5
 800789c:	dc18      	bgt.n	80078d0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800789e:	f7ff fe9d 	bl	80075dc <xTaskGetSchedulerState>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d109      	bne.n	80078bc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80078a8:	4b10      	ldr	r3, [pc, #64]	; (80078ec <xTimerGenericCommand+0x94>)
 80078aa:	6818      	ldr	r0, [r3, #0]
 80078ac:	f107 0110 	add.w	r1, r7, #16
 80078b0:	2300      	movs	r3, #0
 80078b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078b4:	f7fe fc18 	bl	80060e8 <xQueueGenericSend>
 80078b8:	6278      	str	r0, [r7, #36]	; 0x24
 80078ba:	e012      	b.n	80078e2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80078bc:	4b0b      	ldr	r3, [pc, #44]	; (80078ec <xTimerGenericCommand+0x94>)
 80078be:	6818      	ldr	r0, [r3, #0]
 80078c0:	f107 0110 	add.w	r1, r7, #16
 80078c4:	2300      	movs	r3, #0
 80078c6:	2200      	movs	r2, #0
 80078c8:	f7fe fc0e 	bl	80060e8 <xQueueGenericSend>
 80078cc:	6278      	str	r0, [r7, #36]	; 0x24
 80078ce:	e008      	b.n	80078e2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80078d0:	4b06      	ldr	r3, [pc, #24]	; (80078ec <xTimerGenericCommand+0x94>)
 80078d2:	6818      	ldr	r0, [r3, #0]
 80078d4:	f107 0110 	add.w	r1, r7, #16
 80078d8:	2300      	movs	r3, #0
 80078da:	683a      	ldr	r2, [r7, #0]
 80078dc:	f7fe fcfe 	bl	80062dc <xQueueGenericSendFromISR>
 80078e0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3728      	adds	r7, #40	; 0x28
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	20000d10 	.word	0x20000d10

080078f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b088      	sub	sp, #32
 80078f4:	af02      	add	r7, sp, #8
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078fa:	4b1c      	ldr	r3, [pc, #112]	; (800796c <prvProcessExpiredTimer+0x7c>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	3304      	adds	r3, #4
 8007908:	4618      	mov	r0, r3
 800790a:	f7fe fac5 	bl	8005e98 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	69db      	ldr	r3, [r3, #28]
 8007912:	2b01      	cmp	r3, #1
 8007914:	d121      	bne.n	800795a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	699a      	ldr	r2, [r3, #24]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	18d1      	adds	r1, r2, r3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	683a      	ldr	r2, [r7, #0]
 8007922:	6978      	ldr	r0, [r7, #20]
 8007924:	f000 f8c8 	bl	8007ab8 <prvInsertTimerInActiveList>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d015      	beq.n	800795a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800792e:	2300      	movs	r3, #0
 8007930:	9300      	str	r3, [sp, #0]
 8007932:	2300      	movs	r3, #0
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	2100      	movs	r1, #0
 8007938:	6978      	ldr	r0, [r7, #20]
 800793a:	f7ff ff8d 	bl	8007858 <xTimerGenericCommand>
 800793e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d109      	bne.n	800795a <prvProcessExpiredTimer+0x6a>
 8007946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794a:	f383 8811 	msr	BASEPRI, r3
 800794e:	f3bf 8f6f 	isb	sy
 8007952:	f3bf 8f4f 	dsb	sy
 8007956:	60fb      	str	r3, [r7, #12]
 8007958:	e7fe      	b.n	8007958 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795e:	6978      	ldr	r0, [r7, #20]
 8007960:	4798      	blx	r3
}
 8007962:	bf00      	nop
 8007964:	3718      	adds	r7, #24
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	20000d08 	.word	0x20000d08

08007970 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007978:	f107 0308 	add.w	r3, r7, #8
 800797c:	4618      	mov	r0, r3
 800797e:	f000 f857 	bl	8007a30 <prvGetNextExpireTime>
 8007982:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	4619      	mov	r1, r3
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f000 f803 	bl	8007994 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800798e:	f000 f8d5 	bl	8007b3c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007992:	e7f1      	b.n	8007978 <prvTimerTask+0x8>

08007994 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800799e:	f7ff f9a5 	bl	8006cec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80079a2:	f107 0308 	add.w	r3, r7, #8
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 f866 	bl	8007a78 <prvSampleTimeNow>
 80079ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d130      	bne.n	8007a16 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10a      	bne.n	80079d0 <prvProcessTimerOrBlockTask+0x3c>
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d806      	bhi.n	80079d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80079c2:	f7ff f9a1 	bl	8006d08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80079c6:	68f9      	ldr	r1, [r7, #12]
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f7ff ff91 	bl	80078f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80079ce:	e024      	b.n	8007a1a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d008      	beq.n	80079e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80079d6:	4b13      	ldr	r3, [pc, #76]	; (8007a24 <prvProcessTimerOrBlockTask+0x90>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	bf0c      	ite	eq
 80079e0:	2301      	moveq	r3, #1
 80079e2:	2300      	movne	r3, #0
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80079e8:	4b0f      	ldr	r3, [pc, #60]	; (8007a28 <prvProcessTimerOrBlockTask+0x94>)
 80079ea:	6818      	ldr	r0, [r3, #0]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	683a      	ldr	r2, [r7, #0]
 80079f4:	4619      	mov	r1, r3
 80079f6:	f7fe ff19 	bl	800682c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80079fa:	f7ff f985 	bl	8006d08 <xTaskResumeAll>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d10a      	bne.n	8007a1a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007a04:	4b09      	ldr	r3, [pc, #36]	; (8007a2c <prvProcessTimerOrBlockTask+0x98>)
 8007a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a0a:	601a      	str	r2, [r3, #0]
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	f3bf 8f6f 	isb	sy
}
 8007a14:	e001      	b.n	8007a1a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007a16:	f7ff f977 	bl	8006d08 <xTaskResumeAll>
}
 8007a1a:	bf00      	nop
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	20000d0c 	.word	0x20000d0c
 8007a28:	20000d10 	.word	0x20000d10
 8007a2c:	e000ed04 	.word	0xe000ed04

08007a30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a38:	4b0e      	ldr	r3, [pc, #56]	; (8007a74 <prvGetNextExpireTime+0x44>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	bf0c      	ite	eq
 8007a42:	2301      	moveq	r3, #1
 8007a44:	2300      	movne	r3, #0
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	461a      	mov	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d105      	bne.n	8007a62 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a56:	4b07      	ldr	r3, [pc, #28]	; (8007a74 <prvGetNextExpireTime+0x44>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	60fb      	str	r3, [r7, #12]
 8007a60:	e001      	b.n	8007a66 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007a62:	2300      	movs	r3, #0
 8007a64:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007a66:	68fb      	ldr	r3, [r7, #12]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3714      	adds	r7, #20
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr
 8007a74:	20000d08 	.word	0x20000d08

08007a78 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007a80:	f7ff f9de 	bl	8006e40 <xTaskGetTickCount>
 8007a84:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007a86:	4b0b      	ldr	r3, [pc, #44]	; (8007ab4 <prvSampleTimeNow+0x3c>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d205      	bcs.n	8007a9c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007a90:	f000 f904 	bl	8007c9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	601a      	str	r2, [r3, #0]
 8007a9a:	e002      	b.n	8007aa2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007aa2:	4a04      	ldr	r2, [pc, #16]	; (8007ab4 <prvSampleTimeNow+0x3c>)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	20000d18 	.word	0x20000d18

08007ab8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
 8007ac4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	68ba      	ldr	r2, [r7, #8]
 8007ace:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d812      	bhi.n	8007b04 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	1ad2      	subs	r2, r2, r3
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d302      	bcc.n	8007af2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007aec:	2301      	movs	r3, #1
 8007aee:	617b      	str	r3, [r7, #20]
 8007af0:	e01b      	b.n	8007b2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007af2:	4b10      	ldr	r3, [pc, #64]	; (8007b34 <prvInsertTimerInActiveList+0x7c>)
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	3304      	adds	r3, #4
 8007afa:	4619      	mov	r1, r3
 8007afc:	4610      	mov	r0, r2
 8007afe:	f7fe f992 	bl	8005e26 <vListInsert>
 8007b02:	e012      	b.n	8007b2a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d206      	bcs.n	8007b1a <prvInsertTimerInActiveList+0x62>
 8007b0c:	68ba      	ldr	r2, [r7, #8]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d302      	bcc.n	8007b1a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007b14:	2301      	movs	r3, #1
 8007b16:	617b      	str	r3, [r7, #20]
 8007b18:	e007      	b.n	8007b2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b1a:	4b07      	ldr	r3, [pc, #28]	; (8007b38 <prvInsertTimerInActiveList+0x80>)
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	3304      	adds	r3, #4
 8007b22:	4619      	mov	r1, r3
 8007b24:	4610      	mov	r0, r2
 8007b26:	f7fe f97e 	bl	8005e26 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007b2a:	697b      	ldr	r3, [r7, #20]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3718      	adds	r7, #24
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	20000d0c 	.word	0x20000d0c
 8007b38:	20000d08 	.word	0x20000d08

08007b3c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b08e      	sub	sp, #56	; 0x38
 8007b40:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b42:	e099      	b.n	8007c78 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	da17      	bge.n	8007b7a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007b4a:	1d3b      	adds	r3, r7, #4
 8007b4c:	3304      	adds	r3, #4
 8007b4e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d109      	bne.n	8007b6a <prvProcessReceivedCommands+0x2e>
 8007b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5a:	f383 8811 	msr	BASEPRI, r3
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	f3bf 8f4f 	dsb	sy
 8007b66:	61fb      	str	r3, [r7, #28]
 8007b68:	e7fe      	b.n	8007b68 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b70:	6850      	ldr	r0, [r2, #4]
 8007b72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b74:	6892      	ldr	r2, [r2, #8]
 8007b76:	4611      	mov	r1, r2
 8007b78:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	db7a      	blt.n	8007c76 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b86:	695b      	ldr	r3, [r3, #20]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d004      	beq.n	8007b96 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8e:	3304      	adds	r3, #4
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7fe f981 	bl	8005e98 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b96:	463b      	mov	r3, r7
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7ff ff6d 	bl	8007a78 <prvSampleTimeNow>
 8007b9e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2b09      	cmp	r3, #9
 8007ba4:	d868      	bhi.n	8007c78 <prvProcessReceivedCommands+0x13c>
 8007ba6:	a201      	add	r2, pc, #4	; (adr r2, 8007bac <prvProcessReceivedCommands+0x70>)
 8007ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bac:	08007bd5 	.word	0x08007bd5
 8007bb0:	08007bd5 	.word	0x08007bd5
 8007bb4:	08007bd5 	.word	0x08007bd5
 8007bb8:	08007c79 	.word	0x08007c79
 8007bbc:	08007c2f 	.word	0x08007c2f
 8007bc0:	08007c65 	.word	0x08007c65
 8007bc4:	08007bd5 	.word	0x08007bd5
 8007bc8:	08007bd5 	.word	0x08007bd5
 8007bcc:	08007c79 	.word	0x08007c79
 8007bd0:	08007c2f 	.word	0x08007c2f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007bd4:	68ba      	ldr	r2, [r7, #8]
 8007bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd8:	699b      	ldr	r3, [r3, #24]
 8007bda:	18d1      	adds	r1, r2, r3
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007be0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007be2:	f7ff ff69 	bl	8007ab8 <prvInsertTimerInActiveList>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d045      	beq.n	8007c78 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bf2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf6:	69db      	ldr	r3, [r3, #28]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d13d      	bne.n	8007c78 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007bfc:	68ba      	ldr	r2, [r7, #8]
 8007bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c00:	699b      	ldr	r3, [r3, #24]
 8007c02:	441a      	add	r2, r3
 8007c04:	2300      	movs	r3, #0
 8007c06:	9300      	str	r3, [sp, #0]
 8007c08:	2300      	movs	r3, #0
 8007c0a:	2100      	movs	r1, #0
 8007c0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c0e:	f7ff fe23 	bl	8007858 <xTimerGenericCommand>
 8007c12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007c14:	6a3b      	ldr	r3, [r7, #32]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d12e      	bne.n	8007c78 <prvProcessReceivedCommands+0x13c>
 8007c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1e:	f383 8811 	msr	BASEPRI, r3
 8007c22:	f3bf 8f6f 	isb	sy
 8007c26:	f3bf 8f4f 	dsb	sy
 8007c2a:	61bb      	str	r3, [r7, #24]
 8007c2c:	e7fe      	b.n	8007c2c <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c32:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d109      	bne.n	8007c50 <prvProcessReceivedCommands+0x114>
 8007c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c40:	f383 8811 	msr	BASEPRI, r3
 8007c44:	f3bf 8f6f 	isb	sy
 8007c48:	f3bf 8f4f 	dsb	sy
 8007c4c:	617b      	str	r3, [r7, #20]
 8007c4e:	e7fe      	b.n	8007c4e <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c52:	699a      	ldr	r2, [r3, #24]
 8007c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c56:	18d1      	adds	r1, r2, r3
 8007c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c5e:	f7ff ff2b 	bl	8007ab8 <prvInsertTimerInActiveList>
					break;
 8007c62:	e009      	b.n	8007c78 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d104      	bne.n	8007c78 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8007c6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c70:	f000 fbd8 	bl	8008424 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007c74:	e000      	b.n	8007c78 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007c76:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c78:	4b07      	ldr	r3, [pc, #28]	; (8007c98 <prvProcessReceivedCommands+0x15c>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	1d39      	adds	r1, r7, #4
 8007c7e:	2200      	movs	r2, #0
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7fe fbbf 	bl	8006404 <xQueueReceive>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f47f af5b 	bne.w	8007b44 <prvProcessReceivedCommands+0x8>
	}
}
 8007c8e:	bf00      	nop
 8007c90:	3730      	adds	r7, #48	; 0x30
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	20000d10 	.word	0x20000d10

08007c9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b088      	sub	sp, #32
 8007ca0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ca2:	e044      	b.n	8007d2e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ca4:	4b2b      	ldr	r3, [pc, #172]	; (8007d54 <prvSwitchTimerLists+0xb8>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007cae:	4b29      	ldr	r3, [pc, #164]	; (8007d54 <prvSwitchTimerLists+0xb8>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	3304      	adds	r3, #4
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7fe f8eb 	bl	8005e98 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d12d      	bne.n	8007d2e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	699b      	ldr	r3, [r3, #24]
 8007cd6:	693a      	ldr	r2, [r7, #16]
 8007cd8:	4413      	add	r3, r2
 8007cda:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d90e      	bls.n	8007d02 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	68ba      	ldr	r2, [r7, #8]
 8007ce8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007cf0:	4b18      	ldr	r3, [pc, #96]	; (8007d54 <prvSwitchTimerLists+0xb8>)
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	3304      	adds	r3, #4
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	4610      	mov	r0, r2
 8007cfc:	f7fe f893 	bl	8005e26 <vListInsert>
 8007d00:	e015      	b.n	8007d2e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d02:	2300      	movs	r3, #0
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	2300      	movs	r3, #0
 8007d08:	693a      	ldr	r2, [r7, #16]
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f7ff fda3 	bl	8007858 <xTimerGenericCommand>
 8007d12:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d109      	bne.n	8007d2e <prvSwitchTimerLists+0x92>
 8007d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1e:	f383 8811 	msr	BASEPRI, r3
 8007d22:	f3bf 8f6f 	isb	sy
 8007d26:	f3bf 8f4f 	dsb	sy
 8007d2a:	603b      	str	r3, [r7, #0]
 8007d2c:	e7fe      	b.n	8007d2c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d2e:	4b09      	ldr	r3, [pc, #36]	; (8007d54 <prvSwitchTimerLists+0xb8>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d1b5      	bne.n	8007ca4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007d38:	4b06      	ldr	r3, [pc, #24]	; (8007d54 <prvSwitchTimerLists+0xb8>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007d3e:	4b06      	ldr	r3, [pc, #24]	; (8007d58 <prvSwitchTimerLists+0xbc>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a04      	ldr	r2, [pc, #16]	; (8007d54 <prvSwitchTimerLists+0xb8>)
 8007d44:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007d46:	4a04      	ldr	r2, [pc, #16]	; (8007d58 <prvSwitchTimerLists+0xbc>)
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	6013      	str	r3, [r2, #0]
}
 8007d4c:	bf00      	nop
 8007d4e:	3718      	adds	r7, #24
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	20000d08 	.word	0x20000d08
 8007d58:	20000d0c 	.word	0x20000d0c

08007d5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007d62:	f000 f983 	bl	800806c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007d66:	4b15      	ldr	r3, [pc, #84]	; (8007dbc <prvCheckForValidListAndQueue+0x60>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d120      	bne.n	8007db0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007d6e:	4814      	ldr	r0, [pc, #80]	; (8007dc0 <prvCheckForValidListAndQueue+0x64>)
 8007d70:	f7fe f808 	bl	8005d84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007d74:	4813      	ldr	r0, [pc, #76]	; (8007dc4 <prvCheckForValidListAndQueue+0x68>)
 8007d76:	f7fe f805 	bl	8005d84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007d7a:	4b13      	ldr	r3, [pc, #76]	; (8007dc8 <prvCheckForValidListAndQueue+0x6c>)
 8007d7c:	4a10      	ldr	r2, [pc, #64]	; (8007dc0 <prvCheckForValidListAndQueue+0x64>)
 8007d7e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007d80:	4b12      	ldr	r3, [pc, #72]	; (8007dcc <prvCheckForValidListAndQueue+0x70>)
 8007d82:	4a10      	ldr	r2, [pc, #64]	; (8007dc4 <prvCheckForValidListAndQueue+0x68>)
 8007d84:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007d86:	2300      	movs	r3, #0
 8007d88:	9300      	str	r3, [sp, #0]
 8007d8a:	4b11      	ldr	r3, [pc, #68]	; (8007dd0 <prvCheckForValidListAndQueue+0x74>)
 8007d8c:	4a11      	ldr	r2, [pc, #68]	; (8007dd4 <prvCheckForValidListAndQueue+0x78>)
 8007d8e:	2110      	movs	r1, #16
 8007d90:	200a      	movs	r0, #10
 8007d92:	f7fe f913 	bl	8005fbc <xQueueGenericCreateStatic>
 8007d96:	4602      	mov	r2, r0
 8007d98:	4b08      	ldr	r3, [pc, #32]	; (8007dbc <prvCheckForValidListAndQueue+0x60>)
 8007d9a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007d9c:	4b07      	ldr	r3, [pc, #28]	; (8007dbc <prvCheckForValidListAndQueue+0x60>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d005      	beq.n	8007db0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007da4:	4b05      	ldr	r3, [pc, #20]	; (8007dbc <prvCheckForValidListAndQueue+0x60>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	490b      	ldr	r1, [pc, #44]	; (8007dd8 <prvCheckForValidListAndQueue+0x7c>)
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fe fd16 	bl	80067dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007db0:	f000 f98a 	bl	80080c8 <vPortExitCritical>
}
 8007db4:	bf00      	nop
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	20000d10 	.word	0x20000d10
 8007dc0:	20000ce0 	.word	0x20000ce0
 8007dc4:	20000cf4 	.word	0x20000cf4
 8007dc8:	20000d08 	.word	0x20000d08
 8007dcc:	20000d0c 	.word	0x20000d0c
 8007dd0:	20000dbc 	.word	0x20000dbc
 8007dd4:	20000d1c 	.word	0x20000d1c
 8007dd8:	080095b4 	.word	0x080095b4

08007ddc <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b08a      	sub	sp, #40	; 0x28
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]
 8007de8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8007dea:	f06f 0301 	mvn.w	r3, #1
 8007dee:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007dfc:	4b06      	ldr	r3, [pc, #24]	; (8007e18 <xTimerPendFunctionCallFromISR+0x3c>)
 8007dfe:	6818      	ldr	r0, [r3, #0]
 8007e00:	f107 0114 	add.w	r1, r7, #20
 8007e04:	2300      	movs	r3, #0
 8007e06:	683a      	ldr	r2, [r7, #0]
 8007e08:	f7fe fa68 	bl	80062dc <xQueueGenericSendFromISR>
 8007e0c:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8007e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3728      	adds	r7, #40	; 0x28
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	20000d10 	.word	0x20000d10

08007e1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	3b04      	subs	r3, #4
 8007e2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	3b04      	subs	r3, #4
 8007e3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	f023 0201 	bic.w	r2, r3, #1
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	3b04      	subs	r3, #4
 8007e4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e4c:	4a0c      	ldr	r2, [pc, #48]	; (8007e80 <pxPortInitialiseStack+0x64>)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	3b14      	subs	r3, #20
 8007e56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	3b04      	subs	r3, #4
 8007e62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f06f 0202 	mvn.w	r2, #2
 8007e6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	3b20      	subs	r3, #32
 8007e70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e72:	68fb      	ldr	r3, [r7, #12]
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3714      	adds	r7, #20
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr
 8007e80:	08007e85 	.word	0x08007e85

08007e84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e8e:	4b11      	ldr	r3, [pc, #68]	; (8007ed4 <prvTaskExitError+0x50>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e96:	d009      	beq.n	8007eac <prvTaskExitError+0x28>
 8007e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9c:	f383 8811 	msr	BASEPRI, r3
 8007ea0:	f3bf 8f6f 	isb	sy
 8007ea4:	f3bf 8f4f 	dsb	sy
 8007ea8:	60fb      	str	r3, [r7, #12]
 8007eaa:	e7fe      	b.n	8007eaa <prvTaskExitError+0x26>
 8007eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb0:	f383 8811 	msr	BASEPRI, r3
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ebe:	bf00      	nop
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d0fc      	beq.n	8007ec0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007ec6:	bf00      	nop
 8007ec8:	3714      	adds	r7, #20
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	20000040 	.word	0x20000040
	...

08007ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ee0:	4b07      	ldr	r3, [pc, #28]	; (8007f00 <pxCurrentTCBConst2>)
 8007ee2:	6819      	ldr	r1, [r3, #0]
 8007ee4:	6808      	ldr	r0, [r1, #0]
 8007ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eea:	f380 8809 	msr	PSP, r0
 8007eee:	f3bf 8f6f 	isb	sy
 8007ef2:	f04f 0000 	mov.w	r0, #0
 8007ef6:	f380 8811 	msr	BASEPRI, r0
 8007efa:	4770      	bx	lr
 8007efc:	f3af 8000 	nop.w

08007f00 <pxCurrentTCBConst2>:
 8007f00:	200007e0 	.word	0x200007e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f04:	bf00      	nop
 8007f06:	bf00      	nop

08007f08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f08:	4808      	ldr	r0, [pc, #32]	; (8007f2c <prvPortStartFirstTask+0x24>)
 8007f0a:	6800      	ldr	r0, [r0, #0]
 8007f0c:	6800      	ldr	r0, [r0, #0]
 8007f0e:	f380 8808 	msr	MSP, r0
 8007f12:	f04f 0000 	mov.w	r0, #0
 8007f16:	f380 8814 	msr	CONTROL, r0
 8007f1a:	b662      	cpsie	i
 8007f1c:	b661      	cpsie	f
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	f3bf 8f6f 	isb	sy
 8007f26:	df00      	svc	0
 8007f28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f2a:	bf00      	nop
 8007f2c:	e000ed08 	.word	0xe000ed08

08007f30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f36:	4b44      	ldr	r3, [pc, #272]	; (8008048 <xPortStartScheduler+0x118>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a44      	ldr	r2, [pc, #272]	; (800804c <xPortStartScheduler+0x11c>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d109      	bne.n	8007f54 <xPortStartScheduler+0x24>
 8007f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f44:	f383 8811 	msr	BASEPRI, r3
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	613b      	str	r3, [r7, #16]
 8007f52:	e7fe      	b.n	8007f52 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007f54:	4b3c      	ldr	r3, [pc, #240]	; (8008048 <xPortStartScheduler+0x118>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a3d      	ldr	r2, [pc, #244]	; (8008050 <xPortStartScheduler+0x120>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d109      	bne.n	8007f72 <xPortStartScheduler+0x42>
 8007f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f62:	f383 8811 	msr	BASEPRI, r3
 8007f66:	f3bf 8f6f 	isb	sy
 8007f6a:	f3bf 8f4f 	dsb	sy
 8007f6e:	60fb      	str	r3, [r7, #12]
 8007f70:	e7fe      	b.n	8007f70 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f72:	4b38      	ldr	r3, [pc, #224]	; (8008054 <xPortStartScheduler+0x124>)
 8007f74:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	22ff      	movs	r2, #255	; 0xff
 8007f82:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f8c:	78fb      	ldrb	r3, [r7, #3]
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f94:	b2da      	uxtb	r2, r3
 8007f96:	4b30      	ldr	r3, [pc, #192]	; (8008058 <xPortStartScheduler+0x128>)
 8007f98:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f9a:	4b30      	ldr	r3, [pc, #192]	; (800805c <xPortStartScheduler+0x12c>)
 8007f9c:	2207      	movs	r2, #7
 8007f9e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fa0:	e009      	b.n	8007fb6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007fa2:	4b2e      	ldr	r3, [pc, #184]	; (800805c <xPortStartScheduler+0x12c>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	4a2c      	ldr	r2, [pc, #176]	; (800805c <xPortStartScheduler+0x12c>)
 8007faa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007fac:	78fb      	ldrb	r3, [r7, #3]
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	005b      	lsls	r3, r3, #1
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fb6:	78fb      	ldrb	r3, [r7, #3]
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fbe:	2b80      	cmp	r3, #128	; 0x80
 8007fc0:	d0ef      	beq.n	8007fa2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007fc2:	4b26      	ldr	r3, [pc, #152]	; (800805c <xPortStartScheduler+0x12c>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f1c3 0307 	rsb	r3, r3, #7
 8007fca:	2b04      	cmp	r3, #4
 8007fcc:	d009      	beq.n	8007fe2 <xPortStartScheduler+0xb2>
 8007fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	60bb      	str	r3, [r7, #8]
 8007fe0:	e7fe      	b.n	8007fe0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007fe2:	4b1e      	ldr	r3, [pc, #120]	; (800805c <xPortStartScheduler+0x12c>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	021b      	lsls	r3, r3, #8
 8007fe8:	4a1c      	ldr	r2, [pc, #112]	; (800805c <xPortStartScheduler+0x12c>)
 8007fea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007fec:	4b1b      	ldr	r3, [pc, #108]	; (800805c <xPortStartScheduler+0x12c>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ff4:	4a19      	ldr	r2, [pc, #100]	; (800805c <xPortStartScheduler+0x12c>)
 8007ff6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	b2da      	uxtb	r2, r3
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008000:	4b17      	ldr	r3, [pc, #92]	; (8008060 <xPortStartScheduler+0x130>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a16      	ldr	r2, [pc, #88]	; (8008060 <xPortStartScheduler+0x130>)
 8008006:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800800a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800800c:	4b14      	ldr	r3, [pc, #80]	; (8008060 <xPortStartScheduler+0x130>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a13      	ldr	r2, [pc, #76]	; (8008060 <xPortStartScheduler+0x130>)
 8008012:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008016:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008018:	f000 f8d6 	bl	80081c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800801c:	4b11      	ldr	r3, [pc, #68]	; (8008064 <xPortStartScheduler+0x134>)
 800801e:	2200      	movs	r2, #0
 8008020:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008022:	f000 f8f5 	bl	8008210 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008026:	4b10      	ldr	r3, [pc, #64]	; (8008068 <xPortStartScheduler+0x138>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a0f      	ldr	r2, [pc, #60]	; (8008068 <xPortStartScheduler+0x138>)
 800802c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008030:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008032:	f7ff ff69 	bl	8007f08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008036:	f7fe ffd1 	bl	8006fdc <vTaskSwitchContext>
	prvTaskExitError();
 800803a:	f7ff ff23 	bl	8007e84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3718      	adds	r7, #24
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}
 8008048:	e000ed00 	.word	0xe000ed00
 800804c:	410fc271 	.word	0x410fc271
 8008050:	410fc270 	.word	0x410fc270
 8008054:	e000e400 	.word	0xe000e400
 8008058:	20000e0c 	.word	0x20000e0c
 800805c:	20000e10 	.word	0x20000e10
 8008060:	e000ed20 	.word	0xe000ed20
 8008064:	20000040 	.word	0x20000040
 8008068:	e000ef34 	.word	0xe000ef34

0800806c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008076:	f383 8811 	msr	BASEPRI, r3
 800807a:	f3bf 8f6f 	isb	sy
 800807e:	f3bf 8f4f 	dsb	sy
 8008082:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008084:	4b0e      	ldr	r3, [pc, #56]	; (80080c0 <vPortEnterCritical+0x54>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	3301      	adds	r3, #1
 800808a:	4a0d      	ldr	r2, [pc, #52]	; (80080c0 <vPortEnterCritical+0x54>)
 800808c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800808e:	4b0c      	ldr	r3, [pc, #48]	; (80080c0 <vPortEnterCritical+0x54>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b01      	cmp	r3, #1
 8008094:	d10e      	bne.n	80080b4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008096:	4b0b      	ldr	r3, [pc, #44]	; (80080c4 <vPortEnterCritical+0x58>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	b2db      	uxtb	r3, r3
 800809c:	2b00      	cmp	r3, #0
 800809e:	d009      	beq.n	80080b4 <vPortEnterCritical+0x48>
 80080a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a4:	f383 8811 	msr	BASEPRI, r3
 80080a8:	f3bf 8f6f 	isb	sy
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	603b      	str	r3, [r7, #0]
 80080b2:	e7fe      	b.n	80080b2 <vPortEnterCritical+0x46>
	}
}
 80080b4:	bf00      	nop
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr
 80080c0:	20000040 	.word	0x20000040
 80080c4:	e000ed04 	.word	0xe000ed04

080080c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80080ce:	4b11      	ldr	r3, [pc, #68]	; (8008114 <vPortExitCritical+0x4c>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d109      	bne.n	80080ea <vPortExitCritical+0x22>
 80080d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080da:	f383 8811 	msr	BASEPRI, r3
 80080de:	f3bf 8f6f 	isb	sy
 80080e2:	f3bf 8f4f 	dsb	sy
 80080e6:	607b      	str	r3, [r7, #4]
 80080e8:	e7fe      	b.n	80080e8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80080ea:	4b0a      	ldr	r3, [pc, #40]	; (8008114 <vPortExitCritical+0x4c>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	3b01      	subs	r3, #1
 80080f0:	4a08      	ldr	r2, [pc, #32]	; (8008114 <vPortExitCritical+0x4c>)
 80080f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80080f4:	4b07      	ldr	r3, [pc, #28]	; (8008114 <vPortExitCritical+0x4c>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d104      	bne.n	8008106 <vPortExitCritical+0x3e>
 80080fc:	2300      	movs	r3, #0
 80080fe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008106:	bf00      	nop
 8008108:	370c      	adds	r7, #12
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	20000040 	.word	0x20000040
	...

08008120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008120:	f3ef 8009 	mrs	r0, PSP
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	4b15      	ldr	r3, [pc, #84]	; (8008180 <pxCurrentTCBConst>)
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	f01e 0f10 	tst.w	lr, #16
 8008130:	bf08      	it	eq
 8008132:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008136:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800813a:	6010      	str	r0, [r2, #0]
 800813c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008140:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008144:	f380 8811 	msr	BASEPRI, r0
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	f3bf 8f6f 	isb	sy
 8008150:	f7fe ff44 	bl	8006fdc <vTaskSwitchContext>
 8008154:	f04f 0000 	mov.w	r0, #0
 8008158:	f380 8811 	msr	BASEPRI, r0
 800815c:	bc09      	pop	{r0, r3}
 800815e:	6819      	ldr	r1, [r3, #0]
 8008160:	6808      	ldr	r0, [r1, #0]
 8008162:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008166:	f01e 0f10 	tst.w	lr, #16
 800816a:	bf08      	it	eq
 800816c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008170:	f380 8809 	msr	PSP, r0
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	f3af 8000 	nop.w

08008180 <pxCurrentTCBConst>:
 8008180:	200007e0 	.word	0x200007e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008184:	bf00      	nop
 8008186:	bf00      	nop

08008188 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
	__asm volatile
 800818e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80081a0:	f7fe fe5e 	bl	8006e60 <xTaskIncrementTick>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d003      	beq.n	80081b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80081aa:	4b06      	ldr	r3, [pc, #24]	; (80081c4 <SysTick_Handler+0x3c>)
 80081ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081b0:	601a      	str	r2, [r3, #0]
 80081b2:	2300      	movs	r3, #0
 80081b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80081bc:	bf00      	nop
 80081be:	3708      	adds	r7, #8
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	e000ed04 	.word	0xe000ed04

080081c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80081c8:	b480      	push	{r7}
 80081ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80081cc:	4b0b      	ldr	r3, [pc, #44]	; (80081fc <vPortSetupTimerInterrupt+0x34>)
 80081ce:	2200      	movs	r2, #0
 80081d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80081d2:	4b0b      	ldr	r3, [pc, #44]	; (8008200 <vPortSetupTimerInterrupt+0x38>)
 80081d4:	2200      	movs	r2, #0
 80081d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80081d8:	4b0a      	ldr	r3, [pc, #40]	; (8008204 <vPortSetupTimerInterrupt+0x3c>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a0a      	ldr	r2, [pc, #40]	; (8008208 <vPortSetupTimerInterrupt+0x40>)
 80081de:	fba2 2303 	umull	r2, r3, r2, r3
 80081e2:	099b      	lsrs	r3, r3, #6
 80081e4:	4a09      	ldr	r2, [pc, #36]	; (800820c <vPortSetupTimerInterrupt+0x44>)
 80081e6:	3b01      	subs	r3, #1
 80081e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80081ea:	4b04      	ldr	r3, [pc, #16]	; (80081fc <vPortSetupTimerInterrupt+0x34>)
 80081ec:	2207      	movs	r2, #7
 80081ee:	601a      	str	r2, [r3, #0]
}
 80081f0:	bf00      	nop
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	e000e010 	.word	0xe000e010
 8008200:	e000e018 	.word	0xe000e018
 8008204:	20000000 	.word	0x20000000
 8008208:	10624dd3 	.word	0x10624dd3
 800820c:	e000e014 	.word	0xe000e014

08008210 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008210:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008220 <vPortEnableVFP+0x10>
 8008214:	6801      	ldr	r1, [r0, #0]
 8008216:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800821a:	6001      	str	r1, [r0, #0]
 800821c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800821e:	bf00      	nop
 8008220:	e000ed88 	.word	0xe000ed88

08008224 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800822a:	f3ef 8305 	mrs	r3, IPSR
 800822e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2b0f      	cmp	r3, #15
 8008234:	d913      	bls.n	800825e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008236:	4a16      	ldr	r2, [pc, #88]	; (8008290 <vPortValidateInterruptPriority+0x6c>)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	4413      	add	r3, r2
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008240:	4b14      	ldr	r3, [pc, #80]	; (8008294 <vPortValidateInterruptPriority+0x70>)
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	7afa      	ldrb	r2, [r7, #11]
 8008246:	429a      	cmp	r2, r3
 8008248:	d209      	bcs.n	800825e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800824a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824e:	f383 8811 	msr	BASEPRI, r3
 8008252:	f3bf 8f6f 	isb	sy
 8008256:	f3bf 8f4f 	dsb	sy
 800825a:	607b      	str	r3, [r7, #4]
 800825c:	e7fe      	b.n	800825c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800825e:	4b0e      	ldr	r3, [pc, #56]	; (8008298 <vPortValidateInterruptPriority+0x74>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008266:	4b0d      	ldr	r3, [pc, #52]	; (800829c <vPortValidateInterruptPriority+0x78>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	429a      	cmp	r2, r3
 800826c:	d909      	bls.n	8008282 <vPortValidateInterruptPriority+0x5e>
 800826e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008272:	f383 8811 	msr	BASEPRI, r3
 8008276:	f3bf 8f6f 	isb	sy
 800827a:	f3bf 8f4f 	dsb	sy
 800827e:	603b      	str	r3, [r7, #0]
 8008280:	e7fe      	b.n	8008280 <vPortValidateInterruptPriority+0x5c>
	}
 8008282:	bf00      	nop
 8008284:	3714      	adds	r7, #20
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	e000e3f0 	.word	0xe000e3f0
 8008294:	20000e0c 	.word	0x20000e0c
 8008298:	e000ed0c 	.word	0xe000ed0c
 800829c:	20000e10 	.word	0x20000e10

080082a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b08a      	sub	sp, #40	; 0x28
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80082a8:	2300      	movs	r3, #0
 80082aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80082ac:	f7fe fd1e 	bl	8006cec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80082b0:	4b57      	ldr	r3, [pc, #348]	; (8008410 <pvPortMalloc+0x170>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d101      	bne.n	80082bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80082b8:	f000 f90c 	bl	80084d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80082bc:	4b55      	ldr	r3, [pc, #340]	; (8008414 <pvPortMalloc+0x174>)
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4013      	ands	r3, r2
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f040 808c 	bne.w	80083e2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d01c      	beq.n	800830a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80082d0:	2208      	movs	r2, #8
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4413      	add	r3, r2
 80082d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f003 0307 	and.w	r3, r3, #7
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d013      	beq.n	800830a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f023 0307 	bic.w	r3, r3, #7
 80082e8:	3308      	adds	r3, #8
 80082ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f003 0307 	and.w	r3, r3, #7
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d009      	beq.n	800830a <pvPortMalloc+0x6a>
 80082f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fa:	f383 8811 	msr	BASEPRI, r3
 80082fe:	f3bf 8f6f 	isb	sy
 8008302:	f3bf 8f4f 	dsb	sy
 8008306:	617b      	str	r3, [r7, #20]
 8008308:	e7fe      	b.n	8008308 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d068      	beq.n	80083e2 <pvPortMalloc+0x142>
 8008310:	4b41      	ldr	r3, [pc, #260]	; (8008418 <pvPortMalloc+0x178>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	429a      	cmp	r2, r3
 8008318:	d863      	bhi.n	80083e2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800831a:	4b40      	ldr	r3, [pc, #256]	; (800841c <pvPortMalloc+0x17c>)
 800831c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800831e:	4b3f      	ldr	r3, [pc, #252]	; (800841c <pvPortMalloc+0x17c>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008324:	e004      	b.n	8008330 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008328:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800832a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	429a      	cmp	r2, r3
 8008338:	d903      	bls.n	8008342 <pvPortMalloc+0xa2>
 800833a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1f1      	bne.n	8008326 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008342:	4b33      	ldr	r3, [pc, #204]	; (8008410 <pvPortMalloc+0x170>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008348:	429a      	cmp	r2, r3
 800834a:	d04a      	beq.n	80083e2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800834c:	6a3b      	ldr	r3, [r7, #32]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2208      	movs	r2, #8
 8008352:	4413      	add	r3, r2
 8008354:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	6a3b      	ldr	r3, [r7, #32]
 800835c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800835e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008360:	685a      	ldr	r2, [r3, #4]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	1ad2      	subs	r2, r2, r3
 8008366:	2308      	movs	r3, #8
 8008368:	005b      	lsls	r3, r3, #1
 800836a:	429a      	cmp	r2, r3
 800836c:	d91e      	bls.n	80083ac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800836e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4413      	add	r3, r2
 8008374:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	f003 0307 	and.w	r3, r3, #7
 800837c:	2b00      	cmp	r3, #0
 800837e:	d009      	beq.n	8008394 <pvPortMalloc+0xf4>
 8008380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008384:	f383 8811 	msr	BASEPRI, r3
 8008388:	f3bf 8f6f 	isb	sy
 800838c:	f3bf 8f4f 	dsb	sy
 8008390:	613b      	str	r3, [r7, #16]
 8008392:	e7fe      	b.n	8008392 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008396:	685a      	ldr	r2, [r3, #4]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	1ad2      	subs	r2, r2, r3
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80083a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80083a6:	69b8      	ldr	r0, [r7, #24]
 80083a8:	f000 f8f6 	bl	8008598 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80083ac:	4b1a      	ldr	r3, [pc, #104]	; (8008418 <pvPortMalloc+0x178>)
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	1ad3      	subs	r3, r2, r3
 80083b6:	4a18      	ldr	r2, [pc, #96]	; (8008418 <pvPortMalloc+0x178>)
 80083b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80083ba:	4b17      	ldr	r3, [pc, #92]	; (8008418 <pvPortMalloc+0x178>)
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	4b18      	ldr	r3, [pc, #96]	; (8008420 <pvPortMalloc+0x180>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d203      	bcs.n	80083ce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80083c6:	4b14      	ldr	r3, [pc, #80]	; (8008418 <pvPortMalloc+0x178>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a15      	ldr	r2, [pc, #84]	; (8008420 <pvPortMalloc+0x180>)
 80083cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80083ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d0:	685a      	ldr	r2, [r3, #4]
 80083d2:	4b10      	ldr	r3, [pc, #64]	; (8008414 <pvPortMalloc+0x174>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	431a      	orrs	r2, r3
 80083d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80083dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083de:	2200      	movs	r2, #0
 80083e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80083e2:	f7fe fc91 	bl	8006d08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80083e6:	69fb      	ldr	r3, [r7, #28]
 80083e8:	f003 0307 	and.w	r3, r3, #7
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d009      	beq.n	8008404 <pvPortMalloc+0x164>
 80083f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f4:	f383 8811 	msr	BASEPRI, r3
 80083f8:	f3bf 8f6f 	isb	sy
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	60fb      	str	r3, [r7, #12]
 8008402:	e7fe      	b.n	8008402 <pvPortMalloc+0x162>
	return pvReturn;
 8008404:	69fb      	ldr	r3, [r7, #28]
}
 8008406:	4618      	mov	r0, r3
 8008408:	3728      	adds	r7, #40	; 0x28
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	20008e1c 	.word	0x20008e1c
 8008414:	20008e28 	.word	0x20008e28
 8008418:	20008e20 	.word	0x20008e20
 800841c:	20008e14 	.word	0x20008e14
 8008420:	20008e24 	.word	0x20008e24

08008424 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b086      	sub	sp, #24
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d046      	beq.n	80084c4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008436:	2308      	movs	r3, #8
 8008438:	425b      	negs	r3, r3
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	4413      	add	r3, r2
 800843e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	685a      	ldr	r2, [r3, #4]
 8008448:	4b20      	ldr	r3, [pc, #128]	; (80084cc <vPortFree+0xa8>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4013      	ands	r3, r2
 800844e:	2b00      	cmp	r3, #0
 8008450:	d109      	bne.n	8008466 <vPortFree+0x42>
 8008452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008456:	f383 8811 	msr	BASEPRI, r3
 800845a:	f3bf 8f6f 	isb	sy
 800845e:	f3bf 8f4f 	dsb	sy
 8008462:	60fb      	str	r3, [r7, #12]
 8008464:	e7fe      	b.n	8008464 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d009      	beq.n	8008482 <vPortFree+0x5e>
 800846e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	60bb      	str	r3, [r7, #8]
 8008480:	e7fe      	b.n	8008480 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	685a      	ldr	r2, [r3, #4]
 8008486:	4b11      	ldr	r3, [pc, #68]	; (80084cc <vPortFree+0xa8>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4013      	ands	r3, r2
 800848c:	2b00      	cmp	r3, #0
 800848e:	d019      	beq.n	80084c4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d115      	bne.n	80084c4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	685a      	ldr	r2, [r3, #4]
 800849c:	4b0b      	ldr	r3, [pc, #44]	; (80084cc <vPortFree+0xa8>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	43db      	mvns	r3, r3
 80084a2:	401a      	ands	r2, r3
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80084a8:	f7fe fc20 	bl	8006cec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	685a      	ldr	r2, [r3, #4]
 80084b0:	4b07      	ldr	r3, [pc, #28]	; (80084d0 <vPortFree+0xac>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4413      	add	r3, r2
 80084b6:	4a06      	ldr	r2, [pc, #24]	; (80084d0 <vPortFree+0xac>)
 80084b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80084ba:	6938      	ldr	r0, [r7, #16]
 80084bc:	f000 f86c 	bl	8008598 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80084c0:	f7fe fc22 	bl	8006d08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80084c4:	bf00      	nop
 80084c6:	3718      	adds	r7, #24
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	20008e28 	.word	0x20008e28
 80084d0:	20008e20 	.word	0x20008e20

080084d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80084d4:	b480      	push	{r7}
 80084d6:	b085      	sub	sp, #20
 80084d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80084da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80084e0:	4b27      	ldr	r3, [pc, #156]	; (8008580 <prvHeapInit+0xac>)
 80084e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f003 0307 	and.w	r3, r3, #7
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00c      	beq.n	8008508 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	3307      	adds	r3, #7
 80084f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f023 0307 	bic.w	r3, r3, #7
 80084fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80084fc:	68ba      	ldr	r2, [r7, #8]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	1ad3      	subs	r3, r2, r3
 8008502:	4a1f      	ldr	r2, [pc, #124]	; (8008580 <prvHeapInit+0xac>)
 8008504:	4413      	add	r3, r2
 8008506:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800850c:	4a1d      	ldr	r2, [pc, #116]	; (8008584 <prvHeapInit+0xb0>)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008512:	4b1c      	ldr	r3, [pc, #112]	; (8008584 <prvHeapInit+0xb0>)
 8008514:	2200      	movs	r2, #0
 8008516:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	68ba      	ldr	r2, [r7, #8]
 800851c:	4413      	add	r3, r2
 800851e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008520:	2208      	movs	r2, #8
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	1a9b      	subs	r3, r3, r2
 8008526:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f023 0307 	bic.w	r3, r3, #7
 800852e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	4a15      	ldr	r2, [pc, #84]	; (8008588 <prvHeapInit+0xb4>)
 8008534:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008536:	4b14      	ldr	r3, [pc, #80]	; (8008588 <prvHeapInit+0xb4>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2200      	movs	r2, #0
 800853c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800853e:	4b12      	ldr	r3, [pc, #72]	; (8008588 <prvHeapInit+0xb4>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2200      	movs	r2, #0
 8008544:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	68fa      	ldr	r2, [r7, #12]
 800854e:	1ad2      	subs	r2, r2, r3
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008554:	4b0c      	ldr	r3, [pc, #48]	; (8008588 <prvHeapInit+0xb4>)
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	4a0a      	ldr	r2, [pc, #40]	; (800858c <prvHeapInit+0xb8>)
 8008562:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	4a09      	ldr	r2, [pc, #36]	; (8008590 <prvHeapInit+0xbc>)
 800856a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800856c:	4b09      	ldr	r3, [pc, #36]	; (8008594 <prvHeapInit+0xc0>)
 800856e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008572:	601a      	str	r2, [r3, #0]
}
 8008574:	bf00      	nop
 8008576:	3714      	adds	r7, #20
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr
 8008580:	20000e14 	.word	0x20000e14
 8008584:	20008e14 	.word	0x20008e14
 8008588:	20008e1c 	.word	0x20008e1c
 800858c:	20008e24 	.word	0x20008e24
 8008590:	20008e20 	.word	0x20008e20
 8008594:	20008e28 	.word	0x20008e28

08008598 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80085a0:	4b28      	ldr	r3, [pc, #160]	; (8008644 <prvInsertBlockIntoFreeList+0xac>)
 80085a2:	60fb      	str	r3, [r7, #12]
 80085a4:	e002      	b.n	80085ac <prvInsertBlockIntoFreeList+0x14>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	60fb      	str	r3, [r7, #12]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d8f7      	bhi.n	80085a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	68ba      	ldr	r2, [r7, #8]
 80085c0:	4413      	add	r3, r2
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d108      	bne.n	80085da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	685a      	ldr	r2, [r3, #4]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	441a      	add	r2, r3
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	68ba      	ldr	r2, [r7, #8]
 80085e4:	441a      	add	r2, r3
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d118      	bne.n	8008620 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	4b15      	ldr	r3, [pc, #84]	; (8008648 <prvInsertBlockIntoFreeList+0xb0>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d00d      	beq.n	8008616 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	685a      	ldr	r2, [r3, #4]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	441a      	add	r2, r3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	601a      	str	r2, [r3, #0]
 8008614:	e008      	b.n	8008628 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008616:	4b0c      	ldr	r3, [pc, #48]	; (8008648 <prvInsertBlockIntoFreeList+0xb0>)
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	601a      	str	r2, [r3, #0]
 800861e:	e003      	b.n	8008628 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008628:	68fa      	ldr	r2, [r7, #12]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	429a      	cmp	r2, r3
 800862e:	d002      	beq.n	8008636 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008636:	bf00      	nop
 8008638:	3714      	adds	r7, #20
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop
 8008644:	20008e14 	.word	0x20008e14
 8008648:	20008e1c 	.word	0x20008e1c

0800864c <__errno>:
 800864c:	4b01      	ldr	r3, [pc, #4]	; (8008654 <__errno+0x8>)
 800864e:	6818      	ldr	r0, [r3, #0]
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	20000044 	.word	0x20000044

08008658 <__libc_init_array>:
 8008658:	b570      	push	{r4, r5, r6, lr}
 800865a:	4e0d      	ldr	r6, [pc, #52]	; (8008690 <__libc_init_array+0x38>)
 800865c:	4c0d      	ldr	r4, [pc, #52]	; (8008694 <__libc_init_array+0x3c>)
 800865e:	1ba4      	subs	r4, r4, r6
 8008660:	10a4      	asrs	r4, r4, #2
 8008662:	2500      	movs	r5, #0
 8008664:	42a5      	cmp	r5, r4
 8008666:	d109      	bne.n	800867c <__libc_init_array+0x24>
 8008668:	4e0b      	ldr	r6, [pc, #44]	; (8008698 <__libc_init_array+0x40>)
 800866a:	4c0c      	ldr	r4, [pc, #48]	; (800869c <__libc_init_array+0x44>)
 800866c:	f000 ff74 	bl	8009558 <_init>
 8008670:	1ba4      	subs	r4, r4, r6
 8008672:	10a4      	asrs	r4, r4, #2
 8008674:	2500      	movs	r5, #0
 8008676:	42a5      	cmp	r5, r4
 8008678:	d105      	bne.n	8008686 <__libc_init_array+0x2e>
 800867a:	bd70      	pop	{r4, r5, r6, pc}
 800867c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008680:	4798      	blx	r3
 8008682:	3501      	adds	r5, #1
 8008684:	e7ee      	b.n	8008664 <__libc_init_array+0xc>
 8008686:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800868a:	4798      	blx	r3
 800868c:	3501      	adds	r5, #1
 800868e:	e7f2      	b.n	8008676 <__libc_init_array+0x1e>
 8008690:	080096b4 	.word	0x080096b4
 8008694:	080096b4 	.word	0x080096b4
 8008698:	080096b4 	.word	0x080096b4
 800869c:	080096b8 	.word	0x080096b8

080086a0 <memcpy>:
 80086a0:	b510      	push	{r4, lr}
 80086a2:	1e43      	subs	r3, r0, #1
 80086a4:	440a      	add	r2, r1
 80086a6:	4291      	cmp	r1, r2
 80086a8:	d100      	bne.n	80086ac <memcpy+0xc>
 80086aa:	bd10      	pop	{r4, pc}
 80086ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086b4:	e7f7      	b.n	80086a6 <memcpy+0x6>

080086b6 <memset>:
 80086b6:	4402      	add	r2, r0
 80086b8:	4603      	mov	r3, r0
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d100      	bne.n	80086c0 <memset+0xa>
 80086be:	4770      	bx	lr
 80086c0:	f803 1b01 	strb.w	r1, [r3], #1
 80086c4:	e7f9      	b.n	80086ba <memset+0x4>
	...

080086c8 <iprintf>:
 80086c8:	b40f      	push	{r0, r1, r2, r3}
 80086ca:	4b0a      	ldr	r3, [pc, #40]	; (80086f4 <iprintf+0x2c>)
 80086cc:	b513      	push	{r0, r1, r4, lr}
 80086ce:	681c      	ldr	r4, [r3, #0]
 80086d0:	b124      	cbz	r4, 80086dc <iprintf+0x14>
 80086d2:	69a3      	ldr	r3, [r4, #24]
 80086d4:	b913      	cbnz	r3, 80086dc <iprintf+0x14>
 80086d6:	4620      	mov	r0, r4
 80086d8:	f000 fa22 	bl	8008b20 <__sinit>
 80086dc:	ab05      	add	r3, sp, #20
 80086de:	9a04      	ldr	r2, [sp, #16]
 80086e0:	68a1      	ldr	r1, [r4, #8]
 80086e2:	9301      	str	r3, [sp, #4]
 80086e4:	4620      	mov	r0, r4
 80086e6:	f000 fbdb 	bl	8008ea0 <_vfiprintf_r>
 80086ea:	b002      	add	sp, #8
 80086ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086f0:	b004      	add	sp, #16
 80086f2:	4770      	bx	lr
 80086f4:	20000044 	.word	0x20000044

080086f8 <_puts_r>:
 80086f8:	b570      	push	{r4, r5, r6, lr}
 80086fa:	460e      	mov	r6, r1
 80086fc:	4605      	mov	r5, r0
 80086fe:	b118      	cbz	r0, 8008708 <_puts_r+0x10>
 8008700:	6983      	ldr	r3, [r0, #24]
 8008702:	b90b      	cbnz	r3, 8008708 <_puts_r+0x10>
 8008704:	f000 fa0c 	bl	8008b20 <__sinit>
 8008708:	69ab      	ldr	r3, [r5, #24]
 800870a:	68ac      	ldr	r4, [r5, #8]
 800870c:	b913      	cbnz	r3, 8008714 <_puts_r+0x1c>
 800870e:	4628      	mov	r0, r5
 8008710:	f000 fa06 	bl	8008b20 <__sinit>
 8008714:	4b23      	ldr	r3, [pc, #140]	; (80087a4 <_puts_r+0xac>)
 8008716:	429c      	cmp	r4, r3
 8008718:	d117      	bne.n	800874a <_puts_r+0x52>
 800871a:	686c      	ldr	r4, [r5, #4]
 800871c:	89a3      	ldrh	r3, [r4, #12]
 800871e:	071b      	lsls	r3, r3, #28
 8008720:	d51d      	bpl.n	800875e <_puts_r+0x66>
 8008722:	6923      	ldr	r3, [r4, #16]
 8008724:	b1db      	cbz	r3, 800875e <_puts_r+0x66>
 8008726:	3e01      	subs	r6, #1
 8008728:	68a3      	ldr	r3, [r4, #8]
 800872a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800872e:	3b01      	subs	r3, #1
 8008730:	60a3      	str	r3, [r4, #8]
 8008732:	b9e9      	cbnz	r1, 8008770 <_puts_r+0x78>
 8008734:	2b00      	cmp	r3, #0
 8008736:	da2e      	bge.n	8008796 <_puts_r+0x9e>
 8008738:	4622      	mov	r2, r4
 800873a:	210a      	movs	r1, #10
 800873c:	4628      	mov	r0, r5
 800873e:	f000 f83f 	bl	80087c0 <__swbuf_r>
 8008742:	3001      	adds	r0, #1
 8008744:	d011      	beq.n	800876a <_puts_r+0x72>
 8008746:	200a      	movs	r0, #10
 8008748:	e011      	b.n	800876e <_puts_r+0x76>
 800874a:	4b17      	ldr	r3, [pc, #92]	; (80087a8 <_puts_r+0xb0>)
 800874c:	429c      	cmp	r4, r3
 800874e:	d101      	bne.n	8008754 <_puts_r+0x5c>
 8008750:	68ac      	ldr	r4, [r5, #8]
 8008752:	e7e3      	b.n	800871c <_puts_r+0x24>
 8008754:	4b15      	ldr	r3, [pc, #84]	; (80087ac <_puts_r+0xb4>)
 8008756:	429c      	cmp	r4, r3
 8008758:	bf08      	it	eq
 800875a:	68ec      	ldreq	r4, [r5, #12]
 800875c:	e7de      	b.n	800871c <_puts_r+0x24>
 800875e:	4621      	mov	r1, r4
 8008760:	4628      	mov	r0, r5
 8008762:	f000 f87f 	bl	8008864 <__swsetup_r>
 8008766:	2800      	cmp	r0, #0
 8008768:	d0dd      	beq.n	8008726 <_puts_r+0x2e>
 800876a:	f04f 30ff 	mov.w	r0, #4294967295
 800876e:	bd70      	pop	{r4, r5, r6, pc}
 8008770:	2b00      	cmp	r3, #0
 8008772:	da04      	bge.n	800877e <_puts_r+0x86>
 8008774:	69a2      	ldr	r2, [r4, #24]
 8008776:	429a      	cmp	r2, r3
 8008778:	dc06      	bgt.n	8008788 <_puts_r+0x90>
 800877a:	290a      	cmp	r1, #10
 800877c:	d004      	beq.n	8008788 <_puts_r+0x90>
 800877e:	6823      	ldr	r3, [r4, #0]
 8008780:	1c5a      	adds	r2, r3, #1
 8008782:	6022      	str	r2, [r4, #0]
 8008784:	7019      	strb	r1, [r3, #0]
 8008786:	e7cf      	b.n	8008728 <_puts_r+0x30>
 8008788:	4622      	mov	r2, r4
 800878a:	4628      	mov	r0, r5
 800878c:	f000 f818 	bl	80087c0 <__swbuf_r>
 8008790:	3001      	adds	r0, #1
 8008792:	d1c9      	bne.n	8008728 <_puts_r+0x30>
 8008794:	e7e9      	b.n	800876a <_puts_r+0x72>
 8008796:	6823      	ldr	r3, [r4, #0]
 8008798:	200a      	movs	r0, #10
 800879a:	1c5a      	adds	r2, r3, #1
 800879c:	6022      	str	r2, [r4, #0]
 800879e:	7018      	strb	r0, [r3, #0]
 80087a0:	e7e5      	b.n	800876e <_puts_r+0x76>
 80087a2:	bf00      	nop
 80087a4:	08009638 	.word	0x08009638
 80087a8:	08009658 	.word	0x08009658
 80087ac:	08009618 	.word	0x08009618

080087b0 <puts>:
 80087b0:	4b02      	ldr	r3, [pc, #8]	; (80087bc <puts+0xc>)
 80087b2:	4601      	mov	r1, r0
 80087b4:	6818      	ldr	r0, [r3, #0]
 80087b6:	f7ff bf9f 	b.w	80086f8 <_puts_r>
 80087ba:	bf00      	nop
 80087bc:	20000044 	.word	0x20000044

080087c0 <__swbuf_r>:
 80087c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c2:	460e      	mov	r6, r1
 80087c4:	4614      	mov	r4, r2
 80087c6:	4605      	mov	r5, r0
 80087c8:	b118      	cbz	r0, 80087d2 <__swbuf_r+0x12>
 80087ca:	6983      	ldr	r3, [r0, #24]
 80087cc:	b90b      	cbnz	r3, 80087d2 <__swbuf_r+0x12>
 80087ce:	f000 f9a7 	bl	8008b20 <__sinit>
 80087d2:	4b21      	ldr	r3, [pc, #132]	; (8008858 <__swbuf_r+0x98>)
 80087d4:	429c      	cmp	r4, r3
 80087d6:	d12a      	bne.n	800882e <__swbuf_r+0x6e>
 80087d8:	686c      	ldr	r4, [r5, #4]
 80087da:	69a3      	ldr	r3, [r4, #24]
 80087dc:	60a3      	str	r3, [r4, #8]
 80087de:	89a3      	ldrh	r3, [r4, #12]
 80087e0:	071a      	lsls	r2, r3, #28
 80087e2:	d52e      	bpl.n	8008842 <__swbuf_r+0x82>
 80087e4:	6923      	ldr	r3, [r4, #16]
 80087e6:	b363      	cbz	r3, 8008842 <__swbuf_r+0x82>
 80087e8:	6923      	ldr	r3, [r4, #16]
 80087ea:	6820      	ldr	r0, [r4, #0]
 80087ec:	1ac0      	subs	r0, r0, r3
 80087ee:	6963      	ldr	r3, [r4, #20]
 80087f0:	b2f6      	uxtb	r6, r6
 80087f2:	4283      	cmp	r3, r0
 80087f4:	4637      	mov	r7, r6
 80087f6:	dc04      	bgt.n	8008802 <__swbuf_r+0x42>
 80087f8:	4621      	mov	r1, r4
 80087fa:	4628      	mov	r0, r5
 80087fc:	f000 f926 	bl	8008a4c <_fflush_r>
 8008800:	bb28      	cbnz	r0, 800884e <__swbuf_r+0x8e>
 8008802:	68a3      	ldr	r3, [r4, #8]
 8008804:	3b01      	subs	r3, #1
 8008806:	60a3      	str	r3, [r4, #8]
 8008808:	6823      	ldr	r3, [r4, #0]
 800880a:	1c5a      	adds	r2, r3, #1
 800880c:	6022      	str	r2, [r4, #0]
 800880e:	701e      	strb	r6, [r3, #0]
 8008810:	6963      	ldr	r3, [r4, #20]
 8008812:	3001      	adds	r0, #1
 8008814:	4283      	cmp	r3, r0
 8008816:	d004      	beq.n	8008822 <__swbuf_r+0x62>
 8008818:	89a3      	ldrh	r3, [r4, #12]
 800881a:	07db      	lsls	r3, r3, #31
 800881c:	d519      	bpl.n	8008852 <__swbuf_r+0x92>
 800881e:	2e0a      	cmp	r6, #10
 8008820:	d117      	bne.n	8008852 <__swbuf_r+0x92>
 8008822:	4621      	mov	r1, r4
 8008824:	4628      	mov	r0, r5
 8008826:	f000 f911 	bl	8008a4c <_fflush_r>
 800882a:	b190      	cbz	r0, 8008852 <__swbuf_r+0x92>
 800882c:	e00f      	b.n	800884e <__swbuf_r+0x8e>
 800882e:	4b0b      	ldr	r3, [pc, #44]	; (800885c <__swbuf_r+0x9c>)
 8008830:	429c      	cmp	r4, r3
 8008832:	d101      	bne.n	8008838 <__swbuf_r+0x78>
 8008834:	68ac      	ldr	r4, [r5, #8]
 8008836:	e7d0      	b.n	80087da <__swbuf_r+0x1a>
 8008838:	4b09      	ldr	r3, [pc, #36]	; (8008860 <__swbuf_r+0xa0>)
 800883a:	429c      	cmp	r4, r3
 800883c:	bf08      	it	eq
 800883e:	68ec      	ldreq	r4, [r5, #12]
 8008840:	e7cb      	b.n	80087da <__swbuf_r+0x1a>
 8008842:	4621      	mov	r1, r4
 8008844:	4628      	mov	r0, r5
 8008846:	f000 f80d 	bl	8008864 <__swsetup_r>
 800884a:	2800      	cmp	r0, #0
 800884c:	d0cc      	beq.n	80087e8 <__swbuf_r+0x28>
 800884e:	f04f 37ff 	mov.w	r7, #4294967295
 8008852:	4638      	mov	r0, r7
 8008854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008856:	bf00      	nop
 8008858:	08009638 	.word	0x08009638
 800885c:	08009658 	.word	0x08009658
 8008860:	08009618 	.word	0x08009618

08008864 <__swsetup_r>:
 8008864:	4b32      	ldr	r3, [pc, #200]	; (8008930 <__swsetup_r+0xcc>)
 8008866:	b570      	push	{r4, r5, r6, lr}
 8008868:	681d      	ldr	r5, [r3, #0]
 800886a:	4606      	mov	r6, r0
 800886c:	460c      	mov	r4, r1
 800886e:	b125      	cbz	r5, 800887a <__swsetup_r+0x16>
 8008870:	69ab      	ldr	r3, [r5, #24]
 8008872:	b913      	cbnz	r3, 800887a <__swsetup_r+0x16>
 8008874:	4628      	mov	r0, r5
 8008876:	f000 f953 	bl	8008b20 <__sinit>
 800887a:	4b2e      	ldr	r3, [pc, #184]	; (8008934 <__swsetup_r+0xd0>)
 800887c:	429c      	cmp	r4, r3
 800887e:	d10f      	bne.n	80088a0 <__swsetup_r+0x3c>
 8008880:	686c      	ldr	r4, [r5, #4]
 8008882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008886:	b29a      	uxth	r2, r3
 8008888:	0715      	lsls	r5, r2, #28
 800888a:	d42c      	bmi.n	80088e6 <__swsetup_r+0x82>
 800888c:	06d0      	lsls	r0, r2, #27
 800888e:	d411      	bmi.n	80088b4 <__swsetup_r+0x50>
 8008890:	2209      	movs	r2, #9
 8008892:	6032      	str	r2, [r6, #0]
 8008894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008898:	81a3      	strh	r3, [r4, #12]
 800889a:	f04f 30ff 	mov.w	r0, #4294967295
 800889e:	e03e      	b.n	800891e <__swsetup_r+0xba>
 80088a0:	4b25      	ldr	r3, [pc, #148]	; (8008938 <__swsetup_r+0xd4>)
 80088a2:	429c      	cmp	r4, r3
 80088a4:	d101      	bne.n	80088aa <__swsetup_r+0x46>
 80088a6:	68ac      	ldr	r4, [r5, #8]
 80088a8:	e7eb      	b.n	8008882 <__swsetup_r+0x1e>
 80088aa:	4b24      	ldr	r3, [pc, #144]	; (800893c <__swsetup_r+0xd8>)
 80088ac:	429c      	cmp	r4, r3
 80088ae:	bf08      	it	eq
 80088b0:	68ec      	ldreq	r4, [r5, #12]
 80088b2:	e7e6      	b.n	8008882 <__swsetup_r+0x1e>
 80088b4:	0751      	lsls	r1, r2, #29
 80088b6:	d512      	bpl.n	80088de <__swsetup_r+0x7a>
 80088b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088ba:	b141      	cbz	r1, 80088ce <__swsetup_r+0x6a>
 80088bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088c0:	4299      	cmp	r1, r3
 80088c2:	d002      	beq.n	80088ca <__swsetup_r+0x66>
 80088c4:	4630      	mov	r0, r6
 80088c6:	f000 fa19 	bl	8008cfc <_free_r>
 80088ca:	2300      	movs	r3, #0
 80088cc:	6363      	str	r3, [r4, #52]	; 0x34
 80088ce:	89a3      	ldrh	r3, [r4, #12]
 80088d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80088d4:	81a3      	strh	r3, [r4, #12]
 80088d6:	2300      	movs	r3, #0
 80088d8:	6063      	str	r3, [r4, #4]
 80088da:	6923      	ldr	r3, [r4, #16]
 80088dc:	6023      	str	r3, [r4, #0]
 80088de:	89a3      	ldrh	r3, [r4, #12]
 80088e0:	f043 0308 	orr.w	r3, r3, #8
 80088e4:	81a3      	strh	r3, [r4, #12]
 80088e6:	6923      	ldr	r3, [r4, #16]
 80088e8:	b94b      	cbnz	r3, 80088fe <__swsetup_r+0x9a>
 80088ea:	89a3      	ldrh	r3, [r4, #12]
 80088ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80088f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088f4:	d003      	beq.n	80088fe <__swsetup_r+0x9a>
 80088f6:	4621      	mov	r1, r4
 80088f8:	4630      	mov	r0, r6
 80088fa:	f000 f9bf 	bl	8008c7c <__smakebuf_r>
 80088fe:	89a2      	ldrh	r2, [r4, #12]
 8008900:	f012 0301 	ands.w	r3, r2, #1
 8008904:	d00c      	beq.n	8008920 <__swsetup_r+0xbc>
 8008906:	2300      	movs	r3, #0
 8008908:	60a3      	str	r3, [r4, #8]
 800890a:	6963      	ldr	r3, [r4, #20]
 800890c:	425b      	negs	r3, r3
 800890e:	61a3      	str	r3, [r4, #24]
 8008910:	6923      	ldr	r3, [r4, #16]
 8008912:	b953      	cbnz	r3, 800892a <__swsetup_r+0xc6>
 8008914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008918:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800891c:	d1ba      	bne.n	8008894 <__swsetup_r+0x30>
 800891e:	bd70      	pop	{r4, r5, r6, pc}
 8008920:	0792      	lsls	r2, r2, #30
 8008922:	bf58      	it	pl
 8008924:	6963      	ldrpl	r3, [r4, #20]
 8008926:	60a3      	str	r3, [r4, #8]
 8008928:	e7f2      	b.n	8008910 <__swsetup_r+0xac>
 800892a:	2000      	movs	r0, #0
 800892c:	e7f7      	b.n	800891e <__swsetup_r+0xba>
 800892e:	bf00      	nop
 8008930:	20000044 	.word	0x20000044
 8008934:	08009638 	.word	0x08009638
 8008938:	08009658 	.word	0x08009658
 800893c:	08009618 	.word	0x08009618

08008940 <__sflush_r>:
 8008940:	898a      	ldrh	r2, [r1, #12]
 8008942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008946:	4605      	mov	r5, r0
 8008948:	0710      	lsls	r0, r2, #28
 800894a:	460c      	mov	r4, r1
 800894c:	d458      	bmi.n	8008a00 <__sflush_r+0xc0>
 800894e:	684b      	ldr	r3, [r1, #4]
 8008950:	2b00      	cmp	r3, #0
 8008952:	dc05      	bgt.n	8008960 <__sflush_r+0x20>
 8008954:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008956:	2b00      	cmp	r3, #0
 8008958:	dc02      	bgt.n	8008960 <__sflush_r+0x20>
 800895a:	2000      	movs	r0, #0
 800895c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008960:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008962:	2e00      	cmp	r6, #0
 8008964:	d0f9      	beq.n	800895a <__sflush_r+0x1a>
 8008966:	2300      	movs	r3, #0
 8008968:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800896c:	682f      	ldr	r7, [r5, #0]
 800896e:	6a21      	ldr	r1, [r4, #32]
 8008970:	602b      	str	r3, [r5, #0]
 8008972:	d032      	beq.n	80089da <__sflush_r+0x9a>
 8008974:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008976:	89a3      	ldrh	r3, [r4, #12]
 8008978:	075a      	lsls	r2, r3, #29
 800897a:	d505      	bpl.n	8008988 <__sflush_r+0x48>
 800897c:	6863      	ldr	r3, [r4, #4]
 800897e:	1ac0      	subs	r0, r0, r3
 8008980:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008982:	b10b      	cbz	r3, 8008988 <__sflush_r+0x48>
 8008984:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008986:	1ac0      	subs	r0, r0, r3
 8008988:	2300      	movs	r3, #0
 800898a:	4602      	mov	r2, r0
 800898c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800898e:	6a21      	ldr	r1, [r4, #32]
 8008990:	4628      	mov	r0, r5
 8008992:	47b0      	blx	r6
 8008994:	1c43      	adds	r3, r0, #1
 8008996:	89a3      	ldrh	r3, [r4, #12]
 8008998:	d106      	bne.n	80089a8 <__sflush_r+0x68>
 800899a:	6829      	ldr	r1, [r5, #0]
 800899c:	291d      	cmp	r1, #29
 800899e:	d848      	bhi.n	8008a32 <__sflush_r+0xf2>
 80089a0:	4a29      	ldr	r2, [pc, #164]	; (8008a48 <__sflush_r+0x108>)
 80089a2:	40ca      	lsrs	r2, r1
 80089a4:	07d6      	lsls	r6, r2, #31
 80089a6:	d544      	bpl.n	8008a32 <__sflush_r+0xf2>
 80089a8:	2200      	movs	r2, #0
 80089aa:	6062      	str	r2, [r4, #4]
 80089ac:	04d9      	lsls	r1, r3, #19
 80089ae:	6922      	ldr	r2, [r4, #16]
 80089b0:	6022      	str	r2, [r4, #0]
 80089b2:	d504      	bpl.n	80089be <__sflush_r+0x7e>
 80089b4:	1c42      	adds	r2, r0, #1
 80089b6:	d101      	bne.n	80089bc <__sflush_r+0x7c>
 80089b8:	682b      	ldr	r3, [r5, #0]
 80089ba:	b903      	cbnz	r3, 80089be <__sflush_r+0x7e>
 80089bc:	6560      	str	r0, [r4, #84]	; 0x54
 80089be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089c0:	602f      	str	r7, [r5, #0]
 80089c2:	2900      	cmp	r1, #0
 80089c4:	d0c9      	beq.n	800895a <__sflush_r+0x1a>
 80089c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089ca:	4299      	cmp	r1, r3
 80089cc:	d002      	beq.n	80089d4 <__sflush_r+0x94>
 80089ce:	4628      	mov	r0, r5
 80089d0:	f000 f994 	bl	8008cfc <_free_r>
 80089d4:	2000      	movs	r0, #0
 80089d6:	6360      	str	r0, [r4, #52]	; 0x34
 80089d8:	e7c0      	b.n	800895c <__sflush_r+0x1c>
 80089da:	2301      	movs	r3, #1
 80089dc:	4628      	mov	r0, r5
 80089de:	47b0      	blx	r6
 80089e0:	1c41      	adds	r1, r0, #1
 80089e2:	d1c8      	bne.n	8008976 <__sflush_r+0x36>
 80089e4:	682b      	ldr	r3, [r5, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d0c5      	beq.n	8008976 <__sflush_r+0x36>
 80089ea:	2b1d      	cmp	r3, #29
 80089ec:	d001      	beq.n	80089f2 <__sflush_r+0xb2>
 80089ee:	2b16      	cmp	r3, #22
 80089f0:	d101      	bne.n	80089f6 <__sflush_r+0xb6>
 80089f2:	602f      	str	r7, [r5, #0]
 80089f4:	e7b1      	b.n	800895a <__sflush_r+0x1a>
 80089f6:	89a3      	ldrh	r3, [r4, #12]
 80089f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089fc:	81a3      	strh	r3, [r4, #12]
 80089fe:	e7ad      	b.n	800895c <__sflush_r+0x1c>
 8008a00:	690f      	ldr	r7, [r1, #16]
 8008a02:	2f00      	cmp	r7, #0
 8008a04:	d0a9      	beq.n	800895a <__sflush_r+0x1a>
 8008a06:	0793      	lsls	r3, r2, #30
 8008a08:	680e      	ldr	r6, [r1, #0]
 8008a0a:	bf08      	it	eq
 8008a0c:	694b      	ldreq	r3, [r1, #20]
 8008a0e:	600f      	str	r7, [r1, #0]
 8008a10:	bf18      	it	ne
 8008a12:	2300      	movne	r3, #0
 8008a14:	eba6 0807 	sub.w	r8, r6, r7
 8008a18:	608b      	str	r3, [r1, #8]
 8008a1a:	f1b8 0f00 	cmp.w	r8, #0
 8008a1e:	dd9c      	ble.n	800895a <__sflush_r+0x1a>
 8008a20:	4643      	mov	r3, r8
 8008a22:	463a      	mov	r2, r7
 8008a24:	6a21      	ldr	r1, [r4, #32]
 8008a26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a28:	4628      	mov	r0, r5
 8008a2a:	47b0      	blx	r6
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	dc06      	bgt.n	8008a3e <__sflush_r+0xfe>
 8008a30:	89a3      	ldrh	r3, [r4, #12]
 8008a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a36:	81a3      	strh	r3, [r4, #12]
 8008a38:	f04f 30ff 	mov.w	r0, #4294967295
 8008a3c:	e78e      	b.n	800895c <__sflush_r+0x1c>
 8008a3e:	4407      	add	r7, r0
 8008a40:	eba8 0800 	sub.w	r8, r8, r0
 8008a44:	e7e9      	b.n	8008a1a <__sflush_r+0xda>
 8008a46:	bf00      	nop
 8008a48:	20400001 	.word	0x20400001

08008a4c <_fflush_r>:
 8008a4c:	b538      	push	{r3, r4, r5, lr}
 8008a4e:	690b      	ldr	r3, [r1, #16]
 8008a50:	4605      	mov	r5, r0
 8008a52:	460c      	mov	r4, r1
 8008a54:	b1db      	cbz	r3, 8008a8e <_fflush_r+0x42>
 8008a56:	b118      	cbz	r0, 8008a60 <_fflush_r+0x14>
 8008a58:	6983      	ldr	r3, [r0, #24]
 8008a5a:	b90b      	cbnz	r3, 8008a60 <_fflush_r+0x14>
 8008a5c:	f000 f860 	bl	8008b20 <__sinit>
 8008a60:	4b0c      	ldr	r3, [pc, #48]	; (8008a94 <_fflush_r+0x48>)
 8008a62:	429c      	cmp	r4, r3
 8008a64:	d109      	bne.n	8008a7a <_fflush_r+0x2e>
 8008a66:	686c      	ldr	r4, [r5, #4]
 8008a68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a6c:	b17b      	cbz	r3, 8008a8e <_fflush_r+0x42>
 8008a6e:	4621      	mov	r1, r4
 8008a70:	4628      	mov	r0, r5
 8008a72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a76:	f7ff bf63 	b.w	8008940 <__sflush_r>
 8008a7a:	4b07      	ldr	r3, [pc, #28]	; (8008a98 <_fflush_r+0x4c>)
 8008a7c:	429c      	cmp	r4, r3
 8008a7e:	d101      	bne.n	8008a84 <_fflush_r+0x38>
 8008a80:	68ac      	ldr	r4, [r5, #8]
 8008a82:	e7f1      	b.n	8008a68 <_fflush_r+0x1c>
 8008a84:	4b05      	ldr	r3, [pc, #20]	; (8008a9c <_fflush_r+0x50>)
 8008a86:	429c      	cmp	r4, r3
 8008a88:	bf08      	it	eq
 8008a8a:	68ec      	ldreq	r4, [r5, #12]
 8008a8c:	e7ec      	b.n	8008a68 <_fflush_r+0x1c>
 8008a8e:	2000      	movs	r0, #0
 8008a90:	bd38      	pop	{r3, r4, r5, pc}
 8008a92:	bf00      	nop
 8008a94:	08009638 	.word	0x08009638
 8008a98:	08009658 	.word	0x08009658
 8008a9c:	08009618 	.word	0x08009618

08008aa0 <std>:
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	b510      	push	{r4, lr}
 8008aa4:	4604      	mov	r4, r0
 8008aa6:	e9c0 3300 	strd	r3, r3, [r0]
 8008aaa:	6083      	str	r3, [r0, #8]
 8008aac:	8181      	strh	r1, [r0, #12]
 8008aae:	6643      	str	r3, [r0, #100]	; 0x64
 8008ab0:	81c2      	strh	r2, [r0, #14]
 8008ab2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ab6:	6183      	str	r3, [r0, #24]
 8008ab8:	4619      	mov	r1, r3
 8008aba:	2208      	movs	r2, #8
 8008abc:	305c      	adds	r0, #92	; 0x5c
 8008abe:	f7ff fdfa 	bl	80086b6 <memset>
 8008ac2:	4b05      	ldr	r3, [pc, #20]	; (8008ad8 <std+0x38>)
 8008ac4:	6263      	str	r3, [r4, #36]	; 0x24
 8008ac6:	4b05      	ldr	r3, [pc, #20]	; (8008adc <std+0x3c>)
 8008ac8:	62a3      	str	r3, [r4, #40]	; 0x28
 8008aca:	4b05      	ldr	r3, [pc, #20]	; (8008ae0 <std+0x40>)
 8008acc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ace:	4b05      	ldr	r3, [pc, #20]	; (8008ae4 <std+0x44>)
 8008ad0:	6224      	str	r4, [r4, #32]
 8008ad2:	6323      	str	r3, [r4, #48]	; 0x30
 8008ad4:	bd10      	pop	{r4, pc}
 8008ad6:	bf00      	nop
 8008ad8:	080093fd 	.word	0x080093fd
 8008adc:	0800941f 	.word	0x0800941f
 8008ae0:	08009457 	.word	0x08009457
 8008ae4:	0800947b 	.word	0x0800947b

08008ae8 <_cleanup_r>:
 8008ae8:	4901      	ldr	r1, [pc, #4]	; (8008af0 <_cleanup_r+0x8>)
 8008aea:	f000 b885 	b.w	8008bf8 <_fwalk_reent>
 8008aee:	bf00      	nop
 8008af0:	08008a4d 	.word	0x08008a4d

08008af4 <__sfmoreglue>:
 8008af4:	b570      	push	{r4, r5, r6, lr}
 8008af6:	1e4a      	subs	r2, r1, #1
 8008af8:	2568      	movs	r5, #104	; 0x68
 8008afa:	4355      	muls	r5, r2
 8008afc:	460e      	mov	r6, r1
 8008afe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008b02:	f000 f949 	bl	8008d98 <_malloc_r>
 8008b06:	4604      	mov	r4, r0
 8008b08:	b140      	cbz	r0, 8008b1c <__sfmoreglue+0x28>
 8008b0a:	2100      	movs	r1, #0
 8008b0c:	e9c0 1600 	strd	r1, r6, [r0]
 8008b10:	300c      	adds	r0, #12
 8008b12:	60a0      	str	r0, [r4, #8]
 8008b14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008b18:	f7ff fdcd 	bl	80086b6 <memset>
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	bd70      	pop	{r4, r5, r6, pc}

08008b20 <__sinit>:
 8008b20:	6983      	ldr	r3, [r0, #24]
 8008b22:	b510      	push	{r4, lr}
 8008b24:	4604      	mov	r4, r0
 8008b26:	bb33      	cbnz	r3, 8008b76 <__sinit+0x56>
 8008b28:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008b2c:	6503      	str	r3, [r0, #80]	; 0x50
 8008b2e:	4b12      	ldr	r3, [pc, #72]	; (8008b78 <__sinit+0x58>)
 8008b30:	4a12      	ldr	r2, [pc, #72]	; (8008b7c <__sinit+0x5c>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	6282      	str	r2, [r0, #40]	; 0x28
 8008b36:	4298      	cmp	r0, r3
 8008b38:	bf04      	itt	eq
 8008b3a:	2301      	moveq	r3, #1
 8008b3c:	6183      	streq	r3, [r0, #24]
 8008b3e:	f000 f81f 	bl	8008b80 <__sfp>
 8008b42:	6060      	str	r0, [r4, #4]
 8008b44:	4620      	mov	r0, r4
 8008b46:	f000 f81b 	bl	8008b80 <__sfp>
 8008b4a:	60a0      	str	r0, [r4, #8]
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	f000 f817 	bl	8008b80 <__sfp>
 8008b52:	2200      	movs	r2, #0
 8008b54:	60e0      	str	r0, [r4, #12]
 8008b56:	2104      	movs	r1, #4
 8008b58:	6860      	ldr	r0, [r4, #4]
 8008b5a:	f7ff ffa1 	bl	8008aa0 <std>
 8008b5e:	2201      	movs	r2, #1
 8008b60:	2109      	movs	r1, #9
 8008b62:	68a0      	ldr	r0, [r4, #8]
 8008b64:	f7ff ff9c 	bl	8008aa0 <std>
 8008b68:	2202      	movs	r2, #2
 8008b6a:	2112      	movs	r1, #18
 8008b6c:	68e0      	ldr	r0, [r4, #12]
 8008b6e:	f7ff ff97 	bl	8008aa0 <std>
 8008b72:	2301      	movs	r3, #1
 8008b74:	61a3      	str	r3, [r4, #24]
 8008b76:	bd10      	pop	{r4, pc}
 8008b78:	08009614 	.word	0x08009614
 8008b7c:	08008ae9 	.word	0x08008ae9

08008b80 <__sfp>:
 8008b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b82:	4b1b      	ldr	r3, [pc, #108]	; (8008bf0 <__sfp+0x70>)
 8008b84:	681e      	ldr	r6, [r3, #0]
 8008b86:	69b3      	ldr	r3, [r6, #24]
 8008b88:	4607      	mov	r7, r0
 8008b8a:	b913      	cbnz	r3, 8008b92 <__sfp+0x12>
 8008b8c:	4630      	mov	r0, r6
 8008b8e:	f7ff ffc7 	bl	8008b20 <__sinit>
 8008b92:	3648      	adds	r6, #72	; 0x48
 8008b94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	d503      	bpl.n	8008ba4 <__sfp+0x24>
 8008b9c:	6833      	ldr	r3, [r6, #0]
 8008b9e:	b133      	cbz	r3, 8008bae <__sfp+0x2e>
 8008ba0:	6836      	ldr	r6, [r6, #0]
 8008ba2:	e7f7      	b.n	8008b94 <__sfp+0x14>
 8008ba4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ba8:	b16d      	cbz	r5, 8008bc6 <__sfp+0x46>
 8008baa:	3468      	adds	r4, #104	; 0x68
 8008bac:	e7f4      	b.n	8008b98 <__sfp+0x18>
 8008bae:	2104      	movs	r1, #4
 8008bb0:	4638      	mov	r0, r7
 8008bb2:	f7ff ff9f 	bl	8008af4 <__sfmoreglue>
 8008bb6:	6030      	str	r0, [r6, #0]
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	d1f1      	bne.n	8008ba0 <__sfp+0x20>
 8008bbc:	230c      	movs	r3, #12
 8008bbe:	603b      	str	r3, [r7, #0]
 8008bc0:	4604      	mov	r4, r0
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bc6:	4b0b      	ldr	r3, [pc, #44]	; (8008bf4 <__sfp+0x74>)
 8008bc8:	6665      	str	r5, [r4, #100]	; 0x64
 8008bca:	e9c4 5500 	strd	r5, r5, [r4]
 8008bce:	60a5      	str	r5, [r4, #8]
 8008bd0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008bd4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008bd8:	2208      	movs	r2, #8
 8008bda:	4629      	mov	r1, r5
 8008bdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008be0:	f7ff fd69 	bl	80086b6 <memset>
 8008be4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008be8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008bec:	e7e9      	b.n	8008bc2 <__sfp+0x42>
 8008bee:	bf00      	nop
 8008bf0:	08009614 	.word	0x08009614
 8008bf4:	ffff0001 	.word	0xffff0001

08008bf8 <_fwalk_reent>:
 8008bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bfc:	4680      	mov	r8, r0
 8008bfe:	4689      	mov	r9, r1
 8008c00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c04:	2600      	movs	r6, #0
 8008c06:	b914      	cbnz	r4, 8008c0e <_fwalk_reent+0x16>
 8008c08:	4630      	mov	r0, r6
 8008c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c0e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008c12:	3f01      	subs	r7, #1
 8008c14:	d501      	bpl.n	8008c1a <_fwalk_reent+0x22>
 8008c16:	6824      	ldr	r4, [r4, #0]
 8008c18:	e7f5      	b.n	8008c06 <_fwalk_reent+0xe>
 8008c1a:	89ab      	ldrh	r3, [r5, #12]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d907      	bls.n	8008c30 <_fwalk_reent+0x38>
 8008c20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c24:	3301      	adds	r3, #1
 8008c26:	d003      	beq.n	8008c30 <_fwalk_reent+0x38>
 8008c28:	4629      	mov	r1, r5
 8008c2a:	4640      	mov	r0, r8
 8008c2c:	47c8      	blx	r9
 8008c2e:	4306      	orrs	r6, r0
 8008c30:	3568      	adds	r5, #104	; 0x68
 8008c32:	e7ee      	b.n	8008c12 <_fwalk_reent+0x1a>

08008c34 <__swhatbuf_r>:
 8008c34:	b570      	push	{r4, r5, r6, lr}
 8008c36:	460e      	mov	r6, r1
 8008c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c3c:	2900      	cmp	r1, #0
 8008c3e:	b096      	sub	sp, #88	; 0x58
 8008c40:	4614      	mov	r4, r2
 8008c42:	461d      	mov	r5, r3
 8008c44:	da07      	bge.n	8008c56 <__swhatbuf_r+0x22>
 8008c46:	2300      	movs	r3, #0
 8008c48:	602b      	str	r3, [r5, #0]
 8008c4a:	89b3      	ldrh	r3, [r6, #12]
 8008c4c:	061a      	lsls	r2, r3, #24
 8008c4e:	d410      	bmi.n	8008c72 <__swhatbuf_r+0x3e>
 8008c50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c54:	e00e      	b.n	8008c74 <__swhatbuf_r+0x40>
 8008c56:	466a      	mov	r2, sp
 8008c58:	f000 fc36 	bl	80094c8 <_fstat_r>
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	dbf2      	blt.n	8008c46 <__swhatbuf_r+0x12>
 8008c60:	9a01      	ldr	r2, [sp, #4]
 8008c62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c66:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c6a:	425a      	negs	r2, r3
 8008c6c:	415a      	adcs	r2, r3
 8008c6e:	602a      	str	r2, [r5, #0]
 8008c70:	e7ee      	b.n	8008c50 <__swhatbuf_r+0x1c>
 8008c72:	2340      	movs	r3, #64	; 0x40
 8008c74:	2000      	movs	r0, #0
 8008c76:	6023      	str	r3, [r4, #0]
 8008c78:	b016      	add	sp, #88	; 0x58
 8008c7a:	bd70      	pop	{r4, r5, r6, pc}

08008c7c <__smakebuf_r>:
 8008c7c:	898b      	ldrh	r3, [r1, #12]
 8008c7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c80:	079d      	lsls	r5, r3, #30
 8008c82:	4606      	mov	r6, r0
 8008c84:	460c      	mov	r4, r1
 8008c86:	d507      	bpl.n	8008c98 <__smakebuf_r+0x1c>
 8008c88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c8c:	6023      	str	r3, [r4, #0]
 8008c8e:	6123      	str	r3, [r4, #16]
 8008c90:	2301      	movs	r3, #1
 8008c92:	6163      	str	r3, [r4, #20]
 8008c94:	b002      	add	sp, #8
 8008c96:	bd70      	pop	{r4, r5, r6, pc}
 8008c98:	ab01      	add	r3, sp, #4
 8008c9a:	466a      	mov	r2, sp
 8008c9c:	f7ff ffca 	bl	8008c34 <__swhatbuf_r>
 8008ca0:	9900      	ldr	r1, [sp, #0]
 8008ca2:	4605      	mov	r5, r0
 8008ca4:	4630      	mov	r0, r6
 8008ca6:	f000 f877 	bl	8008d98 <_malloc_r>
 8008caa:	b948      	cbnz	r0, 8008cc0 <__smakebuf_r+0x44>
 8008cac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cb0:	059a      	lsls	r2, r3, #22
 8008cb2:	d4ef      	bmi.n	8008c94 <__smakebuf_r+0x18>
 8008cb4:	f023 0303 	bic.w	r3, r3, #3
 8008cb8:	f043 0302 	orr.w	r3, r3, #2
 8008cbc:	81a3      	strh	r3, [r4, #12]
 8008cbe:	e7e3      	b.n	8008c88 <__smakebuf_r+0xc>
 8008cc0:	4b0d      	ldr	r3, [pc, #52]	; (8008cf8 <__smakebuf_r+0x7c>)
 8008cc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8008cc4:	89a3      	ldrh	r3, [r4, #12]
 8008cc6:	6020      	str	r0, [r4, #0]
 8008cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ccc:	81a3      	strh	r3, [r4, #12]
 8008cce:	9b00      	ldr	r3, [sp, #0]
 8008cd0:	6163      	str	r3, [r4, #20]
 8008cd2:	9b01      	ldr	r3, [sp, #4]
 8008cd4:	6120      	str	r0, [r4, #16]
 8008cd6:	b15b      	cbz	r3, 8008cf0 <__smakebuf_r+0x74>
 8008cd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cdc:	4630      	mov	r0, r6
 8008cde:	f000 fc05 	bl	80094ec <_isatty_r>
 8008ce2:	b128      	cbz	r0, 8008cf0 <__smakebuf_r+0x74>
 8008ce4:	89a3      	ldrh	r3, [r4, #12]
 8008ce6:	f023 0303 	bic.w	r3, r3, #3
 8008cea:	f043 0301 	orr.w	r3, r3, #1
 8008cee:	81a3      	strh	r3, [r4, #12]
 8008cf0:	89a3      	ldrh	r3, [r4, #12]
 8008cf2:	431d      	orrs	r5, r3
 8008cf4:	81a5      	strh	r5, [r4, #12]
 8008cf6:	e7cd      	b.n	8008c94 <__smakebuf_r+0x18>
 8008cf8:	08008ae9 	.word	0x08008ae9

08008cfc <_free_r>:
 8008cfc:	b538      	push	{r3, r4, r5, lr}
 8008cfe:	4605      	mov	r5, r0
 8008d00:	2900      	cmp	r1, #0
 8008d02:	d045      	beq.n	8008d90 <_free_r+0x94>
 8008d04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d08:	1f0c      	subs	r4, r1, #4
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	bfb8      	it	lt
 8008d0e:	18e4      	addlt	r4, r4, r3
 8008d10:	f000 fc0e 	bl	8009530 <__malloc_lock>
 8008d14:	4a1f      	ldr	r2, [pc, #124]	; (8008d94 <_free_r+0x98>)
 8008d16:	6813      	ldr	r3, [r2, #0]
 8008d18:	4610      	mov	r0, r2
 8008d1a:	b933      	cbnz	r3, 8008d2a <_free_r+0x2e>
 8008d1c:	6063      	str	r3, [r4, #4]
 8008d1e:	6014      	str	r4, [r2, #0]
 8008d20:	4628      	mov	r0, r5
 8008d22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d26:	f000 bc04 	b.w	8009532 <__malloc_unlock>
 8008d2a:	42a3      	cmp	r3, r4
 8008d2c:	d90c      	bls.n	8008d48 <_free_r+0x4c>
 8008d2e:	6821      	ldr	r1, [r4, #0]
 8008d30:	1862      	adds	r2, r4, r1
 8008d32:	4293      	cmp	r3, r2
 8008d34:	bf04      	itt	eq
 8008d36:	681a      	ldreq	r2, [r3, #0]
 8008d38:	685b      	ldreq	r3, [r3, #4]
 8008d3a:	6063      	str	r3, [r4, #4]
 8008d3c:	bf04      	itt	eq
 8008d3e:	1852      	addeq	r2, r2, r1
 8008d40:	6022      	streq	r2, [r4, #0]
 8008d42:	6004      	str	r4, [r0, #0]
 8008d44:	e7ec      	b.n	8008d20 <_free_r+0x24>
 8008d46:	4613      	mov	r3, r2
 8008d48:	685a      	ldr	r2, [r3, #4]
 8008d4a:	b10a      	cbz	r2, 8008d50 <_free_r+0x54>
 8008d4c:	42a2      	cmp	r2, r4
 8008d4e:	d9fa      	bls.n	8008d46 <_free_r+0x4a>
 8008d50:	6819      	ldr	r1, [r3, #0]
 8008d52:	1858      	adds	r0, r3, r1
 8008d54:	42a0      	cmp	r0, r4
 8008d56:	d10b      	bne.n	8008d70 <_free_r+0x74>
 8008d58:	6820      	ldr	r0, [r4, #0]
 8008d5a:	4401      	add	r1, r0
 8008d5c:	1858      	adds	r0, r3, r1
 8008d5e:	4282      	cmp	r2, r0
 8008d60:	6019      	str	r1, [r3, #0]
 8008d62:	d1dd      	bne.n	8008d20 <_free_r+0x24>
 8008d64:	6810      	ldr	r0, [r2, #0]
 8008d66:	6852      	ldr	r2, [r2, #4]
 8008d68:	605a      	str	r2, [r3, #4]
 8008d6a:	4401      	add	r1, r0
 8008d6c:	6019      	str	r1, [r3, #0]
 8008d6e:	e7d7      	b.n	8008d20 <_free_r+0x24>
 8008d70:	d902      	bls.n	8008d78 <_free_r+0x7c>
 8008d72:	230c      	movs	r3, #12
 8008d74:	602b      	str	r3, [r5, #0]
 8008d76:	e7d3      	b.n	8008d20 <_free_r+0x24>
 8008d78:	6820      	ldr	r0, [r4, #0]
 8008d7a:	1821      	adds	r1, r4, r0
 8008d7c:	428a      	cmp	r2, r1
 8008d7e:	bf04      	itt	eq
 8008d80:	6811      	ldreq	r1, [r2, #0]
 8008d82:	6852      	ldreq	r2, [r2, #4]
 8008d84:	6062      	str	r2, [r4, #4]
 8008d86:	bf04      	itt	eq
 8008d88:	1809      	addeq	r1, r1, r0
 8008d8a:	6021      	streq	r1, [r4, #0]
 8008d8c:	605c      	str	r4, [r3, #4]
 8008d8e:	e7c7      	b.n	8008d20 <_free_r+0x24>
 8008d90:	bd38      	pop	{r3, r4, r5, pc}
 8008d92:	bf00      	nop
 8008d94:	20008e2c 	.word	0x20008e2c

08008d98 <_malloc_r>:
 8008d98:	b570      	push	{r4, r5, r6, lr}
 8008d9a:	1ccd      	adds	r5, r1, #3
 8008d9c:	f025 0503 	bic.w	r5, r5, #3
 8008da0:	3508      	adds	r5, #8
 8008da2:	2d0c      	cmp	r5, #12
 8008da4:	bf38      	it	cc
 8008da6:	250c      	movcc	r5, #12
 8008da8:	2d00      	cmp	r5, #0
 8008daa:	4606      	mov	r6, r0
 8008dac:	db01      	blt.n	8008db2 <_malloc_r+0x1a>
 8008dae:	42a9      	cmp	r1, r5
 8008db0:	d903      	bls.n	8008dba <_malloc_r+0x22>
 8008db2:	230c      	movs	r3, #12
 8008db4:	6033      	str	r3, [r6, #0]
 8008db6:	2000      	movs	r0, #0
 8008db8:	bd70      	pop	{r4, r5, r6, pc}
 8008dba:	f000 fbb9 	bl	8009530 <__malloc_lock>
 8008dbe:	4a21      	ldr	r2, [pc, #132]	; (8008e44 <_malloc_r+0xac>)
 8008dc0:	6814      	ldr	r4, [r2, #0]
 8008dc2:	4621      	mov	r1, r4
 8008dc4:	b991      	cbnz	r1, 8008dec <_malloc_r+0x54>
 8008dc6:	4c20      	ldr	r4, [pc, #128]	; (8008e48 <_malloc_r+0xb0>)
 8008dc8:	6823      	ldr	r3, [r4, #0]
 8008dca:	b91b      	cbnz	r3, 8008dd4 <_malloc_r+0x3c>
 8008dcc:	4630      	mov	r0, r6
 8008dce:	f000 fb05 	bl	80093dc <_sbrk_r>
 8008dd2:	6020      	str	r0, [r4, #0]
 8008dd4:	4629      	mov	r1, r5
 8008dd6:	4630      	mov	r0, r6
 8008dd8:	f000 fb00 	bl	80093dc <_sbrk_r>
 8008ddc:	1c43      	adds	r3, r0, #1
 8008dde:	d124      	bne.n	8008e2a <_malloc_r+0x92>
 8008de0:	230c      	movs	r3, #12
 8008de2:	6033      	str	r3, [r6, #0]
 8008de4:	4630      	mov	r0, r6
 8008de6:	f000 fba4 	bl	8009532 <__malloc_unlock>
 8008dea:	e7e4      	b.n	8008db6 <_malloc_r+0x1e>
 8008dec:	680b      	ldr	r3, [r1, #0]
 8008dee:	1b5b      	subs	r3, r3, r5
 8008df0:	d418      	bmi.n	8008e24 <_malloc_r+0x8c>
 8008df2:	2b0b      	cmp	r3, #11
 8008df4:	d90f      	bls.n	8008e16 <_malloc_r+0x7e>
 8008df6:	600b      	str	r3, [r1, #0]
 8008df8:	50cd      	str	r5, [r1, r3]
 8008dfa:	18cc      	adds	r4, r1, r3
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	f000 fb98 	bl	8009532 <__malloc_unlock>
 8008e02:	f104 000b 	add.w	r0, r4, #11
 8008e06:	1d23      	adds	r3, r4, #4
 8008e08:	f020 0007 	bic.w	r0, r0, #7
 8008e0c:	1ac3      	subs	r3, r0, r3
 8008e0e:	d0d3      	beq.n	8008db8 <_malloc_r+0x20>
 8008e10:	425a      	negs	r2, r3
 8008e12:	50e2      	str	r2, [r4, r3]
 8008e14:	e7d0      	b.n	8008db8 <_malloc_r+0x20>
 8008e16:	428c      	cmp	r4, r1
 8008e18:	684b      	ldr	r3, [r1, #4]
 8008e1a:	bf16      	itet	ne
 8008e1c:	6063      	strne	r3, [r4, #4]
 8008e1e:	6013      	streq	r3, [r2, #0]
 8008e20:	460c      	movne	r4, r1
 8008e22:	e7eb      	b.n	8008dfc <_malloc_r+0x64>
 8008e24:	460c      	mov	r4, r1
 8008e26:	6849      	ldr	r1, [r1, #4]
 8008e28:	e7cc      	b.n	8008dc4 <_malloc_r+0x2c>
 8008e2a:	1cc4      	adds	r4, r0, #3
 8008e2c:	f024 0403 	bic.w	r4, r4, #3
 8008e30:	42a0      	cmp	r0, r4
 8008e32:	d005      	beq.n	8008e40 <_malloc_r+0xa8>
 8008e34:	1a21      	subs	r1, r4, r0
 8008e36:	4630      	mov	r0, r6
 8008e38:	f000 fad0 	bl	80093dc <_sbrk_r>
 8008e3c:	3001      	adds	r0, #1
 8008e3e:	d0cf      	beq.n	8008de0 <_malloc_r+0x48>
 8008e40:	6025      	str	r5, [r4, #0]
 8008e42:	e7db      	b.n	8008dfc <_malloc_r+0x64>
 8008e44:	20008e2c 	.word	0x20008e2c
 8008e48:	20008e30 	.word	0x20008e30

08008e4c <__sfputc_r>:
 8008e4c:	6893      	ldr	r3, [r2, #8]
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	b410      	push	{r4}
 8008e54:	6093      	str	r3, [r2, #8]
 8008e56:	da08      	bge.n	8008e6a <__sfputc_r+0x1e>
 8008e58:	6994      	ldr	r4, [r2, #24]
 8008e5a:	42a3      	cmp	r3, r4
 8008e5c:	db01      	blt.n	8008e62 <__sfputc_r+0x16>
 8008e5e:	290a      	cmp	r1, #10
 8008e60:	d103      	bne.n	8008e6a <__sfputc_r+0x1e>
 8008e62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e66:	f7ff bcab 	b.w	80087c0 <__swbuf_r>
 8008e6a:	6813      	ldr	r3, [r2, #0]
 8008e6c:	1c58      	adds	r0, r3, #1
 8008e6e:	6010      	str	r0, [r2, #0]
 8008e70:	7019      	strb	r1, [r3, #0]
 8008e72:	4608      	mov	r0, r1
 8008e74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e78:	4770      	bx	lr

08008e7a <__sfputs_r>:
 8008e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e7c:	4606      	mov	r6, r0
 8008e7e:	460f      	mov	r7, r1
 8008e80:	4614      	mov	r4, r2
 8008e82:	18d5      	adds	r5, r2, r3
 8008e84:	42ac      	cmp	r4, r5
 8008e86:	d101      	bne.n	8008e8c <__sfputs_r+0x12>
 8008e88:	2000      	movs	r0, #0
 8008e8a:	e007      	b.n	8008e9c <__sfputs_r+0x22>
 8008e8c:	463a      	mov	r2, r7
 8008e8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e92:	4630      	mov	r0, r6
 8008e94:	f7ff ffda 	bl	8008e4c <__sfputc_r>
 8008e98:	1c43      	adds	r3, r0, #1
 8008e9a:	d1f3      	bne.n	8008e84 <__sfputs_r+0xa>
 8008e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ea0 <_vfiprintf_r>:
 8008ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea4:	460c      	mov	r4, r1
 8008ea6:	b09d      	sub	sp, #116	; 0x74
 8008ea8:	4617      	mov	r7, r2
 8008eaa:	461d      	mov	r5, r3
 8008eac:	4606      	mov	r6, r0
 8008eae:	b118      	cbz	r0, 8008eb8 <_vfiprintf_r+0x18>
 8008eb0:	6983      	ldr	r3, [r0, #24]
 8008eb2:	b90b      	cbnz	r3, 8008eb8 <_vfiprintf_r+0x18>
 8008eb4:	f7ff fe34 	bl	8008b20 <__sinit>
 8008eb8:	4b7c      	ldr	r3, [pc, #496]	; (80090ac <_vfiprintf_r+0x20c>)
 8008eba:	429c      	cmp	r4, r3
 8008ebc:	d158      	bne.n	8008f70 <_vfiprintf_r+0xd0>
 8008ebe:	6874      	ldr	r4, [r6, #4]
 8008ec0:	89a3      	ldrh	r3, [r4, #12]
 8008ec2:	0718      	lsls	r0, r3, #28
 8008ec4:	d55e      	bpl.n	8008f84 <_vfiprintf_r+0xe4>
 8008ec6:	6923      	ldr	r3, [r4, #16]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d05b      	beq.n	8008f84 <_vfiprintf_r+0xe4>
 8008ecc:	2300      	movs	r3, #0
 8008ece:	9309      	str	r3, [sp, #36]	; 0x24
 8008ed0:	2320      	movs	r3, #32
 8008ed2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ed6:	2330      	movs	r3, #48	; 0x30
 8008ed8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008edc:	9503      	str	r5, [sp, #12]
 8008ede:	f04f 0b01 	mov.w	fp, #1
 8008ee2:	46b8      	mov	r8, r7
 8008ee4:	4645      	mov	r5, r8
 8008ee6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008eea:	b10b      	cbz	r3, 8008ef0 <_vfiprintf_r+0x50>
 8008eec:	2b25      	cmp	r3, #37	; 0x25
 8008eee:	d154      	bne.n	8008f9a <_vfiprintf_r+0xfa>
 8008ef0:	ebb8 0a07 	subs.w	sl, r8, r7
 8008ef4:	d00b      	beq.n	8008f0e <_vfiprintf_r+0x6e>
 8008ef6:	4653      	mov	r3, sl
 8008ef8:	463a      	mov	r2, r7
 8008efa:	4621      	mov	r1, r4
 8008efc:	4630      	mov	r0, r6
 8008efe:	f7ff ffbc 	bl	8008e7a <__sfputs_r>
 8008f02:	3001      	adds	r0, #1
 8008f04:	f000 80c2 	beq.w	800908c <_vfiprintf_r+0x1ec>
 8008f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f0a:	4453      	add	r3, sl
 8008f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f0e:	f898 3000 	ldrb.w	r3, [r8]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f000 80ba 	beq.w	800908c <_vfiprintf_r+0x1ec>
 8008f18:	2300      	movs	r3, #0
 8008f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f22:	9304      	str	r3, [sp, #16]
 8008f24:	9307      	str	r3, [sp, #28]
 8008f26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f2a:	931a      	str	r3, [sp, #104]	; 0x68
 8008f2c:	46a8      	mov	r8, r5
 8008f2e:	2205      	movs	r2, #5
 8008f30:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008f34:	485e      	ldr	r0, [pc, #376]	; (80090b0 <_vfiprintf_r+0x210>)
 8008f36:	f7f7 f953 	bl	80001e0 <memchr>
 8008f3a:	9b04      	ldr	r3, [sp, #16]
 8008f3c:	bb78      	cbnz	r0, 8008f9e <_vfiprintf_r+0xfe>
 8008f3e:	06d9      	lsls	r1, r3, #27
 8008f40:	bf44      	itt	mi
 8008f42:	2220      	movmi	r2, #32
 8008f44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008f48:	071a      	lsls	r2, r3, #28
 8008f4a:	bf44      	itt	mi
 8008f4c:	222b      	movmi	r2, #43	; 0x2b
 8008f4e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008f52:	782a      	ldrb	r2, [r5, #0]
 8008f54:	2a2a      	cmp	r2, #42	; 0x2a
 8008f56:	d02a      	beq.n	8008fae <_vfiprintf_r+0x10e>
 8008f58:	9a07      	ldr	r2, [sp, #28]
 8008f5a:	46a8      	mov	r8, r5
 8008f5c:	2000      	movs	r0, #0
 8008f5e:	250a      	movs	r5, #10
 8008f60:	4641      	mov	r1, r8
 8008f62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f66:	3b30      	subs	r3, #48	; 0x30
 8008f68:	2b09      	cmp	r3, #9
 8008f6a:	d969      	bls.n	8009040 <_vfiprintf_r+0x1a0>
 8008f6c:	b360      	cbz	r0, 8008fc8 <_vfiprintf_r+0x128>
 8008f6e:	e024      	b.n	8008fba <_vfiprintf_r+0x11a>
 8008f70:	4b50      	ldr	r3, [pc, #320]	; (80090b4 <_vfiprintf_r+0x214>)
 8008f72:	429c      	cmp	r4, r3
 8008f74:	d101      	bne.n	8008f7a <_vfiprintf_r+0xda>
 8008f76:	68b4      	ldr	r4, [r6, #8]
 8008f78:	e7a2      	b.n	8008ec0 <_vfiprintf_r+0x20>
 8008f7a:	4b4f      	ldr	r3, [pc, #316]	; (80090b8 <_vfiprintf_r+0x218>)
 8008f7c:	429c      	cmp	r4, r3
 8008f7e:	bf08      	it	eq
 8008f80:	68f4      	ldreq	r4, [r6, #12]
 8008f82:	e79d      	b.n	8008ec0 <_vfiprintf_r+0x20>
 8008f84:	4621      	mov	r1, r4
 8008f86:	4630      	mov	r0, r6
 8008f88:	f7ff fc6c 	bl	8008864 <__swsetup_r>
 8008f8c:	2800      	cmp	r0, #0
 8008f8e:	d09d      	beq.n	8008ecc <_vfiprintf_r+0x2c>
 8008f90:	f04f 30ff 	mov.w	r0, #4294967295
 8008f94:	b01d      	add	sp, #116	; 0x74
 8008f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f9a:	46a8      	mov	r8, r5
 8008f9c:	e7a2      	b.n	8008ee4 <_vfiprintf_r+0x44>
 8008f9e:	4a44      	ldr	r2, [pc, #272]	; (80090b0 <_vfiprintf_r+0x210>)
 8008fa0:	1a80      	subs	r0, r0, r2
 8008fa2:	fa0b f000 	lsl.w	r0, fp, r0
 8008fa6:	4318      	orrs	r0, r3
 8008fa8:	9004      	str	r0, [sp, #16]
 8008faa:	4645      	mov	r5, r8
 8008fac:	e7be      	b.n	8008f2c <_vfiprintf_r+0x8c>
 8008fae:	9a03      	ldr	r2, [sp, #12]
 8008fb0:	1d11      	adds	r1, r2, #4
 8008fb2:	6812      	ldr	r2, [r2, #0]
 8008fb4:	9103      	str	r1, [sp, #12]
 8008fb6:	2a00      	cmp	r2, #0
 8008fb8:	db01      	blt.n	8008fbe <_vfiprintf_r+0x11e>
 8008fba:	9207      	str	r2, [sp, #28]
 8008fbc:	e004      	b.n	8008fc8 <_vfiprintf_r+0x128>
 8008fbe:	4252      	negs	r2, r2
 8008fc0:	f043 0302 	orr.w	r3, r3, #2
 8008fc4:	9207      	str	r2, [sp, #28]
 8008fc6:	9304      	str	r3, [sp, #16]
 8008fc8:	f898 3000 	ldrb.w	r3, [r8]
 8008fcc:	2b2e      	cmp	r3, #46	; 0x2e
 8008fce:	d10e      	bne.n	8008fee <_vfiprintf_r+0x14e>
 8008fd0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008fd4:	2b2a      	cmp	r3, #42	; 0x2a
 8008fd6:	d138      	bne.n	800904a <_vfiprintf_r+0x1aa>
 8008fd8:	9b03      	ldr	r3, [sp, #12]
 8008fda:	1d1a      	adds	r2, r3, #4
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	9203      	str	r2, [sp, #12]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	bfb8      	it	lt
 8008fe4:	f04f 33ff 	movlt.w	r3, #4294967295
 8008fe8:	f108 0802 	add.w	r8, r8, #2
 8008fec:	9305      	str	r3, [sp, #20]
 8008fee:	4d33      	ldr	r5, [pc, #204]	; (80090bc <_vfiprintf_r+0x21c>)
 8008ff0:	f898 1000 	ldrb.w	r1, [r8]
 8008ff4:	2203      	movs	r2, #3
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	f7f7 f8f2 	bl	80001e0 <memchr>
 8008ffc:	b140      	cbz	r0, 8009010 <_vfiprintf_r+0x170>
 8008ffe:	2340      	movs	r3, #64	; 0x40
 8009000:	1b40      	subs	r0, r0, r5
 8009002:	fa03 f000 	lsl.w	r0, r3, r0
 8009006:	9b04      	ldr	r3, [sp, #16]
 8009008:	4303      	orrs	r3, r0
 800900a:	f108 0801 	add.w	r8, r8, #1
 800900e:	9304      	str	r3, [sp, #16]
 8009010:	f898 1000 	ldrb.w	r1, [r8]
 8009014:	482a      	ldr	r0, [pc, #168]	; (80090c0 <_vfiprintf_r+0x220>)
 8009016:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800901a:	2206      	movs	r2, #6
 800901c:	f108 0701 	add.w	r7, r8, #1
 8009020:	f7f7 f8de 	bl	80001e0 <memchr>
 8009024:	2800      	cmp	r0, #0
 8009026:	d037      	beq.n	8009098 <_vfiprintf_r+0x1f8>
 8009028:	4b26      	ldr	r3, [pc, #152]	; (80090c4 <_vfiprintf_r+0x224>)
 800902a:	bb1b      	cbnz	r3, 8009074 <_vfiprintf_r+0x1d4>
 800902c:	9b03      	ldr	r3, [sp, #12]
 800902e:	3307      	adds	r3, #7
 8009030:	f023 0307 	bic.w	r3, r3, #7
 8009034:	3308      	adds	r3, #8
 8009036:	9303      	str	r3, [sp, #12]
 8009038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800903a:	444b      	add	r3, r9
 800903c:	9309      	str	r3, [sp, #36]	; 0x24
 800903e:	e750      	b.n	8008ee2 <_vfiprintf_r+0x42>
 8009040:	fb05 3202 	mla	r2, r5, r2, r3
 8009044:	2001      	movs	r0, #1
 8009046:	4688      	mov	r8, r1
 8009048:	e78a      	b.n	8008f60 <_vfiprintf_r+0xc0>
 800904a:	2300      	movs	r3, #0
 800904c:	f108 0801 	add.w	r8, r8, #1
 8009050:	9305      	str	r3, [sp, #20]
 8009052:	4619      	mov	r1, r3
 8009054:	250a      	movs	r5, #10
 8009056:	4640      	mov	r0, r8
 8009058:	f810 2b01 	ldrb.w	r2, [r0], #1
 800905c:	3a30      	subs	r2, #48	; 0x30
 800905e:	2a09      	cmp	r2, #9
 8009060:	d903      	bls.n	800906a <_vfiprintf_r+0x1ca>
 8009062:	2b00      	cmp	r3, #0
 8009064:	d0c3      	beq.n	8008fee <_vfiprintf_r+0x14e>
 8009066:	9105      	str	r1, [sp, #20]
 8009068:	e7c1      	b.n	8008fee <_vfiprintf_r+0x14e>
 800906a:	fb05 2101 	mla	r1, r5, r1, r2
 800906e:	2301      	movs	r3, #1
 8009070:	4680      	mov	r8, r0
 8009072:	e7f0      	b.n	8009056 <_vfiprintf_r+0x1b6>
 8009074:	ab03      	add	r3, sp, #12
 8009076:	9300      	str	r3, [sp, #0]
 8009078:	4622      	mov	r2, r4
 800907a:	4b13      	ldr	r3, [pc, #76]	; (80090c8 <_vfiprintf_r+0x228>)
 800907c:	a904      	add	r1, sp, #16
 800907e:	4630      	mov	r0, r6
 8009080:	f3af 8000 	nop.w
 8009084:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009088:	4681      	mov	r9, r0
 800908a:	d1d5      	bne.n	8009038 <_vfiprintf_r+0x198>
 800908c:	89a3      	ldrh	r3, [r4, #12]
 800908e:	065b      	lsls	r3, r3, #25
 8009090:	f53f af7e 	bmi.w	8008f90 <_vfiprintf_r+0xf0>
 8009094:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009096:	e77d      	b.n	8008f94 <_vfiprintf_r+0xf4>
 8009098:	ab03      	add	r3, sp, #12
 800909a:	9300      	str	r3, [sp, #0]
 800909c:	4622      	mov	r2, r4
 800909e:	4b0a      	ldr	r3, [pc, #40]	; (80090c8 <_vfiprintf_r+0x228>)
 80090a0:	a904      	add	r1, sp, #16
 80090a2:	4630      	mov	r0, r6
 80090a4:	f000 f888 	bl	80091b8 <_printf_i>
 80090a8:	e7ec      	b.n	8009084 <_vfiprintf_r+0x1e4>
 80090aa:	bf00      	nop
 80090ac:	08009638 	.word	0x08009638
 80090b0:	08009678 	.word	0x08009678
 80090b4:	08009658 	.word	0x08009658
 80090b8:	08009618 	.word	0x08009618
 80090bc:	0800967e 	.word	0x0800967e
 80090c0:	08009682 	.word	0x08009682
 80090c4:	00000000 	.word	0x00000000
 80090c8:	08008e7b 	.word	0x08008e7b

080090cc <_printf_common>:
 80090cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090d0:	4691      	mov	r9, r2
 80090d2:	461f      	mov	r7, r3
 80090d4:	688a      	ldr	r2, [r1, #8]
 80090d6:	690b      	ldr	r3, [r1, #16]
 80090d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80090dc:	4293      	cmp	r3, r2
 80090de:	bfb8      	it	lt
 80090e0:	4613      	movlt	r3, r2
 80090e2:	f8c9 3000 	str.w	r3, [r9]
 80090e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80090ea:	4606      	mov	r6, r0
 80090ec:	460c      	mov	r4, r1
 80090ee:	b112      	cbz	r2, 80090f6 <_printf_common+0x2a>
 80090f0:	3301      	adds	r3, #1
 80090f2:	f8c9 3000 	str.w	r3, [r9]
 80090f6:	6823      	ldr	r3, [r4, #0]
 80090f8:	0699      	lsls	r1, r3, #26
 80090fa:	bf42      	ittt	mi
 80090fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009100:	3302      	addmi	r3, #2
 8009102:	f8c9 3000 	strmi.w	r3, [r9]
 8009106:	6825      	ldr	r5, [r4, #0]
 8009108:	f015 0506 	ands.w	r5, r5, #6
 800910c:	d107      	bne.n	800911e <_printf_common+0x52>
 800910e:	f104 0a19 	add.w	sl, r4, #25
 8009112:	68e3      	ldr	r3, [r4, #12]
 8009114:	f8d9 2000 	ldr.w	r2, [r9]
 8009118:	1a9b      	subs	r3, r3, r2
 800911a:	42ab      	cmp	r3, r5
 800911c:	dc28      	bgt.n	8009170 <_printf_common+0xa4>
 800911e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009122:	6822      	ldr	r2, [r4, #0]
 8009124:	3300      	adds	r3, #0
 8009126:	bf18      	it	ne
 8009128:	2301      	movne	r3, #1
 800912a:	0692      	lsls	r2, r2, #26
 800912c:	d42d      	bmi.n	800918a <_printf_common+0xbe>
 800912e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009132:	4639      	mov	r1, r7
 8009134:	4630      	mov	r0, r6
 8009136:	47c0      	blx	r8
 8009138:	3001      	adds	r0, #1
 800913a:	d020      	beq.n	800917e <_printf_common+0xb2>
 800913c:	6823      	ldr	r3, [r4, #0]
 800913e:	68e5      	ldr	r5, [r4, #12]
 8009140:	f8d9 2000 	ldr.w	r2, [r9]
 8009144:	f003 0306 	and.w	r3, r3, #6
 8009148:	2b04      	cmp	r3, #4
 800914a:	bf08      	it	eq
 800914c:	1aad      	subeq	r5, r5, r2
 800914e:	68a3      	ldr	r3, [r4, #8]
 8009150:	6922      	ldr	r2, [r4, #16]
 8009152:	bf0c      	ite	eq
 8009154:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009158:	2500      	movne	r5, #0
 800915a:	4293      	cmp	r3, r2
 800915c:	bfc4      	itt	gt
 800915e:	1a9b      	subgt	r3, r3, r2
 8009160:	18ed      	addgt	r5, r5, r3
 8009162:	f04f 0900 	mov.w	r9, #0
 8009166:	341a      	adds	r4, #26
 8009168:	454d      	cmp	r5, r9
 800916a:	d11a      	bne.n	80091a2 <_printf_common+0xd6>
 800916c:	2000      	movs	r0, #0
 800916e:	e008      	b.n	8009182 <_printf_common+0xb6>
 8009170:	2301      	movs	r3, #1
 8009172:	4652      	mov	r2, sl
 8009174:	4639      	mov	r1, r7
 8009176:	4630      	mov	r0, r6
 8009178:	47c0      	blx	r8
 800917a:	3001      	adds	r0, #1
 800917c:	d103      	bne.n	8009186 <_printf_common+0xba>
 800917e:	f04f 30ff 	mov.w	r0, #4294967295
 8009182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009186:	3501      	adds	r5, #1
 8009188:	e7c3      	b.n	8009112 <_printf_common+0x46>
 800918a:	18e1      	adds	r1, r4, r3
 800918c:	1c5a      	adds	r2, r3, #1
 800918e:	2030      	movs	r0, #48	; 0x30
 8009190:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009194:	4422      	add	r2, r4
 8009196:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800919a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800919e:	3302      	adds	r3, #2
 80091a0:	e7c5      	b.n	800912e <_printf_common+0x62>
 80091a2:	2301      	movs	r3, #1
 80091a4:	4622      	mov	r2, r4
 80091a6:	4639      	mov	r1, r7
 80091a8:	4630      	mov	r0, r6
 80091aa:	47c0      	blx	r8
 80091ac:	3001      	adds	r0, #1
 80091ae:	d0e6      	beq.n	800917e <_printf_common+0xb2>
 80091b0:	f109 0901 	add.w	r9, r9, #1
 80091b4:	e7d8      	b.n	8009168 <_printf_common+0x9c>
	...

080091b8 <_printf_i>:
 80091b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80091bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80091c0:	460c      	mov	r4, r1
 80091c2:	7e09      	ldrb	r1, [r1, #24]
 80091c4:	b085      	sub	sp, #20
 80091c6:	296e      	cmp	r1, #110	; 0x6e
 80091c8:	4617      	mov	r7, r2
 80091ca:	4606      	mov	r6, r0
 80091cc:	4698      	mov	r8, r3
 80091ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091d0:	f000 80b3 	beq.w	800933a <_printf_i+0x182>
 80091d4:	d822      	bhi.n	800921c <_printf_i+0x64>
 80091d6:	2963      	cmp	r1, #99	; 0x63
 80091d8:	d036      	beq.n	8009248 <_printf_i+0x90>
 80091da:	d80a      	bhi.n	80091f2 <_printf_i+0x3a>
 80091dc:	2900      	cmp	r1, #0
 80091de:	f000 80b9 	beq.w	8009354 <_printf_i+0x19c>
 80091e2:	2958      	cmp	r1, #88	; 0x58
 80091e4:	f000 8083 	beq.w	80092ee <_printf_i+0x136>
 80091e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80091f0:	e032      	b.n	8009258 <_printf_i+0xa0>
 80091f2:	2964      	cmp	r1, #100	; 0x64
 80091f4:	d001      	beq.n	80091fa <_printf_i+0x42>
 80091f6:	2969      	cmp	r1, #105	; 0x69
 80091f8:	d1f6      	bne.n	80091e8 <_printf_i+0x30>
 80091fa:	6820      	ldr	r0, [r4, #0]
 80091fc:	6813      	ldr	r3, [r2, #0]
 80091fe:	0605      	lsls	r5, r0, #24
 8009200:	f103 0104 	add.w	r1, r3, #4
 8009204:	d52a      	bpl.n	800925c <_printf_i+0xa4>
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	6011      	str	r1, [r2, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	da03      	bge.n	8009216 <_printf_i+0x5e>
 800920e:	222d      	movs	r2, #45	; 0x2d
 8009210:	425b      	negs	r3, r3
 8009212:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009216:	486f      	ldr	r0, [pc, #444]	; (80093d4 <_printf_i+0x21c>)
 8009218:	220a      	movs	r2, #10
 800921a:	e039      	b.n	8009290 <_printf_i+0xd8>
 800921c:	2973      	cmp	r1, #115	; 0x73
 800921e:	f000 809d 	beq.w	800935c <_printf_i+0x1a4>
 8009222:	d808      	bhi.n	8009236 <_printf_i+0x7e>
 8009224:	296f      	cmp	r1, #111	; 0x6f
 8009226:	d020      	beq.n	800926a <_printf_i+0xb2>
 8009228:	2970      	cmp	r1, #112	; 0x70
 800922a:	d1dd      	bne.n	80091e8 <_printf_i+0x30>
 800922c:	6823      	ldr	r3, [r4, #0]
 800922e:	f043 0320 	orr.w	r3, r3, #32
 8009232:	6023      	str	r3, [r4, #0]
 8009234:	e003      	b.n	800923e <_printf_i+0x86>
 8009236:	2975      	cmp	r1, #117	; 0x75
 8009238:	d017      	beq.n	800926a <_printf_i+0xb2>
 800923a:	2978      	cmp	r1, #120	; 0x78
 800923c:	d1d4      	bne.n	80091e8 <_printf_i+0x30>
 800923e:	2378      	movs	r3, #120	; 0x78
 8009240:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009244:	4864      	ldr	r0, [pc, #400]	; (80093d8 <_printf_i+0x220>)
 8009246:	e055      	b.n	80092f4 <_printf_i+0x13c>
 8009248:	6813      	ldr	r3, [r2, #0]
 800924a:	1d19      	adds	r1, r3, #4
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	6011      	str	r1, [r2, #0]
 8009250:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009254:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009258:	2301      	movs	r3, #1
 800925a:	e08c      	b.n	8009376 <_printf_i+0x1be>
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	6011      	str	r1, [r2, #0]
 8009260:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009264:	bf18      	it	ne
 8009266:	b21b      	sxthne	r3, r3
 8009268:	e7cf      	b.n	800920a <_printf_i+0x52>
 800926a:	6813      	ldr	r3, [r2, #0]
 800926c:	6825      	ldr	r5, [r4, #0]
 800926e:	1d18      	adds	r0, r3, #4
 8009270:	6010      	str	r0, [r2, #0]
 8009272:	0628      	lsls	r0, r5, #24
 8009274:	d501      	bpl.n	800927a <_printf_i+0xc2>
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	e002      	b.n	8009280 <_printf_i+0xc8>
 800927a:	0668      	lsls	r0, r5, #25
 800927c:	d5fb      	bpl.n	8009276 <_printf_i+0xbe>
 800927e:	881b      	ldrh	r3, [r3, #0]
 8009280:	4854      	ldr	r0, [pc, #336]	; (80093d4 <_printf_i+0x21c>)
 8009282:	296f      	cmp	r1, #111	; 0x6f
 8009284:	bf14      	ite	ne
 8009286:	220a      	movne	r2, #10
 8009288:	2208      	moveq	r2, #8
 800928a:	2100      	movs	r1, #0
 800928c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009290:	6865      	ldr	r5, [r4, #4]
 8009292:	60a5      	str	r5, [r4, #8]
 8009294:	2d00      	cmp	r5, #0
 8009296:	f2c0 8095 	blt.w	80093c4 <_printf_i+0x20c>
 800929a:	6821      	ldr	r1, [r4, #0]
 800929c:	f021 0104 	bic.w	r1, r1, #4
 80092a0:	6021      	str	r1, [r4, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d13d      	bne.n	8009322 <_printf_i+0x16a>
 80092a6:	2d00      	cmp	r5, #0
 80092a8:	f040 808e 	bne.w	80093c8 <_printf_i+0x210>
 80092ac:	4665      	mov	r5, ip
 80092ae:	2a08      	cmp	r2, #8
 80092b0:	d10b      	bne.n	80092ca <_printf_i+0x112>
 80092b2:	6823      	ldr	r3, [r4, #0]
 80092b4:	07db      	lsls	r3, r3, #31
 80092b6:	d508      	bpl.n	80092ca <_printf_i+0x112>
 80092b8:	6923      	ldr	r3, [r4, #16]
 80092ba:	6862      	ldr	r2, [r4, #4]
 80092bc:	429a      	cmp	r2, r3
 80092be:	bfde      	ittt	le
 80092c0:	2330      	movle	r3, #48	; 0x30
 80092c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80092c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80092ca:	ebac 0305 	sub.w	r3, ip, r5
 80092ce:	6123      	str	r3, [r4, #16]
 80092d0:	f8cd 8000 	str.w	r8, [sp]
 80092d4:	463b      	mov	r3, r7
 80092d6:	aa03      	add	r2, sp, #12
 80092d8:	4621      	mov	r1, r4
 80092da:	4630      	mov	r0, r6
 80092dc:	f7ff fef6 	bl	80090cc <_printf_common>
 80092e0:	3001      	adds	r0, #1
 80092e2:	d14d      	bne.n	8009380 <_printf_i+0x1c8>
 80092e4:	f04f 30ff 	mov.w	r0, #4294967295
 80092e8:	b005      	add	sp, #20
 80092ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092ee:	4839      	ldr	r0, [pc, #228]	; (80093d4 <_printf_i+0x21c>)
 80092f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80092f4:	6813      	ldr	r3, [r2, #0]
 80092f6:	6821      	ldr	r1, [r4, #0]
 80092f8:	1d1d      	adds	r5, r3, #4
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	6015      	str	r5, [r2, #0]
 80092fe:	060a      	lsls	r2, r1, #24
 8009300:	d50b      	bpl.n	800931a <_printf_i+0x162>
 8009302:	07ca      	lsls	r2, r1, #31
 8009304:	bf44      	itt	mi
 8009306:	f041 0120 	orrmi.w	r1, r1, #32
 800930a:	6021      	strmi	r1, [r4, #0]
 800930c:	b91b      	cbnz	r3, 8009316 <_printf_i+0x15e>
 800930e:	6822      	ldr	r2, [r4, #0]
 8009310:	f022 0220 	bic.w	r2, r2, #32
 8009314:	6022      	str	r2, [r4, #0]
 8009316:	2210      	movs	r2, #16
 8009318:	e7b7      	b.n	800928a <_printf_i+0xd2>
 800931a:	064d      	lsls	r5, r1, #25
 800931c:	bf48      	it	mi
 800931e:	b29b      	uxthmi	r3, r3
 8009320:	e7ef      	b.n	8009302 <_printf_i+0x14a>
 8009322:	4665      	mov	r5, ip
 8009324:	fbb3 f1f2 	udiv	r1, r3, r2
 8009328:	fb02 3311 	mls	r3, r2, r1, r3
 800932c:	5cc3      	ldrb	r3, [r0, r3]
 800932e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009332:	460b      	mov	r3, r1
 8009334:	2900      	cmp	r1, #0
 8009336:	d1f5      	bne.n	8009324 <_printf_i+0x16c>
 8009338:	e7b9      	b.n	80092ae <_printf_i+0xf6>
 800933a:	6813      	ldr	r3, [r2, #0]
 800933c:	6825      	ldr	r5, [r4, #0]
 800933e:	6961      	ldr	r1, [r4, #20]
 8009340:	1d18      	adds	r0, r3, #4
 8009342:	6010      	str	r0, [r2, #0]
 8009344:	0628      	lsls	r0, r5, #24
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	d501      	bpl.n	800934e <_printf_i+0x196>
 800934a:	6019      	str	r1, [r3, #0]
 800934c:	e002      	b.n	8009354 <_printf_i+0x19c>
 800934e:	066a      	lsls	r2, r5, #25
 8009350:	d5fb      	bpl.n	800934a <_printf_i+0x192>
 8009352:	8019      	strh	r1, [r3, #0]
 8009354:	2300      	movs	r3, #0
 8009356:	6123      	str	r3, [r4, #16]
 8009358:	4665      	mov	r5, ip
 800935a:	e7b9      	b.n	80092d0 <_printf_i+0x118>
 800935c:	6813      	ldr	r3, [r2, #0]
 800935e:	1d19      	adds	r1, r3, #4
 8009360:	6011      	str	r1, [r2, #0]
 8009362:	681d      	ldr	r5, [r3, #0]
 8009364:	6862      	ldr	r2, [r4, #4]
 8009366:	2100      	movs	r1, #0
 8009368:	4628      	mov	r0, r5
 800936a:	f7f6 ff39 	bl	80001e0 <memchr>
 800936e:	b108      	cbz	r0, 8009374 <_printf_i+0x1bc>
 8009370:	1b40      	subs	r0, r0, r5
 8009372:	6060      	str	r0, [r4, #4]
 8009374:	6863      	ldr	r3, [r4, #4]
 8009376:	6123      	str	r3, [r4, #16]
 8009378:	2300      	movs	r3, #0
 800937a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800937e:	e7a7      	b.n	80092d0 <_printf_i+0x118>
 8009380:	6923      	ldr	r3, [r4, #16]
 8009382:	462a      	mov	r2, r5
 8009384:	4639      	mov	r1, r7
 8009386:	4630      	mov	r0, r6
 8009388:	47c0      	blx	r8
 800938a:	3001      	adds	r0, #1
 800938c:	d0aa      	beq.n	80092e4 <_printf_i+0x12c>
 800938e:	6823      	ldr	r3, [r4, #0]
 8009390:	079b      	lsls	r3, r3, #30
 8009392:	d413      	bmi.n	80093bc <_printf_i+0x204>
 8009394:	68e0      	ldr	r0, [r4, #12]
 8009396:	9b03      	ldr	r3, [sp, #12]
 8009398:	4298      	cmp	r0, r3
 800939a:	bfb8      	it	lt
 800939c:	4618      	movlt	r0, r3
 800939e:	e7a3      	b.n	80092e8 <_printf_i+0x130>
 80093a0:	2301      	movs	r3, #1
 80093a2:	464a      	mov	r2, r9
 80093a4:	4639      	mov	r1, r7
 80093a6:	4630      	mov	r0, r6
 80093a8:	47c0      	blx	r8
 80093aa:	3001      	adds	r0, #1
 80093ac:	d09a      	beq.n	80092e4 <_printf_i+0x12c>
 80093ae:	3501      	adds	r5, #1
 80093b0:	68e3      	ldr	r3, [r4, #12]
 80093b2:	9a03      	ldr	r2, [sp, #12]
 80093b4:	1a9b      	subs	r3, r3, r2
 80093b6:	42ab      	cmp	r3, r5
 80093b8:	dcf2      	bgt.n	80093a0 <_printf_i+0x1e8>
 80093ba:	e7eb      	b.n	8009394 <_printf_i+0x1dc>
 80093bc:	2500      	movs	r5, #0
 80093be:	f104 0919 	add.w	r9, r4, #25
 80093c2:	e7f5      	b.n	80093b0 <_printf_i+0x1f8>
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1ac      	bne.n	8009322 <_printf_i+0x16a>
 80093c8:	7803      	ldrb	r3, [r0, #0]
 80093ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093d2:	e76c      	b.n	80092ae <_printf_i+0xf6>
 80093d4:	08009689 	.word	0x08009689
 80093d8:	0800969a 	.word	0x0800969a

080093dc <_sbrk_r>:
 80093dc:	b538      	push	{r3, r4, r5, lr}
 80093de:	4c06      	ldr	r4, [pc, #24]	; (80093f8 <_sbrk_r+0x1c>)
 80093e0:	2300      	movs	r3, #0
 80093e2:	4605      	mov	r5, r0
 80093e4:	4608      	mov	r0, r1
 80093e6:	6023      	str	r3, [r4, #0]
 80093e8:	f7f8 f824 	bl	8001434 <_sbrk>
 80093ec:	1c43      	adds	r3, r0, #1
 80093ee:	d102      	bne.n	80093f6 <_sbrk_r+0x1a>
 80093f0:	6823      	ldr	r3, [r4, #0]
 80093f2:	b103      	cbz	r3, 80093f6 <_sbrk_r+0x1a>
 80093f4:	602b      	str	r3, [r5, #0]
 80093f6:	bd38      	pop	{r3, r4, r5, pc}
 80093f8:	20009058 	.word	0x20009058

080093fc <__sread>:
 80093fc:	b510      	push	{r4, lr}
 80093fe:	460c      	mov	r4, r1
 8009400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009404:	f000 f896 	bl	8009534 <_read_r>
 8009408:	2800      	cmp	r0, #0
 800940a:	bfab      	itete	ge
 800940c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800940e:	89a3      	ldrhlt	r3, [r4, #12]
 8009410:	181b      	addge	r3, r3, r0
 8009412:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009416:	bfac      	ite	ge
 8009418:	6563      	strge	r3, [r4, #84]	; 0x54
 800941a:	81a3      	strhlt	r3, [r4, #12]
 800941c:	bd10      	pop	{r4, pc}

0800941e <__swrite>:
 800941e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009422:	461f      	mov	r7, r3
 8009424:	898b      	ldrh	r3, [r1, #12]
 8009426:	05db      	lsls	r3, r3, #23
 8009428:	4605      	mov	r5, r0
 800942a:	460c      	mov	r4, r1
 800942c:	4616      	mov	r6, r2
 800942e:	d505      	bpl.n	800943c <__swrite+0x1e>
 8009430:	2302      	movs	r3, #2
 8009432:	2200      	movs	r2, #0
 8009434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009438:	f000 f868 	bl	800950c <_lseek_r>
 800943c:	89a3      	ldrh	r3, [r4, #12]
 800943e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009442:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009446:	81a3      	strh	r3, [r4, #12]
 8009448:	4632      	mov	r2, r6
 800944a:	463b      	mov	r3, r7
 800944c:	4628      	mov	r0, r5
 800944e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009452:	f000 b817 	b.w	8009484 <_write_r>

08009456 <__sseek>:
 8009456:	b510      	push	{r4, lr}
 8009458:	460c      	mov	r4, r1
 800945a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800945e:	f000 f855 	bl	800950c <_lseek_r>
 8009462:	1c43      	adds	r3, r0, #1
 8009464:	89a3      	ldrh	r3, [r4, #12]
 8009466:	bf15      	itete	ne
 8009468:	6560      	strne	r0, [r4, #84]	; 0x54
 800946a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800946e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009472:	81a3      	strheq	r3, [r4, #12]
 8009474:	bf18      	it	ne
 8009476:	81a3      	strhne	r3, [r4, #12]
 8009478:	bd10      	pop	{r4, pc}

0800947a <__sclose>:
 800947a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800947e:	f000 b813 	b.w	80094a8 <_close_r>
	...

08009484 <_write_r>:
 8009484:	b538      	push	{r3, r4, r5, lr}
 8009486:	4c07      	ldr	r4, [pc, #28]	; (80094a4 <_write_r+0x20>)
 8009488:	4605      	mov	r5, r0
 800948a:	4608      	mov	r0, r1
 800948c:	4611      	mov	r1, r2
 800948e:	2200      	movs	r2, #0
 8009490:	6022      	str	r2, [r4, #0]
 8009492:	461a      	mov	r2, r3
 8009494:	f7f7 ff7d 	bl	8001392 <_write>
 8009498:	1c43      	adds	r3, r0, #1
 800949a:	d102      	bne.n	80094a2 <_write_r+0x1e>
 800949c:	6823      	ldr	r3, [r4, #0]
 800949e:	b103      	cbz	r3, 80094a2 <_write_r+0x1e>
 80094a0:	602b      	str	r3, [r5, #0]
 80094a2:	bd38      	pop	{r3, r4, r5, pc}
 80094a4:	20009058 	.word	0x20009058

080094a8 <_close_r>:
 80094a8:	b538      	push	{r3, r4, r5, lr}
 80094aa:	4c06      	ldr	r4, [pc, #24]	; (80094c4 <_close_r+0x1c>)
 80094ac:	2300      	movs	r3, #0
 80094ae:	4605      	mov	r5, r0
 80094b0:	4608      	mov	r0, r1
 80094b2:	6023      	str	r3, [r4, #0]
 80094b4:	f7f7 ff89 	bl	80013ca <_close>
 80094b8:	1c43      	adds	r3, r0, #1
 80094ba:	d102      	bne.n	80094c2 <_close_r+0x1a>
 80094bc:	6823      	ldr	r3, [r4, #0]
 80094be:	b103      	cbz	r3, 80094c2 <_close_r+0x1a>
 80094c0:	602b      	str	r3, [r5, #0]
 80094c2:	bd38      	pop	{r3, r4, r5, pc}
 80094c4:	20009058 	.word	0x20009058

080094c8 <_fstat_r>:
 80094c8:	b538      	push	{r3, r4, r5, lr}
 80094ca:	4c07      	ldr	r4, [pc, #28]	; (80094e8 <_fstat_r+0x20>)
 80094cc:	2300      	movs	r3, #0
 80094ce:	4605      	mov	r5, r0
 80094d0:	4608      	mov	r0, r1
 80094d2:	4611      	mov	r1, r2
 80094d4:	6023      	str	r3, [r4, #0]
 80094d6:	f7f7 ff84 	bl	80013e2 <_fstat>
 80094da:	1c43      	adds	r3, r0, #1
 80094dc:	d102      	bne.n	80094e4 <_fstat_r+0x1c>
 80094de:	6823      	ldr	r3, [r4, #0]
 80094e0:	b103      	cbz	r3, 80094e4 <_fstat_r+0x1c>
 80094e2:	602b      	str	r3, [r5, #0]
 80094e4:	bd38      	pop	{r3, r4, r5, pc}
 80094e6:	bf00      	nop
 80094e8:	20009058 	.word	0x20009058

080094ec <_isatty_r>:
 80094ec:	b538      	push	{r3, r4, r5, lr}
 80094ee:	4c06      	ldr	r4, [pc, #24]	; (8009508 <_isatty_r+0x1c>)
 80094f0:	2300      	movs	r3, #0
 80094f2:	4605      	mov	r5, r0
 80094f4:	4608      	mov	r0, r1
 80094f6:	6023      	str	r3, [r4, #0]
 80094f8:	f7f7 ff83 	bl	8001402 <_isatty>
 80094fc:	1c43      	adds	r3, r0, #1
 80094fe:	d102      	bne.n	8009506 <_isatty_r+0x1a>
 8009500:	6823      	ldr	r3, [r4, #0]
 8009502:	b103      	cbz	r3, 8009506 <_isatty_r+0x1a>
 8009504:	602b      	str	r3, [r5, #0]
 8009506:	bd38      	pop	{r3, r4, r5, pc}
 8009508:	20009058 	.word	0x20009058

0800950c <_lseek_r>:
 800950c:	b538      	push	{r3, r4, r5, lr}
 800950e:	4c07      	ldr	r4, [pc, #28]	; (800952c <_lseek_r+0x20>)
 8009510:	4605      	mov	r5, r0
 8009512:	4608      	mov	r0, r1
 8009514:	4611      	mov	r1, r2
 8009516:	2200      	movs	r2, #0
 8009518:	6022      	str	r2, [r4, #0]
 800951a:	461a      	mov	r2, r3
 800951c:	f7f7 ff7c 	bl	8001418 <_lseek>
 8009520:	1c43      	adds	r3, r0, #1
 8009522:	d102      	bne.n	800952a <_lseek_r+0x1e>
 8009524:	6823      	ldr	r3, [r4, #0]
 8009526:	b103      	cbz	r3, 800952a <_lseek_r+0x1e>
 8009528:	602b      	str	r3, [r5, #0]
 800952a:	bd38      	pop	{r3, r4, r5, pc}
 800952c:	20009058 	.word	0x20009058

08009530 <__malloc_lock>:
 8009530:	4770      	bx	lr

08009532 <__malloc_unlock>:
 8009532:	4770      	bx	lr

08009534 <_read_r>:
 8009534:	b538      	push	{r3, r4, r5, lr}
 8009536:	4c07      	ldr	r4, [pc, #28]	; (8009554 <_read_r+0x20>)
 8009538:	4605      	mov	r5, r0
 800953a:	4608      	mov	r0, r1
 800953c:	4611      	mov	r1, r2
 800953e:	2200      	movs	r2, #0
 8009540:	6022      	str	r2, [r4, #0]
 8009542:	461a      	mov	r2, r3
 8009544:	f7f7 ff08 	bl	8001358 <_read>
 8009548:	1c43      	adds	r3, r0, #1
 800954a:	d102      	bne.n	8009552 <_read_r+0x1e>
 800954c:	6823      	ldr	r3, [r4, #0]
 800954e:	b103      	cbz	r3, 8009552 <_read_r+0x1e>
 8009550:	602b      	str	r3, [r5, #0]
 8009552:	bd38      	pop	{r3, r4, r5, pc}
 8009554:	20009058 	.word	0x20009058

08009558 <_init>:
 8009558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800955a:	bf00      	nop
 800955c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800955e:	bc08      	pop	{r3}
 8009560:	469e      	mov	lr, r3
 8009562:	4770      	bx	lr

08009564 <_fini>:
 8009564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009566:	bf00      	nop
 8009568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800956a:	bc08      	pop	{r3}
 800956c:	469e      	mov	lr, r3
 800956e:	4770      	bx	lr
