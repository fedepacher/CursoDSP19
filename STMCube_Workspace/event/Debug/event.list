
event.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08005764  08005764  00015764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057a0  080057a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080057a0  080057a0  000157a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057a8  080057a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057a8  080057a8  000157a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057ac  080057ac  000157ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080057b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049f8  2000000c  080057bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a04  080057bc  00024a04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017ab4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002eb1  00000000  00000000  00037af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001308  00000000  00000000  0003a9a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011c0  00000000  00000000  0003bcb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003986  00000000  00000000  0003ce70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eb67  00000000  00000000  000407f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00095b9f  00000000  00000000  0004f35d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e4efc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fd4  00000000  00000000  000e4f78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000000c 	.word	0x2000000c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800574c 	.word	0x0800574c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000010 	.word	0x20000010
 80001dc:	0800574c 	.word	0x0800574c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <Init_Events>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int Init_Events (void) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0

  evt_id = osEventFlagsNew(NULL);
 80004e4:	2000      	movs	r0, #0
 80004e6:	f002 f8f5 	bl	80026d4 <osEventFlagsNew>
 80004ea:	4602      	mov	r2, r0
 80004ec:	4b11      	ldr	r3, [pc, #68]	; (8000534 <Init_Events+0x54>)
 80004ee:	601a      	str	r2, [r3, #0]
  if (evt_id == NULL) {
    ; // Event Flags object not created, handle failure
  }

  tid_Thread_EventSender = osThreadNew(Thread_EventSender, NULL, NULL);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2100      	movs	r1, #0
 80004f4:	4810      	ldr	r0, [pc, #64]	; (8000538 <Init_Events+0x58>)
 80004f6:	f001 ffe3 	bl	80024c0 <osThreadNew>
 80004fa:	4602      	mov	r2, r0
 80004fc:	4b0f      	ldr	r3, [pc, #60]	; (800053c <Init_Events+0x5c>)
 80004fe:	601a      	str	r2, [r3, #0]
  if (tid_Thread_EventSender == NULL) {
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <Init_Events+0x5c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d102      	bne.n	800050e <Init_Events+0x2e>
    return(-1);
 8000508:	f04f 33ff 	mov.w	r3, #4294967295
 800050c:	e00f      	b.n	800052e <Init_Events+0x4e>
  }
  tid_Thread_EventReceiver = osThreadNew(Thread_EventReceiver, NULL, NULL);
 800050e:	2200      	movs	r2, #0
 8000510:	2100      	movs	r1, #0
 8000512:	480b      	ldr	r0, [pc, #44]	; (8000540 <Init_Events+0x60>)
 8000514:	f001 ffd4 	bl	80024c0 <osThreadNew>
 8000518:	4602      	mov	r2, r0
 800051a:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <Init_Events+0x64>)
 800051c:	601a      	str	r2, [r3, #0]
  if (tid_Thread_EventReceiver == NULL) {
 800051e:	4b09      	ldr	r3, [pc, #36]	; (8000544 <Init_Events+0x64>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d102      	bne.n	800052c <Init_Events+0x4c>
    return(-1);
 8000526:	f04f 33ff 	mov.w	r3, #4294967295
 800052a:	e000      	b.n	800052e <Init_Events+0x4e>
  }
  return(0);
 800052c:	2300      	movs	r3, #0
}
 800052e:	4618      	mov	r0, r3
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	2000493c 	.word	0x2000493c
 8000538:	0800078d 	.word	0x0800078d
 800053c:	20004934 	.word	0x20004934
 8000540:	080007ad 	.word	0x080007ad
 8000544:	20004938 	.word	0x20004938

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b08e      	sub	sp, #56	; 0x38
 800054c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f000 fabb 	bl	8000ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f829 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000556:	f000 f8b9 	bl	80006cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800055a:	f000 f88d 	bl	8000678 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  osKernelInitialize();
 800055e:	f001 ff47 	bl	80023f0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  Init_Events();
 8000562:	f7ff ffbd 	bl	80004e0 <Init_Events>

  /* USER CODE BEGIN RTOS_THREADS */

    char txData[50]= "";;
 8000566:	2300      	movs	r3, #0
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	f107 0308 	add.w	r3, r7, #8
 800056e:	222e      	movs	r2, #46	; 0x2e
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f005 f8e1 	bl	800573a <memset>
    sprintf(txData, "%s", "inicio\r\n");
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	4a09      	ldr	r2, [pc, #36]	; (80005a0 <main+0x58>)
 800057c:	ca07      	ldmia	r2, {r0, r1, r2}
 800057e:	c303      	stmia	r3!, {r0, r1}
 8000580:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, (uint8_t *) txData, sizeof(txData),1000);
 8000582:	1d39      	adds	r1, r7, #4
 8000584:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000588:	2232      	movs	r2, #50	; 0x32
 800058a:	4806      	ldr	r0, [pc, #24]	; (80005a4 <main+0x5c>)
 800058c:	f001 fc43 	bl	8001e16 <HAL_UART_Transmit>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000590:	f001 ff62 	bl	8002458 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  osDelay(1000);
 8000594:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000598:	f002 f86e 	bl	8002678 <osDelay>
 800059c:	e7fa      	b.n	8000594 <main+0x4c>
 800059e:	bf00      	nop
 80005a0:	08005764 	.word	0x08005764
 80005a4:	20004940 	.word	0x20004940

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	; 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	2230      	movs	r2, #48	; 0x30
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f005 f8bf 	bl	800573a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005cc:	2300      	movs	r3, #0
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	4b27      	ldr	r3, [pc, #156]	; (8000670 <SystemClock_Config+0xc8>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	4a26      	ldr	r2, [pc, #152]	; (8000670 <SystemClock_Config+0xc8>)
 80005d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005da:	6413      	str	r3, [r2, #64]	; 0x40
 80005dc:	4b24      	ldr	r3, [pc, #144]	; (8000670 <SystemClock_Config+0xc8>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e8:	2300      	movs	r3, #0
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	4b21      	ldr	r3, [pc, #132]	; (8000674 <SystemClock_Config+0xcc>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a20      	ldr	r2, [pc, #128]	; (8000674 <SystemClock_Config+0xcc>)
 80005f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <SystemClock_Config+0xcc>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000604:	2301      	movs	r3, #1
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000608:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	2302      	movs	r3, #2
 8000610:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000612:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000618:	2304      	movs	r3, #4
 800061a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800061c:	2364      	movs	r3, #100	; 0x64
 800061e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000624:	2304      	movs	r3, #4
 8000626:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0320 	add.w	r3, r7, #32
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fd25 	bl	800107c <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000638:	f000 f8ee 	bl	8000818 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2302      	movs	r3, #2
 8000642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	2103      	movs	r1, #3
 8000658:	4618      	mov	r0, r3
 800065a:	f000 ff51 	bl	8001500 <HAL_RCC_ClockConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000664:	f000 f8d8 	bl	8000818 <Error_Handler>
  }
}
 8000668:	bf00      	nop
 800066a:	3750      	adds	r7, #80	; 0x50
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800067e:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <MX_USART2_UART_Init+0x50>)
 8000680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_USART2_UART_Init+0x4c>)
 80006b0:	f001 fb64 	bl	8001d7c <HAL_UART_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ba:	f000 f8ad 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20004940 	.word	0x20004940
 80006c8:	40004400 	.word	0x40004400

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	4b26      	ldr	r3, [pc, #152]	; (8000780 <MX_GPIO_Init+0xb4>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a25      	ldr	r2, [pc, #148]	; (8000780 <MX_GPIO_Init+0xb4>)
 80006ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b23      	ldr	r3, [pc, #140]	; (8000780 <MX_GPIO_Init+0xb4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <MX_GPIO_Init+0xb4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a1e      	ldr	r2, [pc, #120]	; (8000780 <MX_GPIO_Init+0xb4>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <MX_GPIO_Init+0xb4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	4b18      	ldr	r3, [pc, #96]	; (8000780 <MX_GPIO_Init+0xb4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a17      	ldr	r2, [pc, #92]	; (8000780 <MX_GPIO_Init+0xb4>)
 8000724:	f043 0308 	orr.w	r3, r3, #8
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <MX_GPIO_Init+0xb4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0308 	and.w	r3, r3, #8
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800073c:	4811      	ldr	r0, [pc, #68]	; (8000784 <MX_GPIO_Init+0xb8>)
 800073e:	f000 fc69 	bl	8001014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000742:	2301      	movs	r3, #1
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	4619      	mov	r1, r3
 8000754:	480c      	ldr	r0, [pc, #48]	; (8000788 <MX_GPIO_Init+0xbc>)
 8000756:	f000 fadb 	bl	8000d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800075a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800075e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000760:	2301      	movs	r3, #1
 8000762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	4619      	mov	r1, r3
 8000772:	4804      	ldr	r0, [pc, #16]	; (8000784 <MX_GPIO_Init+0xb8>)
 8000774:	f000 facc 	bl	8000d10 <HAL_GPIO_Init>

}
 8000778:	bf00      	nop
 800077a:	3720      	adds	r7, #32
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40023800 	.word	0x40023800
 8000784:	40020c00 	.word	0x40020c00
 8000788:	40020000 	.word	0x40020000

0800078c <Thread_EventSender>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */

void Thread_EventSender (void *argument) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]

  while (1) {
    osEventFlagsSet(evt_id, FLAGS_MSK1);
 8000794:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <Thread_EventSender+0x1c>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2101      	movs	r1, #1
 800079a:	4618      	mov	r0, r3
 800079c:	f001 ffec 	bl	8002778 <osEventFlagsSet>
    osThreadYield();                            // suspend thread
 80007a0:	f001 ff38 	bl	8002614 <osThreadYield>
    osEventFlagsSet(evt_id, FLAGS_MSK1);
 80007a4:	e7f6      	b.n	8000794 <Thread_EventSender+0x8>
 80007a6:	bf00      	nop
 80007a8:	2000493c 	.word	0x2000493c

080007ac <Thread_EventReceiver>:
  }
}

void Thread_EventReceiver (void *argument) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  uint32_t flags;

  while (1) {
    flags = osEventFlagsWait(evt_id, FLAGS_MSK1, osFlagsWaitAny, osWaitForever);
 80007b4:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <Thread_EventReceiver+0x40>)
 80007b6:	6818      	ldr	r0, [r3, #0]
 80007b8:	f04f 33ff 	mov.w	r3, #4294967295
 80007bc:	2200      	movs	r2, #0
 80007be:	2101      	movs	r1, #1
 80007c0:	f002 f832 	bl	8002828 <osEventFlagsWait>
 80007c4:	60f8      	str	r0, [r7, #12]
    if(flags == FLAGS_MSK1)
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d1f3      	bne.n	80007b4 <Thread_EventReceiver+0x8>
    {
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80007cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007d0:	4807      	ldr	r0, [pc, #28]	; (80007f0 <Thread_EventReceiver+0x44>)
 80007d2:	f000 fc38 	bl	8001046 <HAL_GPIO_TogglePin>
    	osDelay(1000);
 80007d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007da:	f001 ff4d 	bl	8002678 <osDelay>
    	osEventFlagsDelete(evt_id);
 80007de:	4b03      	ldr	r3, [pc, #12]	; (80007ec <Thread_EventReceiver+0x40>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f002 f896 	bl	8002914 <osEventFlagsDelete>
    flags = osEventFlagsWait(evt_id, FLAGS_MSK1, osFlagsWaitAny, osWaitForever);
 80007e8:	e7e4      	b.n	80007b4 <Thread_EventReceiver+0x8>
 80007ea:	bf00      	nop
 80007ec:	2000493c 	.word	0x2000493c
 80007f0:	40020c00 	.word	0x40020c00

080007f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a04      	ldr	r2, [pc, #16]	; (8000814 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d101      	bne.n	800080a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000806:	f000 f981 	bl	8000b0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40010000 	.word	0x40010000

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
	...

08000828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b12      	ldr	r3, [pc, #72]	; (800087c <HAL_MspInit+0x54>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000836:	4a11      	ldr	r2, [pc, #68]	; (800087c <HAL_MspInit+0x54>)
 8000838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083c:	6453      	str	r3, [r2, #68]	; 0x44
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <HAL_MspInit+0x54>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <HAL_MspInit+0x54>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <HAL_MspInit+0x54>)
 8000854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000858:	6413      	str	r3, [r2, #64]	; 0x40
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <HAL_MspInit+0x54>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	210f      	movs	r1, #15
 800086a:	f06f 0001 	mvn.w	r0, #1
 800086e:	f000 fa25 	bl	8000cbc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800

08000880 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	; 0x28
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a19      	ldr	r2, [pc, #100]	; (8000904 <HAL_UART_MspInit+0x84>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d12b      	bne.n	80008fa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	4b18      	ldr	r3, [pc, #96]	; (8000908 <HAL_UART_MspInit+0x88>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	4a17      	ldr	r2, [pc, #92]	; (8000908 <HAL_UART_MspInit+0x88>)
 80008ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b0:	6413      	str	r3, [r2, #64]	; 0x40
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <HAL_UART_MspInit+0x88>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <HAL_UART_MspInit+0x88>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a10      	ldr	r2, [pc, #64]	; (8000908 <HAL_UART_MspInit+0x88>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <HAL_UART_MspInit+0x88>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008da:	230c      	movs	r3, #12
 80008dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e6:	2303      	movs	r3, #3
 80008e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008ea:	2307      	movs	r3, #7
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	4805      	ldr	r0, [pc, #20]	; (800090c <HAL_UART_MspInit+0x8c>)
 80008f6:	f000 fa0b 	bl	8000d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008fa:	bf00      	nop
 80008fc:	3728      	adds	r7, #40	; 0x28
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40004400 	.word	0x40004400
 8000908:	40023800 	.word	0x40023800
 800090c:	40020000 	.word	0x40020000

08000910 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08c      	sub	sp, #48	; 0x30
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000920:	2200      	movs	r2, #0
 8000922:	6879      	ldr	r1, [r7, #4]
 8000924:	2019      	movs	r0, #25
 8000926:	f000 f9c9 	bl	8000cbc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800092a:	2019      	movs	r0, #25
 800092c:	f000 f9e2 	bl	8000cf4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000930:	2300      	movs	r3, #0
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <HAL_InitTick+0xa0>)
 8000936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000938:	4a1d      	ldr	r2, [pc, #116]	; (80009b0 <HAL_InitTick+0xa0>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	6453      	str	r3, [r2, #68]	; 0x44
 8000940:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <HAL_InitTick+0xa0>)
 8000942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000944:	f003 0301 	and.w	r3, r3, #1
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800094c:	f107 0210 	add.w	r2, r7, #16
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4611      	mov	r1, r2
 8000956:	4618      	mov	r0, r3
 8000958:	f000 ffc0 	bl	80018dc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800095c:	f000 ffaa 	bl	80018b4 <HAL_RCC_GetPCLK2Freq>
 8000960:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000964:	4a13      	ldr	r2, [pc, #76]	; (80009b4 <HAL_InitTick+0xa4>)
 8000966:	fba2 2303 	umull	r2, r3, r2, r3
 800096a:	0c9b      	lsrs	r3, r3, #18
 800096c:	3b01      	subs	r3, #1
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000970:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <HAL_InitTick+0xa8>)
 8000972:	4a12      	ldr	r2, [pc, #72]	; (80009bc <HAL_InitTick+0xac>)
 8000974:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <HAL_InitTick+0xa8>)
 8000978:	f240 32e7 	movw	r2, #999	; 0x3e7
 800097c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800097e:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <HAL_InitTick+0xa8>)
 8000980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000982:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <HAL_InitTick+0xa8>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <HAL_InitTick+0xa8>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000990:	4809      	ldr	r0, [pc, #36]	; (80009b8 <HAL_InitTick+0xa8>)
 8000992:	f000 ffd5 	bl	8001940 <HAL_TIM_Base_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d104      	bne.n	80009a6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800099c:	4806      	ldr	r0, [pc, #24]	; (80009b8 <HAL_InitTick+0xa8>)
 800099e:	f001 f804 	bl	80019aa <HAL_TIM_Base_Start_IT>
 80009a2:	4603      	mov	r3, r0
 80009a4:	e000      	b.n	80009a8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3730      	adds	r7, #48	; 0x30
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40023800 	.word	0x40023800
 80009b4:	431bde83 	.word	0x431bde83
 80009b8:	20004980 	.word	0x20004980
 80009bc:	40010000 	.word	0x40010000

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <HardFault_Handler+0x4>

080009d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <MemManage_Handler+0x4>

080009da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <BusFault_Handler+0x4>

080009e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <UsageFault_Handler+0x4>

080009e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009f8:	4802      	ldr	r0, [pc, #8]	; (8000a04 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009fa:	f000 fffa 	bl	80019f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20004980 	.word	0x20004980

08000a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a0c:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <SystemInit+0x60>)
 8000a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a12:	4a15      	ldr	r2, [pc, #84]	; (8000a68 <SystemInit+0x60>)
 8000a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a1c:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <SystemInit+0x64>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <SystemInit+0x64>)
 8000a22:	f043 0301 	orr.w	r3, r3, #1
 8000a26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a28:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <SystemInit+0x64>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <SystemInit+0x64>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <SystemInit+0x64>)
 8000a34:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a3c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <SystemInit+0x64>)
 8000a40:	4a0b      	ldr	r2, [pc, #44]	; (8000a70 <SystemInit+0x68>)
 8000a42:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <SystemInit+0x64>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <SystemInit+0x64>)
 8000a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a4e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <SystemInit+0x64>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a56:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <SystemInit+0x60>)
 8000a58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a5c:	609a      	str	r2, [r3, #8]
#endif
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000ed00 	.word	0xe000ed00
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	24003010 	.word	0x24003010

08000a74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a7a:	e003      	b.n	8000a84 <LoopCopyDataInit>

08000a7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a82:	3104      	adds	r1, #4

08000a84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a84:	480b      	ldr	r0, [pc, #44]	; (8000ab4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a8c:	d3f6      	bcc.n	8000a7c <CopyDataInit>
  ldr  r2, =_sbss
 8000a8e:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a90:	e002      	b.n	8000a98 <LoopFillZerobss>

08000a92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a94:	f842 3b04 	str.w	r3, [r2], #4

08000a98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a98:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a9c:	d3f9      	bcc.n	8000a92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a9e:	f7ff ffb3 	bl	8000a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aa2:	f004 fe1b 	bl	80056dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aa6:	f7ff fd4f 	bl	8000548 <main>
  bx  lr    
 8000aaa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ab0:	080057b0 	.word	0x080057b0
  ldr  r0, =_sdata
 8000ab4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ab8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000abc:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000ac0:	20004a04 	.word	0x20004a04

08000ac4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac4:	e7fe      	b.n	8000ac4 <ADC_IRQHandler>
	...

08000ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <HAL_Init+0x40>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	; (8000b08 <HAL_Init+0x40>)
 8000ad2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ad6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <HAL_Init+0x40>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <HAL_Init+0x40>)
 8000ade:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ae2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <HAL_Init+0x40>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <HAL_Init+0x40>)
 8000aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af0:	2003      	movs	r0, #3
 8000af2:	f000 f8d8 	bl	8000ca6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af6:	2000      	movs	r0, #0
 8000af8:	f7ff ff0a 	bl	8000910 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000afc:	f7ff fe94 	bl	8000828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023c00 	.word	0x40023c00

08000b0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_IncTick+0x20>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_IncTick+0x24>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <HAL_IncTick+0x24>)
 8000b1e:	6013      	str	r3, [r2, #0]
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	20000004 	.word	0x20000004
 8000b30:	200049c0 	.word	0x200049c0

08000b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return uwTick;
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <HAL_GetTick+0x14>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	200049c0 	.word	0x200049c0

08000b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7e:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	60d3      	str	r3, [r2, #12]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <__NVIC_GetPriorityGrouping+0x18>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	db0b      	blt.n	8000bda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	f003 021f 	and.w	r2, r3, #31
 8000bc8:	4907      	ldr	r1, [pc, #28]	; (8000be8 <__NVIC_EnableIRQ+0x38>)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	095b      	lsrs	r3, r3, #5
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000e100 	.word	0xe000e100

08000bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	db0a      	blt.n	8000c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	490c      	ldr	r1, [pc, #48]	; (8000c38 <__NVIC_SetPriority+0x4c>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	0112      	lsls	r2, r2, #4
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	440b      	add	r3, r1
 8000c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c14:	e00a      	b.n	8000c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4908      	ldr	r1, [pc, #32]	; (8000c3c <__NVIC_SetPriority+0x50>)
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	f003 030f 	and.w	r3, r3, #15
 8000c22:	3b04      	subs	r3, #4
 8000c24:	0112      	lsls	r2, r2, #4
 8000c26:	b2d2      	uxtb	r2, r2
 8000c28:	440b      	add	r3, r1
 8000c2a:	761a      	strb	r2, [r3, #24]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000e100 	.word	0xe000e100
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b089      	sub	sp, #36	; 0x24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	f1c3 0307 	rsb	r3, r3, #7
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	bf28      	it	cs
 8000c5e:	2304      	movcs	r3, #4
 8000c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3304      	adds	r3, #4
 8000c66:	2b06      	cmp	r3, #6
 8000c68:	d902      	bls.n	8000c70 <NVIC_EncodePriority+0x30>
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3b03      	subs	r3, #3
 8000c6e:	e000      	b.n	8000c72 <NVIC_EncodePriority+0x32>
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	f04f 32ff 	mov.w	r2, #4294967295
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	401a      	ands	r2, r3
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c88:	f04f 31ff 	mov.w	r1, #4294967295
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c92:	43d9      	mvns	r1, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	4313      	orrs	r3, r2
         );
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3724      	adds	r7, #36	; 0x24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff ff4c 	bl	8000b4c <__NVIC_SetPriorityGrouping>
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
 8000cc8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cce:	f7ff ff61 	bl	8000b94 <__NVIC_GetPriorityGrouping>
 8000cd2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	68b9      	ldr	r1, [r7, #8]
 8000cd8:	6978      	ldr	r0, [r7, #20]
 8000cda:	f7ff ffb1 	bl	8000c40 <NVIC_EncodePriority>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ff80 	bl	8000bec <__NVIC_SetPriority>
}
 8000cec:	bf00      	nop
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ff54 	bl	8000bb0 <__NVIC_EnableIRQ>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b089      	sub	sp, #36	; 0x24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
 8000d2a:	e159      	b.n	8000fe0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	f040 8148 	bne.w	8000fda <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d003      	beq.n	8000d5a <HAL_GPIO_Init+0x4a>
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	2b12      	cmp	r3, #18
 8000d58:	d123      	bne.n	8000da2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	08da      	lsrs	r2, r3, #3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	3208      	adds	r2, #8
 8000d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	220f      	movs	r2, #15
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43db      	mvns	r3, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	691a      	ldr	r2, [r3, #16]
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	f003 0307 	and.w	r3, r3, #7
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	08da      	lsrs	r2, r3, #3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3208      	adds	r2, #8
 8000d9c:	69b9      	ldr	r1, [r7, #24]
 8000d9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	2203      	movs	r2, #3
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4013      	ands	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 0203 	and.w	r2, r3, #3
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d00b      	beq.n	8000df6 <HAL_GPIO_Init+0xe6>
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d007      	beq.n	8000df6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dea:	2b11      	cmp	r3, #17
 8000dec:	d003      	beq.n	8000df6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	2b12      	cmp	r3, #18
 8000df4:	d130      	bne.n	8000e58 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	2203      	movs	r2, #3
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43db      	mvns	r3, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	68da      	ldr	r2, [r3, #12]
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	091b      	lsrs	r3, r3, #4
 8000e42:	f003 0201 	and.w	r2, r3, #1
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	2203      	movs	r2, #3
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	689a      	ldr	r2, [r3, #8]
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f000 80a2 	beq.w	8000fda <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b56      	ldr	r3, [pc, #344]	; (8000ff4 <HAL_GPIO_Init+0x2e4>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	4a55      	ldr	r2, [pc, #340]	; (8000ff4 <HAL_GPIO_Init+0x2e4>)
 8000ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea6:	4b53      	ldr	r3, [pc, #332]	; (8000ff4 <HAL_GPIO_Init+0x2e4>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eb2:	4a51      	ldr	r2, [pc, #324]	; (8000ff8 <HAL_GPIO_Init+0x2e8>)
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	089b      	lsrs	r3, r3, #2
 8000eb8:	3302      	adds	r3, #2
 8000eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	220f      	movs	r2, #15
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a48      	ldr	r2, [pc, #288]	; (8000ffc <HAL_GPIO_Init+0x2ec>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d019      	beq.n	8000f12 <HAL_GPIO_Init+0x202>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a47      	ldr	r2, [pc, #284]	; (8001000 <HAL_GPIO_Init+0x2f0>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d013      	beq.n	8000f0e <HAL_GPIO_Init+0x1fe>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a46      	ldr	r2, [pc, #280]	; (8001004 <HAL_GPIO_Init+0x2f4>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d00d      	beq.n	8000f0a <HAL_GPIO_Init+0x1fa>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a45      	ldr	r2, [pc, #276]	; (8001008 <HAL_GPIO_Init+0x2f8>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d007      	beq.n	8000f06 <HAL_GPIO_Init+0x1f6>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a44      	ldr	r2, [pc, #272]	; (800100c <HAL_GPIO_Init+0x2fc>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d101      	bne.n	8000f02 <HAL_GPIO_Init+0x1f2>
 8000efe:	2304      	movs	r3, #4
 8000f00:	e008      	b.n	8000f14 <HAL_GPIO_Init+0x204>
 8000f02:	2307      	movs	r3, #7
 8000f04:	e006      	b.n	8000f14 <HAL_GPIO_Init+0x204>
 8000f06:	2303      	movs	r3, #3
 8000f08:	e004      	b.n	8000f14 <HAL_GPIO_Init+0x204>
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	e002      	b.n	8000f14 <HAL_GPIO_Init+0x204>
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e000      	b.n	8000f14 <HAL_GPIO_Init+0x204>
 8000f12:	2300      	movs	r3, #0
 8000f14:	69fa      	ldr	r2, [r7, #28]
 8000f16:	f002 0203 	and.w	r2, r2, #3
 8000f1a:	0092      	lsls	r2, r2, #2
 8000f1c:	4093      	lsls	r3, r2
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f24:	4934      	ldr	r1, [pc, #208]	; (8000ff8 <HAL_GPIO_Init+0x2e8>)
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	089b      	lsrs	r3, r3, #2
 8000f2a:	3302      	adds	r3, #2
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f32:	4b37      	ldr	r3, [pc, #220]	; (8001010 <HAL_GPIO_Init+0x300>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f56:	4a2e      	ldr	r2, [pc, #184]	; (8001010 <HAL_GPIO_Init+0x300>)
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f5c:	4b2c      	ldr	r3, [pc, #176]	; (8001010 <HAL_GPIO_Init+0x300>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d003      	beq.n	8000f80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f80:	4a23      	ldr	r2, [pc, #140]	; (8001010 <HAL_GPIO_Init+0x300>)
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f86:	4b22      	ldr	r3, [pc, #136]	; (8001010 <HAL_GPIO_Init+0x300>)
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4013      	ands	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000faa:	4a19      	ldr	r2, [pc, #100]	; (8001010 <HAL_GPIO_Init+0x300>)
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fb0:	4b17      	ldr	r3, [pc, #92]	; (8001010 <HAL_GPIO_Init+0x300>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fd4:	4a0e      	ldr	r2, [pc, #56]	; (8001010 <HAL_GPIO_Init+0x300>)
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	61fb      	str	r3, [r7, #28]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	2b0f      	cmp	r3, #15
 8000fe4:	f67f aea2 	bls.w	8000d2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fe8:	bf00      	nop
 8000fea:	3724      	adds	r7, #36	; 0x24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40013800 	.word	0x40013800
 8000ffc:	40020000 	.word	0x40020000
 8001000:	40020400 	.word	0x40020400
 8001004:	40020800 	.word	0x40020800
 8001008:	40020c00 	.word	0x40020c00
 800100c:	40021000 	.word	0x40021000
 8001010:	40013c00 	.word	0x40013c00

08001014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	807b      	strh	r3, [r7, #2]
 8001020:	4613      	mov	r3, r2
 8001022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001024:	787b      	ldrb	r3, [r7, #1]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800102a:	887a      	ldrh	r2, [r7, #2]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001030:	e003      	b.n	800103a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001032:	887b      	ldrh	r3, [r7, #2]
 8001034:	041a      	lsls	r2, r3, #16
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	619a      	str	r2, [r3, #24]
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
 800104e:	460b      	mov	r3, r1
 8001050:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	695a      	ldr	r2, [r3, #20]
 8001056:	887b      	ldrh	r3, [r7, #2]
 8001058:	401a      	ands	r2, r3
 800105a:	887b      	ldrh	r3, [r7, #2]
 800105c:	429a      	cmp	r2, r3
 800105e:	d104      	bne.n	800106a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001060:	887b      	ldrh	r3, [r7, #2]
 8001062:	041a      	lsls	r2, r3, #16
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001068:	e002      	b.n	8001070 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800106a:	887a      	ldrh	r2, [r7, #2]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	619a      	str	r2, [r3, #24]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e22d      	b.n	80014ea <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	2b00      	cmp	r3, #0
 8001098:	d075      	beq.n	8001186 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800109a:	4ba3      	ldr	r3, [pc, #652]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f003 030c 	and.w	r3, r3, #12
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	d00c      	beq.n	80010c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010a6:	4ba0      	ldr	r3, [pc, #640]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010ae:	2b08      	cmp	r3, #8
 80010b0:	d112      	bne.n	80010d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010b2:	4b9d      	ldr	r3, [pc, #628]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010be:	d10b      	bne.n	80010d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c0:	4b99      	ldr	r3, [pc, #612]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d05b      	beq.n	8001184 <HAL_RCC_OscConfig+0x108>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d157      	bne.n	8001184 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e208      	b.n	80014ea <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e0:	d106      	bne.n	80010f0 <HAL_RCC_OscConfig+0x74>
 80010e2:	4b91      	ldr	r3, [pc, #580]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a90      	ldr	r2, [pc, #576]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 80010e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	e01d      	b.n	800112c <HAL_RCC_OscConfig+0xb0>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010f8:	d10c      	bne.n	8001114 <HAL_RCC_OscConfig+0x98>
 80010fa:	4b8b      	ldr	r3, [pc, #556]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a8a      	ldr	r2, [pc, #552]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 8001100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	4b88      	ldr	r3, [pc, #544]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a87      	ldr	r2, [pc, #540]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 800110c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	e00b      	b.n	800112c <HAL_RCC_OscConfig+0xb0>
 8001114:	4b84      	ldr	r3, [pc, #528]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a83      	ldr	r2, [pc, #524]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 800111a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	4b81      	ldr	r3, [pc, #516]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a80      	ldr	r2, [pc, #512]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 8001126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800112a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d013      	beq.n	800115c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001134:	f7ff fcfe 	bl	8000b34 <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800113c:	f7ff fcfa 	bl	8000b34 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b64      	cmp	r3, #100	; 0x64
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e1cd      	b.n	80014ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114e:	4b76      	ldr	r3, [pc, #472]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d0f0      	beq.n	800113c <HAL_RCC_OscConfig+0xc0>
 800115a:	e014      	b.n	8001186 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115c:	f7ff fcea 	bl	8000b34 <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001164:	f7ff fce6 	bl	8000b34 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b64      	cmp	r3, #100	; 0x64
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e1b9      	b.n	80014ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001176:	4b6c      	ldr	r3, [pc, #432]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f0      	bne.n	8001164 <HAL_RCC_OscConfig+0xe8>
 8001182:	e000      	b.n	8001186 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d063      	beq.n	800125a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001192:	4b65      	ldr	r3, [pc, #404]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f003 030c 	and.w	r3, r3, #12
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00b      	beq.n	80011b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800119e:	4b62      	ldr	r3, [pc, #392]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011a6:	2b08      	cmp	r3, #8
 80011a8:	d11c      	bne.n	80011e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011aa:	4b5f      	ldr	r3, [pc, #380]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d116      	bne.n	80011e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b6:	4b5c      	ldr	r3, [pc, #368]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d005      	beq.n	80011ce <HAL_RCC_OscConfig+0x152>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d001      	beq.n	80011ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e18d      	b.n	80014ea <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ce:	4b56      	ldr	r3, [pc, #344]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	4952      	ldr	r1, [pc, #328]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 80011de:	4313      	orrs	r3, r2
 80011e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e2:	e03a      	b.n	800125a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d020      	beq.n	800122e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011ec:	4b4f      	ldr	r3, [pc, #316]	; (800132c <HAL_RCC_OscConfig+0x2b0>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f2:	f7ff fc9f 	bl	8000b34 <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011fa:	f7ff fc9b 	bl	8000b34 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e16e      	b.n	80014ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120c:	4b46      	ldr	r3, [pc, #280]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0f0      	beq.n	80011fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001218:	4b43      	ldr	r3, [pc, #268]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	4940      	ldr	r1, [pc, #256]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 8001228:	4313      	orrs	r3, r2
 800122a:	600b      	str	r3, [r1, #0]
 800122c:	e015      	b.n	800125a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800122e:	4b3f      	ldr	r3, [pc, #252]	; (800132c <HAL_RCC_OscConfig+0x2b0>)
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001234:	f7ff fc7e 	bl	8000b34 <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800123a:	e008      	b.n	800124e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800123c:	f7ff fc7a 	bl	8000b34 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e14d      	b.n	80014ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800124e:	4b36      	ldr	r3, [pc, #216]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d1f0      	bne.n	800123c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	2b00      	cmp	r3, #0
 8001264:	d030      	beq.n	80012c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d016      	beq.n	800129c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800126e:	4b30      	ldr	r3, [pc, #192]	; (8001330 <HAL_RCC_OscConfig+0x2b4>)
 8001270:	2201      	movs	r2, #1
 8001272:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001274:	f7ff fc5e 	bl	8000b34 <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800127c:	f7ff fc5a 	bl	8000b34 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e12d      	b.n	80014ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800128e:	4b26      	ldr	r3, [pc, #152]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 8001290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0f0      	beq.n	800127c <HAL_RCC_OscConfig+0x200>
 800129a:	e015      	b.n	80012c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800129c:	4b24      	ldr	r3, [pc, #144]	; (8001330 <HAL_RCC_OscConfig+0x2b4>)
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a2:	f7ff fc47 	bl	8000b34 <HAL_GetTick>
 80012a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a8:	e008      	b.n	80012bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012aa:	f7ff fc43 	bl	8000b34 <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d901      	bls.n	80012bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e116      	b.n	80014ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012bc:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 80012be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1f0      	bne.n	80012aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f000 80a0 	beq.w	8001416 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012da:	4b13      	ldr	r3, [pc, #76]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10f      	bne.n	8001306 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	4a0e      	ldr	r2, [pc, #56]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 80012f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f4:	6413      	str	r3, [r2, #64]	; 0x40
 80012f6:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <HAL_RCC_OscConfig+0x2ac>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001302:	2301      	movs	r3, #1
 8001304:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <HAL_RCC_OscConfig+0x2b8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130e:	2b00      	cmp	r3, #0
 8001310:	d121      	bne.n	8001356 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001312:	4b08      	ldr	r3, [pc, #32]	; (8001334 <HAL_RCC_OscConfig+0x2b8>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a07      	ldr	r2, [pc, #28]	; (8001334 <HAL_RCC_OscConfig+0x2b8>)
 8001318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800131c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800131e:	f7ff fc09 	bl	8000b34 <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001324:	e011      	b.n	800134a <HAL_RCC_OscConfig+0x2ce>
 8001326:	bf00      	nop
 8001328:	40023800 	.word	0x40023800
 800132c:	42470000 	.word	0x42470000
 8001330:	42470e80 	.word	0x42470e80
 8001334:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001338:	f7ff fbfc 	bl	8000b34 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e0cf      	b.n	80014ea <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800134a:	4b6a      	ldr	r3, [pc, #424]	; (80014f4 <HAL_RCC_OscConfig+0x478>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0f0      	beq.n	8001338 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d106      	bne.n	800136c <HAL_RCC_OscConfig+0x2f0>
 800135e:	4b66      	ldr	r3, [pc, #408]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 8001360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001362:	4a65      	ldr	r2, [pc, #404]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6713      	str	r3, [r2, #112]	; 0x70
 800136a:	e01c      	b.n	80013a6 <HAL_RCC_OscConfig+0x32a>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	2b05      	cmp	r3, #5
 8001372:	d10c      	bne.n	800138e <HAL_RCC_OscConfig+0x312>
 8001374:	4b60      	ldr	r3, [pc, #384]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 8001376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001378:	4a5f      	ldr	r2, [pc, #380]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 800137a:	f043 0304 	orr.w	r3, r3, #4
 800137e:	6713      	str	r3, [r2, #112]	; 0x70
 8001380:	4b5d      	ldr	r3, [pc, #372]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 8001382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001384:	4a5c      	ldr	r2, [pc, #368]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	6713      	str	r3, [r2, #112]	; 0x70
 800138c:	e00b      	b.n	80013a6 <HAL_RCC_OscConfig+0x32a>
 800138e:	4b5a      	ldr	r3, [pc, #360]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 8001390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001392:	4a59      	ldr	r2, [pc, #356]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 8001394:	f023 0301 	bic.w	r3, r3, #1
 8001398:	6713      	str	r3, [r2, #112]	; 0x70
 800139a:	4b57      	ldr	r3, [pc, #348]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 800139c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800139e:	4a56      	ldr	r2, [pc, #344]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 80013a0:	f023 0304 	bic.w	r3, r3, #4
 80013a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d015      	beq.n	80013da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ae:	f7ff fbc1 	bl	8000b34 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b4:	e00a      	b.n	80013cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013b6:	f7ff fbbd 	bl	8000b34 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e08e      	b.n	80014ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013cc:	4b4a      	ldr	r3, [pc, #296]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 80013ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0ee      	beq.n	80013b6 <HAL_RCC_OscConfig+0x33a>
 80013d8:	e014      	b.n	8001404 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013da:	f7ff fbab 	bl	8000b34 <HAL_GetTick>
 80013de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e0:	e00a      	b.n	80013f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013e2:	f7ff fba7 	bl	8000b34 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e078      	b.n	80014ea <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013f8:	4b3f      	ldr	r3, [pc, #252]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 80013fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1ee      	bne.n	80013e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001404:	7dfb      	ldrb	r3, [r7, #23]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d105      	bne.n	8001416 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800140a:	4b3b      	ldr	r3, [pc, #236]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	4a3a      	ldr	r2, [pc, #232]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 8001410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001414:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d064      	beq.n	80014e8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800141e:	4b36      	ldr	r3, [pc, #216]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 030c 	and.w	r3, r3, #12
 8001426:	2b08      	cmp	r3, #8
 8001428:	d05c      	beq.n	80014e4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	2b02      	cmp	r3, #2
 8001430:	d141      	bne.n	80014b6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001432:	4b32      	ldr	r3, [pc, #200]	; (80014fc <HAL_RCC_OscConfig+0x480>)
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001438:	f7ff fb7c 	bl	8000b34 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001440:	f7ff fb78 	bl	8000b34 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e04b      	b.n	80014ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001452:	4b29      	ldr	r3, [pc, #164]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69da      	ldr	r2, [r3, #28]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a1b      	ldr	r3, [r3, #32]
 8001466:	431a      	orrs	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146c:	019b      	lsls	r3, r3, #6
 800146e:	431a      	orrs	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001474:	085b      	lsrs	r3, r3, #1
 8001476:	3b01      	subs	r3, #1
 8001478:	041b      	lsls	r3, r3, #16
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001480:	061b      	lsls	r3, r3, #24
 8001482:	491d      	ldr	r1, [pc, #116]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 8001484:	4313      	orrs	r3, r2
 8001486:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001488:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <HAL_RCC_OscConfig+0x480>)
 800148a:	2201      	movs	r2, #1
 800148c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148e:	f7ff fb51 	bl	8000b34 <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001496:	f7ff fb4d 	bl	8000b34 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e020      	b.n	80014ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a8:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0f0      	beq.n	8001496 <HAL_RCC_OscConfig+0x41a>
 80014b4:	e018      	b.n	80014e8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <HAL_RCC_OscConfig+0x480>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7ff fb3a 	bl	8000b34 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c4:	f7ff fb36 	bl	8000b34 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e009      	b.n	80014ea <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <HAL_RCC_OscConfig+0x47c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f0      	bne.n	80014c4 <HAL_RCC_OscConfig+0x448>
 80014e2:	e001      	b.n	80014e8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e000      	b.n	80014ea <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40007000 	.word	0x40007000
 80014f8:	40023800 	.word	0x40023800
 80014fc:	42470060 	.word	0x42470060

08001500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d101      	bne.n	8001514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e0ca      	b.n	80016aa <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001514:	4b67      	ldr	r3, [pc, #412]	; (80016b4 <HAL_RCC_ClockConfig+0x1b4>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 030f 	and.w	r3, r3, #15
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	429a      	cmp	r2, r3
 8001520:	d90c      	bls.n	800153c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001522:	4b64      	ldr	r3, [pc, #400]	; (80016b4 <HAL_RCC_ClockConfig+0x1b4>)
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800152a:	4b62      	ldr	r3, [pc, #392]	; (80016b4 <HAL_RCC_ClockConfig+0x1b4>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d001      	beq.n	800153c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e0b6      	b.n	80016aa <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d020      	beq.n	800158a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001554:	4b58      	ldr	r3, [pc, #352]	; (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	4a57      	ldr	r2, [pc, #348]	; (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 800155a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800155e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0308 	and.w	r3, r3, #8
 8001568:	2b00      	cmp	r3, #0
 800156a:	d005      	beq.n	8001578 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800156c:	4b52      	ldr	r3, [pc, #328]	; (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	4a51      	ldr	r2, [pc, #324]	; (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001572:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001576:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001578:	4b4f      	ldr	r3, [pc, #316]	; (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	494c      	ldr	r1, [pc, #304]	; (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001586:	4313      	orrs	r3, r2
 8001588:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b00      	cmp	r3, #0
 8001594:	d044      	beq.n	8001620 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d107      	bne.n	80015ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159e:	4b46      	ldr	r3, [pc, #280]	; (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d119      	bne.n	80015de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e07d      	b.n	80016aa <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d003      	beq.n	80015be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	d107      	bne.n	80015ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015be:	4b3e      	ldr	r3, [pc, #248]	; (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d109      	bne.n	80015de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e06d      	b.n	80016aa <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ce:	4b3a      	ldr	r3, [pc, #232]	; (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e065      	b.n	80016aa <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015de:	4b36      	ldr	r3, [pc, #216]	; (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f023 0203 	bic.w	r2, r3, #3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	4933      	ldr	r1, [pc, #204]	; (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015f0:	f7ff faa0 	bl	8000b34 <HAL_GetTick>
 80015f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f6:	e00a      	b.n	800160e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f8:	f7ff fa9c 	bl	8000b34 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	f241 3288 	movw	r2, #5000	; 0x1388
 8001606:	4293      	cmp	r3, r2
 8001608:	d901      	bls.n	800160e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e04d      	b.n	80016aa <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800160e:	4b2a      	ldr	r3, [pc, #168]	; (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 020c 	and.w	r2, r3, #12
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	429a      	cmp	r2, r3
 800161e:	d1eb      	bne.n	80015f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001620:	4b24      	ldr	r3, [pc, #144]	; (80016b4 <HAL_RCC_ClockConfig+0x1b4>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 030f 	and.w	r3, r3, #15
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	429a      	cmp	r2, r3
 800162c:	d20c      	bcs.n	8001648 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162e:	4b21      	ldr	r3, [pc, #132]	; (80016b4 <HAL_RCC_ClockConfig+0x1b4>)
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001636:	4b1f      	ldr	r3, [pc, #124]	; (80016b4 <HAL_RCC_ClockConfig+0x1b4>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	429a      	cmp	r2, r3
 8001642:	d001      	beq.n	8001648 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e030      	b.n	80016aa <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	2b00      	cmp	r3, #0
 8001652:	d008      	beq.n	8001666 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001654:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	4915      	ldr	r1, [pc, #84]	; (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001662:	4313      	orrs	r3, r2
 8001664:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	2b00      	cmp	r3, #0
 8001670:	d009      	beq.n	8001686 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	490d      	ldr	r1, [pc, #52]	; (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001682:	4313      	orrs	r3, r2
 8001684:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001686:	f000 f81d 	bl	80016c4 <HAL_RCC_GetSysClockFreq>
 800168a:	4601      	mov	r1, r0
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <HAL_RCC_ClockConfig+0x1b8>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	091b      	lsrs	r3, r3, #4
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	4a09      	ldr	r2, [pc, #36]	; (80016bc <HAL_RCC_ClockConfig+0x1bc>)
 8001698:	5cd3      	ldrb	r3, [r2, r3]
 800169a:	fa21 f303 	lsr.w	r3, r1, r3
 800169e:	4a08      	ldr	r2, [pc, #32]	; (80016c0 <HAL_RCC_ClockConfig+0x1c0>)
 80016a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80016a2:	2000      	movs	r0, #0
 80016a4:	f7ff f934 	bl	8000910 <HAL_InitTick>

  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40023c00 	.word	0x40023c00
 80016b8:	40023800 	.word	0x40023800
 80016bc:	08005788 	.word	0x08005788
 80016c0:	20000000 	.word	0x20000000

080016c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	2300      	movs	r3, #0
 80016d4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016da:	4b63      	ldr	r3, [pc, #396]	; (8001868 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 030c 	and.w	r3, r3, #12
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	d007      	beq.n	80016f6 <HAL_RCC_GetSysClockFreq+0x32>
 80016e6:	2b08      	cmp	r3, #8
 80016e8:	d008      	beq.n	80016fc <HAL_RCC_GetSysClockFreq+0x38>
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f040 80b4 	bne.w	8001858 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016f0:	4b5e      	ldr	r3, [pc, #376]	; (800186c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80016f2:	60bb      	str	r3, [r7, #8]
       break;
 80016f4:	e0b3      	b.n	800185e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016f6:	4b5e      	ldr	r3, [pc, #376]	; (8001870 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80016f8:	60bb      	str	r3, [r7, #8]
      break;
 80016fa:	e0b0      	b.n	800185e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016fc:	4b5a      	ldr	r3, [pc, #360]	; (8001868 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001704:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001706:	4b58      	ldr	r3, [pc, #352]	; (8001868 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d04a      	beq.n	80017a8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001712:	4b55      	ldr	r3, [pc, #340]	; (8001868 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	099b      	lsrs	r3, r3, #6
 8001718:	f04f 0400 	mov.w	r4, #0
 800171c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	ea03 0501 	and.w	r5, r3, r1
 8001728:	ea04 0602 	and.w	r6, r4, r2
 800172c:	4629      	mov	r1, r5
 800172e:	4632      	mov	r2, r6
 8001730:	f04f 0300 	mov.w	r3, #0
 8001734:	f04f 0400 	mov.w	r4, #0
 8001738:	0154      	lsls	r4, r2, #5
 800173a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800173e:	014b      	lsls	r3, r1, #5
 8001740:	4619      	mov	r1, r3
 8001742:	4622      	mov	r2, r4
 8001744:	1b49      	subs	r1, r1, r5
 8001746:	eb62 0206 	sbc.w	r2, r2, r6
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	f04f 0400 	mov.w	r4, #0
 8001752:	0194      	lsls	r4, r2, #6
 8001754:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001758:	018b      	lsls	r3, r1, #6
 800175a:	1a5b      	subs	r3, r3, r1
 800175c:	eb64 0402 	sbc.w	r4, r4, r2
 8001760:	f04f 0100 	mov.w	r1, #0
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	00e2      	lsls	r2, r4, #3
 800176a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800176e:	00d9      	lsls	r1, r3, #3
 8001770:	460b      	mov	r3, r1
 8001772:	4614      	mov	r4, r2
 8001774:	195b      	adds	r3, r3, r5
 8001776:	eb44 0406 	adc.w	r4, r4, r6
 800177a:	f04f 0100 	mov.w	r1, #0
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	0262      	lsls	r2, r4, #9
 8001784:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001788:	0259      	lsls	r1, r3, #9
 800178a:	460b      	mov	r3, r1
 800178c:	4614      	mov	r4, r2
 800178e:	4618      	mov	r0, r3
 8001790:	4621      	mov	r1, r4
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f04f 0400 	mov.w	r4, #0
 8001798:	461a      	mov	r2, r3
 800179a:	4623      	mov	r3, r4
 800179c:	f7fe fd20 	bl	80001e0 <__aeabi_uldivmod>
 80017a0:	4603      	mov	r3, r0
 80017a2:	460c      	mov	r4, r1
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	e049      	b.n	800183c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017a8:	4b2f      	ldr	r3, [pc, #188]	; (8001868 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	099b      	lsrs	r3, r3, #6
 80017ae:	f04f 0400 	mov.w	r4, #0
 80017b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	ea03 0501 	and.w	r5, r3, r1
 80017be:	ea04 0602 	and.w	r6, r4, r2
 80017c2:	4629      	mov	r1, r5
 80017c4:	4632      	mov	r2, r6
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	f04f 0400 	mov.w	r4, #0
 80017ce:	0154      	lsls	r4, r2, #5
 80017d0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80017d4:	014b      	lsls	r3, r1, #5
 80017d6:	4619      	mov	r1, r3
 80017d8:	4622      	mov	r2, r4
 80017da:	1b49      	subs	r1, r1, r5
 80017dc:	eb62 0206 	sbc.w	r2, r2, r6
 80017e0:	f04f 0300 	mov.w	r3, #0
 80017e4:	f04f 0400 	mov.w	r4, #0
 80017e8:	0194      	lsls	r4, r2, #6
 80017ea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80017ee:	018b      	lsls	r3, r1, #6
 80017f0:	1a5b      	subs	r3, r3, r1
 80017f2:	eb64 0402 	sbc.w	r4, r4, r2
 80017f6:	f04f 0100 	mov.w	r1, #0
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	00e2      	lsls	r2, r4, #3
 8001800:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001804:	00d9      	lsls	r1, r3, #3
 8001806:	460b      	mov	r3, r1
 8001808:	4614      	mov	r4, r2
 800180a:	195b      	adds	r3, r3, r5
 800180c:	eb44 0406 	adc.w	r4, r4, r6
 8001810:	f04f 0100 	mov.w	r1, #0
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	02a2      	lsls	r2, r4, #10
 800181a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800181e:	0299      	lsls	r1, r3, #10
 8001820:	460b      	mov	r3, r1
 8001822:	4614      	mov	r4, r2
 8001824:	4618      	mov	r0, r3
 8001826:	4621      	mov	r1, r4
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f04f 0400 	mov.w	r4, #0
 800182e:	461a      	mov	r2, r3
 8001830:	4623      	mov	r3, r4
 8001832:	f7fe fcd5 	bl	80001e0 <__aeabi_uldivmod>
 8001836:	4603      	mov	r3, r0
 8001838:	460c      	mov	r4, r1
 800183a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800183c:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	0c1b      	lsrs	r3, r3, #16
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	3301      	adds	r3, #1
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	fbb2 f3f3 	udiv	r3, r2, r3
 8001854:	60bb      	str	r3, [r7, #8]
      break;
 8001856:	e002      	b.n	800185e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001858:	4b04      	ldr	r3, [pc, #16]	; (800186c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800185a:	60bb      	str	r3, [r7, #8]
      break;
 800185c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800185e:	68bb      	ldr	r3, [r7, #8]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001868:	40023800 	.word	0x40023800
 800186c:	00f42400 	.word	0x00f42400
 8001870:	007a1200 	.word	0x007a1200

08001874 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001878:	4b03      	ldr	r3, [pc, #12]	; (8001888 <HAL_RCC_GetHCLKFreq+0x14>)
 800187a:	681b      	ldr	r3, [r3, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	20000000 	.word	0x20000000

0800188c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001890:	f7ff fff0 	bl	8001874 <HAL_RCC_GetHCLKFreq>
 8001894:	4601      	mov	r1, r0
 8001896:	4b05      	ldr	r3, [pc, #20]	; (80018ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	0a9b      	lsrs	r3, r3, #10
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	4a03      	ldr	r2, [pc, #12]	; (80018b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018a2:	5cd3      	ldrb	r3, [r2, r3]
 80018a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40023800 	.word	0x40023800
 80018b0:	08005798 	.word	0x08005798

080018b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018b8:	f7ff ffdc 	bl	8001874 <HAL_RCC_GetHCLKFreq>
 80018bc:	4601      	mov	r1, r0
 80018be:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	0b5b      	lsrs	r3, r3, #13
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	4a03      	ldr	r2, [pc, #12]	; (80018d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018ca:	5cd3      	ldrb	r3, [r2, r3]
 80018cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40023800 	.word	0x40023800
 80018d8:	08005798 	.word	0x08005798

080018dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	220f      	movs	r2, #15
 80018ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_RCC_GetClockConfig+0x5c>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 0203 	and.w	r2, r3, #3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <HAL_RCC_GetClockConfig+0x5c>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <HAL_RCC_GetClockConfig+0x5c>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001910:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_RCC_GetClockConfig+0x5c>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	08db      	lsrs	r3, r3, #3
 8001916:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800191e:	4b07      	ldr	r3, [pc, #28]	; (800193c <HAL_RCC_GetClockConfig+0x60>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 020f 	and.w	r2, r3, #15
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	601a      	str	r2, [r3, #0]
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800
 800193c:	40023c00 	.word	0x40023c00

08001940 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e01d      	b.n	800198e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d106      	bne.n	800196c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f000 f815 	bl	8001996 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2202      	movs	r2, #2
 8001970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3304      	adds	r3, #4
 800197c:	4619      	mov	r1, r3
 800197e:	4610      	mov	r0, r2
 8001980:	f000 f968 	bl	8001c54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b085      	sub	sp, #20
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68da      	ldr	r2, [r3, #12]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f042 0201 	orr.w	r2, r2, #1
 80019c0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2b06      	cmp	r3, #6
 80019d2:	d007      	beq.n	80019e4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0201 	orr.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d122      	bne.n	8001a4e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d11b      	bne.n	8001a4e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f06f 0202 	mvn.w	r2, #2
 8001a1e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f8ee 	bl	8001c16 <HAL_TIM_IC_CaptureCallback>
 8001a3a:	e005      	b.n	8001a48 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f8e0 	bl	8001c02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f8f1 	bl	8001c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	691b      	ldr	r3, [r3, #16]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b04      	cmp	r3, #4
 8001a5a:	d122      	bne.n	8001aa2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d11b      	bne.n	8001aa2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f06f 0204 	mvn.w	r2, #4
 8001a72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2202      	movs	r2, #2
 8001a78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f8c4 	bl	8001c16 <HAL_TIM_IC_CaptureCallback>
 8001a8e:	e005      	b.n	8001a9c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 f8b6 	bl	8001c02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f8c7 	bl	8001c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	f003 0308 	and.w	r3, r3, #8
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d122      	bne.n	8001af6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	2b08      	cmp	r3, #8
 8001abc:	d11b      	bne.n	8001af6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f06f 0208 	mvn.w	r2, #8
 8001ac6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2204      	movs	r2, #4
 8001acc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 f89a 	bl	8001c16 <HAL_TIM_IC_CaptureCallback>
 8001ae2:	e005      	b.n	8001af0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 f88c 	bl	8001c02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f89d 	bl	8001c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	f003 0310 	and.w	r3, r3, #16
 8001b00:	2b10      	cmp	r3, #16
 8001b02:	d122      	bne.n	8001b4a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	f003 0310 	and.w	r3, r3, #16
 8001b0e:	2b10      	cmp	r3, #16
 8001b10:	d11b      	bne.n	8001b4a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f06f 0210 	mvn.w	r2, #16
 8001b1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2208      	movs	r2, #8
 8001b20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f870 	bl	8001c16 <HAL_TIM_IC_CaptureCallback>
 8001b36:	e005      	b.n	8001b44 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 f862 	bl	8001c02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f873 	bl	8001c2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d10e      	bne.n	8001b76 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d107      	bne.n	8001b76 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f06f 0201 	mvn.w	r2, #1
 8001b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7fe fe3f 	bl	80007f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b80:	2b80      	cmp	r3, #128	; 0x80
 8001b82:	d10e      	bne.n	8001ba2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b8e:	2b80      	cmp	r3, #128	; 0x80
 8001b90:	d107      	bne.n	8001ba2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f8e3 	bl	8001d68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bac:	2b40      	cmp	r3, #64	; 0x40
 8001bae:	d10e      	bne.n	8001bce <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bba:	2b40      	cmp	r3, #64	; 0x40
 8001bbc:	d107      	bne.n	8001bce <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f838 	bl	8001c3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	f003 0320 	and.w	r3, r3, #32
 8001bd8:	2b20      	cmp	r3, #32
 8001bda:	d10e      	bne.n	8001bfa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	f003 0320 	and.w	r3, r3, #32
 8001be6:	2b20      	cmp	r3, #32
 8001be8:	d107      	bne.n	8001bfa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f06f 0220 	mvn.w	r2, #32
 8001bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 f8ad 	bl	8001d54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a34      	ldr	r2, [pc, #208]	; (8001d38 <TIM_Base_SetConfig+0xe4>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d00f      	beq.n	8001c8c <TIM_Base_SetConfig+0x38>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c72:	d00b      	beq.n	8001c8c <TIM_Base_SetConfig+0x38>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a31      	ldr	r2, [pc, #196]	; (8001d3c <TIM_Base_SetConfig+0xe8>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d007      	beq.n	8001c8c <TIM_Base_SetConfig+0x38>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a30      	ldr	r2, [pc, #192]	; (8001d40 <TIM_Base_SetConfig+0xec>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d003      	beq.n	8001c8c <TIM_Base_SetConfig+0x38>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a2f      	ldr	r2, [pc, #188]	; (8001d44 <TIM_Base_SetConfig+0xf0>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d108      	bne.n	8001c9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a25      	ldr	r2, [pc, #148]	; (8001d38 <TIM_Base_SetConfig+0xe4>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d01b      	beq.n	8001cde <TIM_Base_SetConfig+0x8a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cac:	d017      	beq.n	8001cde <TIM_Base_SetConfig+0x8a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a22      	ldr	r2, [pc, #136]	; (8001d3c <TIM_Base_SetConfig+0xe8>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d013      	beq.n	8001cde <TIM_Base_SetConfig+0x8a>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a21      	ldr	r2, [pc, #132]	; (8001d40 <TIM_Base_SetConfig+0xec>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d00f      	beq.n	8001cde <TIM_Base_SetConfig+0x8a>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a20      	ldr	r2, [pc, #128]	; (8001d44 <TIM_Base_SetConfig+0xf0>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d00b      	beq.n	8001cde <TIM_Base_SetConfig+0x8a>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a1f      	ldr	r2, [pc, #124]	; (8001d48 <TIM_Base_SetConfig+0xf4>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d007      	beq.n	8001cde <TIM_Base_SetConfig+0x8a>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a1e      	ldr	r2, [pc, #120]	; (8001d4c <TIM_Base_SetConfig+0xf8>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d003      	beq.n	8001cde <TIM_Base_SetConfig+0x8a>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a1d      	ldr	r2, [pc, #116]	; (8001d50 <TIM_Base_SetConfig+0xfc>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d108      	bne.n	8001cf0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a08      	ldr	r2, [pc, #32]	; (8001d38 <TIM_Base_SetConfig+0xe4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d103      	bne.n	8001d24 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	691a      	ldr	r2, [r3, #16]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	615a      	str	r2, [r3, #20]
}
 8001d2a:	bf00      	nop
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40010000 	.word	0x40010000
 8001d3c:	40000400 	.word	0x40000400
 8001d40:	40000800 	.word	0x40000800
 8001d44:	40000c00 	.word	0x40000c00
 8001d48:	40014000 	.word	0x40014000
 8001d4c:	40014400 	.word	0x40014400
 8001d50:	40014800 	.word	0x40014800

08001d54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e03f      	b.n	8001e0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d106      	bne.n	8001da8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7fe fd6c 	bl	8000880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2224      	movs	r2, #36	; 0x24
 8001dac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f90b 	bl	8001fdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	691a      	ldr	r2, [r3, #16]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001dd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	695a      	ldr	r2, [r3, #20]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001de4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68da      	ldr	r2, [r3, #12]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001df4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2220      	movs	r2, #32
 8001e00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2220      	movs	r2, #32
 8001e08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b088      	sub	sp, #32
 8001e1a:	af02      	add	r7, sp, #8
 8001e1c:	60f8      	str	r0, [r7, #12]
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	603b      	str	r3, [r7, #0]
 8001e22:	4613      	mov	r3, r2
 8001e24:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b20      	cmp	r3, #32
 8001e34:	f040 8083 	bne.w	8001f3e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d002      	beq.n	8001e44 <HAL_UART_Transmit+0x2e>
 8001e3e:	88fb      	ldrh	r3, [r7, #6]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e07b      	b.n	8001f40 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d101      	bne.n	8001e56 <HAL_UART_Transmit+0x40>
 8001e52:	2302      	movs	r3, #2
 8001e54:	e074      	b.n	8001f40 <HAL_UART_Transmit+0x12a>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2221      	movs	r2, #33	; 0x21
 8001e68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001e6c:	f7fe fe62 	bl	8000b34 <HAL_GetTick>
 8001e70:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	88fa      	ldrh	r2, [r7, #6]
 8001e76:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	88fa      	ldrh	r2, [r7, #6]
 8001e7c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001e7e:	e042      	b.n	8001f06 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	3b01      	subs	r3, #1
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e96:	d122      	bne.n	8001ede <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2180      	movs	r1, #128	; 0x80
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 f850 	bl	8001f48 <UART_WaitOnFlagUntilTimeout>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e046      	b.n	8001f40 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ec4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d103      	bne.n	8001ed6 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	e017      	b.n	8001f06 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	60bb      	str	r3, [r7, #8]
 8001edc:	e013      	b.n	8001f06 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2180      	movs	r1, #128	; 0x80
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f000 f82d 	bl	8001f48 <UART_WaitOnFlagUntilTimeout>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e023      	b.n	8001f40 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	60ba      	str	r2, [r7, #8]
 8001efe:	781a      	ldrb	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1b7      	bne.n	8001e80 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	2200      	movs	r2, #0
 8001f18:	2140      	movs	r1, #64	; 0x40
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 f814 	bl	8001f48 <UART_WaitOnFlagUntilTimeout>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e00a      	b.n	8001f40 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e000      	b.n	8001f40 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001f3e:	2302      	movs	r3, #2
  }
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	603b      	str	r3, [r7, #0]
 8001f54:	4613      	mov	r3, r2
 8001f56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f58:	e02c      	b.n	8001fb4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f60:	d028      	beq.n	8001fb4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d007      	beq.n	8001f78 <UART_WaitOnFlagUntilTimeout+0x30>
 8001f68:	f7fe fde4 	bl	8000b34 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d21d      	bcs.n	8001fb4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68da      	ldr	r2, [r3, #12]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001f86:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	695a      	ldr	r2, [r3, #20]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0201 	bic.w	r2, r2, #1
 8001f96:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e00f      	b.n	8001fd4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	bf0c      	ite	eq
 8001fc4:	2301      	moveq	r3, #1
 8001fc6:	2300      	movne	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	461a      	mov	r2, r3
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d0c3      	beq.n	8001f5a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fdc:	b5b0      	push	{r4, r5, r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	431a      	orrs	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	4313      	orrs	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800201c:	f023 030c 	bic.w	r3, r3, #12
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6812      	ldr	r2, [r2, #0]
 8002024:	68f9      	ldr	r1, [r7, #12]
 8002026:	430b      	orrs	r3, r1
 8002028:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699a      	ldr	r2, [r3, #24]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002048:	f040 80e4 	bne.w	8002214 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4aab      	ldr	r2, [pc, #684]	; (8002300 <UART_SetConfig+0x324>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d004      	beq.n	8002060 <UART_SetConfig+0x84>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4aaa      	ldr	r2, [pc, #680]	; (8002304 <UART_SetConfig+0x328>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d16c      	bne.n	800213a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002060:	f7ff fc28 	bl	80018b4 <HAL_RCC_GetPCLK2Freq>
 8002064:	4602      	mov	r2, r0
 8002066:	4613      	mov	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	009a      	lsls	r2, r3, #2
 800206e:	441a      	add	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	fbb2 f3f3 	udiv	r3, r2, r3
 800207a:	4aa3      	ldr	r2, [pc, #652]	; (8002308 <UART_SetConfig+0x32c>)
 800207c:	fba2 2303 	umull	r2, r3, r2, r3
 8002080:	095b      	lsrs	r3, r3, #5
 8002082:	011c      	lsls	r4, r3, #4
 8002084:	f7ff fc16 	bl	80018b4 <HAL_RCC_GetPCLK2Freq>
 8002088:	4602      	mov	r2, r0
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	009a      	lsls	r2, r3, #2
 8002092:	441a      	add	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	fbb2 f5f3 	udiv	r5, r2, r3
 800209e:	f7ff fc09 	bl	80018b4 <HAL_RCC_GetPCLK2Freq>
 80020a2:	4602      	mov	r2, r0
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	009a      	lsls	r2, r3, #2
 80020ac:	441a      	add	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b8:	4a93      	ldr	r2, [pc, #588]	; (8002308 <UART_SetConfig+0x32c>)
 80020ba:	fba2 2303 	umull	r2, r3, r2, r3
 80020be:	095b      	lsrs	r3, r3, #5
 80020c0:	2264      	movs	r2, #100	; 0x64
 80020c2:	fb02 f303 	mul.w	r3, r2, r3
 80020c6:	1aeb      	subs	r3, r5, r3
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	3332      	adds	r3, #50	; 0x32
 80020cc:	4a8e      	ldr	r2, [pc, #568]	; (8002308 <UART_SetConfig+0x32c>)
 80020ce:	fba2 2303 	umull	r2, r3, r2, r3
 80020d2:	095b      	lsrs	r3, r3, #5
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020da:	441c      	add	r4, r3
 80020dc:	f7ff fbea 	bl	80018b4 <HAL_RCC_GetPCLK2Freq>
 80020e0:	4602      	mov	r2, r0
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	009a      	lsls	r2, r3, #2
 80020ea:	441a      	add	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	fbb2 f5f3 	udiv	r5, r2, r3
 80020f6:	f7ff fbdd 	bl	80018b4 <HAL_RCC_GetPCLK2Freq>
 80020fa:	4602      	mov	r2, r0
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	009a      	lsls	r2, r3, #2
 8002104:	441a      	add	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002110:	4a7d      	ldr	r2, [pc, #500]	; (8002308 <UART_SetConfig+0x32c>)
 8002112:	fba2 2303 	umull	r2, r3, r2, r3
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	2264      	movs	r2, #100	; 0x64
 800211a:	fb02 f303 	mul.w	r3, r2, r3
 800211e:	1aeb      	subs	r3, r5, r3
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	3332      	adds	r3, #50	; 0x32
 8002124:	4a78      	ldr	r2, [pc, #480]	; (8002308 <UART_SetConfig+0x32c>)
 8002126:	fba2 2303 	umull	r2, r3, r2, r3
 800212a:	095b      	lsrs	r3, r3, #5
 800212c:	f003 0207 	and.w	r2, r3, #7
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4422      	add	r2, r4
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	e154      	b.n	80023e4 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800213a:	f7ff fba7 	bl	800188c <HAL_RCC_GetPCLK1Freq>
 800213e:	4602      	mov	r2, r0
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	009a      	lsls	r2, r3, #2
 8002148:	441a      	add	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	fbb2 f3f3 	udiv	r3, r2, r3
 8002154:	4a6c      	ldr	r2, [pc, #432]	; (8002308 <UART_SetConfig+0x32c>)
 8002156:	fba2 2303 	umull	r2, r3, r2, r3
 800215a:	095b      	lsrs	r3, r3, #5
 800215c:	011c      	lsls	r4, r3, #4
 800215e:	f7ff fb95 	bl	800188c <HAL_RCC_GetPCLK1Freq>
 8002162:	4602      	mov	r2, r0
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	009a      	lsls	r2, r3, #2
 800216c:	441a      	add	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	fbb2 f5f3 	udiv	r5, r2, r3
 8002178:	f7ff fb88 	bl	800188c <HAL_RCC_GetPCLK1Freq>
 800217c:	4602      	mov	r2, r0
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	009a      	lsls	r2, r3, #2
 8002186:	441a      	add	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002192:	4a5d      	ldr	r2, [pc, #372]	; (8002308 <UART_SetConfig+0x32c>)
 8002194:	fba2 2303 	umull	r2, r3, r2, r3
 8002198:	095b      	lsrs	r3, r3, #5
 800219a:	2264      	movs	r2, #100	; 0x64
 800219c:	fb02 f303 	mul.w	r3, r2, r3
 80021a0:	1aeb      	subs	r3, r5, r3
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	3332      	adds	r3, #50	; 0x32
 80021a6:	4a58      	ldr	r2, [pc, #352]	; (8002308 <UART_SetConfig+0x32c>)
 80021a8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ac:	095b      	lsrs	r3, r3, #5
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80021b4:	441c      	add	r4, r3
 80021b6:	f7ff fb69 	bl	800188c <HAL_RCC_GetPCLK1Freq>
 80021ba:	4602      	mov	r2, r0
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	009a      	lsls	r2, r3, #2
 80021c4:	441a      	add	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	fbb2 f5f3 	udiv	r5, r2, r3
 80021d0:	f7ff fb5c 	bl	800188c <HAL_RCC_GetPCLK1Freq>
 80021d4:	4602      	mov	r2, r0
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	009a      	lsls	r2, r3, #2
 80021de:	441a      	add	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ea:	4a47      	ldr	r2, [pc, #284]	; (8002308 <UART_SetConfig+0x32c>)
 80021ec:	fba2 2303 	umull	r2, r3, r2, r3
 80021f0:	095b      	lsrs	r3, r3, #5
 80021f2:	2264      	movs	r2, #100	; 0x64
 80021f4:	fb02 f303 	mul.w	r3, r2, r3
 80021f8:	1aeb      	subs	r3, r5, r3
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	3332      	adds	r3, #50	; 0x32
 80021fe:	4a42      	ldr	r2, [pc, #264]	; (8002308 <UART_SetConfig+0x32c>)
 8002200:	fba2 2303 	umull	r2, r3, r2, r3
 8002204:	095b      	lsrs	r3, r3, #5
 8002206:	f003 0207 	and.w	r2, r3, #7
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4422      	add	r2, r4
 8002210:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002212:	e0e7      	b.n	80023e4 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a39      	ldr	r2, [pc, #228]	; (8002300 <UART_SetConfig+0x324>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d004      	beq.n	8002228 <UART_SetConfig+0x24c>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a38      	ldr	r2, [pc, #224]	; (8002304 <UART_SetConfig+0x328>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d171      	bne.n	800230c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002228:	f7ff fb44 	bl	80018b4 <HAL_RCC_GetPCLK2Freq>
 800222c:	4602      	mov	r2, r0
 800222e:	4613      	mov	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	009a      	lsls	r2, r3, #2
 8002236:	441a      	add	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002242:	4a31      	ldr	r2, [pc, #196]	; (8002308 <UART_SetConfig+0x32c>)
 8002244:	fba2 2303 	umull	r2, r3, r2, r3
 8002248:	095b      	lsrs	r3, r3, #5
 800224a:	011c      	lsls	r4, r3, #4
 800224c:	f7ff fb32 	bl	80018b4 <HAL_RCC_GetPCLK2Freq>
 8002250:	4602      	mov	r2, r0
 8002252:	4613      	mov	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	009a      	lsls	r2, r3, #2
 800225a:	441a      	add	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	fbb2 f5f3 	udiv	r5, r2, r3
 8002266:	f7ff fb25 	bl	80018b4 <HAL_RCC_GetPCLK2Freq>
 800226a:	4602      	mov	r2, r0
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	009a      	lsls	r2, r3, #2
 8002274:	441a      	add	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002280:	4a21      	ldr	r2, [pc, #132]	; (8002308 <UART_SetConfig+0x32c>)
 8002282:	fba2 2303 	umull	r2, r3, r2, r3
 8002286:	095b      	lsrs	r3, r3, #5
 8002288:	2264      	movs	r2, #100	; 0x64
 800228a:	fb02 f303 	mul.w	r3, r2, r3
 800228e:	1aeb      	subs	r3, r5, r3
 8002290:	011b      	lsls	r3, r3, #4
 8002292:	3332      	adds	r3, #50	; 0x32
 8002294:	4a1c      	ldr	r2, [pc, #112]	; (8002308 <UART_SetConfig+0x32c>)
 8002296:	fba2 2303 	umull	r2, r3, r2, r3
 800229a:	095b      	lsrs	r3, r3, #5
 800229c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022a0:	441c      	add	r4, r3
 80022a2:	f7ff fb07 	bl	80018b4 <HAL_RCC_GetPCLK2Freq>
 80022a6:	4602      	mov	r2, r0
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	009a      	lsls	r2, r3, #2
 80022b0:	441a      	add	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	fbb2 f5f3 	udiv	r5, r2, r3
 80022bc:	f7ff fafa 	bl	80018b4 <HAL_RCC_GetPCLK2Freq>
 80022c0:	4602      	mov	r2, r0
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	009a      	lsls	r2, r3, #2
 80022ca:	441a      	add	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d6:	4a0c      	ldr	r2, [pc, #48]	; (8002308 <UART_SetConfig+0x32c>)
 80022d8:	fba2 2303 	umull	r2, r3, r2, r3
 80022dc:	095b      	lsrs	r3, r3, #5
 80022de:	2264      	movs	r2, #100	; 0x64
 80022e0:	fb02 f303 	mul.w	r3, r2, r3
 80022e4:	1aeb      	subs	r3, r5, r3
 80022e6:	011b      	lsls	r3, r3, #4
 80022e8:	3332      	adds	r3, #50	; 0x32
 80022ea:	4a07      	ldr	r2, [pc, #28]	; (8002308 <UART_SetConfig+0x32c>)
 80022ec:	fba2 2303 	umull	r2, r3, r2, r3
 80022f0:	095b      	lsrs	r3, r3, #5
 80022f2:	f003 020f 	and.w	r2, r3, #15
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4422      	add	r2, r4
 80022fc:	609a      	str	r2, [r3, #8]
 80022fe:	e071      	b.n	80023e4 <UART_SetConfig+0x408>
 8002300:	40011000 	.word	0x40011000
 8002304:	40011400 	.word	0x40011400
 8002308:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800230c:	f7ff fabe 	bl	800188c <HAL_RCC_GetPCLK1Freq>
 8002310:	4602      	mov	r2, r0
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	009a      	lsls	r2, r3, #2
 800231a:	441a      	add	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	fbb2 f3f3 	udiv	r3, r2, r3
 8002326:	4a31      	ldr	r2, [pc, #196]	; (80023ec <UART_SetConfig+0x410>)
 8002328:	fba2 2303 	umull	r2, r3, r2, r3
 800232c:	095b      	lsrs	r3, r3, #5
 800232e:	011c      	lsls	r4, r3, #4
 8002330:	f7ff faac 	bl	800188c <HAL_RCC_GetPCLK1Freq>
 8002334:	4602      	mov	r2, r0
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	009a      	lsls	r2, r3, #2
 800233e:	441a      	add	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	fbb2 f5f3 	udiv	r5, r2, r3
 800234a:	f7ff fa9f 	bl	800188c <HAL_RCC_GetPCLK1Freq>
 800234e:	4602      	mov	r2, r0
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	009a      	lsls	r2, r3, #2
 8002358:	441a      	add	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	fbb2 f3f3 	udiv	r3, r2, r3
 8002364:	4a21      	ldr	r2, [pc, #132]	; (80023ec <UART_SetConfig+0x410>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	095b      	lsrs	r3, r3, #5
 800236c:	2264      	movs	r2, #100	; 0x64
 800236e:	fb02 f303 	mul.w	r3, r2, r3
 8002372:	1aeb      	subs	r3, r5, r3
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	3332      	adds	r3, #50	; 0x32
 8002378:	4a1c      	ldr	r2, [pc, #112]	; (80023ec <UART_SetConfig+0x410>)
 800237a:	fba2 2303 	umull	r2, r3, r2, r3
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002384:	441c      	add	r4, r3
 8002386:	f7ff fa81 	bl	800188c <HAL_RCC_GetPCLK1Freq>
 800238a:	4602      	mov	r2, r0
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	009a      	lsls	r2, r3, #2
 8002394:	441a      	add	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	fbb2 f5f3 	udiv	r5, r2, r3
 80023a0:	f7ff fa74 	bl	800188c <HAL_RCC_GetPCLK1Freq>
 80023a4:	4602      	mov	r2, r0
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	009a      	lsls	r2, r3, #2
 80023ae:	441a      	add	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ba:	4a0c      	ldr	r2, [pc, #48]	; (80023ec <UART_SetConfig+0x410>)
 80023bc:	fba2 2303 	umull	r2, r3, r2, r3
 80023c0:	095b      	lsrs	r3, r3, #5
 80023c2:	2264      	movs	r2, #100	; 0x64
 80023c4:	fb02 f303 	mul.w	r3, r2, r3
 80023c8:	1aeb      	subs	r3, r5, r3
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	3332      	adds	r3, #50	; 0x32
 80023ce:	4a07      	ldr	r2, [pc, #28]	; (80023ec <UART_SetConfig+0x410>)
 80023d0:	fba2 2303 	umull	r2, r3, r2, r3
 80023d4:	095b      	lsrs	r3, r3, #5
 80023d6:	f003 020f 	and.w	r2, r3, #15
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4422      	add	r2, r4
 80023e0:	609a      	str	r2, [r3, #8]
}
 80023e2:	e7ff      	b.n	80023e4 <UART_SetConfig+0x408>
 80023e4:	bf00      	nop
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bdb0      	pop	{r4, r5, r7, pc}
 80023ec:	51eb851f 	.word	0x51eb851f

080023f0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023f6:	f3ef 8305 	mrs	r3, IPSR
 80023fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80023fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10f      	bne.n	8002422 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002402:	f3ef 8310 	mrs	r3, PRIMASK
 8002406:	607b      	str	r3, [r7, #4]
  return(result);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d109      	bne.n	8002422 <osKernelInitialize+0x32>
 800240e:	4b11      	ldr	r3, [pc, #68]	; (8002454 <osKernelInitialize+0x64>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d109      	bne.n	800242a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002416:	f3ef 8311 	mrs	r3, BASEPRI
 800241a:	603b      	str	r3, [r7, #0]
  return(result);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002422:	f06f 0305 	mvn.w	r3, #5
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	e00c      	b.n	8002444 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800242a:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <osKernelInitialize+0x64>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d105      	bne.n	800243e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002432:	4b08      	ldr	r3, [pc, #32]	; (8002454 <osKernelInitialize+0x64>)
 8002434:	2201      	movs	r2, #1
 8002436:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002438:	2300      	movs	r3, #0
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	e002      	b.n	8002444 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800243e:	f04f 33ff 	mov.w	r3, #4294967295
 8002442:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002444:	68fb      	ldr	r3, [r7, #12]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	20000028 	.word	0x20000028

08002458 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800245e:	f3ef 8305 	mrs	r3, IPSR
 8002462:	60bb      	str	r3, [r7, #8]
  return(result);
 8002464:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10f      	bne.n	800248a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800246a:	f3ef 8310 	mrs	r3, PRIMASK
 800246e:	607b      	str	r3, [r7, #4]
  return(result);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d109      	bne.n	800248a <osKernelStart+0x32>
 8002476:	4b11      	ldr	r3, [pc, #68]	; (80024bc <osKernelStart+0x64>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d109      	bne.n	8002492 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800247e:	f3ef 8311 	mrs	r3, BASEPRI
 8002482:	603b      	str	r3, [r7, #0]
  return(result);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <osKernelStart+0x3a>
    stat = osErrorISR;
 800248a:	f06f 0305 	mvn.w	r3, #5
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	e00e      	b.n	80024b0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <osKernelStart+0x64>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d107      	bne.n	80024aa <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800249a:	4b08      	ldr	r3, [pc, #32]	; (80024bc <osKernelStart+0x64>)
 800249c:	2202      	movs	r2, #2
 800249e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80024a0:	f001 fc0a 	bl	8003cb8 <vTaskStartScheduler>
      stat = osOK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	e002      	b.n	80024b0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80024aa:	f04f 33ff 	mov.w	r3, #4294967295
 80024ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80024b0:	68fb      	ldr	r3, [r7, #12]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000028 	.word	0x20000028

080024c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b092      	sub	sp, #72	; 0x48
 80024c4:	af04      	add	r7, sp, #16
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024d0:	f3ef 8305 	mrs	r3, IPSR
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f040 8094 	bne.w	8002606 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024de:	f3ef 8310 	mrs	r3, PRIMASK
 80024e2:	623b      	str	r3, [r7, #32]
  return(result);
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f040 808d 	bne.w	8002606 <osThreadNew+0x146>
 80024ec:	4b48      	ldr	r3, [pc, #288]	; (8002610 <osThreadNew+0x150>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d106      	bne.n	8002502 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80024f4:	f3ef 8311 	mrs	r3, BASEPRI
 80024f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f040 8082 	bne.w	8002606 <osThreadNew+0x146>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d07e      	beq.n	8002606 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002508:	2380      	movs	r3, #128	; 0x80
 800250a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800250c:	2318      	movs	r3, #24
 800250e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002510:	2300      	movs	r3, #0
 8002512:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002514:	f107 031b 	add.w	r3, r7, #27
 8002518:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800251a:	f04f 33ff 	mov.w	r3, #4294967295
 800251e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d045      	beq.n	80025b2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d002      	beq.n	8002534 <osThreadNew+0x74>
        name = attr->name;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d002      	beq.n	8002542 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002544:	2b00      	cmp	r3, #0
 8002546:	d008      	beq.n	800255a <osThreadNew+0x9a>
 8002548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254a:	2b38      	cmp	r3, #56	; 0x38
 800254c:	d805      	bhi.n	800255a <osThreadNew+0x9a>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <osThreadNew+0x9e>
        return (NULL);
 800255a:	2300      	movs	r3, #0
 800255c:	e054      	b.n	8002608 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	089b      	lsrs	r3, r3, #2
 800256c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00e      	beq.n	8002594 <osThreadNew+0xd4>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	2b5b      	cmp	r3, #91	; 0x5b
 800257c:	d90a      	bls.n	8002594 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002582:	2b00      	cmp	r3, #0
 8002584:	d006      	beq.n	8002594 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <osThreadNew+0xd4>
        mem = 1;
 800258e:	2301      	movs	r3, #1
 8002590:	62bb      	str	r3, [r7, #40]	; 0x28
 8002592:	e010      	b.n	80025b6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10c      	bne.n	80025b6 <osThreadNew+0xf6>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d108      	bne.n	80025b6 <osThreadNew+0xf6>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d104      	bne.n	80025b6 <osThreadNew+0xf6>
          mem = 0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80025b0:	e001      	b.n	80025b6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80025b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d110      	bne.n	80025de <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80025c4:	9202      	str	r2, [sp, #8]
 80025c6:	9301      	str	r3, [sp, #4]
 80025c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f001 f9a8 	bl	8003928 <xTaskCreateStatic>
 80025d8:	4603      	mov	r3, r0
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	e013      	b.n	8002606 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80025de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d110      	bne.n	8002606 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80025e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	f107 0314 	add.w	r3, r7, #20
 80025ec:	9301      	str	r3, [sp, #4]
 80025ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f001 f9ef 	bl	80039da <xTaskCreate>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d001      	beq.n	8002606 <osThreadNew+0x146>
          hTask = NULL;
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002606:	697b      	ldr	r3, [r7, #20]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3738      	adds	r7, #56	; 0x38
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	20000028 	.word	0x20000028

08002614 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800261a:	f3ef 8305 	mrs	r3, IPSR
 800261e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002620:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10f      	bne.n	8002646 <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002626:	f3ef 8310 	mrs	r3, PRIMASK
 800262a:	607b      	str	r3, [r7, #4]
  return(result);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d109      	bne.n	8002646 <osThreadYield+0x32>
 8002632:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <osThreadYield+0x5c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2b02      	cmp	r3, #2
 8002638:	d109      	bne.n	800264e <osThreadYield+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800263a:	f3ef 8311 	mrs	r3, BASEPRI
 800263e:	603b      	str	r3, [r7, #0]
  return(result);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <osThreadYield+0x3a>
    stat = osErrorISR;
 8002646:	f06f 0305 	mvn.w	r3, #5
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	e009      	b.n	8002662 <osThreadYield+0x4e>
  } else {
    stat = osOK;
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 8002652:	4b08      	ldr	r3, [pc, #32]	; (8002674 <osThreadYield+0x60>)
 8002654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	f3bf 8f4f 	dsb	sy
 800265e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8002662:	68fb      	ldr	r3, [r7, #12]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	20000028 	.word	0x20000028
 8002674:	e000ed04 	.word	0xe000ed04

08002678 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002680:	f3ef 8305 	mrs	r3, IPSR
 8002684:	613b      	str	r3, [r7, #16]
  return(result);
 8002686:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10f      	bne.n	80026ac <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800268c:	f3ef 8310 	mrs	r3, PRIMASK
 8002690:	60fb      	str	r3, [r7, #12]
  return(result);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d109      	bne.n	80026ac <osDelay+0x34>
 8002698:	4b0d      	ldr	r3, [pc, #52]	; (80026d0 <osDelay+0x58>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b02      	cmp	r3, #2
 800269e:	d109      	bne.n	80026b4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80026a0:	f3ef 8311 	mrs	r3, BASEPRI
 80026a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <osDelay+0x3c>
    stat = osErrorISR;
 80026ac:	f06f 0305 	mvn.w	r3, #5
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	e007      	b.n	80026c4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f001 fac6 	bl	8003c50 <vTaskDelay>
    }
  }

  return (stat);
 80026c4:	697b      	ldr	r3, [r7, #20]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20000028 	.word	0x20000028

080026d4 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b088      	sub	sp, #32
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026e0:	f3ef 8305 	mrs	r3, IPSR
 80026e4:	617b      	str	r3, [r7, #20]
  return(result);
 80026e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d13d      	bne.n	8002768 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026ec:	f3ef 8310 	mrs	r3, PRIMASK
 80026f0:	613b      	str	r3, [r7, #16]
  return(result);
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d137      	bne.n	8002768 <osEventFlagsNew+0x94>
 80026f8:	4b1e      	ldr	r3, [pc, #120]	; (8002774 <osEventFlagsNew+0xa0>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d105      	bne.n	800270c <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002700:	f3ef 8311 	mrs	r3, BASEPRI
 8002704:	60fb      	str	r3, [r7, #12]
  return(result);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d12d      	bne.n	8002768 <osEventFlagsNew+0x94>
    mem = -1;
 800270c:	f04f 33ff 	mov.w	r3, #4294967295
 8002710:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d015      	beq.n	8002744 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d006      	beq.n	800272e <osEventFlagsNew+0x5a>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	2b1f      	cmp	r3, #31
 8002726:	d902      	bls.n	800272e <osEventFlagsNew+0x5a>
        mem = 1;
 8002728:	2301      	movs	r3, #1
 800272a:	61bb      	str	r3, [r7, #24]
 800272c:	e00c      	b.n	8002748 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d108      	bne.n	8002748 <osEventFlagsNew+0x74>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d104      	bne.n	8002748 <osEventFlagsNew+0x74>
          mem = 0;
 800273e:	2300      	movs	r3, #0
 8002740:	61bb      	str	r3, [r7, #24]
 8002742:	e001      	b.n	8002748 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8002744:	2300      	movs	r3, #0
 8002746:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d106      	bne.n	800275c <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	4618      	mov	r0, r3
 8002754:	f000 f946 	bl	80029e4 <xEventGroupCreateStatic>
 8002758:	61f8      	str	r0, [r7, #28]
 800275a:	e005      	b.n	8002768 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d102      	bne.n	8002768 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8002762:	f000 f974 	bl	8002a4e <xEventGroupCreate>
 8002766:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8002768:	69fb      	ldr	r3, [r7, #28]
}
 800276a:	4618      	mov	r0, r3
 800276c:	3720      	adds	r7, #32
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20000028 	.word	0x20000028

08002778 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d004      	beq.n	8002796 <osEventFlagsSet+0x1e>
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8002796:	f06f 0303 	mvn.w	r3, #3
 800279a:	61fb      	str	r3, [r7, #28]
 800279c:	e03a      	b.n	8002814 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800279e:	f3ef 8305 	mrs	r3, IPSR
 80027a2:	617b      	str	r3, [r7, #20]
  return(result);
 80027a4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10f      	bne.n	80027ca <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027aa:	f3ef 8310 	mrs	r3, PRIMASK
 80027ae:	613b      	str	r3, [r7, #16]
  return(result);
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d109      	bne.n	80027ca <osEventFlagsSet+0x52>
 80027b6:	4b1a      	ldr	r3, [pc, #104]	; (8002820 <osEventFlagsSet+0xa8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d123      	bne.n	8002806 <osEventFlagsSet+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80027be:	f3ef 8311 	mrs	r3, BASEPRI
 80027c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d01d      	beq.n	8002806 <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 80027ca:	2300      	movs	r3, #0
 80027cc:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80027ce:	f107 0308 	add.w	r3, r7, #8
 80027d2:	461a      	mov	r2, r3
 80027d4:	6839      	ldr	r1, [r7, #0]
 80027d6:	69b8      	ldr	r0, [r7, #24]
 80027d8:	f000 fb0a 	bl	8002df0 <xEventGroupSetBitsFromISR>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 80027e2:	f06f 0302 	mvn.w	r3, #2
 80027e6:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80027e8:	e013      	b.n	8002812 <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00e      	beq.n	8002812 <osEventFlagsSet+0x9a>
 80027f4:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <osEventFlagsSet+0xac>)
 80027f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	f3bf 8f4f 	dsb	sy
 8002800:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8002804:	e005      	b.n	8002812 <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8002806:	6839      	ldr	r1, [r7, #0]
 8002808:	69b8      	ldr	r0, [r7, #24]
 800280a:	f000 fa05 	bl	8002c18 <xEventGroupSetBits>
 800280e:	61f8      	str	r0, [r7, #28]
 8002810:	e000      	b.n	8002814 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8002812:	bf00      	nop
  }

  return (rflags);
 8002814:	69fb      	ldr	r3, [r7, #28]
}
 8002816:	4618      	mov	r0, r3
 8002818:	3720      	adds	r7, #32
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20000028 	.word	0x20000028
 8002824:	e000ed04 	.word	0xe000ed04

08002828 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8002828:	b580      	push	{r7, lr}
 800282a:	b08e      	sub	sp, #56	; 0x38
 800282c:	af02      	add	r7, sp, #8
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
 8002834:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	623b      	str	r3, [r7, #32]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d004      	beq.n	800284a <osEventFlagsWait+0x22>
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800284a:	f06f 0303 	mvn.w	r3, #3
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
 8002850:	e059      	b.n	8002906 <osEventFlagsWait+0xde>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002852:	f3ef 8305 	mrs	r3, IPSR
 8002856:	61fb      	str	r3, [r7, #28]
  return(result);
 8002858:	69fb      	ldr	r3, [r7, #28]
  }
  else if (IS_IRQ()) {
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10f      	bne.n	800287e <osEventFlagsWait+0x56>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800285e:	f3ef 8310 	mrs	r3, PRIMASK
 8002862:	61bb      	str	r3, [r7, #24]
  return(result);
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d109      	bne.n	800287e <osEventFlagsWait+0x56>
 800286a:	4b29      	ldr	r3, [pc, #164]	; (8002910 <osEventFlagsWait+0xe8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2b02      	cmp	r3, #2
 8002870:	d109      	bne.n	8002886 <osEventFlagsWait+0x5e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002872:	f3ef 8311 	mrs	r3, BASEPRI
 8002876:	617b      	str	r3, [r7, #20]
  return(result);
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <osEventFlagsWait+0x5e>
    rflags = (uint32_t)osErrorISR;
 800287e:	f06f 0305 	mvn.w	r3, #5
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
 8002884:	e03f      	b.n	8002906 <osEventFlagsWait+0xde>
  }
  else {
    if (options & osFlagsWaitAll) {
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d002      	beq.n	8002896 <osEventFlagsWait+0x6e>
      wait_all = pdTRUE;
 8002890:	2301      	movs	r3, #1
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002894:	e001      	b.n	800289a <osEventFlagsWait+0x72>
    } else {
      wait_all = pdFAIL;
 8002896:	2300      	movs	r3, #0
 8002898:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    if (options & osFlagsNoClear) {
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d002      	beq.n	80028aa <osEventFlagsWait+0x82>
      exit_clr = pdFAIL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80028a8:	e001      	b.n	80028ae <osEventFlagsWait+0x86>
    } else {
      exit_clr = pdTRUE;
 80028aa:	2301      	movs	r3, #1
 80028ac:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028b6:	68b9      	ldr	r1, [r7, #8]
 80028b8:	6a38      	ldr	r0, [r7, #32]
 80028ba:	f000 f8e3 	bl	8002a84 <xEventGroupWaitBits>
 80028be:	6278      	str	r0, [r7, #36]	; 0x24

    if (options & osFlagsWaitAll) {
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00e      	beq.n	80028e8 <osEventFlagsWait+0xc0>
      if (flags != rflags) {
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d019      	beq.n	8002906 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <osEventFlagsWait+0xb8>
          rflags = (uint32_t)osErrorTimeout;
 80028d8:	f06f 0301 	mvn.w	r3, #1
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
 80028de:	e012      	b.n	8002906 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 80028e0:	f06f 0302 	mvn.w	r3, #2
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
 80028e6:	e00e      	b.n	8002906 <osEventFlagsWait+0xde>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	4013      	ands	r3, r2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d109      	bne.n	8002906 <osEventFlagsWait+0xde>
        if (timeout > 0U) {
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <osEventFlagsWait+0xd8>
          rflags = (uint32_t)osErrorTimeout;
 80028f8:	f06f 0301 	mvn.w	r3, #1
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
 80028fe:	e002      	b.n	8002906 <osEventFlagsWait+0xde>
        } else {
          rflags = (uint32_t)osErrorResource;
 8002900:	f06f 0302 	mvn.w	r3, #2
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }
  }

  return (rflags);
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002908:	4618      	mov	r0, r3
 800290a:	3730      	adds	r7, #48	; 0x30
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	20000028 	.word	0x20000028

08002914 <osEventFlagsDelete>:

osStatus_t osEventFlagsDelete (osEventFlagsId_t ef_id) {
 8002914:	b580      	push	{r7, lr}
 8002916:	b088      	sub	sp, #32
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002920:	f3ef 8305 	mrs	r3, IPSR
 8002924:	617b      	str	r3, [r7, #20]
  return(result);
 8002926:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10f      	bne.n	800294c <osEventFlagsDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800292c:	f3ef 8310 	mrs	r3, PRIMASK
 8002930:	613b      	str	r3, [r7, #16]
  return(result);
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d109      	bne.n	800294c <osEventFlagsDelete+0x38>
 8002938:	4b0f      	ldr	r3, [pc, #60]	; (8002978 <osEventFlagsDelete+0x64>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b02      	cmp	r3, #2
 800293e:	d109      	bne.n	8002954 <osEventFlagsDelete+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002940:	f3ef 8311 	mrs	r3, BASEPRI
 8002944:	60fb      	str	r3, [r7, #12]
  return(result);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <osEventFlagsDelete+0x40>
    stat = osErrorISR;
 800294c:	f06f 0305 	mvn.w	r3, #5
 8002950:	61fb      	str	r3, [r7, #28]
 8002952:	e00b      	b.n	800296c <osEventFlagsDelete+0x58>
  }
  else if (hEventGroup == NULL) {
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d103      	bne.n	8002962 <osEventFlagsDelete+0x4e>
    stat = osErrorParameter;
 800295a:	f06f 0303 	mvn.w	r3, #3
 800295e:	61fb      	str	r3, [r7, #28]
 8002960:	e004      	b.n	800296c <osEventFlagsDelete+0x58>
  }
  else {
    stat = osOK;
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
    vEventGroupDelete (hEventGroup);
 8002966:	69b8      	ldr	r0, [r7, #24]
 8002968:	f000 f9df 	bl	8002d2a <vEventGroupDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800296c:	69fb      	ldr	r3, [r7, #28]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3720      	adds	r7, #32
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	20000028 	.word	0x20000028

0800297c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4a07      	ldr	r2, [pc, #28]	; (80029a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800298c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	4a06      	ldr	r2, [pc, #24]	; (80029ac <vApplicationGetIdleTaskMemory+0x30>)
 8002992:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2280      	movs	r2, #128	; 0x80
 8002998:	601a      	str	r2, [r3, #0]
}
 800299a:	bf00      	nop
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	2000002c 	.word	0x2000002c
 80029ac:	20000088 	.word	0x20000088

080029b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4a07      	ldr	r2, [pc, #28]	; (80029dc <vApplicationGetTimerTaskMemory+0x2c>)
 80029c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	4a06      	ldr	r2, [pc, #24]	; (80029e0 <vApplicationGetTimerTaskMemory+0x30>)
 80029c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029ce:	601a      	str	r2, [r3, #0]
}
 80029d0:	bf00      	nop
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	20000288 	.word	0x20000288
 80029e0:	200002e4 	.word	0x200002e4

080029e4 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d109      	bne.n	8002a06 <xEventGroupCreateStatic+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80029f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f6:	f383 8811 	msr	BASEPRI, r3
 80029fa:	f3bf 8f6f 	isb	sy
 80029fe:	f3bf 8f4f 	dsb	sy
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	e7fe      	b.n	8002a04 <xEventGroupCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8002a06:	2320      	movs	r3, #32
 8002a08:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b20      	cmp	r3, #32
 8002a0e:	d009      	beq.n	8002a24 <xEventGroupCreateStatic+0x40>
 8002a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a14:	f383 8811 	msr	BASEPRI, r3
 8002a18:	f3bf 8f6f 	isb	sy
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	e7fe      	b.n	8002a22 <xEventGroupCreateStatic+0x3e>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00a      	beq.n	8002a44 <xEventGroupCreateStatic+0x60>
		{
			pxEventBits->uxEventBits = 0;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	3304      	adds	r3, #4
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 f9ed 	bl	8002e18 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2201      	movs	r2, #1
 8002a42:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8002a44:	697b      	ldr	r3, [r7, #20]
	}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8002a54:	2020      	movs	r0, #32
 8002a56:	f002 fc6b 	bl	8005330 <pvPortMalloc>
 8002a5a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00a      	beq.n	8002a78 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3304      	adds	r3, #4
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f000 f9d3 	bl	8002e18 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8002a78:	687b      	ldr	r3, [r7, #4]
	}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b090      	sub	sp, #64	; 0x40
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
 8002a90:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8002a96:	2300      	movs	r3, #0
 8002a98:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d109      	bne.n	8002ab8 <xEventGroupWaitBits+0x34>
 8002aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa8:	f383 8811 	msr	BASEPRI, r3
 8002aac:	f3bf 8f6f 	isb	sy
 8002ab0:	f3bf 8f4f 	dsb	sy
 8002ab4:	623b      	str	r3, [r7, #32]
 8002ab6:	e7fe      	b.n	8002ab6 <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d009      	beq.n	8002ad6 <xEventGroupWaitBits+0x52>
 8002ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac6:	f383 8811 	msr	BASEPRI, r3
 8002aca:	f3bf 8f6f 	isb	sy
 8002ace:	f3bf 8f4f 	dsb	sy
 8002ad2:	61fb      	str	r3, [r7, #28]
 8002ad4:	e7fe      	b.n	8002ad4 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d109      	bne.n	8002af0 <xEventGroupWaitBits+0x6c>
 8002adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae0:	f383 8811 	msr	BASEPRI, r3
 8002ae4:	f3bf 8f6f 	isb	sy
 8002ae8:	f3bf 8f4f 	dsb	sy
 8002aec:	61bb      	str	r3, [r7, #24]
 8002aee:	e7fe      	b.n	8002aee <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002af0:	f001 fdbe 	bl	8004670 <xTaskGetSchedulerState>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d102      	bne.n	8002b00 <xEventGroupWaitBits+0x7c>
 8002afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <xEventGroupWaitBits+0x80>
 8002b00:	2301      	movs	r3, #1
 8002b02:	e000      	b.n	8002b06 <xEventGroupWaitBits+0x82>
 8002b04:	2300      	movs	r3, #0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d109      	bne.n	8002b1e <xEventGroupWaitBits+0x9a>
 8002b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0e:	f383 8811 	msr	BASEPRI, r3
 8002b12:	f3bf 8f6f 	isb	sy
 8002b16:	f3bf 8f4f 	dsb	sy
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	e7fe      	b.n	8002b1c <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 8002b1e:	f001 f92f 	bl	8003d80 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8002b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	68b9      	ldr	r1, [r7, #8]
 8002b2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b2e:	f000 f93d 	bl	8002dac <prvTestWaitCondition>
 8002b32:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8002b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00e      	beq.n	8002b58 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8002b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d028      	beq.n	8002b9a <xEventGroupWaitBits+0x116>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	401a      	ands	r2, r3
 8002b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	e020      	b.n	8002b9a <xEventGroupWaitBits+0x116>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8002b58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d104      	bne.n	8002b68 <xEventGroupWaitBits+0xe4>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8002b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b60:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8002b62:	2301      	movs	r3, #1
 8002b64:	633b      	str	r3, [r7, #48]	; 0x30
 8002b66:	e018      	b.n	8002b9a <xEventGroupWaitBits+0x116>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <xEventGroupWaitBits+0xf2>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8002b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b74:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d003      	beq.n	8002b84 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8002b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b82:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8002b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b86:	1d18      	adds	r0, r3, #4
 8002b88:	68ba      	ldr	r2, [r7, #8]
 8002b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b90:	4619      	mov	r1, r3
 8002b92:	f001 faed 	bl	8004170 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8002b96:	2300      	movs	r3, #0
 8002b98:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8002b9a:	f001 f8ff 	bl	8003d9c <xTaskResumeAll>
 8002b9e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8002ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d031      	beq.n	8002c0a <xEventGroupWaitBits+0x186>
	{
		if( xAlreadyYielded == pdFALSE )
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d107      	bne.n	8002bbc <xEventGroupWaitBits+0x138>
		{
			portYIELD_WITHIN_API();
 8002bac:	4b19      	ldr	r3, [pc, #100]	; (8002c14 <xEventGroupWaitBits+0x190>)
 8002bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	f3bf 8f4f 	dsb	sy
 8002bb8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8002bbc:	f001 fde2 	bl	8004784 <uxTaskResetEventItemValue>
 8002bc0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8002bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d11a      	bne.n	8002c02 <xEventGroupWaitBits+0x17e>
		{
			taskENTER_CRITICAL();
 8002bcc:	f002 fa96 	bl	80050fc <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8002bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	68b9      	ldr	r1, [r7, #8]
 8002bda:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002bdc:	f000 f8e6 	bl	8002dac <prvTestWaitCondition>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d009      	beq.n	8002bfa <xEventGroupWaitBits+0x176>
				{
					if( xClearOnExit != pdFALSE )
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d006      	beq.n	8002bfa <xEventGroupWaitBits+0x176>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	401a      	ands	r2, r3
 8002bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8002bfe:	f002 faab 	bl	8005158 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c08:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8002c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3740      	adds	r7, #64	; 0x40
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	e000ed04 	.word	0xe000ed04

08002c18 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08e      	sub	sp, #56	; 0x38
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8002c22:	2300      	movs	r3, #0
 8002c24:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d109      	bne.n	8002c48 <xEventGroupSetBits+0x30>
 8002c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c38:	f383 8811 	msr	BASEPRI, r3
 8002c3c:	f3bf 8f6f 	isb	sy
 8002c40:	f3bf 8f4f 	dsb	sy
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	e7fe      	b.n	8002c46 <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d009      	beq.n	8002c66 <xEventGroupSetBits+0x4e>
 8002c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c56:	f383 8811 	msr	BASEPRI, r3
 8002c5a:	f3bf 8f6f 	isb	sy
 8002c5e:	f3bf 8f4f 	dsb	sy
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	e7fe      	b.n	8002c64 <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8002c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c68:	3304      	adds	r3, #4
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	3308      	adds	r3, #8
 8002c70:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8002c72:	f001 f885 	bl	8003d80 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8002c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	431a      	orrs	r2, r3
 8002c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c86:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8002c88:	e03c      	b.n	8002d04 <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 8002c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8002c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8002c96:	2300      	movs	r3, #0
 8002c98:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002ca0:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002ca8:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d108      	bne.n	8002cc6 <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8002cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00b      	beq.n	8002cd8 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cc4:	e008      	b.n	8002cd8 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8002cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d101      	bne.n	8002cd8 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8002cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d010      	beq.n	8002d00 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8002ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8002cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002cfc:	f001 fafe 	bl	80042fc <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8002d04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d1be      	bne.n	8002c8a <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8002d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d12:	43db      	mvns	r3, r3
 8002d14:	401a      	ands	r2, r3
 8002d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d18:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8002d1a:	f001 f83f 	bl	8003d9c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8002d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d20:	681b      	ldr	r3, [r3, #0]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3738      	adds	r7, #56	; 0x38
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <vEventGroupDelete>:
/*-----------------------------------------------------------*/

void vEventGroupDelete( EventGroupHandle_t xEventGroup )
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b086      	sub	sp, #24
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	617b      	str	r3, [r7, #20]
const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	613b      	str	r3, [r7, #16]

	vTaskSuspendAll();
 8002d3c:	f001 f820 	bl	8003d80 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_DELETE( xEventGroup );

		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8002d40:	e016      	b.n	8002d70 <vEventGroupDelete+0x46>
		{
			/* Unblock the task, returning 0 as the event list is being deleted
			and cannot therefore have any bits set. */
			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	3308      	adds	r3, #8
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d109      	bne.n	8002d62 <vEventGroupDelete+0x38>
 8002d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d52:	f383 8811 	msr	BASEPRI, r3
 8002d56:	f3bf 8f6f 	isb	sy
 8002d5a:	f3bf 8f4f 	dsb	sy
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	e7fe      	b.n	8002d60 <vEventGroupDelete+0x36>
			vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f001 fac6 	bl	80042fc <vTaskRemoveFromUnorderedEventList>
		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1e4      	bne.n	8002d42 <vEventGroupDelete+0x18>
		}
		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
		{
			/* The event group could have been allocated statically or
			dynamically, so check before attempting to free the memory. */
			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	7f1b      	ldrb	r3, [r3, #28]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d102      	bne.n	8002d86 <vEventGroupDelete+0x5c>
			{
				vPortFree( pxEventBits );
 8002d80:	6978      	ldr	r0, [r7, #20]
 8002d82:	f002 fb97 	bl	80054b4 <vPortFree>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
	( void ) xTaskResumeAll();
 8002d86:	f001 f809 	bl	8003d9c <xTaskResumeAll>
}
 8002d8a:	bf00      	nop
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b082      	sub	sp, #8
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8002d9c:	6839      	ldr	r1, [r7, #0]
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7ff ff3a 	bl	8002c18 <xEventGroupSetBits>
}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8002dac:	b480      	push	{r7}
 8002dae:	b087      	sub	sp, #28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d107      	bne.n	8002dd2 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00a      	beq.n	8002de2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	617b      	str	r3, [r7, #20]
 8002dd0:	e007      	b.n	8002de2 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d101      	bne.n	8002de2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8002dde:	2301      	movs	r3, #1
 8002de0:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8002de2:	697b      	ldr	r3, [r7, #20]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	371c      	adds	r7, #28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	68f9      	ldr	r1, [r7, #12]
 8002e02:	4804      	ldr	r0, [pc, #16]	; (8002e14 <xEventGroupSetBitsFromISR+0x24>)
 8002e04:	f002 f834 	bl	8004e70 <xTimerPendFunctionCallFromISR>
 8002e08:	6178      	str	r0, [r7, #20]

		return xReturn;
 8002e0a:	697b      	ldr	r3, [r7, #20]
	}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	08002d93 	.word	0x08002d93

08002e18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f103 0208 	add.w	r2, r3, #8
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f103 0208 	add.w	r2, r3, #8
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f103 0208 	add.w	r2, r3, #8
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e72:	b480      	push	{r7}
 8002e74:	b085      	sub	sp, #20
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
 8002e7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	601a      	str	r2, [r3, #0]
}
 8002eae:	bf00      	nop
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b085      	sub	sp, #20
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed0:	d103      	bne.n	8002eda <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	e00c      	b.n	8002ef4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3308      	adds	r3, #8
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	e002      	b.n	8002ee8 <vListInsert+0x2e>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d2f6      	bcs.n	8002ee2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	1c5a      	adds	r2, r3, #1
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	601a      	str	r2, [r3, #0]
}
 8002f20:	bf00      	nop
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6892      	ldr	r2, [r2, #8]
 8002f42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6852      	ldr	r2, [r2, #4]
 8002f4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d103      	bne.n	8002f60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	1e5a      	subs	r2, r3, #1
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d109      	bne.n	8002fa8 <xQueueGenericReset+0x28>
 8002f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f98:	f383 8811 	msr	BASEPRI, r3
 8002f9c:	f3bf 8f6f 	isb	sy
 8002fa0:	f3bf 8f4f 	dsb	sy
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	e7fe      	b.n	8002fa6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002fa8:	f002 f8a8 	bl	80050fc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb4:	68f9      	ldr	r1, [r7, #12]
 8002fb6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fb8:	fb01 f303 	mul.w	r3, r1, r3
 8002fbc:	441a      	add	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	68f9      	ldr	r1, [r7, #12]
 8002fdc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002fde:	fb01 f303 	mul.w	r3, r1, r3
 8002fe2:	441a      	add	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	22ff      	movs	r2, #255	; 0xff
 8002fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	22ff      	movs	r2, #255	; 0xff
 8002ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d114      	bne.n	8003028 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d01a      	beq.n	800303c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	3310      	adds	r3, #16
 800300a:	4618      	mov	r0, r3
 800300c:	f001 f914 	bl	8004238 <xTaskRemoveFromEventList>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d012      	beq.n	800303c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003016:	4b0d      	ldr	r3, [pc, #52]	; (800304c <xQueueGenericReset+0xcc>)
 8003018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	f3bf 8f4f 	dsb	sy
 8003022:	f3bf 8f6f 	isb	sy
 8003026:	e009      	b.n	800303c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	3310      	adds	r3, #16
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff fef3 	bl	8002e18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	3324      	adds	r3, #36	; 0x24
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff feee 	bl	8002e18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800303c:	f002 f88c 	bl	8005158 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003040:	2301      	movs	r3, #1
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	e000ed04 	.word	0xe000ed04

08003050 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003050:	b580      	push	{r7, lr}
 8003052:	b08e      	sub	sp, #56	; 0x38
 8003054:	af02      	add	r7, sp, #8
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
 800305c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d109      	bne.n	8003078 <xQueueGenericCreateStatic+0x28>
 8003064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003068:	f383 8811 	msr	BASEPRI, r3
 800306c:	f3bf 8f6f 	isb	sy
 8003070:	f3bf 8f4f 	dsb	sy
 8003074:	62bb      	str	r3, [r7, #40]	; 0x28
 8003076:	e7fe      	b.n	8003076 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d109      	bne.n	8003092 <xQueueGenericCreateStatic+0x42>
 800307e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003082:	f383 8811 	msr	BASEPRI, r3
 8003086:	f3bf 8f6f 	isb	sy
 800308a:	f3bf 8f4f 	dsb	sy
 800308e:	627b      	str	r3, [r7, #36]	; 0x24
 8003090:	e7fe      	b.n	8003090 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d002      	beq.n	800309e <xQueueGenericCreateStatic+0x4e>
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <xQueueGenericCreateStatic+0x52>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <xQueueGenericCreateStatic+0x54>
 80030a2:	2300      	movs	r3, #0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d109      	bne.n	80030bc <xQueueGenericCreateStatic+0x6c>
 80030a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ac:	f383 8811 	msr	BASEPRI, r3
 80030b0:	f3bf 8f6f 	isb	sy
 80030b4:	f3bf 8f4f 	dsb	sy
 80030b8:	623b      	str	r3, [r7, #32]
 80030ba:	e7fe      	b.n	80030ba <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d102      	bne.n	80030c8 <xQueueGenericCreateStatic+0x78>
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <xQueueGenericCreateStatic+0x7c>
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <xQueueGenericCreateStatic+0x7e>
 80030cc:	2300      	movs	r3, #0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d109      	bne.n	80030e6 <xQueueGenericCreateStatic+0x96>
 80030d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d6:	f383 8811 	msr	BASEPRI, r3
 80030da:	f3bf 8f6f 	isb	sy
 80030de:	f3bf 8f4f 	dsb	sy
 80030e2:	61fb      	str	r3, [r7, #28]
 80030e4:	e7fe      	b.n	80030e4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80030e6:	2350      	movs	r3, #80	; 0x50
 80030e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2b50      	cmp	r3, #80	; 0x50
 80030ee:	d009      	beq.n	8003104 <xQueueGenericCreateStatic+0xb4>
 80030f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f4:	f383 8811 	msr	BASEPRI, r3
 80030f8:	f3bf 8f6f 	isb	sy
 80030fc:	f3bf 8f4f 	dsb	sy
 8003100:	61bb      	str	r3, [r7, #24]
 8003102:	e7fe      	b.n	8003102 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00d      	beq.n	800312a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800310e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003116:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800311a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	4613      	mov	r3, r2
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	68b9      	ldr	r1, [r7, #8]
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 f805 	bl	8003134 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800312a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800312c:	4618      	mov	r0, r3
 800312e:	3730      	adds	r7, #48	; 0x30
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
 8003140:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d103      	bne.n	8003150 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	e002      	b.n	8003156 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003162:	2101      	movs	r1, #1
 8003164:	69b8      	ldr	r0, [r7, #24]
 8003166:	f7ff ff0b 	bl	8002f80 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003172:	bf00      	nop
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
	...

0800317c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08e      	sub	sp, #56	; 0x38
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
 8003188:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800318a:	2300      	movs	r3, #0
 800318c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003194:	2b00      	cmp	r3, #0
 8003196:	d109      	bne.n	80031ac <xQueueGenericSend+0x30>
 8003198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319c:	f383 8811 	msr	BASEPRI, r3
 80031a0:	f3bf 8f6f 	isb	sy
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80031aa:	e7fe      	b.n	80031aa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d103      	bne.n	80031ba <xQueueGenericSend+0x3e>
 80031b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <xQueueGenericSend+0x42>
 80031ba:	2301      	movs	r3, #1
 80031bc:	e000      	b.n	80031c0 <xQueueGenericSend+0x44>
 80031be:	2300      	movs	r3, #0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d109      	bne.n	80031d8 <xQueueGenericSend+0x5c>
 80031c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c8:	f383 8811 	msr	BASEPRI, r3
 80031cc:	f3bf 8f6f 	isb	sy
 80031d0:	f3bf 8f4f 	dsb	sy
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
 80031d6:	e7fe      	b.n	80031d6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d103      	bne.n	80031e6 <xQueueGenericSend+0x6a>
 80031de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d101      	bne.n	80031ea <xQueueGenericSend+0x6e>
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <xQueueGenericSend+0x70>
 80031ea:	2300      	movs	r3, #0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d109      	bne.n	8003204 <xQueueGenericSend+0x88>
 80031f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f4:	f383 8811 	msr	BASEPRI, r3
 80031f8:	f3bf 8f6f 	isb	sy
 80031fc:	f3bf 8f4f 	dsb	sy
 8003200:	623b      	str	r3, [r7, #32]
 8003202:	e7fe      	b.n	8003202 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003204:	f001 fa34 	bl	8004670 <xTaskGetSchedulerState>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d102      	bne.n	8003214 <xQueueGenericSend+0x98>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <xQueueGenericSend+0x9c>
 8003214:	2301      	movs	r3, #1
 8003216:	e000      	b.n	800321a <xQueueGenericSend+0x9e>
 8003218:	2300      	movs	r3, #0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d109      	bne.n	8003232 <xQueueGenericSend+0xb6>
 800321e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003222:	f383 8811 	msr	BASEPRI, r3
 8003226:	f3bf 8f6f 	isb	sy
 800322a:	f3bf 8f4f 	dsb	sy
 800322e:	61fb      	str	r3, [r7, #28]
 8003230:	e7fe      	b.n	8003230 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003232:	f001 ff63 	bl	80050fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800323a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323e:	429a      	cmp	r2, r3
 8003240:	d302      	bcc.n	8003248 <xQueueGenericSend+0xcc>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b02      	cmp	r3, #2
 8003246:	d129      	bne.n	800329c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	68b9      	ldr	r1, [r7, #8]
 800324c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800324e:	f000 f9ff 	bl	8003650 <prvCopyDataToQueue>
 8003252:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	2b00      	cmp	r3, #0
 800325a:	d010      	beq.n	800327e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800325c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325e:	3324      	adds	r3, #36	; 0x24
 8003260:	4618      	mov	r0, r3
 8003262:	f000 ffe9 	bl	8004238 <xTaskRemoveFromEventList>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d013      	beq.n	8003294 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800326c:	4b3f      	ldr	r3, [pc, #252]	; (800336c <xQueueGenericSend+0x1f0>)
 800326e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	f3bf 8f4f 	dsb	sy
 8003278:	f3bf 8f6f 	isb	sy
 800327c:	e00a      	b.n	8003294 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800327e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003280:	2b00      	cmp	r3, #0
 8003282:	d007      	beq.n	8003294 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003284:	4b39      	ldr	r3, [pc, #228]	; (800336c <xQueueGenericSend+0x1f0>)
 8003286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	f3bf 8f4f 	dsb	sy
 8003290:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003294:	f001 ff60 	bl	8005158 <vPortExitCritical>
				return pdPASS;
 8003298:	2301      	movs	r3, #1
 800329a:	e063      	b.n	8003364 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d103      	bne.n	80032aa <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032a2:	f001 ff59 	bl	8005158 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80032a6:	2300      	movs	r3, #0
 80032a8:	e05c      	b.n	8003364 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d106      	bne.n	80032be <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032b0:	f107 0314 	add.w	r3, r7, #20
 80032b4:	4618      	mov	r0, r3
 80032b6:	f001 f881 	bl	80043bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032ba:	2301      	movs	r3, #1
 80032bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032be:	f001 ff4b 	bl	8005158 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032c2:	f000 fd5d 	bl	8003d80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032c6:	f001 ff19 	bl	80050fc <vPortEnterCritical>
 80032ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032d0:	b25b      	sxtb	r3, r3
 80032d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d6:	d103      	bne.n	80032e0 <xQueueGenericSend+0x164>
 80032d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032e6:	b25b      	sxtb	r3, r3
 80032e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ec:	d103      	bne.n	80032f6 <xQueueGenericSend+0x17a>
 80032ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032f6:	f001 ff2f 	bl	8005158 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032fa:	1d3a      	adds	r2, r7, #4
 80032fc:	f107 0314 	add.w	r3, r7, #20
 8003300:	4611      	mov	r1, r2
 8003302:	4618      	mov	r0, r3
 8003304:	f001 f870 	bl	80043e8 <xTaskCheckForTimeOut>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d124      	bne.n	8003358 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800330e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003310:	f000 fa96 	bl	8003840 <prvIsQueueFull>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d018      	beq.n	800334c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800331a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331c:	3310      	adds	r3, #16
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	4611      	mov	r1, r2
 8003322:	4618      	mov	r0, r3
 8003324:	f000 ff00 	bl	8004128 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003328:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800332a:	f000 fa21 	bl	8003770 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800332e:	f000 fd35 	bl	8003d9c <xTaskResumeAll>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	f47f af7c 	bne.w	8003232 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800333a:	4b0c      	ldr	r3, [pc, #48]	; (800336c <xQueueGenericSend+0x1f0>)
 800333c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	f3bf 8f4f 	dsb	sy
 8003346:	f3bf 8f6f 	isb	sy
 800334a:	e772      	b.n	8003232 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800334c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800334e:	f000 fa0f 	bl	8003770 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003352:	f000 fd23 	bl	8003d9c <xTaskResumeAll>
 8003356:	e76c      	b.n	8003232 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003358:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800335a:	f000 fa09 	bl	8003770 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800335e:	f000 fd1d 	bl	8003d9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003362:	2300      	movs	r3, #0
		}
	}
}
 8003364:	4618      	mov	r0, r3
 8003366:	3738      	adds	r7, #56	; 0x38
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	e000ed04 	.word	0xe000ed04

08003370 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b08e      	sub	sp, #56	; 0x38
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003384:	2b00      	cmp	r3, #0
 8003386:	d109      	bne.n	800339c <xQueueGenericSendFromISR+0x2c>
 8003388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338c:	f383 8811 	msr	BASEPRI, r3
 8003390:	f3bf 8f6f 	isb	sy
 8003394:	f3bf 8f4f 	dsb	sy
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
 800339a:	e7fe      	b.n	800339a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d103      	bne.n	80033aa <xQueueGenericSendFromISR+0x3a>
 80033a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <xQueueGenericSendFromISR+0x3e>
 80033aa:	2301      	movs	r3, #1
 80033ac:	e000      	b.n	80033b0 <xQueueGenericSendFromISR+0x40>
 80033ae:	2300      	movs	r3, #0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d109      	bne.n	80033c8 <xQueueGenericSendFromISR+0x58>
 80033b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b8:	f383 8811 	msr	BASEPRI, r3
 80033bc:	f3bf 8f6f 	isb	sy
 80033c0:	f3bf 8f4f 	dsb	sy
 80033c4:	623b      	str	r3, [r7, #32]
 80033c6:	e7fe      	b.n	80033c6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d103      	bne.n	80033d6 <xQueueGenericSendFromISR+0x66>
 80033ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d101      	bne.n	80033da <xQueueGenericSendFromISR+0x6a>
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <xQueueGenericSendFromISR+0x6c>
 80033da:	2300      	movs	r3, #0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d109      	bne.n	80033f4 <xQueueGenericSendFromISR+0x84>
 80033e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e4:	f383 8811 	msr	BASEPRI, r3
 80033e8:	f3bf 8f6f 	isb	sy
 80033ec:	f3bf 8f4f 	dsb	sy
 80033f0:	61fb      	str	r3, [r7, #28]
 80033f2:	e7fe      	b.n	80033f2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033f4:	f001 ff5e 	bl	80052b4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80033f8:	f3ef 8211 	mrs	r2, BASEPRI
 80033fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003400:	f383 8811 	msr	BASEPRI, r3
 8003404:	f3bf 8f6f 	isb	sy
 8003408:	f3bf 8f4f 	dsb	sy
 800340c:	61ba      	str	r2, [r7, #24]
 800340e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003410:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003412:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003416:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341c:	429a      	cmp	r2, r3
 800341e:	d302      	bcc.n	8003426 <xQueueGenericSendFromISR+0xb6>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2b02      	cmp	r3, #2
 8003424:	d12c      	bne.n	8003480 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003428:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800342c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	68b9      	ldr	r1, [r7, #8]
 8003434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003436:	f000 f90b 	bl	8003650 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800343a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800343e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003442:	d112      	bne.n	800346a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	2b00      	cmp	r3, #0
 800344a:	d016      	beq.n	800347a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800344c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344e:	3324      	adds	r3, #36	; 0x24
 8003450:	4618      	mov	r0, r3
 8003452:	f000 fef1 	bl	8004238 <xTaskRemoveFromEventList>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00e      	beq.n	800347a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00b      	beq.n	800347a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	e007      	b.n	800347a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800346a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800346e:	3301      	adds	r3, #1
 8003470:	b2db      	uxtb	r3, r3
 8003472:	b25a      	sxtb	r2, r3
 8003474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800347a:	2301      	movs	r3, #1
 800347c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800347e:	e001      	b.n	8003484 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003480:	2300      	movs	r3, #0
 8003482:	637b      	str	r3, [r7, #52]	; 0x34
 8003484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003486:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800348e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003490:	4618      	mov	r0, r3
 8003492:	3738      	adds	r7, #56	; 0x38
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b08c      	sub	sp, #48	; 0x30
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80034a4:	2300      	movs	r3, #0
 80034a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d109      	bne.n	80034c6 <xQueueReceive+0x2e>
	__asm volatile
 80034b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b6:	f383 8811 	msr	BASEPRI, r3
 80034ba:	f3bf 8f6f 	isb	sy
 80034be:	f3bf 8f4f 	dsb	sy
 80034c2:	623b      	str	r3, [r7, #32]
 80034c4:	e7fe      	b.n	80034c4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d103      	bne.n	80034d4 <xQueueReceive+0x3c>
 80034cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <xQueueReceive+0x40>
 80034d4:	2301      	movs	r3, #1
 80034d6:	e000      	b.n	80034da <xQueueReceive+0x42>
 80034d8:	2300      	movs	r3, #0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d109      	bne.n	80034f2 <xQueueReceive+0x5a>
 80034de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e2:	f383 8811 	msr	BASEPRI, r3
 80034e6:	f3bf 8f6f 	isb	sy
 80034ea:	f3bf 8f4f 	dsb	sy
 80034ee:	61fb      	str	r3, [r7, #28]
 80034f0:	e7fe      	b.n	80034f0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034f2:	f001 f8bd 	bl	8004670 <xTaskGetSchedulerState>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d102      	bne.n	8003502 <xQueueReceive+0x6a>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <xQueueReceive+0x6e>
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <xQueueReceive+0x70>
 8003506:	2300      	movs	r3, #0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d109      	bne.n	8003520 <xQueueReceive+0x88>
 800350c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003510:	f383 8811 	msr	BASEPRI, r3
 8003514:	f3bf 8f6f 	isb	sy
 8003518:	f3bf 8f4f 	dsb	sy
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	e7fe      	b.n	800351e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003520:	f001 fdec 	bl	80050fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003528:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01f      	beq.n	8003570 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003530:	68b9      	ldr	r1, [r7, #8]
 8003532:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003534:	f000 f8f6 	bl	8003724 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	1e5a      	subs	r2, r3, #1
 800353c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00f      	beq.n	8003568 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354a:	3310      	adds	r3, #16
 800354c:	4618      	mov	r0, r3
 800354e:	f000 fe73 	bl	8004238 <xTaskRemoveFromEventList>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d007      	beq.n	8003568 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003558:	4b3c      	ldr	r3, [pc, #240]	; (800364c <xQueueReceive+0x1b4>)
 800355a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	f3bf 8f4f 	dsb	sy
 8003564:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003568:	f001 fdf6 	bl	8005158 <vPortExitCritical>
				return pdPASS;
 800356c:	2301      	movs	r3, #1
 800356e:	e069      	b.n	8003644 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d103      	bne.n	800357e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003576:	f001 fdef 	bl	8005158 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800357a:	2300      	movs	r3, #0
 800357c:	e062      	b.n	8003644 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800357e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003580:	2b00      	cmp	r3, #0
 8003582:	d106      	bne.n	8003592 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003584:	f107 0310 	add.w	r3, r7, #16
 8003588:	4618      	mov	r0, r3
 800358a:	f000 ff17 	bl	80043bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800358e:	2301      	movs	r3, #1
 8003590:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003592:	f001 fde1 	bl	8005158 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003596:	f000 fbf3 	bl	8003d80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800359a:	f001 fdaf 	bl	80050fc <vPortEnterCritical>
 800359e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035a4:	b25b      	sxtb	r3, r3
 80035a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035aa:	d103      	bne.n	80035b4 <xQueueReceive+0x11c>
 80035ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035ba:	b25b      	sxtb	r3, r3
 80035bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c0:	d103      	bne.n	80035ca <xQueueReceive+0x132>
 80035c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035ca:	f001 fdc5 	bl	8005158 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035ce:	1d3a      	adds	r2, r7, #4
 80035d0:	f107 0310 	add.w	r3, r7, #16
 80035d4:	4611      	mov	r1, r2
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 ff06 	bl	80043e8 <xTaskCheckForTimeOut>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d123      	bne.n	800362a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035e4:	f000 f916 	bl	8003814 <prvIsQueueEmpty>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d017      	beq.n	800361e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f0:	3324      	adds	r3, #36	; 0x24
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	4611      	mov	r1, r2
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 fd96 	bl	8004128 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80035fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035fe:	f000 f8b7 	bl	8003770 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003602:	f000 fbcb 	bl	8003d9c <xTaskResumeAll>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d189      	bne.n	8003520 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800360c:	4b0f      	ldr	r3, [pc, #60]	; (800364c <xQueueReceive+0x1b4>)
 800360e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	f3bf 8f6f 	isb	sy
 800361c:	e780      	b.n	8003520 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800361e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003620:	f000 f8a6 	bl	8003770 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003624:	f000 fbba 	bl	8003d9c <xTaskResumeAll>
 8003628:	e77a      	b.n	8003520 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800362a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800362c:	f000 f8a0 	bl	8003770 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003630:	f000 fbb4 	bl	8003d9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003634:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003636:	f000 f8ed 	bl	8003814 <prvIsQueueEmpty>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	f43f af6f 	beq.w	8003520 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003642:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003644:	4618      	mov	r0, r3
 8003646:	3730      	adds	r7, #48	; 0x30
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	e000ed04 	.word	0xe000ed04

08003650 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800365c:	2300      	movs	r3, #0
 800365e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003664:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10d      	bne.n	800368a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d14d      	bne.n	8003712 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	4618      	mov	r0, r3
 800367c:	f001 f816 	bl	80046ac <xTaskPriorityDisinherit>
 8003680:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	605a      	str	r2, [r3, #4]
 8003688:	e043      	b.n	8003712 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d119      	bne.n	80036c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6898      	ldr	r0, [r3, #8]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	461a      	mov	r2, r3
 800369a:	68b9      	ldr	r1, [r7, #8]
 800369c:	f002 f842 	bl	8005724 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a8:	441a      	add	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d32b      	bcc.n	8003712 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	609a      	str	r2, [r3, #8]
 80036c2:	e026      	b.n	8003712 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	68d8      	ldr	r0, [r3, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	461a      	mov	r2, r3
 80036ce:	68b9      	ldr	r1, [r7, #8]
 80036d0:	f002 f828 	bl	8005724 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	425b      	negs	r3, r3
 80036de:	441a      	add	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	68da      	ldr	r2, [r3, #12]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d207      	bcs.n	8003700 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	425b      	negs	r3, r3
 80036fa:	441a      	add	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d105      	bne.n	8003712 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	3b01      	subs	r3, #1
 8003710:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800371a:	697b      	ldr	r3, [r7, #20]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	d018      	beq.n	8003768 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	441a      	add	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68da      	ldr	r2, [r3, #12]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	429a      	cmp	r2, r3
 800374e:	d303      	bcc.n	8003758 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68d9      	ldr	r1, [r3, #12]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	461a      	mov	r2, r3
 8003762:	6838      	ldr	r0, [r7, #0]
 8003764:	f001 ffde 	bl	8005724 <memcpy>
	}
}
 8003768:	bf00      	nop
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003778:	f001 fcc0 	bl	80050fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003782:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003784:	e011      	b.n	80037aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	2b00      	cmp	r3, #0
 800378c:	d012      	beq.n	80037b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3324      	adds	r3, #36	; 0x24
 8003792:	4618      	mov	r0, r3
 8003794:	f000 fd50 	bl	8004238 <xTaskRemoveFromEventList>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800379e:	f000 fe83 	bl	80044a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80037a2:	7bfb      	ldrb	r3, [r7, #15]
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	dce9      	bgt.n	8003786 <prvUnlockQueue+0x16>
 80037b2:	e000      	b.n	80037b6 <prvUnlockQueue+0x46>
					break;
 80037b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	22ff      	movs	r2, #255	; 0xff
 80037ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80037be:	f001 fccb 	bl	8005158 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80037c2:	f001 fc9b 	bl	80050fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037ce:	e011      	b.n	80037f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d012      	beq.n	80037fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3310      	adds	r3, #16
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 fd2b 	bl	8004238 <xTaskRemoveFromEventList>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80037e8:	f000 fe5e 	bl	80044a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80037ec:	7bbb      	ldrb	r3, [r7, #14]
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	dce9      	bgt.n	80037d0 <prvUnlockQueue+0x60>
 80037fc:	e000      	b.n	8003800 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80037fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	22ff      	movs	r2, #255	; 0xff
 8003804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003808:	f001 fca6 	bl	8005158 <vPortExitCritical>
}
 800380c:	bf00      	nop
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800381c:	f001 fc6e 	bl	80050fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003824:	2b00      	cmp	r3, #0
 8003826:	d102      	bne.n	800382e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003828:	2301      	movs	r3, #1
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	e001      	b.n	8003832 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800382e:	2300      	movs	r3, #0
 8003830:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003832:	f001 fc91 	bl	8005158 <vPortExitCritical>

	return xReturn;
 8003836:	68fb      	ldr	r3, [r7, #12]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003848:	f001 fc58 	bl	80050fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003854:	429a      	cmp	r2, r3
 8003856:	d102      	bne.n	800385e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003858:	2301      	movs	r3, #1
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	e001      	b.n	8003862 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800385e:	2300      	movs	r3, #0
 8003860:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003862:	f001 fc79 	bl	8005158 <vPortExitCritical>

	return xReturn;
 8003866:	68fb      	ldr	r3, [r7, #12]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	e014      	b.n	80038aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003880:	4a0e      	ldr	r2, [pc, #56]	; (80038bc <vQueueAddToRegistry+0x4c>)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10b      	bne.n	80038a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800388c:	490b      	ldr	r1, [pc, #44]	; (80038bc <vQueueAddToRegistry+0x4c>)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003896:	4a09      	ldr	r2, [pc, #36]	; (80038bc <vQueueAddToRegistry+0x4c>)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	4413      	add	r3, r2
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80038a2:	e005      	b.n	80038b0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	3301      	adds	r3, #1
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2b07      	cmp	r3, #7
 80038ae:	d9e7      	bls.n	8003880 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80038b0:	bf00      	nop
 80038b2:	3714      	adds	r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	200049c4 	.word	0x200049c4

080038c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80038d0:	f001 fc14 	bl	80050fc <vPortEnterCritical>
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038da:	b25b      	sxtb	r3, r3
 80038dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e0:	d103      	bne.n	80038ea <vQueueWaitForMessageRestricted+0x2a>
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038f0:	b25b      	sxtb	r3, r3
 80038f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f6:	d103      	bne.n	8003900 <vQueueWaitForMessageRestricted+0x40>
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003900:	f001 fc2a 	bl	8005158 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003908:	2b00      	cmp	r3, #0
 800390a:	d106      	bne.n	800391a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	3324      	adds	r3, #36	; 0x24
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	68b9      	ldr	r1, [r7, #8]
 8003914:	4618      	mov	r0, r3
 8003916:	f000 fc65 	bl	80041e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800391a:	6978      	ldr	r0, [r7, #20]
 800391c:	f7ff ff28 	bl	8003770 <prvUnlockQueue>
	}
 8003920:	bf00      	nop
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003928:	b580      	push	{r7, lr}
 800392a:	b08e      	sub	sp, #56	; 0x38
 800392c:	af04      	add	r7, sp, #16
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
 8003934:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003938:	2b00      	cmp	r3, #0
 800393a:	d109      	bne.n	8003950 <xTaskCreateStatic+0x28>
 800393c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003940:	f383 8811 	msr	BASEPRI, r3
 8003944:	f3bf 8f6f 	isb	sy
 8003948:	f3bf 8f4f 	dsb	sy
 800394c:	623b      	str	r3, [r7, #32]
 800394e:	e7fe      	b.n	800394e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003952:	2b00      	cmp	r3, #0
 8003954:	d109      	bne.n	800396a <xTaskCreateStatic+0x42>
 8003956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395a:	f383 8811 	msr	BASEPRI, r3
 800395e:	f3bf 8f6f 	isb	sy
 8003962:	f3bf 8f4f 	dsb	sy
 8003966:	61fb      	str	r3, [r7, #28]
 8003968:	e7fe      	b.n	8003968 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800396a:	235c      	movs	r3, #92	; 0x5c
 800396c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	2b5c      	cmp	r3, #92	; 0x5c
 8003972:	d009      	beq.n	8003988 <xTaskCreateStatic+0x60>
 8003974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003978:	f383 8811 	msr	BASEPRI, r3
 800397c:	f3bf 8f6f 	isb	sy
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	61bb      	str	r3, [r7, #24]
 8003986:	e7fe      	b.n	8003986 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398a:	2b00      	cmp	r3, #0
 800398c:	d01e      	beq.n	80039cc <xTaskCreateStatic+0xa4>
 800398e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003990:	2b00      	cmp	r3, #0
 8003992:	d01b      	beq.n	80039cc <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800399c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	2202      	movs	r2, #2
 80039a2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039a6:	2300      	movs	r3, #0
 80039a8:	9303      	str	r3, [sp, #12]
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	9302      	str	r3, [sp, #8]
 80039ae:	f107 0314 	add.w	r3, r7, #20
 80039b2:	9301      	str	r3, [sp, #4]
 80039b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	68b9      	ldr	r1, [r7, #8]
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 f850 	bl	8003a64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039c6:	f000 f8d3 	bl	8003b70 <prvAddNewTaskToReadyList>
 80039ca:	e001      	b.n	80039d0 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80039cc:	2300      	movs	r3, #0
 80039ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80039d0:	697b      	ldr	r3, [r7, #20]
	}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3728      	adds	r7, #40	; 0x28
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b08c      	sub	sp, #48	; 0x30
 80039de:	af04      	add	r7, sp, #16
 80039e0:	60f8      	str	r0, [r7, #12]
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	603b      	str	r3, [r7, #0]
 80039e6:	4613      	mov	r3, r2
 80039e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039ea:	88fb      	ldrh	r3, [r7, #6]
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4618      	mov	r0, r3
 80039f0:	f001 fc9e 	bl	8005330 <pvPortMalloc>
 80039f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00e      	beq.n	8003a1a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80039fc:	205c      	movs	r0, #92	; 0x5c
 80039fe:	f001 fc97 	bl	8005330 <pvPortMalloc>
 8003a02:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	631a      	str	r2, [r3, #48]	; 0x30
 8003a10:	e005      	b.n	8003a1e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a12:	6978      	ldr	r0, [r7, #20]
 8003a14:	f001 fd4e 	bl	80054b4 <vPortFree>
 8003a18:	e001      	b.n	8003a1e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d017      	beq.n	8003a54 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a2c:	88fa      	ldrh	r2, [r7, #6]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	9303      	str	r3, [sp, #12]
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	9302      	str	r3, [sp, #8]
 8003a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a38:	9301      	str	r3, [sp, #4]
 8003a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	68b9      	ldr	r1, [r7, #8]
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 f80e 	bl	8003a64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a48:	69f8      	ldr	r0, [r7, #28]
 8003a4a:	f000 f891 	bl	8003b70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	61bb      	str	r3, [r7, #24]
 8003a52:	e002      	b.n	8003a5a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a54:	f04f 33ff 	mov.w	r3, #4294967295
 8003a58:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a5a:	69bb      	ldr	r3, [r7, #24]
	}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3720      	adds	r7, #32
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b088      	sub	sp, #32
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
 8003a70:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a74:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	21a5      	movs	r1, #165	; 0xa5
 8003a7e:	f001 fe5c 	bl	800573a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4413      	add	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	f023 0307 	bic.w	r3, r3, #7
 8003a9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d009      	beq.n	8003aba <prvInitialiseNewTask+0x56>
 8003aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aaa:	f383 8811 	msr	BASEPRI, r3
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	617b      	str	r3, [r7, #20]
 8003ab8:	e7fe      	b.n	8003ab8 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003aba:	2300      	movs	r3, #0
 8003abc:	61fb      	str	r3, [r7, #28]
 8003abe:	e012      	b.n	8003ae6 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	7819      	ldrb	r1, [r3, #0]
 8003ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	4413      	add	r3, r2
 8003ace:	3334      	adds	r3, #52	; 0x34
 8003ad0:	460a      	mov	r2, r1
 8003ad2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	4413      	add	r3, r2
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d006      	beq.n	8003aee <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	61fb      	str	r3, [r7, #28]
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	2b0f      	cmp	r3, #15
 8003aea:	d9e9      	bls.n	8003ac0 <prvInitialiseNewTask+0x5c>
 8003aec:	e000      	b.n	8003af0 <prvInitialiseNewTask+0x8c>
		{
			break;
 8003aee:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afa:	2b37      	cmp	r3, #55	; 0x37
 8003afc:	d901      	bls.n	8003b02 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003afe:	2337      	movs	r3, #55	; 0x37
 8003b00:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b06:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b0c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b10:	2200      	movs	r2, #0
 8003b12:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b16:	3304      	adds	r3, #4
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff f99d 	bl	8002e58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b20:	3318      	adds	r3, #24
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff f998 	bl	8002e58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b2c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b30:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b36:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b40:	2200      	movs	r2, #0
 8003b42:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	68f9      	ldr	r1, [r7, #12]
 8003b50:	69b8      	ldr	r0, [r7, #24]
 8003b52:	f001 f9ad 	bl	8004eb0 <pxPortInitialiseStack>
 8003b56:	4602      	mov	r2, r0
 8003b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d002      	beq.n	8003b68 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b66:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b68:	bf00      	nop
 8003b6a:	3720      	adds	r7, #32
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b78:	f001 fac0 	bl	80050fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b7c:	4b2d      	ldr	r3, [pc, #180]	; (8003c34 <prvAddNewTaskToReadyList+0xc4>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	3301      	adds	r3, #1
 8003b82:	4a2c      	ldr	r2, [pc, #176]	; (8003c34 <prvAddNewTaskToReadyList+0xc4>)
 8003b84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b86:	4b2c      	ldr	r3, [pc, #176]	; (8003c38 <prvAddNewTaskToReadyList+0xc8>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d109      	bne.n	8003ba2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b8e:	4a2a      	ldr	r2, [pc, #168]	; (8003c38 <prvAddNewTaskToReadyList+0xc8>)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b94:	4b27      	ldr	r3, [pc, #156]	; (8003c34 <prvAddNewTaskToReadyList+0xc4>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d110      	bne.n	8003bbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b9c:	f000 fca8 	bl	80044f0 <prvInitialiseTaskLists>
 8003ba0:	e00d      	b.n	8003bbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ba2:	4b26      	ldr	r3, [pc, #152]	; (8003c3c <prvAddNewTaskToReadyList+0xcc>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d109      	bne.n	8003bbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003baa:	4b23      	ldr	r3, [pc, #140]	; (8003c38 <prvAddNewTaskToReadyList+0xc8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d802      	bhi.n	8003bbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003bb8:	4a1f      	ldr	r2, [pc, #124]	; (8003c38 <prvAddNewTaskToReadyList+0xc8>)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bbe:	4b20      	ldr	r3, [pc, #128]	; (8003c40 <prvAddNewTaskToReadyList+0xd0>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	4a1e      	ldr	r2, [pc, #120]	; (8003c40 <prvAddNewTaskToReadyList+0xd0>)
 8003bc6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003bc8:	4b1d      	ldr	r3, [pc, #116]	; (8003c40 <prvAddNewTaskToReadyList+0xd0>)
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd4:	4b1b      	ldr	r3, [pc, #108]	; (8003c44 <prvAddNewTaskToReadyList+0xd4>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d903      	bls.n	8003be4 <prvAddNewTaskToReadyList+0x74>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be0:	4a18      	ldr	r2, [pc, #96]	; (8003c44 <prvAddNewTaskToReadyList+0xd4>)
 8003be2:	6013      	str	r3, [r2, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be8:	4613      	mov	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4a15      	ldr	r2, [pc, #84]	; (8003c48 <prvAddNewTaskToReadyList+0xd8>)
 8003bf2:	441a      	add	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4610      	mov	r0, r2
 8003bfc:	f7ff f939 	bl	8002e72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c00:	f001 faaa 	bl	8005158 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c04:	4b0d      	ldr	r3, [pc, #52]	; (8003c3c <prvAddNewTaskToReadyList+0xcc>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00e      	beq.n	8003c2a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c0c:	4b0a      	ldr	r3, [pc, #40]	; (8003c38 <prvAddNewTaskToReadyList+0xc8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d207      	bcs.n	8003c2a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c1a:	4b0c      	ldr	r3, [pc, #48]	; (8003c4c <prvAddNewTaskToReadyList+0xdc>)
 8003c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	f3bf 8f4f 	dsb	sy
 8003c26:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c2a:	bf00      	nop
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	20000bb8 	.word	0x20000bb8
 8003c38:	200006e4 	.word	0x200006e4
 8003c3c:	20000bc4 	.word	0x20000bc4
 8003c40:	20000bd4 	.word	0x20000bd4
 8003c44:	20000bc0 	.word	0x20000bc0
 8003c48:	200006e8 	.word	0x200006e8
 8003c4c:	e000ed04 	.word	0xe000ed04

08003c50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d016      	beq.n	8003c90 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c62:	4b13      	ldr	r3, [pc, #76]	; (8003cb0 <vTaskDelay+0x60>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d009      	beq.n	8003c7e <vTaskDelay+0x2e>
 8003c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6e:	f383 8811 	msr	BASEPRI, r3
 8003c72:	f3bf 8f6f 	isb	sy
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	60bb      	str	r3, [r7, #8]
 8003c7c:	e7fe      	b.n	8003c7c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003c7e:	f000 f87f 	bl	8003d80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c82:	2100      	movs	r1, #0
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 fd95 	bl	80047b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c8a:	f000 f887 	bl	8003d9c <xTaskResumeAll>
 8003c8e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d107      	bne.n	8003ca6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003c96:	4b07      	ldr	r3, [pc, #28]	; (8003cb4 <vTaskDelay+0x64>)
 8003c98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ca6:	bf00      	nop
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20000be0 	.word	0x20000be0
 8003cb4:	e000ed04 	.word	0xe000ed04

08003cb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08a      	sub	sp, #40	; 0x28
 8003cbc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003cc6:	463a      	mov	r2, r7
 8003cc8:	1d39      	adds	r1, r7, #4
 8003cca:	f107 0308 	add.w	r3, r7, #8
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fe fe54 	bl	800297c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003cd4:	6839      	ldr	r1, [r7, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	9202      	str	r2, [sp, #8]
 8003cdc:	9301      	str	r3, [sp, #4]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	460a      	mov	r2, r1
 8003ce6:	4920      	ldr	r1, [pc, #128]	; (8003d68 <vTaskStartScheduler+0xb0>)
 8003ce8:	4820      	ldr	r0, [pc, #128]	; (8003d6c <vTaskStartScheduler+0xb4>)
 8003cea:	f7ff fe1d 	bl	8003928 <xTaskCreateStatic>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	4b1f      	ldr	r3, [pc, #124]	; (8003d70 <vTaskStartScheduler+0xb8>)
 8003cf2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003cf4:	4b1e      	ldr	r3, [pc, #120]	; (8003d70 <vTaskStartScheduler+0xb8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d002      	beq.n	8003d02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	e001      	b.n	8003d06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d02:	2300      	movs	r3, #0
 8003d04:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d102      	bne.n	8003d12 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003d0c:	f000 fda6 	bl	800485c <xTimerCreateTimerTask>
 8003d10:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d115      	bne.n	8003d44 <vTaskStartScheduler+0x8c>
 8003d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1c:	f383 8811 	msr	BASEPRI, r3
 8003d20:	f3bf 8f6f 	isb	sy
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d2a:	4b12      	ldr	r3, [pc, #72]	; (8003d74 <vTaskStartScheduler+0xbc>)
 8003d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d30:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d32:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <vTaskStartScheduler+0xc0>)
 8003d34:	2201      	movs	r2, #1
 8003d36:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003d38:	4b10      	ldr	r3, [pc, #64]	; (8003d7c <vTaskStartScheduler+0xc4>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d3e:	f001 f93f 	bl	8004fc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d42:	e00d      	b.n	8003d60 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4a:	d109      	bne.n	8003d60 <vTaskStartScheduler+0xa8>
 8003d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d50:	f383 8811 	msr	BASEPRI, r3
 8003d54:	f3bf 8f6f 	isb	sy
 8003d58:	f3bf 8f4f 	dsb	sy
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	e7fe      	b.n	8003d5e <vTaskStartScheduler+0xa6>
}
 8003d60:	bf00      	nop
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	08005770 	.word	0x08005770
 8003d6c:	080044c1 	.word	0x080044c1
 8003d70:	20000bdc 	.word	0x20000bdc
 8003d74:	20000bd8 	.word	0x20000bd8
 8003d78:	20000bc4 	.word	0x20000bc4
 8003d7c:	20000bbc 	.word	0x20000bbc

08003d80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003d84:	4b04      	ldr	r3, [pc, #16]	; (8003d98 <vTaskSuspendAll+0x18>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	4a03      	ldr	r2, [pc, #12]	; (8003d98 <vTaskSuspendAll+0x18>)
 8003d8c:	6013      	str	r3, [r2, #0]
}
 8003d8e:	bf00      	nop
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	20000be0 	.word	0x20000be0

08003d9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003da2:	2300      	movs	r3, #0
 8003da4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003da6:	2300      	movs	r3, #0
 8003da8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003daa:	4b41      	ldr	r3, [pc, #260]	; (8003eb0 <xTaskResumeAll+0x114>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d109      	bne.n	8003dc6 <xTaskResumeAll+0x2a>
 8003db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db6:	f383 8811 	msr	BASEPRI, r3
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	603b      	str	r3, [r7, #0]
 8003dc4:	e7fe      	b.n	8003dc4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003dc6:	f001 f999 	bl	80050fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003dca:	4b39      	ldr	r3, [pc, #228]	; (8003eb0 <xTaskResumeAll+0x114>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	4a37      	ldr	r2, [pc, #220]	; (8003eb0 <xTaskResumeAll+0x114>)
 8003dd2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dd4:	4b36      	ldr	r3, [pc, #216]	; (8003eb0 <xTaskResumeAll+0x114>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d162      	bne.n	8003ea2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ddc:	4b35      	ldr	r3, [pc, #212]	; (8003eb4 <xTaskResumeAll+0x118>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d05e      	beq.n	8003ea2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003de4:	e02f      	b.n	8003e46 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003de6:	4b34      	ldr	r3, [pc, #208]	; (8003eb8 <xTaskResumeAll+0x11c>)
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	3318      	adds	r3, #24
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff f89a 	bl	8002f2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	3304      	adds	r3, #4
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff f895 	bl	8002f2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e06:	4b2d      	ldr	r3, [pc, #180]	; (8003ebc <xTaskResumeAll+0x120>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d903      	bls.n	8003e16 <xTaskResumeAll+0x7a>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e12:	4a2a      	ldr	r2, [pc, #168]	; (8003ebc <xTaskResumeAll+0x120>)
 8003e14:	6013      	str	r3, [r2, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4413      	add	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4a27      	ldr	r2, [pc, #156]	; (8003ec0 <xTaskResumeAll+0x124>)
 8003e24:	441a      	add	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	3304      	adds	r3, #4
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	f7ff f820 	bl	8002e72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e36:	4b23      	ldr	r3, [pc, #140]	; (8003ec4 <xTaskResumeAll+0x128>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d302      	bcc.n	8003e46 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003e40:	4b21      	ldr	r3, [pc, #132]	; (8003ec8 <xTaskResumeAll+0x12c>)
 8003e42:	2201      	movs	r2, #1
 8003e44:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e46:	4b1c      	ldr	r3, [pc, #112]	; (8003eb8 <xTaskResumeAll+0x11c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1cb      	bne.n	8003de6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e54:	f000 fbe6 	bl	8004624 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003e58:	4b1c      	ldr	r3, [pc, #112]	; (8003ecc <xTaskResumeAll+0x130>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d010      	beq.n	8003e86 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e64:	f000 f846 	bl	8003ef4 <xTaskIncrementTick>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003e6e:	4b16      	ldr	r3, [pc, #88]	; (8003ec8 <xTaskResumeAll+0x12c>)
 8003e70:	2201      	movs	r2, #1
 8003e72:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1f1      	bne.n	8003e64 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003e80:	4b12      	ldr	r3, [pc, #72]	; (8003ecc <xTaskResumeAll+0x130>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e86:	4b10      	ldr	r3, [pc, #64]	; (8003ec8 <xTaskResumeAll+0x12c>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d009      	beq.n	8003ea2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e92:	4b0f      	ldr	r3, [pc, #60]	; (8003ed0 <xTaskResumeAll+0x134>)
 8003e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	f3bf 8f4f 	dsb	sy
 8003e9e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ea2:	f001 f959 	bl	8005158 <vPortExitCritical>

	return xAlreadyYielded;
 8003ea6:	68bb      	ldr	r3, [r7, #8]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	20000be0 	.word	0x20000be0
 8003eb4:	20000bb8 	.word	0x20000bb8
 8003eb8:	20000b78 	.word	0x20000b78
 8003ebc:	20000bc0 	.word	0x20000bc0
 8003ec0:	200006e8 	.word	0x200006e8
 8003ec4:	200006e4 	.word	0x200006e4
 8003ec8:	20000bcc 	.word	0x20000bcc
 8003ecc:	20000bc8 	.word	0x20000bc8
 8003ed0:	e000ed04 	.word	0xe000ed04

08003ed4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003eda:	4b05      	ldr	r3, [pc, #20]	; (8003ef0 <xTaskGetTickCount+0x1c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003ee0:	687b      	ldr	r3, [r7, #4]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	20000bbc 	.word	0x20000bbc

08003ef4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003efa:	2300      	movs	r3, #0
 8003efc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003efe:	4b51      	ldr	r3, [pc, #324]	; (8004044 <xTaskIncrementTick+0x150>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f040 808d 	bne.w	8004022 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f08:	4b4f      	ldr	r3, [pc, #316]	; (8004048 <xTaskIncrementTick+0x154>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f10:	4a4d      	ldr	r2, [pc, #308]	; (8004048 <xTaskIncrementTick+0x154>)
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d11f      	bne.n	8003f5c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f1c:	4b4b      	ldr	r3, [pc, #300]	; (800404c <xTaskIncrementTick+0x158>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d009      	beq.n	8003f3a <xTaskIncrementTick+0x46>
 8003f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2a:	f383 8811 	msr	BASEPRI, r3
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	603b      	str	r3, [r7, #0]
 8003f38:	e7fe      	b.n	8003f38 <xTaskIncrementTick+0x44>
 8003f3a:	4b44      	ldr	r3, [pc, #272]	; (800404c <xTaskIncrementTick+0x158>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	4b43      	ldr	r3, [pc, #268]	; (8004050 <xTaskIncrementTick+0x15c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a41      	ldr	r2, [pc, #260]	; (800404c <xTaskIncrementTick+0x158>)
 8003f46:	6013      	str	r3, [r2, #0]
 8003f48:	4a41      	ldr	r2, [pc, #260]	; (8004050 <xTaskIncrementTick+0x15c>)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	4b41      	ldr	r3, [pc, #260]	; (8004054 <xTaskIncrementTick+0x160>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3301      	adds	r3, #1
 8003f54:	4a3f      	ldr	r2, [pc, #252]	; (8004054 <xTaskIncrementTick+0x160>)
 8003f56:	6013      	str	r3, [r2, #0]
 8003f58:	f000 fb64 	bl	8004624 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f5c:	4b3e      	ldr	r3, [pc, #248]	; (8004058 <xTaskIncrementTick+0x164>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d34e      	bcc.n	8004004 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f66:	4b39      	ldr	r3, [pc, #228]	; (800404c <xTaskIncrementTick+0x158>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <xTaskIncrementTick+0x80>
 8003f70:	2301      	movs	r3, #1
 8003f72:	e000      	b.n	8003f76 <xTaskIncrementTick+0x82>
 8003f74:	2300      	movs	r3, #0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d004      	beq.n	8003f84 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f7a:	4b37      	ldr	r3, [pc, #220]	; (8004058 <xTaskIncrementTick+0x164>)
 8003f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f80:	601a      	str	r2, [r3, #0]
					break;
 8003f82:	e03f      	b.n	8004004 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003f84:	4b31      	ldr	r3, [pc, #196]	; (800404c <xTaskIncrementTick+0x158>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d203      	bcs.n	8003fa4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f9c:	4a2e      	ldr	r2, [pc, #184]	; (8004058 <xTaskIncrementTick+0x164>)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6013      	str	r3, [r2, #0]
						break;
 8003fa2:	e02f      	b.n	8004004 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7fe ffbf 	bl	8002f2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d004      	beq.n	8003fc0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	3318      	adds	r3, #24
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7fe ffb6 	bl	8002f2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc4:	4b25      	ldr	r3, [pc, #148]	; (800405c <xTaskIncrementTick+0x168>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d903      	bls.n	8003fd4 <xTaskIncrementTick+0xe0>
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	4a22      	ldr	r2, [pc, #136]	; (800405c <xTaskIncrementTick+0x168>)
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd8:	4613      	mov	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4a1f      	ldr	r2, [pc, #124]	; (8004060 <xTaskIncrementTick+0x16c>)
 8003fe2:	441a      	add	r2, r3
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	4619      	mov	r1, r3
 8003fea:	4610      	mov	r0, r2
 8003fec:	f7fe ff41 	bl	8002e72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff4:	4b1b      	ldr	r3, [pc, #108]	; (8004064 <xTaskIncrementTick+0x170>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d3b3      	bcc.n	8003f66 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003ffe:	2301      	movs	r3, #1
 8004000:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004002:	e7b0      	b.n	8003f66 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004004:	4b17      	ldr	r3, [pc, #92]	; (8004064 <xTaskIncrementTick+0x170>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800400a:	4915      	ldr	r1, [pc, #84]	; (8004060 <xTaskIncrementTick+0x16c>)
 800400c:	4613      	mov	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	440b      	add	r3, r1
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d907      	bls.n	800402c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800401c:	2301      	movs	r3, #1
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	e004      	b.n	800402c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004022:	4b11      	ldr	r3, [pc, #68]	; (8004068 <xTaskIncrementTick+0x174>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3301      	adds	r3, #1
 8004028:	4a0f      	ldr	r2, [pc, #60]	; (8004068 <xTaskIncrementTick+0x174>)
 800402a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800402c:	4b0f      	ldr	r3, [pc, #60]	; (800406c <xTaskIncrementTick+0x178>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004034:	2301      	movs	r3, #1
 8004036:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004038:	697b      	ldr	r3, [r7, #20]
}
 800403a:	4618      	mov	r0, r3
 800403c:	3718      	adds	r7, #24
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	20000be0 	.word	0x20000be0
 8004048:	20000bbc 	.word	0x20000bbc
 800404c:	20000b70 	.word	0x20000b70
 8004050:	20000b74 	.word	0x20000b74
 8004054:	20000bd0 	.word	0x20000bd0
 8004058:	20000bd8 	.word	0x20000bd8
 800405c:	20000bc0 	.word	0x20000bc0
 8004060:	200006e8 	.word	0x200006e8
 8004064:	200006e4 	.word	0x200006e4
 8004068:	20000bc8 	.word	0x20000bc8
 800406c:	20000bcc 	.word	0x20000bcc

08004070 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004076:	4b27      	ldr	r3, [pc, #156]	; (8004114 <vTaskSwitchContext+0xa4>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800407e:	4b26      	ldr	r3, [pc, #152]	; (8004118 <vTaskSwitchContext+0xa8>)
 8004080:	2201      	movs	r2, #1
 8004082:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004084:	e040      	b.n	8004108 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004086:	4b24      	ldr	r3, [pc, #144]	; (8004118 <vTaskSwitchContext+0xa8>)
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800408c:	4b23      	ldr	r3, [pc, #140]	; (800411c <vTaskSwitchContext+0xac>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	e00f      	b.n	80040b4 <vTaskSwitchContext+0x44>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d109      	bne.n	80040ae <vTaskSwitchContext+0x3e>
 800409a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409e:	f383 8811 	msr	BASEPRI, r3
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	607b      	str	r3, [r7, #4]
 80040ac:	e7fe      	b.n	80040ac <vTaskSwitchContext+0x3c>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	3b01      	subs	r3, #1
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	491a      	ldr	r1, [pc, #104]	; (8004120 <vTaskSwitchContext+0xb0>)
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	4613      	mov	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	440b      	add	r3, r1
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d0e5      	beq.n	8004094 <vTaskSwitchContext+0x24>
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	4613      	mov	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4a13      	ldr	r2, [pc, #76]	; (8004120 <vTaskSwitchContext+0xb0>)
 80040d4:	4413      	add	r3, r2
 80040d6:	60bb      	str	r3, [r7, #8]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	605a      	str	r2, [r3, #4]
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	3308      	adds	r3, #8
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d104      	bne.n	80040f8 <vTaskSwitchContext+0x88>
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	605a      	str	r2, [r3, #4]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	4a09      	ldr	r2, [pc, #36]	; (8004124 <vTaskSwitchContext+0xb4>)
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	4a06      	ldr	r2, [pc, #24]	; (800411c <vTaskSwitchContext+0xac>)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6013      	str	r3, [r2, #0]
}
 8004108:	bf00      	nop
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	20000be0 	.word	0x20000be0
 8004118:	20000bcc 	.word	0x20000bcc
 800411c:	20000bc0 	.word	0x20000bc0
 8004120:	200006e8 	.word	0x200006e8
 8004124:	200006e4 	.word	0x200006e4

08004128 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d109      	bne.n	800414c <vTaskPlaceOnEventList+0x24>
 8004138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413c:	f383 8811 	msr	BASEPRI, r3
 8004140:	f3bf 8f6f 	isb	sy
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	e7fe      	b.n	800414a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800414c:	4b07      	ldr	r3, [pc, #28]	; (800416c <vTaskPlaceOnEventList+0x44>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3318      	adds	r3, #24
 8004152:	4619      	mov	r1, r3
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f7fe feb0 	bl	8002eba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800415a:	2101      	movs	r1, #1
 800415c:	6838      	ldr	r0, [r7, #0]
 800415e:	f000 fb29 	bl	80047b4 <prvAddCurrentTaskToDelayedList>
}
 8004162:	bf00      	nop
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	200006e4 	.word	0x200006e4

08004170 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d109      	bne.n	8004196 <vTaskPlaceOnUnorderedEventList+0x26>
 8004182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	e7fe      	b.n	8004194 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8004196:	4b11      	ldr	r3, [pc, #68]	; (80041dc <vTaskPlaceOnUnorderedEventList+0x6c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d109      	bne.n	80041b2 <vTaskPlaceOnUnorderedEventList+0x42>
 800419e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a2:	f383 8811 	msr	BASEPRI, r3
 80041a6:	f3bf 8f6f 	isb	sy
 80041aa:	f3bf 8f4f 	dsb	sy
 80041ae:	613b      	str	r3, [r7, #16]
 80041b0:	e7fe      	b.n	80041b0 <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80041b2:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <vTaskPlaceOnUnorderedEventList+0x70>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80041bc:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041be:	4b08      	ldr	r3, [pc, #32]	; (80041e0 <vTaskPlaceOnUnorderedEventList+0x70>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	3318      	adds	r3, #24
 80041c4:	4619      	mov	r1, r3
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f7fe fe53 	bl	8002e72 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80041cc:	2101      	movs	r1, #1
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 faf0 	bl	80047b4 <prvAddCurrentTaskToDelayedList>
}
 80041d4:	bf00      	nop
 80041d6:	3718      	adds	r7, #24
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	20000be0 	.word	0x20000be0
 80041e0:	200006e4 	.word	0x200006e4

080041e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d109      	bne.n	800420a <vTaskPlaceOnEventListRestricted+0x26>
 80041f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fa:	f383 8811 	msr	BASEPRI, r3
 80041fe:	f3bf 8f6f 	isb	sy
 8004202:	f3bf 8f4f 	dsb	sy
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	e7fe      	b.n	8004208 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800420a:	4b0a      	ldr	r3, [pc, #40]	; (8004234 <vTaskPlaceOnEventListRestricted+0x50>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3318      	adds	r3, #24
 8004210:	4619      	mov	r1, r3
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f7fe fe2d 	bl	8002e72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d002      	beq.n	8004224 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800421e:	f04f 33ff 	mov.w	r3, #4294967295
 8004222:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004224:	6879      	ldr	r1, [r7, #4]
 8004226:	68b8      	ldr	r0, [r7, #8]
 8004228:	f000 fac4 	bl	80047b4 <prvAddCurrentTaskToDelayedList>
	}
 800422c:	bf00      	nop
 800422e:	3718      	adds	r7, #24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	200006e4 	.word	0x200006e4

08004238 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d109      	bne.n	8004262 <xTaskRemoveFromEventList+0x2a>
 800424e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004252:	f383 8811 	msr	BASEPRI, r3
 8004256:	f3bf 8f6f 	isb	sy
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	e7fe      	b.n	8004260 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	3318      	adds	r3, #24
 8004266:	4618      	mov	r0, r3
 8004268:	f7fe fe60 	bl	8002f2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800426c:	4b1d      	ldr	r3, [pc, #116]	; (80042e4 <xTaskRemoveFromEventList+0xac>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d11d      	bne.n	80042b0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	3304      	adds	r3, #4
 8004278:	4618      	mov	r0, r3
 800427a:	f7fe fe57 	bl	8002f2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004282:	4b19      	ldr	r3, [pc, #100]	; (80042e8 <xTaskRemoveFromEventList+0xb0>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	429a      	cmp	r2, r3
 8004288:	d903      	bls.n	8004292 <xTaskRemoveFromEventList+0x5a>
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428e:	4a16      	ldr	r2, [pc, #88]	; (80042e8 <xTaskRemoveFromEventList+0xb0>)
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004296:	4613      	mov	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4413      	add	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4a13      	ldr	r2, [pc, #76]	; (80042ec <xTaskRemoveFromEventList+0xb4>)
 80042a0:	441a      	add	r2, r3
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	3304      	adds	r3, #4
 80042a6:	4619      	mov	r1, r3
 80042a8:	4610      	mov	r0, r2
 80042aa:	f7fe fde2 	bl	8002e72 <vListInsertEnd>
 80042ae:	e005      	b.n	80042bc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	3318      	adds	r3, #24
 80042b4:	4619      	mov	r1, r3
 80042b6:	480e      	ldr	r0, [pc, #56]	; (80042f0 <xTaskRemoveFromEventList+0xb8>)
 80042b8:	f7fe fddb 	bl	8002e72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c0:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <xTaskRemoveFromEventList+0xbc>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d905      	bls.n	80042d6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80042ca:	2301      	movs	r3, #1
 80042cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80042ce:	4b0a      	ldr	r3, [pc, #40]	; (80042f8 <xTaskRemoveFromEventList+0xc0>)
 80042d0:	2201      	movs	r2, #1
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	e001      	b.n	80042da <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80042d6:	2300      	movs	r3, #0
 80042d8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80042da:	697b      	ldr	r3, [r7, #20]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3718      	adds	r7, #24
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	20000be0 	.word	0x20000be0
 80042e8:	20000bc0 	.word	0x20000bc0
 80042ec:	200006e8 	.word	0x200006e8
 80042f0:	20000b78 	.word	0x20000b78
 80042f4:	200006e4 	.word	0x200006e4
 80042f8:	20000bcc 	.word	0x20000bcc

080042fc <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8004306:	4b28      	ldr	r3, [pc, #160]	; (80043a8 <vTaskRemoveFromUnorderedEventList+0xac>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d109      	bne.n	8004322 <vTaskRemoveFromUnorderedEventList+0x26>
 800430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	613b      	str	r3, [r7, #16]
 8004320:	e7fe      	b.n	8004320 <vTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d109      	bne.n	800434c <vTaskRemoveFromUnorderedEventList+0x50>
 8004338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433c:	f383 8811 	msr	BASEPRI, r3
 8004340:	f3bf 8f6f 	isb	sy
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	e7fe      	b.n	800434a <vTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7fe fded 	bl	8002f2c <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	3304      	adds	r3, #4
 8004356:	4618      	mov	r0, r3
 8004358:	f7fe fde8 	bl	8002f2c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004360:	4b12      	ldr	r3, [pc, #72]	; (80043ac <vTaskRemoveFromUnorderedEventList+0xb0>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	429a      	cmp	r2, r3
 8004366:	d903      	bls.n	8004370 <vTaskRemoveFromUnorderedEventList+0x74>
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436c:	4a0f      	ldr	r2, [pc, #60]	; (80043ac <vTaskRemoveFromUnorderedEventList+0xb0>)
 800436e:	6013      	str	r3, [r2, #0]
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004374:	4613      	mov	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4a0c      	ldr	r2, [pc, #48]	; (80043b0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800437e:	441a      	add	r2, r3
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	3304      	adds	r3, #4
 8004384:	4619      	mov	r1, r3
 8004386:	4610      	mov	r0, r2
 8004388:	f7fe fd73 	bl	8002e72 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004390:	4b08      	ldr	r3, [pc, #32]	; (80043b4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004396:	429a      	cmp	r2, r3
 8004398:	d902      	bls.n	80043a0 <vTaskRemoveFromUnorderedEventList+0xa4>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800439a:	4b07      	ldr	r3, [pc, #28]	; (80043b8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800439c:	2201      	movs	r2, #1
 800439e:	601a      	str	r2, [r3, #0]
	}
}
 80043a0:	bf00      	nop
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	20000be0 	.word	0x20000be0
 80043ac:	20000bc0 	.word	0x20000bc0
 80043b0:	200006e8 	.word	0x200006e8
 80043b4:	200006e4 	.word	0x200006e4
 80043b8:	20000bcc 	.word	0x20000bcc

080043bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80043c4:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <vTaskInternalSetTimeOutState+0x24>)
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80043cc:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <vTaskInternalSetTimeOutState+0x28>)
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	605a      	str	r2, [r3, #4]
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	20000bd0 	.word	0x20000bd0
 80043e4:	20000bbc 	.word	0x20000bbc

080043e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b088      	sub	sp, #32
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d109      	bne.n	800440c <xTaskCheckForTimeOut+0x24>
 80043f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fc:	f383 8811 	msr	BASEPRI, r3
 8004400:	f3bf 8f6f 	isb	sy
 8004404:	f3bf 8f4f 	dsb	sy
 8004408:	613b      	str	r3, [r7, #16]
 800440a:	e7fe      	b.n	800440a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d109      	bne.n	8004426 <xTaskCheckForTimeOut+0x3e>
 8004412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004416:	f383 8811 	msr	BASEPRI, r3
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	e7fe      	b.n	8004424 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004426:	f000 fe69 	bl	80050fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800442a:	4b1d      	ldr	r3, [pc, #116]	; (80044a0 <xTaskCheckForTimeOut+0xb8>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004442:	d102      	bne.n	800444a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004444:	2300      	movs	r3, #0
 8004446:	61fb      	str	r3, [r7, #28]
 8004448:	e023      	b.n	8004492 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	4b15      	ldr	r3, [pc, #84]	; (80044a4 <xTaskCheckForTimeOut+0xbc>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d007      	beq.n	8004466 <xTaskCheckForTimeOut+0x7e>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	429a      	cmp	r2, r3
 800445e:	d302      	bcc.n	8004466 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004460:	2301      	movs	r3, #1
 8004462:	61fb      	str	r3, [r7, #28]
 8004464:	e015      	b.n	8004492 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	429a      	cmp	r2, r3
 800446e:	d20b      	bcs.n	8004488 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	1ad2      	subs	r2, r2, r3
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7ff ff9d 	bl	80043bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004482:	2300      	movs	r3, #0
 8004484:	61fb      	str	r3, [r7, #28]
 8004486:	e004      	b.n	8004492 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	2200      	movs	r2, #0
 800448c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800448e:	2301      	movs	r3, #1
 8004490:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004492:	f000 fe61 	bl	8005158 <vPortExitCritical>

	return xReturn;
 8004496:	69fb      	ldr	r3, [r7, #28]
}
 8004498:	4618      	mov	r0, r3
 800449a:	3720      	adds	r7, #32
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	20000bbc 	.word	0x20000bbc
 80044a4:	20000bd0 	.word	0x20000bd0

080044a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80044ac:	4b03      	ldr	r3, [pc, #12]	; (80044bc <vTaskMissedYield+0x14>)
 80044ae:	2201      	movs	r2, #1
 80044b0:	601a      	str	r2, [r3, #0]
}
 80044b2:	bf00      	nop
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	20000bcc 	.word	0x20000bcc

080044c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80044c8:	f000 f852 	bl	8004570 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80044cc:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <prvIdleTask+0x28>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d9f9      	bls.n	80044c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80044d4:	4b05      	ldr	r3, [pc, #20]	; (80044ec <prvIdleTask+0x2c>)
 80044d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80044e4:	e7f0      	b.n	80044c8 <prvIdleTask+0x8>
 80044e6:	bf00      	nop
 80044e8:	200006e8 	.word	0x200006e8
 80044ec:	e000ed04 	.word	0xe000ed04

080044f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044f6:	2300      	movs	r3, #0
 80044f8:	607b      	str	r3, [r7, #4]
 80044fa:	e00c      	b.n	8004516 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	4613      	mov	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4a12      	ldr	r2, [pc, #72]	; (8004550 <prvInitialiseTaskLists+0x60>)
 8004508:	4413      	add	r3, r2
 800450a:	4618      	mov	r0, r3
 800450c:	f7fe fc84 	bl	8002e18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3301      	adds	r3, #1
 8004514:	607b      	str	r3, [r7, #4]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b37      	cmp	r3, #55	; 0x37
 800451a:	d9ef      	bls.n	80044fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800451c:	480d      	ldr	r0, [pc, #52]	; (8004554 <prvInitialiseTaskLists+0x64>)
 800451e:	f7fe fc7b 	bl	8002e18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004522:	480d      	ldr	r0, [pc, #52]	; (8004558 <prvInitialiseTaskLists+0x68>)
 8004524:	f7fe fc78 	bl	8002e18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004528:	480c      	ldr	r0, [pc, #48]	; (800455c <prvInitialiseTaskLists+0x6c>)
 800452a:	f7fe fc75 	bl	8002e18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800452e:	480c      	ldr	r0, [pc, #48]	; (8004560 <prvInitialiseTaskLists+0x70>)
 8004530:	f7fe fc72 	bl	8002e18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004534:	480b      	ldr	r0, [pc, #44]	; (8004564 <prvInitialiseTaskLists+0x74>)
 8004536:	f7fe fc6f 	bl	8002e18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800453a:	4b0b      	ldr	r3, [pc, #44]	; (8004568 <prvInitialiseTaskLists+0x78>)
 800453c:	4a05      	ldr	r2, [pc, #20]	; (8004554 <prvInitialiseTaskLists+0x64>)
 800453e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004540:	4b0a      	ldr	r3, [pc, #40]	; (800456c <prvInitialiseTaskLists+0x7c>)
 8004542:	4a05      	ldr	r2, [pc, #20]	; (8004558 <prvInitialiseTaskLists+0x68>)
 8004544:	601a      	str	r2, [r3, #0]
}
 8004546:	bf00      	nop
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	200006e8 	.word	0x200006e8
 8004554:	20000b48 	.word	0x20000b48
 8004558:	20000b5c 	.word	0x20000b5c
 800455c:	20000b78 	.word	0x20000b78
 8004560:	20000b8c 	.word	0x20000b8c
 8004564:	20000ba4 	.word	0x20000ba4
 8004568:	20000b70 	.word	0x20000b70
 800456c:	20000b74 	.word	0x20000b74

08004570 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004576:	e019      	b.n	80045ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004578:	f000 fdc0 	bl	80050fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800457c:	4b0f      	ldr	r3, [pc, #60]	; (80045bc <prvCheckTasksWaitingTermination+0x4c>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3304      	adds	r3, #4
 8004588:	4618      	mov	r0, r3
 800458a:	f7fe fccf 	bl	8002f2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800458e:	4b0c      	ldr	r3, [pc, #48]	; (80045c0 <prvCheckTasksWaitingTermination+0x50>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3b01      	subs	r3, #1
 8004594:	4a0a      	ldr	r2, [pc, #40]	; (80045c0 <prvCheckTasksWaitingTermination+0x50>)
 8004596:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004598:	4b0a      	ldr	r3, [pc, #40]	; (80045c4 <prvCheckTasksWaitingTermination+0x54>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3b01      	subs	r3, #1
 800459e:	4a09      	ldr	r2, [pc, #36]	; (80045c4 <prvCheckTasksWaitingTermination+0x54>)
 80045a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80045a2:	f000 fdd9 	bl	8005158 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f80e 	bl	80045c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045ac:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <prvCheckTasksWaitingTermination+0x54>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1e1      	bne.n	8004578 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80045b4:	bf00      	nop
 80045b6:	3708      	adds	r7, #8
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	20000b8c 	.word	0x20000b8c
 80045c0:	20000bb8 	.word	0x20000bb8
 80045c4:	20000ba0 	.word	0x20000ba0

080045c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d108      	bne.n	80045ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 ff68 	bl	80054b4 <vPortFree>
				vPortFree( pxTCB );
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 ff65 	bl	80054b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80045ea:	e017      	b.n	800461c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d103      	bne.n	80045fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 ff5c 	bl	80054b4 <vPortFree>
	}
 80045fc:	e00e      	b.n	800461c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004604:	2b02      	cmp	r3, #2
 8004606:	d009      	beq.n	800461c <prvDeleteTCB+0x54>
 8004608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	60fb      	str	r3, [r7, #12]
 800461a:	e7fe      	b.n	800461a <prvDeleteTCB+0x52>
	}
 800461c:	bf00      	nop
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800462a:	4b0f      	ldr	r3, [pc, #60]	; (8004668 <prvResetNextTaskUnblockTime+0x44>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <prvResetNextTaskUnblockTime+0x14>
 8004634:	2301      	movs	r3, #1
 8004636:	e000      	b.n	800463a <prvResetNextTaskUnblockTime+0x16>
 8004638:	2300      	movs	r3, #0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d004      	beq.n	8004648 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800463e:	4b0b      	ldr	r3, [pc, #44]	; (800466c <prvResetNextTaskUnblockTime+0x48>)
 8004640:	f04f 32ff 	mov.w	r2, #4294967295
 8004644:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004646:	e008      	b.n	800465a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004648:	4b07      	ldr	r3, [pc, #28]	; (8004668 <prvResetNextTaskUnblockTime+0x44>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	4a05      	ldr	r2, [pc, #20]	; (800466c <prvResetNextTaskUnblockTime+0x48>)
 8004658:	6013      	str	r3, [r2, #0]
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	20000b70 	.word	0x20000b70
 800466c:	20000bd8 	.word	0x20000bd8

08004670 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004676:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <xTaskGetSchedulerState+0x34>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d102      	bne.n	8004684 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800467e:	2301      	movs	r3, #1
 8004680:	607b      	str	r3, [r7, #4]
 8004682:	e008      	b.n	8004696 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004684:	4b08      	ldr	r3, [pc, #32]	; (80046a8 <xTaskGetSchedulerState+0x38>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d102      	bne.n	8004692 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800468c:	2302      	movs	r3, #2
 800468e:	607b      	str	r3, [r7, #4]
 8004690:	e001      	b.n	8004696 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004692:	2300      	movs	r3, #0
 8004694:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004696:	687b      	ldr	r3, [r7, #4]
	}
 8004698:	4618      	mov	r0, r3
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	20000bc4 	.word	0x20000bc4
 80046a8:	20000be0 	.word	0x20000be0

080046ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80046b8:	2300      	movs	r3, #0
 80046ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d054      	beq.n	800476c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80046c2:	4b2d      	ldr	r3, [pc, #180]	; (8004778 <xTaskPriorityDisinherit+0xcc>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d009      	beq.n	80046e0 <xTaskPriorityDisinherit+0x34>
 80046cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d0:	f383 8811 	msr	BASEPRI, r3
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	60fb      	str	r3, [r7, #12]
 80046de:	e7fe      	b.n	80046de <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d109      	bne.n	80046fc <xTaskPriorityDisinherit+0x50>
 80046e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ec:	f383 8811 	msr	BASEPRI, r3
 80046f0:	f3bf 8f6f 	isb	sy
 80046f4:	f3bf 8f4f 	dsb	sy
 80046f8:	60bb      	str	r3, [r7, #8]
 80046fa:	e7fe      	b.n	80046fa <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004700:	1e5a      	subs	r2, r3, #1
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800470e:	429a      	cmp	r2, r3
 8004710:	d02c      	beq.n	800476c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004716:	2b00      	cmp	r3, #0
 8004718:	d128      	bne.n	800476c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	3304      	adds	r3, #4
 800471e:	4618      	mov	r0, r3
 8004720:	f7fe fc04 	bl	8002f2c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004730:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800473c:	4b0f      	ldr	r3, [pc, #60]	; (800477c <xTaskPriorityDisinherit+0xd0>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	429a      	cmp	r2, r3
 8004742:	d903      	bls.n	800474c <xTaskPriorityDisinherit+0xa0>
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	4a0c      	ldr	r2, [pc, #48]	; (800477c <xTaskPriorityDisinherit+0xd0>)
 800474a:	6013      	str	r3, [r2, #0]
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004750:	4613      	mov	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4a09      	ldr	r2, [pc, #36]	; (8004780 <xTaskPriorityDisinherit+0xd4>)
 800475a:	441a      	add	r2, r3
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	3304      	adds	r3, #4
 8004760:	4619      	mov	r1, r3
 8004762:	4610      	mov	r0, r2
 8004764:	f7fe fb85 	bl	8002e72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004768:	2301      	movs	r3, #1
 800476a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800476c:	697b      	ldr	r3, [r7, #20]
	}
 800476e:	4618      	mov	r0, r3
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	200006e4 	.word	0x200006e4
 800477c:	20000bc0 	.word	0x20000bc0
 8004780:	200006e8 	.word	0x200006e8

08004784 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800478a:	4b09      	ldr	r3, [pc, #36]	; (80047b0 <uxTaskResetEventItemValue+0x2c>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004792:	4b07      	ldr	r3, [pc, #28]	; (80047b0 <uxTaskResetEventItemValue+0x2c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004798:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <uxTaskResetEventItemValue+0x2c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80047a0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80047a2:	687b      	ldr	r3, [r7, #4]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	200006e4 	.word	0x200006e4

080047b4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80047be:	4b21      	ldr	r3, [pc, #132]	; (8004844 <prvAddCurrentTaskToDelayedList+0x90>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047c4:	4b20      	ldr	r3, [pc, #128]	; (8004848 <prvAddCurrentTaskToDelayedList+0x94>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	3304      	adds	r3, #4
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fe fbae 	bl	8002f2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d6:	d10a      	bne.n	80047ee <prvAddCurrentTaskToDelayedList+0x3a>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d007      	beq.n	80047ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047de:	4b1a      	ldr	r3, [pc, #104]	; (8004848 <prvAddCurrentTaskToDelayedList+0x94>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3304      	adds	r3, #4
 80047e4:	4619      	mov	r1, r3
 80047e6:	4819      	ldr	r0, [pc, #100]	; (800484c <prvAddCurrentTaskToDelayedList+0x98>)
 80047e8:	f7fe fb43 	bl	8002e72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80047ec:	e026      	b.n	800483c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4413      	add	r3, r2
 80047f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047f6:	4b14      	ldr	r3, [pc, #80]	; (8004848 <prvAddCurrentTaskToDelayedList+0x94>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	429a      	cmp	r2, r3
 8004804:	d209      	bcs.n	800481a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004806:	4b12      	ldr	r3, [pc, #72]	; (8004850 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	4b0f      	ldr	r3, [pc, #60]	; (8004848 <prvAddCurrentTaskToDelayedList+0x94>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3304      	adds	r3, #4
 8004810:	4619      	mov	r1, r3
 8004812:	4610      	mov	r0, r2
 8004814:	f7fe fb51 	bl	8002eba <vListInsert>
}
 8004818:	e010      	b.n	800483c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800481a:	4b0e      	ldr	r3, [pc, #56]	; (8004854 <prvAddCurrentTaskToDelayedList+0xa0>)
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	4b0a      	ldr	r3, [pc, #40]	; (8004848 <prvAddCurrentTaskToDelayedList+0x94>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3304      	adds	r3, #4
 8004824:	4619      	mov	r1, r3
 8004826:	4610      	mov	r0, r2
 8004828:	f7fe fb47 	bl	8002eba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800482c:	4b0a      	ldr	r3, [pc, #40]	; (8004858 <prvAddCurrentTaskToDelayedList+0xa4>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	429a      	cmp	r2, r3
 8004834:	d202      	bcs.n	800483c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004836:	4a08      	ldr	r2, [pc, #32]	; (8004858 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	6013      	str	r3, [r2, #0]
}
 800483c:	bf00      	nop
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	20000bbc 	.word	0x20000bbc
 8004848:	200006e4 	.word	0x200006e4
 800484c:	20000ba4 	.word	0x20000ba4
 8004850:	20000b74 	.word	0x20000b74
 8004854:	20000b70 	.word	0x20000b70
 8004858:	20000bd8 	.word	0x20000bd8

0800485c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b08a      	sub	sp, #40	; 0x28
 8004860:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004862:	2300      	movs	r3, #0
 8004864:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004866:	f000 fac3 	bl	8004df0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800486a:	4b1c      	ldr	r3, [pc, #112]	; (80048dc <xTimerCreateTimerTask+0x80>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d021      	beq.n	80048b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004872:	2300      	movs	r3, #0
 8004874:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004876:	2300      	movs	r3, #0
 8004878:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800487a:	1d3a      	adds	r2, r7, #4
 800487c:	f107 0108 	add.w	r1, r7, #8
 8004880:	f107 030c 	add.w	r3, r7, #12
 8004884:	4618      	mov	r0, r3
 8004886:	f7fe f893 	bl	80029b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	9202      	str	r2, [sp, #8]
 8004892:	9301      	str	r3, [sp, #4]
 8004894:	2302      	movs	r3, #2
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	2300      	movs	r3, #0
 800489a:	460a      	mov	r2, r1
 800489c:	4910      	ldr	r1, [pc, #64]	; (80048e0 <xTimerCreateTimerTask+0x84>)
 800489e:	4811      	ldr	r0, [pc, #68]	; (80048e4 <xTimerCreateTimerTask+0x88>)
 80048a0:	f7ff f842 	bl	8003928 <xTaskCreateStatic>
 80048a4:	4602      	mov	r2, r0
 80048a6:	4b10      	ldr	r3, [pc, #64]	; (80048e8 <xTimerCreateTimerTask+0x8c>)
 80048a8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80048aa:	4b0f      	ldr	r3, [pc, #60]	; (80048e8 <xTimerCreateTimerTask+0x8c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80048b2:	2301      	movs	r3, #1
 80048b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d109      	bne.n	80048d0 <xTimerCreateTimerTask+0x74>
 80048bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c0:	f383 8811 	msr	BASEPRI, r3
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	613b      	str	r3, [r7, #16]
 80048ce:	e7fe      	b.n	80048ce <xTimerCreateTimerTask+0x72>
	return xReturn;
 80048d0:	697b      	ldr	r3, [r7, #20]
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	20000c14 	.word	0x20000c14
 80048e0:	08005778 	.word	0x08005778
 80048e4:	08004a05 	.word	0x08004a05
 80048e8:	20000c18 	.word	0x20000c18

080048ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b08a      	sub	sp, #40	; 0x28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
 80048f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80048fa:	2300      	movs	r3, #0
 80048fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d109      	bne.n	8004918 <xTimerGenericCommand+0x2c>
 8004904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004908:	f383 8811 	msr	BASEPRI, r3
 800490c:	f3bf 8f6f 	isb	sy
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	623b      	str	r3, [r7, #32]
 8004916:	e7fe      	b.n	8004916 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004918:	4b19      	ldr	r3, [pc, #100]	; (8004980 <xTimerGenericCommand+0x94>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d02a      	beq.n	8004976 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2b05      	cmp	r3, #5
 8004930:	dc18      	bgt.n	8004964 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004932:	f7ff fe9d 	bl	8004670 <xTaskGetSchedulerState>
 8004936:	4603      	mov	r3, r0
 8004938:	2b02      	cmp	r3, #2
 800493a:	d109      	bne.n	8004950 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800493c:	4b10      	ldr	r3, [pc, #64]	; (8004980 <xTimerGenericCommand+0x94>)
 800493e:	6818      	ldr	r0, [r3, #0]
 8004940:	f107 0110 	add.w	r1, r7, #16
 8004944:	2300      	movs	r3, #0
 8004946:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004948:	f7fe fc18 	bl	800317c <xQueueGenericSend>
 800494c:	6278      	str	r0, [r7, #36]	; 0x24
 800494e:	e012      	b.n	8004976 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004950:	4b0b      	ldr	r3, [pc, #44]	; (8004980 <xTimerGenericCommand+0x94>)
 8004952:	6818      	ldr	r0, [r3, #0]
 8004954:	f107 0110 	add.w	r1, r7, #16
 8004958:	2300      	movs	r3, #0
 800495a:	2200      	movs	r2, #0
 800495c:	f7fe fc0e 	bl	800317c <xQueueGenericSend>
 8004960:	6278      	str	r0, [r7, #36]	; 0x24
 8004962:	e008      	b.n	8004976 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004964:	4b06      	ldr	r3, [pc, #24]	; (8004980 <xTimerGenericCommand+0x94>)
 8004966:	6818      	ldr	r0, [r3, #0]
 8004968:	f107 0110 	add.w	r1, r7, #16
 800496c:	2300      	movs	r3, #0
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	f7fe fcfe 	bl	8003370 <xQueueGenericSendFromISR>
 8004974:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004978:	4618      	mov	r0, r3
 800497a:	3728      	adds	r7, #40	; 0x28
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	20000c14 	.word	0x20000c14

08004984 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b088      	sub	sp, #32
 8004988:	af02      	add	r7, sp, #8
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800498e:	4b1c      	ldr	r3, [pc, #112]	; (8004a00 <prvProcessExpiredTimer+0x7c>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	3304      	adds	r3, #4
 800499c:	4618      	mov	r0, r3
 800499e:	f7fe fac5 	bl	8002f2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d121      	bne.n	80049ee <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	699a      	ldr	r2, [r3, #24]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	18d1      	adds	r1, r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	6978      	ldr	r0, [r7, #20]
 80049b8:	f000 f8c8 	bl	8004b4c <prvInsertTimerInActiveList>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d015      	beq.n	80049ee <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049c2:	2300      	movs	r3, #0
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	2300      	movs	r3, #0
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	2100      	movs	r1, #0
 80049cc:	6978      	ldr	r0, [r7, #20]
 80049ce:	f7ff ff8d 	bl	80048ec <xTimerGenericCommand>
 80049d2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d109      	bne.n	80049ee <prvProcessExpiredTimer+0x6a>
 80049da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049de:	f383 8811 	msr	BASEPRI, r3
 80049e2:	f3bf 8f6f 	isb	sy
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	60fb      	str	r3, [r7, #12]
 80049ec:	e7fe      	b.n	80049ec <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	6978      	ldr	r0, [r7, #20]
 80049f4:	4798      	blx	r3
}
 80049f6:	bf00      	nop
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	20000c0c 	.word	0x20000c0c

08004a04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a0c:	f107 0308 	add.w	r3, r7, #8
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 f857 	bl	8004ac4 <prvGetNextExpireTime>
 8004a16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 f803 	bl	8004a28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004a22:	f000 f8d5 	bl	8004bd0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a26:	e7f1      	b.n	8004a0c <prvTimerTask+0x8>

08004a28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004a32:	f7ff f9a5 	bl	8003d80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a36:	f107 0308 	add.w	r3, r7, #8
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 f866 	bl	8004b0c <prvSampleTimeNow>
 8004a40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d130      	bne.n	8004aaa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10a      	bne.n	8004a64 <prvProcessTimerOrBlockTask+0x3c>
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d806      	bhi.n	8004a64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004a56:	f7ff f9a1 	bl	8003d9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004a5a:	68f9      	ldr	r1, [r7, #12]
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f7ff ff91 	bl	8004984 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004a62:	e024      	b.n	8004aae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d008      	beq.n	8004a7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004a6a:	4b13      	ldr	r3, [pc, #76]	; (8004ab8 <prvProcessTimerOrBlockTask+0x90>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	bf0c      	ite	eq
 8004a74:	2301      	moveq	r3, #1
 8004a76:	2300      	movne	r3, #0
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004a7c:	4b0f      	ldr	r3, [pc, #60]	; (8004abc <prvProcessTimerOrBlockTask+0x94>)
 8004a7e:	6818      	ldr	r0, [r3, #0]
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	4619      	mov	r1, r3
 8004a8a:	f7fe ff19 	bl	80038c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004a8e:	f7ff f985 	bl	8003d9c <xTaskResumeAll>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10a      	bne.n	8004aae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004a98:	4b09      	ldr	r3, [pc, #36]	; (8004ac0 <prvProcessTimerOrBlockTask+0x98>)
 8004a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	f3bf 8f6f 	isb	sy
}
 8004aa8:	e001      	b.n	8004aae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004aaa:	f7ff f977 	bl	8003d9c <xTaskResumeAll>
}
 8004aae:	bf00      	nop
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	20000c10 	.word	0x20000c10
 8004abc:	20000c14 	.word	0x20000c14
 8004ac0:	e000ed04 	.word	0xe000ed04

08004ac4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004acc:	4b0e      	ldr	r3, [pc, #56]	; (8004b08 <prvGetNextExpireTime+0x44>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	bf0c      	ite	eq
 8004ad6:	2301      	moveq	r3, #1
 8004ad8:	2300      	movne	r3, #0
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	461a      	mov	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d105      	bne.n	8004af6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004aea:	4b07      	ldr	r3, [pc, #28]	; (8004b08 <prvGetNextExpireTime+0x44>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	60fb      	str	r3, [r7, #12]
 8004af4:	e001      	b.n	8004afa <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004afa:	68fb      	ldr	r3, [r7, #12]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3714      	adds	r7, #20
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	20000c0c 	.word	0x20000c0c

08004b0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004b14:	f7ff f9de 	bl	8003ed4 <xTaskGetTickCount>
 8004b18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004b1a:	4b0b      	ldr	r3, [pc, #44]	; (8004b48 <prvSampleTimeNow+0x3c>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d205      	bcs.n	8004b30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004b24:	f000 f904 	bl	8004d30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	e002      	b.n	8004b36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004b36:	4a04      	ldr	r2, [pc, #16]	; (8004b48 <prvSampleTimeNow+0x3c>)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	20000c1c 	.word	0x20000c1c

08004b4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
 8004b58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d812      	bhi.n	8004b98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	1ad2      	subs	r2, r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d302      	bcc.n	8004b86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004b80:	2301      	movs	r3, #1
 8004b82:	617b      	str	r3, [r7, #20]
 8004b84:	e01b      	b.n	8004bbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004b86:	4b10      	ldr	r3, [pc, #64]	; (8004bc8 <prvInsertTimerInActiveList+0x7c>)
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	4619      	mov	r1, r3
 8004b90:	4610      	mov	r0, r2
 8004b92:	f7fe f992 	bl	8002eba <vListInsert>
 8004b96:	e012      	b.n	8004bbe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d206      	bcs.n	8004bae <prvInsertTimerInActiveList+0x62>
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d302      	bcc.n	8004bae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	617b      	str	r3, [r7, #20]
 8004bac:	e007      	b.n	8004bbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004bae:	4b07      	ldr	r3, [pc, #28]	; (8004bcc <prvInsertTimerInActiveList+0x80>)
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	4610      	mov	r0, r2
 8004bba:	f7fe f97e 	bl	8002eba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004bbe:	697b      	ldr	r3, [r7, #20]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3718      	adds	r7, #24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	20000c10 	.word	0x20000c10
 8004bcc:	20000c0c 	.word	0x20000c0c

08004bd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08e      	sub	sp, #56	; 0x38
 8004bd4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004bd6:	e099      	b.n	8004d0c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	da17      	bge.n	8004c0e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004bde:	1d3b      	adds	r3, r7, #4
 8004be0:	3304      	adds	r3, #4
 8004be2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d109      	bne.n	8004bfe <prvProcessReceivedCommands+0x2e>
 8004bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bee:	f383 8811 	msr	BASEPRI, r3
 8004bf2:	f3bf 8f6f 	isb	sy
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	61fb      	str	r3, [r7, #28]
 8004bfc:	e7fe      	b.n	8004bfc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c04:	6850      	ldr	r0, [r2, #4]
 8004c06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c08:	6892      	ldr	r2, [r2, #8]
 8004c0a:	4611      	mov	r1, r2
 8004c0c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	db7a      	blt.n	8004d0a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d004      	beq.n	8004c2a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c22:	3304      	adds	r3, #4
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7fe f981 	bl	8002f2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c2a:	463b      	mov	r3, r7
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7ff ff6d 	bl	8004b0c <prvSampleTimeNow>
 8004c32:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b09      	cmp	r3, #9
 8004c38:	d868      	bhi.n	8004d0c <prvProcessReceivedCommands+0x13c>
 8004c3a:	a201      	add	r2, pc, #4	; (adr r2, 8004c40 <prvProcessReceivedCommands+0x70>)
 8004c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c40:	08004c69 	.word	0x08004c69
 8004c44:	08004c69 	.word	0x08004c69
 8004c48:	08004c69 	.word	0x08004c69
 8004c4c:	08004d0d 	.word	0x08004d0d
 8004c50:	08004cc3 	.word	0x08004cc3
 8004c54:	08004cf9 	.word	0x08004cf9
 8004c58:	08004c69 	.word	0x08004c69
 8004c5c:	08004c69 	.word	0x08004c69
 8004c60:	08004d0d 	.word	0x08004d0d
 8004c64:	08004cc3 	.word	0x08004cc3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	18d1      	adds	r1, r2, r3
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c76:	f7ff ff69 	bl	8004b4c <prvInsertTimerInActiveList>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d045      	beq.n	8004d0c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c86:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d13d      	bne.n	8004d0c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	441a      	add	r2, r3
 8004c98:	2300      	movs	r3, #0
 8004c9a:	9300      	str	r3, [sp, #0]
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ca2:	f7ff fe23 	bl	80048ec <xTimerGenericCommand>
 8004ca6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d12e      	bne.n	8004d0c <prvProcessReceivedCommands+0x13c>
 8004cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb2:	f383 8811 	msr	BASEPRI, r3
 8004cb6:	f3bf 8f6f 	isb	sy
 8004cba:	f3bf 8f4f 	dsb	sy
 8004cbe:	61bb      	str	r3, [r7, #24]
 8004cc0:	e7fe      	b.n	8004cc0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d109      	bne.n	8004ce4 <prvProcessReceivedCommands+0x114>
 8004cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd4:	f383 8811 	msr	BASEPRI, r3
 8004cd8:	f3bf 8f6f 	isb	sy
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	617b      	str	r3, [r7, #20]
 8004ce2:	e7fe      	b.n	8004ce2 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce6:	699a      	ldr	r2, [r3, #24]
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cea:	18d1      	adds	r1, r2, r3
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cf2:	f7ff ff2b 	bl	8004b4c <prvInsertTimerInActiveList>
					break;
 8004cf6:	e009      	b.n	8004d0c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d104      	bne.n	8004d0c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8004d02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d04:	f000 fbd6 	bl	80054b4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004d08:	e000      	b.n	8004d0c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004d0a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d0c:	4b07      	ldr	r3, [pc, #28]	; (8004d2c <prvProcessReceivedCommands+0x15c>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	1d39      	adds	r1, r7, #4
 8004d12:	2200      	movs	r2, #0
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7fe fbbf 	bl	8003498 <xQueueReceive>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f47f af5b 	bne.w	8004bd8 <prvProcessReceivedCommands+0x8>
	}
}
 8004d22:	bf00      	nop
 8004d24:	3730      	adds	r7, #48	; 0x30
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20000c14 	.word	0x20000c14

08004d30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b088      	sub	sp, #32
 8004d34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d36:	e044      	b.n	8004dc2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d38:	4b2b      	ldr	r3, [pc, #172]	; (8004de8 <prvSwitchTimerLists+0xb8>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d42:	4b29      	ldr	r3, [pc, #164]	; (8004de8 <prvSwitchTimerLists+0xb8>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	3304      	adds	r3, #4
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7fe f8eb 	bl	8002f2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d12d      	bne.n	8004dc2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d90e      	bls.n	8004d96 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d84:	4b18      	ldr	r3, [pc, #96]	; (8004de8 <prvSwitchTimerLists+0xb8>)
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	3304      	adds	r3, #4
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	4610      	mov	r0, r2
 8004d90:	f7fe f893 	bl	8002eba <vListInsert>
 8004d94:	e015      	b.n	8004dc2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d96:	2300      	movs	r3, #0
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	2100      	movs	r1, #0
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f7ff fda3 	bl	80048ec <xTimerGenericCommand>
 8004da6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d109      	bne.n	8004dc2 <prvSwitchTimerLists+0x92>
 8004dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	603b      	str	r3, [r7, #0]
 8004dc0:	e7fe      	b.n	8004dc0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004dc2:	4b09      	ldr	r3, [pc, #36]	; (8004de8 <prvSwitchTimerLists+0xb8>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1b5      	bne.n	8004d38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004dcc:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <prvSwitchTimerLists+0xb8>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004dd2:	4b06      	ldr	r3, [pc, #24]	; (8004dec <prvSwitchTimerLists+0xbc>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a04      	ldr	r2, [pc, #16]	; (8004de8 <prvSwitchTimerLists+0xb8>)
 8004dd8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004dda:	4a04      	ldr	r2, [pc, #16]	; (8004dec <prvSwitchTimerLists+0xbc>)
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	6013      	str	r3, [r2, #0]
}
 8004de0:	bf00      	nop
 8004de2:	3718      	adds	r7, #24
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	20000c0c 	.word	0x20000c0c
 8004dec:	20000c10 	.word	0x20000c10

08004df0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004df6:	f000 f981 	bl	80050fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004dfa:	4b15      	ldr	r3, [pc, #84]	; (8004e50 <prvCheckForValidListAndQueue+0x60>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d120      	bne.n	8004e44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004e02:	4814      	ldr	r0, [pc, #80]	; (8004e54 <prvCheckForValidListAndQueue+0x64>)
 8004e04:	f7fe f808 	bl	8002e18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004e08:	4813      	ldr	r0, [pc, #76]	; (8004e58 <prvCheckForValidListAndQueue+0x68>)
 8004e0a:	f7fe f805 	bl	8002e18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004e0e:	4b13      	ldr	r3, [pc, #76]	; (8004e5c <prvCheckForValidListAndQueue+0x6c>)
 8004e10:	4a10      	ldr	r2, [pc, #64]	; (8004e54 <prvCheckForValidListAndQueue+0x64>)
 8004e12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004e14:	4b12      	ldr	r3, [pc, #72]	; (8004e60 <prvCheckForValidListAndQueue+0x70>)
 8004e16:	4a10      	ldr	r2, [pc, #64]	; (8004e58 <prvCheckForValidListAndQueue+0x68>)
 8004e18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	9300      	str	r3, [sp, #0]
 8004e1e:	4b11      	ldr	r3, [pc, #68]	; (8004e64 <prvCheckForValidListAndQueue+0x74>)
 8004e20:	4a11      	ldr	r2, [pc, #68]	; (8004e68 <prvCheckForValidListAndQueue+0x78>)
 8004e22:	2110      	movs	r1, #16
 8004e24:	200a      	movs	r0, #10
 8004e26:	f7fe f913 	bl	8003050 <xQueueGenericCreateStatic>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	4b08      	ldr	r3, [pc, #32]	; (8004e50 <prvCheckForValidListAndQueue+0x60>)
 8004e2e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004e30:	4b07      	ldr	r3, [pc, #28]	; (8004e50 <prvCheckForValidListAndQueue+0x60>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d005      	beq.n	8004e44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004e38:	4b05      	ldr	r3, [pc, #20]	; (8004e50 <prvCheckForValidListAndQueue+0x60>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	490b      	ldr	r1, [pc, #44]	; (8004e6c <prvCheckForValidListAndQueue+0x7c>)
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fe fd16 	bl	8003870 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e44:	f000 f988 	bl	8005158 <vPortExitCritical>
}
 8004e48:	bf00      	nop
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	20000c14 	.word	0x20000c14
 8004e54:	20000be4 	.word	0x20000be4
 8004e58:	20000bf8 	.word	0x20000bf8
 8004e5c:	20000c0c 	.word	0x20000c0c
 8004e60:	20000c10 	.word	0x20000c10
 8004e64:	20000cc0 	.word	0x20000cc0
 8004e68:	20000c20 	.word	0x20000c20
 8004e6c:	08005780 	.word	0x08005780

08004e70 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b08a      	sub	sp, #40	; 0x28
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
 8004e7c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8004e7e:	f06f 0301 	mvn.w	r3, #1
 8004e82:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004e90:	4b06      	ldr	r3, [pc, #24]	; (8004eac <xTimerPendFunctionCallFromISR+0x3c>)
 8004e92:	6818      	ldr	r0, [r3, #0]
 8004e94:	f107 0114 	add.w	r1, r7, #20
 8004e98:	2300      	movs	r3, #0
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	f7fe fa68 	bl	8003370 <xQueueGenericSendFromISR>
 8004ea0:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3728      	adds	r7, #40	; 0x28
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	20000c14 	.word	0x20000c14

08004eb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	3b04      	subs	r3, #4
 8004ec0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ec8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	3b04      	subs	r3, #4
 8004ece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	f023 0201 	bic.w	r2, r3, #1
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	3b04      	subs	r3, #4
 8004ede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ee0:	4a0c      	ldr	r2, [pc, #48]	; (8004f14 <pxPortInitialiseStack+0x64>)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	3b14      	subs	r3, #20
 8004eea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	3b04      	subs	r3, #4
 8004ef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f06f 0202 	mvn.w	r2, #2
 8004efe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	3b20      	subs	r3, #32
 8004f04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f06:	68fb      	ldr	r3, [r7, #12]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3714      	adds	r7, #20
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr
 8004f14:	08004f19 	.word	0x08004f19

08004f18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f22:	4b11      	ldr	r3, [pc, #68]	; (8004f68 <prvTaskExitError+0x50>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2a:	d009      	beq.n	8004f40 <prvTaskExitError+0x28>
 8004f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f30:	f383 8811 	msr	BASEPRI, r3
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	e7fe      	b.n	8004f3e <prvTaskExitError+0x26>
 8004f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f52:	bf00      	nop
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0fc      	beq.n	8004f54 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f5a:	bf00      	nop
 8004f5c:	3714      	adds	r7, #20
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	20000008 	.word	0x20000008
 8004f6c:	00000000 	.word	0x00000000

08004f70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f70:	4b07      	ldr	r3, [pc, #28]	; (8004f90 <pxCurrentTCBConst2>)
 8004f72:	6819      	ldr	r1, [r3, #0]
 8004f74:	6808      	ldr	r0, [r1, #0]
 8004f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f7a:	f380 8809 	msr	PSP, r0
 8004f7e:	f3bf 8f6f 	isb	sy
 8004f82:	f04f 0000 	mov.w	r0, #0
 8004f86:	f380 8811 	msr	BASEPRI, r0
 8004f8a:	4770      	bx	lr
 8004f8c:	f3af 8000 	nop.w

08004f90 <pxCurrentTCBConst2>:
 8004f90:	200006e4 	.word	0x200006e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f94:	bf00      	nop
 8004f96:	bf00      	nop

08004f98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f98:	4808      	ldr	r0, [pc, #32]	; (8004fbc <prvPortStartFirstTask+0x24>)
 8004f9a:	6800      	ldr	r0, [r0, #0]
 8004f9c:	6800      	ldr	r0, [r0, #0]
 8004f9e:	f380 8808 	msr	MSP, r0
 8004fa2:	f04f 0000 	mov.w	r0, #0
 8004fa6:	f380 8814 	msr	CONTROL, r0
 8004faa:	b662      	cpsie	i
 8004fac:	b661      	cpsie	f
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	f3bf 8f6f 	isb	sy
 8004fb6:	df00      	svc	0
 8004fb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004fba:	bf00      	nop
 8004fbc:	e000ed08 	.word	0xe000ed08

08004fc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004fc6:	4b44      	ldr	r3, [pc, #272]	; (80050d8 <xPortStartScheduler+0x118>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a44      	ldr	r2, [pc, #272]	; (80050dc <xPortStartScheduler+0x11c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d109      	bne.n	8004fe4 <xPortStartScheduler+0x24>
 8004fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	613b      	str	r3, [r7, #16]
 8004fe2:	e7fe      	b.n	8004fe2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004fe4:	4b3c      	ldr	r3, [pc, #240]	; (80050d8 <xPortStartScheduler+0x118>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a3d      	ldr	r2, [pc, #244]	; (80050e0 <xPortStartScheduler+0x120>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d109      	bne.n	8005002 <xPortStartScheduler+0x42>
 8004fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	e7fe      	b.n	8005000 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005002:	4b38      	ldr	r3, [pc, #224]	; (80050e4 <xPortStartScheduler+0x124>)
 8005004:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	b2db      	uxtb	r3, r3
 800500c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	22ff      	movs	r2, #255	; 0xff
 8005012:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	b2db      	uxtb	r3, r3
 800501a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800501c:	78fb      	ldrb	r3, [r7, #3]
 800501e:	b2db      	uxtb	r3, r3
 8005020:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005024:	b2da      	uxtb	r2, r3
 8005026:	4b30      	ldr	r3, [pc, #192]	; (80050e8 <xPortStartScheduler+0x128>)
 8005028:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800502a:	4b30      	ldr	r3, [pc, #192]	; (80050ec <xPortStartScheduler+0x12c>)
 800502c:	2207      	movs	r2, #7
 800502e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005030:	e009      	b.n	8005046 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005032:	4b2e      	ldr	r3, [pc, #184]	; (80050ec <xPortStartScheduler+0x12c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	3b01      	subs	r3, #1
 8005038:	4a2c      	ldr	r2, [pc, #176]	; (80050ec <xPortStartScheduler+0x12c>)
 800503a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800503c:	78fb      	ldrb	r3, [r7, #3]
 800503e:	b2db      	uxtb	r3, r3
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	b2db      	uxtb	r3, r3
 8005044:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005046:	78fb      	ldrb	r3, [r7, #3]
 8005048:	b2db      	uxtb	r3, r3
 800504a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800504e:	2b80      	cmp	r3, #128	; 0x80
 8005050:	d0ef      	beq.n	8005032 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005052:	4b26      	ldr	r3, [pc, #152]	; (80050ec <xPortStartScheduler+0x12c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f1c3 0307 	rsb	r3, r3, #7
 800505a:	2b04      	cmp	r3, #4
 800505c:	d009      	beq.n	8005072 <xPortStartScheduler+0xb2>
 800505e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005062:	f383 8811 	msr	BASEPRI, r3
 8005066:	f3bf 8f6f 	isb	sy
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	60bb      	str	r3, [r7, #8]
 8005070:	e7fe      	b.n	8005070 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005072:	4b1e      	ldr	r3, [pc, #120]	; (80050ec <xPortStartScheduler+0x12c>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	021b      	lsls	r3, r3, #8
 8005078:	4a1c      	ldr	r2, [pc, #112]	; (80050ec <xPortStartScheduler+0x12c>)
 800507a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800507c:	4b1b      	ldr	r3, [pc, #108]	; (80050ec <xPortStartScheduler+0x12c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005084:	4a19      	ldr	r2, [pc, #100]	; (80050ec <xPortStartScheduler+0x12c>)
 8005086:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	b2da      	uxtb	r2, r3
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005090:	4b17      	ldr	r3, [pc, #92]	; (80050f0 <xPortStartScheduler+0x130>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a16      	ldr	r2, [pc, #88]	; (80050f0 <xPortStartScheduler+0x130>)
 8005096:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800509a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800509c:	4b14      	ldr	r3, [pc, #80]	; (80050f0 <xPortStartScheduler+0x130>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a13      	ldr	r2, [pc, #76]	; (80050f0 <xPortStartScheduler+0x130>)
 80050a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80050a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80050a8:	f000 f8d6 	bl	8005258 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050ac:	4b11      	ldr	r3, [pc, #68]	; (80050f4 <xPortStartScheduler+0x134>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80050b2:	f000 f8f5 	bl	80052a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80050b6:	4b10      	ldr	r3, [pc, #64]	; (80050f8 <xPortStartScheduler+0x138>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a0f      	ldr	r2, [pc, #60]	; (80050f8 <xPortStartScheduler+0x138>)
 80050bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80050c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80050c2:	f7ff ff69 	bl	8004f98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80050c6:	f7fe ffd3 	bl	8004070 <vTaskSwitchContext>
	prvTaskExitError();
 80050ca:	f7ff ff25 	bl	8004f18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3718      	adds	r7, #24
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	e000ed00 	.word	0xe000ed00
 80050dc:	410fc271 	.word	0x410fc271
 80050e0:	410fc270 	.word	0x410fc270
 80050e4:	e000e400 	.word	0xe000e400
 80050e8:	20000d10 	.word	0x20000d10
 80050ec:	20000d14 	.word	0x20000d14
 80050f0:	e000ed20 	.word	0xe000ed20
 80050f4:	20000008 	.word	0x20000008
 80050f8:	e000ef34 	.word	0xe000ef34

080050fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005114:	4b0e      	ldr	r3, [pc, #56]	; (8005150 <vPortEnterCritical+0x54>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	3301      	adds	r3, #1
 800511a:	4a0d      	ldr	r2, [pc, #52]	; (8005150 <vPortEnterCritical+0x54>)
 800511c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800511e:	4b0c      	ldr	r3, [pc, #48]	; (8005150 <vPortEnterCritical+0x54>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d10e      	bne.n	8005144 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005126:	4b0b      	ldr	r3, [pc, #44]	; (8005154 <vPortEnterCritical+0x58>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b00      	cmp	r3, #0
 800512e:	d009      	beq.n	8005144 <vPortEnterCritical+0x48>
 8005130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	603b      	str	r3, [r7, #0]
 8005142:	e7fe      	b.n	8005142 <vPortEnterCritical+0x46>
	}
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr
 8005150:	20000008 	.word	0x20000008
 8005154:	e000ed04 	.word	0xe000ed04

08005158 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800515e:	4b11      	ldr	r3, [pc, #68]	; (80051a4 <vPortExitCritical+0x4c>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d109      	bne.n	800517a <vPortExitCritical+0x22>
 8005166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516a:	f383 8811 	msr	BASEPRI, r3
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f3bf 8f4f 	dsb	sy
 8005176:	607b      	str	r3, [r7, #4]
 8005178:	e7fe      	b.n	8005178 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800517a:	4b0a      	ldr	r3, [pc, #40]	; (80051a4 <vPortExitCritical+0x4c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	3b01      	subs	r3, #1
 8005180:	4a08      	ldr	r2, [pc, #32]	; (80051a4 <vPortExitCritical+0x4c>)
 8005182:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005184:	4b07      	ldr	r3, [pc, #28]	; (80051a4 <vPortExitCritical+0x4c>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d104      	bne.n	8005196 <vPortExitCritical+0x3e>
 800518c:	2300      	movs	r3, #0
 800518e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	20000008 	.word	0x20000008
	...

080051b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051b0:	f3ef 8009 	mrs	r0, PSP
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	4b15      	ldr	r3, [pc, #84]	; (8005210 <pxCurrentTCBConst>)
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	f01e 0f10 	tst.w	lr, #16
 80051c0:	bf08      	it	eq
 80051c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80051c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ca:	6010      	str	r0, [r2, #0]
 80051cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80051d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80051d4:	f380 8811 	msr	BASEPRI, r0
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f7fe ff46 	bl	8004070 <vTaskSwitchContext>
 80051e4:	f04f 0000 	mov.w	r0, #0
 80051e8:	f380 8811 	msr	BASEPRI, r0
 80051ec:	bc09      	pop	{r0, r3}
 80051ee:	6819      	ldr	r1, [r3, #0]
 80051f0:	6808      	ldr	r0, [r1, #0]
 80051f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051f6:	f01e 0f10 	tst.w	lr, #16
 80051fa:	bf08      	it	eq
 80051fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005200:	f380 8809 	msr	PSP, r0
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	f3af 8000 	nop.w

08005210 <pxCurrentTCBConst>:
 8005210:	200006e4 	.word	0x200006e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005214:	bf00      	nop
 8005216:	bf00      	nop

08005218 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
	__asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005230:	f7fe fe60 	bl	8003ef4 <xTaskIncrementTick>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d003      	beq.n	8005242 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800523a:	4b06      	ldr	r3, [pc, #24]	; (8005254 <SysTick_Handler+0x3c>)
 800523c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	2300      	movs	r3, #0
 8005244:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800524c:	bf00      	nop
 800524e:	3708      	adds	r7, #8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	e000ed04 	.word	0xe000ed04

08005258 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800525c:	4b0b      	ldr	r3, [pc, #44]	; (800528c <vPortSetupTimerInterrupt+0x34>)
 800525e:	2200      	movs	r2, #0
 8005260:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005262:	4b0b      	ldr	r3, [pc, #44]	; (8005290 <vPortSetupTimerInterrupt+0x38>)
 8005264:	2200      	movs	r2, #0
 8005266:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005268:	4b0a      	ldr	r3, [pc, #40]	; (8005294 <vPortSetupTimerInterrupt+0x3c>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a0a      	ldr	r2, [pc, #40]	; (8005298 <vPortSetupTimerInterrupt+0x40>)
 800526e:	fba2 2303 	umull	r2, r3, r2, r3
 8005272:	099b      	lsrs	r3, r3, #6
 8005274:	4a09      	ldr	r2, [pc, #36]	; (800529c <vPortSetupTimerInterrupt+0x44>)
 8005276:	3b01      	subs	r3, #1
 8005278:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800527a:	4b04      	ldr	r3, [pc, #16]	; (800528c <vPortSetupTimerInterrupt+0x34>)
 800527c:	2207      	movs	r2, #7
 800527e:	601a      	str	r2, [r3, #0]
}
 8005280:	bf00      	nop
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	e000e010 	.word	0xe000e010
 8005290:	e000e018 	.word	0xe000e018
 8005294:	20000000 	.word	0x20000000
 8005298:	10624dd3 	.word	0x10624dd3
 800529c:	e000e014 	.word	0xe000e014

080052a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80052a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80052b0 <vPortEnableVFP+0x10>
 80052a4:	6801      	ldr	r1, [r0, #0]
 80052a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80052aa:	6001      	str	r1, [r0, #0]
 80052ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80052ae:	bf00      	nop
 80052b0:	e000ed88 	.word	0xe000ed88

080052b4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80052ba:	f3ef 8305 	mrs	r3, IPSR
 80052be:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2b0f      	cmp	r3, #15
 80052c4:	d913      	bls.n	80052ee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80052c6:	4a16      	ldr	r2, [pc, #88]	; (8005320 <vPortValidateInterruptPriority+0x6c>)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	4413      	add	r3, r2
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80052d0:	4b14      	ldr	r3, [pc, #80]	; (8005324 <vPortValidateInterruptPriority+0x70>)
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	7afa      	ldrb	r2, [r7, #11]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d209      	bcs.n	80052ee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80052da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052de:	f383 8811 	msr	BASEPRI, r3
 80052e2:	f3bf 8f6f 	isb	sy
 80052e6:	f3bf 8f4f 	dsb	sy
 80052ea:	607b      	str	r3, [r7, #4]
 80052ec:	e7fe      	b.n	80052ec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80052ee:	4b0e      	ldr	r3, [pc, #56]	; (8005328 <vPortValidateInterruptPriority+0x74>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80052f6:	4b0d      	ldr	r3, [pc, #52]	; (800532c <vPortValidateInterruptPriority+0x78>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d909      	bls.n	8005312 <vPortValidateInterruptPriority+0x5e>
 80052fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	603b      	str	r3, [r7, #0]
 8005310:	e7fe      	b.n	8005310 <vPortValidateInterruptPriority+0x5c>
	}
 8005312:	bf00      	nop
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	e000e3f0 	.word	0xe000e3f0
 8005324:	20000d10 	.word	0x20000d10
 8005328:	e000ed0c 	.word	0xe000ed0c
 800532c:	20000d14 	.word	0x20000d14

08005330 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b08a      	sub	sp, #40	; 0x28
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005338:	2300      	movs	r3, #0
 800533a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800533c:	f7fe fd20 	bl	8003d80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005340:	4b57      	ldr	r3, [pc, #348]	; (80054a0 <pvPortMalloc+0x170>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005348:	f000 f90c 	bl	8005564 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800534c:	4b55      	ldr	r3, [pc, #340]	; (80054a4 <pvPortMalloc+0x174>)
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4013      	ands	r3, r2
 8005354:	2b00      	cmp	r3, #0
 8005356:	f040 808c 	bne.w	8005472 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d01c      	beq.n	800539a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005360:	2208      	movs	r2, #8
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4413      	add	r3, r2
 8005366:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	2b00      	cmp	r3, #0
 8005370:	d013      	beq.n	800539a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f023 0307 	bic.w	r3, r3, #7
 8005378:	3308      	adds	r3, #8
 800537a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f003 0307 	and.w	r3, r3, #7
 8005382:	2b00      	cmp	r3, #0
 8005384:	d009      	beq.n	800539a <pvPortMalloc+0x6a>
 8005386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538a:	f383 8811 	msr	BASEPRI, r3
 800538e:	f3bf 8f6f 	isb	sy
 8005392:	f3bf 8f4f 	dsb	sy
 8005396:	617b      	str	r3, [r7, #20]
 8005398:	e7fe      	b.n	8005398 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d068      	beq.n	8005472 <pvPortMalloc+0x142>
 80053a0:	4b41      	ldr	r3, [pc, #260]	; (80054a8 <pvPortMalloc+0x178>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d863      	bhi.n	8005472 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80053aa:	4b40      	ldr	r3, [pc, #256]	; (80054ac <pvPortMalloc+0x17c>)
 80053ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80053ae:	4b3f      	ldr	r3, [pc, #252]	; (80054ac <pvPortMalloc+0x17c>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053b4:	e004      	b.n	80053c0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d903      	bls.n	80053d2 <pvPortMalloc+0xa2>
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1f1      	bne.n	80053b6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80053d2:	4b33      	ldr	r3, [pc, #204]	; (80054a0 <pvPortMalloc+0x170>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d8:	429a      	cmp	r2, r3
 80053da:	d04a      	beq.n	8005472 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2208      	movs	r2, #8
 80053e2:	4413      	add	r3, r2
 80053e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	6a3b      	ldr	r3, [r7, #32]
 80053ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	1ad2      	subs	r2, r2, r3
 80053f6:	2308      	movs	r3, #8
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d91e      	bls.n	800543c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80053fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4413      	add	r3, r2
 8005404:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	2b00      	cmp	r3, #0
 800540e:	d009      	beq.n	8005424 <pvPortMalloc+0xf4>
 8005410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	613b      	str	r3, [r7, #16]
 8005422:	e7fe      	b.n	8005422 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	1ad2      	subs	r2, r2, r3
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005436:	69b8      	ldr	r0, [r7, #24]
 8005438:	f000 f8f6 	bl	8005628 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800543c:	4b1a      	ldr	r3, [pc, #104]	; (80054a8 <pvPortMalloc+0x178>)
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	4a18      	ldr	r2, [pc, #96]	; (80054a8 <pvPortMalloc+0x178>)
 8005448:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800544a:	4b17      	ldr	r3, [pc, #92]	; (80054a8 <pvPortMalloc+0x178>)
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	4b18      	ldr	r3, [pc, #96]	; (80054b0 <pvPortMalloc+0x180>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	429a      	cmp	r2, r3
 8005454:	d203      	bcs.n	800545e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005456:	4b14      	ldr	r3, [pc, #80]	; (80054a8 <pvPortMalloc+0x178>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a15      	ldr	r2, [pc, #84]	; (80054b0 <pvPortMalloc+0x180>)
 800545c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	4b10      	ldr	r3, [pc, #64]	; (80054a4 <pvPortMalloc+0x174>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	431a      	orrs	r2, r3
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	2200      	movs	r2, #0
 8005470:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005472:	f7fe fc93 	bl	8003d9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	2b00      	cmp	r3, #0
 800547e:	d009      	beq.n	8005494 <pvPortMalloc+0x164>
 8005480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005484:	f383 8811 	msr	BASEPRI, r3
 8005488:	f3bf 8f6f 	isb	sy
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	60fb      	str	r3, [r7, #12]
 8005492:	e7fe      	b.n	8005492 <pvPortMalloc+0x162>
	return pvReturn;
 8005494:	69fb      	ldr	r3, [r7, #28]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3728      	adds	r7, #40	; 0x28
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	20004920 	.word	0x20004920
 80054a4:	2000492c 	.word	0x2000492c
 80054a8:	20004924 	.word	0x20004924
 80054ac:	20004918 	.word	0x20004918
 80054b0:	20004928 	.word	0x20004928

080054b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d046      	beq.n	8005554 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80054c6:	2308      	movs	r3, #8
 80054c8:	425b      	negs	r3, r3
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	4413      	add	r3, r2
 80054ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	4b20      	ldr	r3, [pc, #128]	; (800555c <vPortFree+0xa8>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4013      	ands	r3, r2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d109      	bne.n	80054f6 <vPortFree+0x42>
 80054e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	60fb      	str	r3, [r7, #12]
 80054f4:	e7fe      	b.n	80054f4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d009      	beq.n	8005512 <vPortFree+0x5e>
 80054fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	60bb      	str	r3, [r7, #8]
 8005510:	e7fe      	b.n	8005510 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	4b11      	ldr	r3, [pc, #68]	; (800555c <vPortFree+0xa8>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4013      	ands	r3, r2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d019      	beq.n	8005554 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d115      	bne.n	8005554 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	4b0b      	ldr	r3, [pc, #44]	; (800555c <vPortFree+0xa8>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	43db      	mvns	r3, r3
 8005532:	401a      	ands	r2, r3
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005538:	f7fe fc22 	bl	8003d80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	4b07      	ldr	r3, [pc, #28]	; (8005560 <vPortFree+0xac>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4413      	add	r3, r2
 8005546:	4a06      	ldr	r2, [pc, #24]	; (8005560 <vPortFree+0xac>)
 8005548:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800554a:	6938      	ldr	r0, [r7, #16]
 800554c:	f000 f86c 	bl	8005628 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005550:	f7fe fc24 	bl	8003d9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005554:	bf00      	nop
 8005556:	3718      	adds	r7, #24
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	2000492c 	.word	0x2000492c
 8005560:	20004924 	.word	0x20004924

08005564 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800556a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800556e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005570:	4b27      	ldr	r3, [pc, #156]	; (8005610 <prvHeapInit+0xac>)
 8005572:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f003 0307 	and.w	r3, r3, #7
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00c      	beq.n	8005598 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	3307      	adds	r3, #7
 8005582:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 0307 	bic.w	r3, r3, #7
 800558a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	4a1f      	ldr	r2, [pc, #124]	; (8005610 <prvHeapInit+0xac>)
 8005594:	4413      	add	r3, r2
 8005596:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800559c:	4a1d      	ldr	r2, [pc, #116]	; (8005614 <prvHeapInit+0xb0>)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80055a2:	4b1c      	ldr	r3, [pc, #112]	; (8005614 <prvHeapInit+0xb0>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	4413      	add	r3, r2
 80055ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80055b0:	2208      	movs	r2, #8
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	1a9b      	subs	r3, r3, r2
 80055b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f023 0307 	bic.w	r3, r3, #7
 80055be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4a15      	ldr	r2, [pc, #84]	; (8005618 <prvHeapInit+0xb4>)
 80055c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80055c6:	4b14      	ldr	r3, [pc, #80]	; (8005618 <prvHeapInit+0xb4>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2200      	movs	r2, #0
 80055cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80055ce:	4b12      	ldr	r3, [pc, #72]	; (8005618 <prvHeapInit+0xb4>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2200      	movs	r2, #0
 80055d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	1ad2      	subs	r2, r2, r3
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055e4:	4b0c      	ldr	r3, [pc, #48]	; (8005618 <prvHeapInit+0xb4>)
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	4a0a      	ldr	r2, [pc, #40]	; (800561c <prvHeapInit+0xb8>)
 80055f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	4a09      	ldr	r2, [pc, #36]	; (8005620 <prvHeapInit+0xbc>)
 80055fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80055fc:	4b09      	ldr	r3, [pc, #36]	; (8005624 <prvHeapInit+0xc0>)
 80055fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005602:	601a      	str	r2, [r3, #0]
}
 8005604:	bf00      	nop
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	20000d18 	.word	0x20000d18
 8005614:	20004918 	.word	0x20004918
 8005618:	20004920 	.word	0x20004920
 800561c:	20004928 	.word	0x20004928
 8005620:	20004924 	.word	0x20004924
 8005624:	2000492c 	.word	0x2000492c

08005628 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005630:	4b28      	ldr	r3, [pc, #160]	; (80056d4 <prvInsertBlockIntoFreeList+0xac>)
 8005632:	60fb      	str	r3, [r7, #12]
 8005634:	e002      	b.n	800563c <prvInsertBlockIntoFreeList+0x14>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	60fb      	str	r3, [r7, #12]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	429a      	cmp	r2, r3
 8005644:	d8f7      	bhi.n	8005636 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	4413      	add	r3, r2
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	429a      	cmp	r2, r3
 8005656:	d108      	bne.n	800566a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	441a      	add	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	441a      	add	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	429a      	cmp	r2, r3
 800567c:	d118      	bne.n	80056b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	4b15      	ldr	r3, [pc, #84]	; (80056d8 <prvInsertBlockIntoFreeList+0xb0>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	429a      	cmp	r2, r3
 8005688:	d00d      	beq.n	80056a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	441a      	add	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	e008      	b.n	80056b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80056a6:	4b0c      	ldr	r3, [pc, #48]	; (80056d8 <prvInsertBlockIntoFreeList+0xb0>)
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	e003      	b.n	80056b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d002      	beq.n	80056c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056c6:	bf00      	nop
 80056c8:	3714      	adds	r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	20004918 	.word	0x20004918
 80056d8:	20004920 	.word	0x20004920

080056dc <__libc_init_array>:
 80056dc:	b570      	push	{r4, r5, r6, lr}
 80056de:	4e0d      	ldr	r6, [pc, #52]	; (8005714 <__libc_init_array+0x38>)
 80056e0:	4c0d      	ldr	r4, [pc, #52]	; (8005718 <__libc_init_array+0x3c>)
 80056e2:	1ba4      	subs	r4, r4, r6
 80056e4:	10a4      	asrs	r4, r4, #2
 80056e6:	2500      	movs	r5, #0
 80056e8:	42a5      	cmp	r5, r4
 80056ea:	d109      	bne.n	8005700 <__libc_init_array+0x24>
 80056ec:	4e0b      	ldr	r6, [pc, #44]	; (800571c <__libc_init_array+0x40>)
 80056ee:	4c0c      	ldr	r4, [pc, #48]	; (8005720 <__libc_init_array+0x44>)
 80056f0:	f000 f82c 	bl	800574c <_init>
 80056f4:	1ba4      	subs	r4, r4, r6
 80056f6:	10a4      	asrs	r4, r4, #2
 80056f8:	2500      	movs	r5, #0
 80056fa:	42a5      	cmp	r5, r4
 80056fc:	d105      	bne.n	800570a <__libc_init_array+0x2e>
 80056fe:	bd70      	pop	{r4, r5, r6, pc}
 8005700:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005704:	4798      	blx	r3
 8005706:	3501      	adds	r5, #1
 8005708:	e7ee      	b.n	80056e8 <__libc_init_array+0xc>
 800570a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800570e:	4798      	blx	r3
 8005710:	3501      	adds	r5, #1
 8005712:	e7f2      	b.n	80056fa <__libc_init_array+0x1e>
 8005714:	080057a8 	.word	0x080057a8
 8005718:	080057a8 	.word	0x080057a8
 800571c:	080057a8 	.word	0x080057a8
 8005720:	080057ac 	.word	0x080057ac

08005724 <memcpy>:
 8005724:	b510      	push	{r4, lr}
 8005726:	1e43      	subs	r3, r0, #1
 8005728:	440a      	add	r2, r1
 800572a:	4291      	cmp	r1, r2
 800572c:	d100      	bne.n	8005730 <memcpy+0xc>
 800572e:	bd10      	pop	{r4, pc}
 8005730:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005734:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005738:	e7f7      	b.n	800572a <memcpy+0x6>

0800573a <memset>:
 800573a:	4402      	add	r2, r0
 800573c:	4603      	mov	r3, r0
 800573e:	4293      	cmp	r3, r2
 8005740:	d100      	bne.n	8005744 <memset+0xa>
 8005742:	4770      	bx	lr
 8005744:	f803 1b01 	strb.w	r1, [r3], #1
 8005748:	e7f9      	b.n	800573e <memset+0x4>
	...

0800574c <_init>:
 800574c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800574e:	bf00      	nop
 8005750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005752:	bc08      	pop	{r3}
 8005754:	469e      	mov	lr, r3
 8005756:	4770      	bx	lr

08005758 <_fini>:
 8005758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575a:	bf00      	nop
 800575c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800575e:	bc08      	pop	{r3}
 8005760:	469e      	mov	lr, r3
 8005762:	4770      	bx	lr
