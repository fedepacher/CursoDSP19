
i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051b4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08005354  08005354  00015354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005390  08005390  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005390  08005390  00015390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005398  08005398  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005398  08005398  00015398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800539c  0800539c  0001539c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080053a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008e00  2000000c  080053ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008e0c  080053ac  00028e0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001739d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b54  00000000  00000000  000373d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001328  00000000  00000000  00039f30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001210  00000000  00000000  0003b258  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002b4a  00000000  00000000  0003c468  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ec5c  00000000  00000000  0003efb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000948c2  00000000  00000000  0004dc0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e24d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005130  00000000  00000000  000e254c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000000c 	.word	0x2000000c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800533c 	.word	0x0800533c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000010 	.word	0x20000010
 80001dc:	0800533c 	.word	0x0800533c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08e      	sub	sp, #56	; 0x38
 80004e4:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e6:	f000 fad7 	bl	8000a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ea:	f000 f83b 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ee:	f000 f8cf 	bl	8000690 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004f2:	f000 f89f 	bl	8000634 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t value = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, 0x32, 0x0F, 1, &value, 1, 10000);
 80004fc:	f242 7310 	movw	r3, #10000	; 0x2710
 8000500:	9302      	str	r3, [sp, #8]
 8000502:	2301      	movs	r3, #1
 8000504:	9301      	str	r3, [sp, #4]
 8000506:	f107 0326 	add.w	r3, r7, #38	; 0x26
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	2301      	movs	r3, #1
 800050e:	220f      	movs	r2, #15
 8000510:	2132      	movs	r1, #50	; 0x32
 8000512:	4810      	ldr	r0, [pc, #64]	; (8000554 <main+0x74>)
 8000514:	f000 fec2 	bl	800129c <HAL_I2C_Mem_Read>
 8000518:	4603      	mov	r3, r0
 800051a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* USER CODE END 2 */

  osKernelInitialize();
 800051e:	f002 f9cf 	bl	80028c0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  const osThreadAttr_t defaultTask_attributes = {
 8000522:	463b      	mov	r3, r7
 8000524:	2224      	movs	r2, #36	; 0x24
 8000526:	2100      	movs	r1, #0
 8000528:	4618      	mov	r0, r3
 800052a:	f004 fefe 	bl	800532a <memset>
 800052e:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <main+0x78>)
 8000530:	603b      	str	r3, [r7, #0]
 8000532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000536:	617b      	str	r3, [r7, #20]
 8000538:	2318      	movs	r3, #24
 800053a:	61bb      	str	r3, [r7, #24]
    .name = "defaultTask",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 4096
  };
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800053c:	463b      	mov	r3, r7
 800053e:	461a      	mov	r2, r3
 8000540:	2100      	movs	r1, #0
 8000542:	4806      	ldr	r0, [pc, #24]	; (800055c <main+0x7c>)
 8000544:	f002 fa24 	bl	8002990 <osThreadNew>
 8000548:	4602      	mov	r2, r0
 800054a:	4b05      	ldr	r3, [pc, #20]	; (8000560 <main+0x80>)
 800054c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800054e:	f002 f9eb 	bl	8002928 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000552:	e7fe      	b.n	8000552 <main+0x72>
 8000554:	20008d34 	.word	0x20008d34
 8000558:	08005354 	.word	0x08005354
 800055c:	080007a5 	.word	0x080007a5
 8000560:	20008d30 	.word	0x20008d30

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	; 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0320 	add.w	r3, r7, #32
 800056e:	2230      	movs	r2, #48	; 0x30
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f004 fed9 	bl	800532a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	4b27      	ldr	r3, [pc, #156]	; (800062c <SystemClock_Config+0xc8>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	4a26      	ldr	r2, [pc, #152]	; (800062c <SystemClock_Config+0xc8>)
 8000592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000596:	6413      	str	r3, [r2, #64]	; 0x40
 8000598:	4b24      	ldr	r3, [pc, #144]	; (800062c <SystemClock_Config+0xc8>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	4b21      	ldr	r3, [pc, #132]	; (8000630 <SystemClock_Config+0xcc>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a20      	ldr	r2, [pc, #128]	; (8000630 <SystemClock_Config+0xcc>)
 80005ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <SystemClock_Config+0xcc>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c0:	2301      	movs	r3, #1
 80005c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ca:	2302      	movs	r3, #2
 80005cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005d4:	2304      	movs	r3, #4
 80005d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80005d8:	2364      	movs	r3, #100	; 0x64
 80005da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005dc:	2302      	movs	r3, #2
 80005de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005e0:	2304      	movs	r3, #4
 80005e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 0320 	add.w	r3, r7, #32
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 fae9 	bl	8001bc0 <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f4:	f000 f8f8 	bl	80007e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fc:	2302      	movs	r3, #2
 80005fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000608:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	2103      	movs	r1, #3
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fd15 	bl	8002044 <HAL_RCC_ClockConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000620:	f000 f8e2 	bl	80007e8 <Error_Handler>
  }
}
 8000624:	bf00      	nop
 8000626:	3750      	adds	r7, #80	; 0x50
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_I2C1_Init+0x50>)
 800063a:	4a13      	ldr	r2, [pc, #76]	; (8000688 <MX_I2C1_Init+0x54>)
 800063c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_I2C1_Init+0x50>)
 8000640:	4a12      	ldr	r2, [pc, #72]	; (800068c <MX_I2C1_Init+0x58>)
 8000642:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_I2C1_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_I2C1_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_I2C1_Init+0x50>)
 8000652:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000656:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <MX_I2C1_Init+0x50>)
 800065a:	2200      	movs	r2, #0
 800065c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_I2C1_Init+0x50>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <MX_I2C1_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_I2C1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <MX_I2C1_Init+0x50>)
 8000672:	f000 fceb 	bl	800104c <HAL_I2C_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800067c:	f000 f8b4 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20008d34 	.word	0x20008d34
 8000688:	40005400 	.word	0x40005400
 800068c:	000186a0 	.word	0x000186a0

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
 80006aa:	4b3a      	ldr	r3, [pc, #232]	; (8000794 <MX_GPIO_Init+0x104>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a39      	ldr	r2, [pc, #228]	; (8000794 <MX_GPIO_Init+0x104>)
 80006b0:	f043 0310 	orr.w	r3, r3, #16
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b37      	ldr	r3, [pc, #220]	; (8000794 <MX_GPIO_Init+0x104>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0310 	and.w	r3, r3, #16
 80006be:	613b      	str	r3, [r7, #16]
 80006c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	4b33      	ldr	r3, [pc, #204]	; (8000794 <MX_GPIO_Init+0x104>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a32      	ldr	r2, [pc, #200]	; (8000794 <MX_GPIO_Init+0x104>)
 80006cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b30      	ldr	r3, [pc, #192]	; (8000794 <MX_GPIO_Init+0x104>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <MX_GPIO_Init+0x104>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a2b      	ldr	r2, [pc, #172]	; (8000794 <MX_GPIO_Init+0x104>)
 80006e8:	f043 0308 	orr.w	r3, r3, #8
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <MX_GPIO_Init+0x104>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	4b25      	ldr	r3, [pc, #148]	; (8000794 <MX_GPIO_Init+0x104>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <MX_GPIO_Init+0x104>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b22      	ldr	r3, [pc, #136]	; (8000794 <MX_GPIO_Init+0x104>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <MX_GPIO_Init+0x104>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a1d      	ldr	r2, [pc, #116]	; (8000794 <MX_GPIO_Init+0x104>)
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <MX_GPIO_Init+0x104>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000738:	4817      	ldr	r0, [pc, #92]	; (8000798 <MX_GPIO_Init+0x108>)
 800073a:	f000 fc53 	bl	8000fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800073e:	2304      	movs	r3, #4
 8000740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000742:	2300      	movs	r3, #0
 8000744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	4619      	mov	r1, r3
 8000750:	4812      	ldr	r0, [pc, #72]	; (800079c <MX_GPIO_Init+0x10c>)
 8000752:	f000 fac5 	bl	8000ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000756:	2330      	movs	r3, #48	; 0x30
 8000758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_GPIO_Init+0x110>)
 800075c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	4619      	mov	r1, r3
 8000768:	480c      	ldr	r0, [pc, #48]	; (800079c <MX_GPIO_Init+0x10c>)
 800076a:	f000 fab9 	bl	8000ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800076e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000774:	2301      	movs	r3, #1
 8000776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2300      	movs	r3, #0
 800077e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	4619      	mov	r1, r3
 8000786:	4804      	ldr	r0, [pc, #16]	; (8000798 <MX_GPIO_Init+0x108>)
 8000788:	f000 faaa 	bl	8000ce0 <HAL_GPIO_Init>

}
 800078c:	bf00      	nop
 800078e:	3728      	adds	r7, #40	; 0x28
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40023800 	.word	0x40023800
 8000798:	40020c00 	.word	0x40020c00
 800079c:	40021000 	.word	0x40021000
 80007a0:	10110000 	.word	0x10110000

080007a4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80007ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007b0:	4803      	ldr	r0, [pc, #12]	; (80007c0 <StartDefaultTask+0x1c>)
 80007b2:	f000 fc30 	bl	8001016 <HAL_GPIO_TogglePin>
	  osDelay(200);
 80007b6:	20c8      	movs	r0, #200	; 0xc8
 80007b8:	f002 f994 	bl	8002ae4 <osDelay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80007bc:	e7f6      	b.n	80007ac <StartDefaultTask+0x8>
 80007be:	bf00      	nop
 80007c0:	40020c00 	.word	0x40020c00

080007c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a04      	ldr	r2, [pc, #16]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d101      	bne.n	80007da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007d6:	f000 f981 	bl	8000adc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40010000 	.word	0x40010000

080007e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
	...

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b12      	ldr	r3, [pc, #72]	; (800084c <HAL_MspInit+0x54>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	4a11      	ldr	r2, [pc, #68]	; (800084c <HAL_MspInit+0x54>)
 8000808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080c:	6453      	str	r3, [r2, #68]	; 0x44
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <HAL_MspInit+0x54>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <HAL_MspInit+0x54>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	4a0a      	ldr	r2, [pc, #40]	; (800084c <HAL_MspInit+0x54>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000828:	6413      	str	r3, [r2, #64]	; 0x40
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <HAL_MspInit+0x54>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	210f      	movs	r1, #15
 800083a:	f06f 0001 	mvn.w	r0, #1
 800083e:	f000 fa25 	bl	8000c8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800

08000850 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	; 0x28
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a19      	ldr	r2, [pc, #100]	; (80008d4 <HAL_I2C_MspInit+0x84>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d12c      	bne.n	80008cc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <HAL_I2C_MspInit+0x88>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a17      	ldr	r2, [pc, #92]	; (80008d8 <HAL_I2C_MspInit+0x88>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <HAL_I2C_MspInit+0x88>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800088e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000894:	2312      	movs	r3, #18
 8000896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000898:	2301      	movs	r3, #1
 800089a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089c:	2303      	movs	r3, #3
 800089e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008a0:	2304      	movs	r3, #4
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	480c      	ldr	r0, [pc, #48]	; (80008dc <HAL_I2C_MspInit+0x8c>)
 80008ac:	f000 fa18 	bl	8000ce0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <HAL_I2C_MspInit+0x88>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b8:	4a07      	ldr	r2, [pc, #28]	; (80008d8 <HAL_I2C_MspInit+0x88>)
 80008ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008be:	6413      	str	r3, [r2, #64]	; 0x40
 80008c0:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <HAL_I2C_MspInit+0x88>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008cc:	bf00      	nop
 80008ce:	3728      	adds	r7, #40	; 0x28
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40005400 	.word	0x40005400
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40020400 	.word	0x40020400

080008e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08c      	sub	sp, #48	; 0x30
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80008f0:	2200      	movs	r2, #0
 80008f2:	6879      	ldr	r1, [r7, #4]
 80008f4:	2019      	movs	r0, #25
 80008f6:	f000 f9c9 	bl	8000c8c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80008fa:	2019      	movs	r0, #25
 80008fc:	f000 f9e2 	bl	8000cc4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	4b1e      	ldr	r3, [pc, #120]	; (8000980 <HAL_InitTick+0xa0>)
 8000906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000908:	4a1d      	ldr	r2, [pc, #116]	; (8000980 <HAL_InitTick+0xa0>)
 800090a:	f043 0301 	orr.w	r3, r3, #1
 800090e:	6453      	str	r3, [r2, #68]	; 0x44
 8000910:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <HAL_InitTick+0xa0>)
 8000912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800091c:	f107 0210 	add.w	r2, r7, #16
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4611      	mov	r1, r2
 8000926:	4618      	mov	r0, r3
 8000928:	f001 fd7a 	bl	8002420 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800092c:	f001 fd64 	bl	80023f8 <HAL_RCC_GetPCLK2Freq>
 8000930:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000934:	4a13      	ldr	r2, [pc, #76]	; (8000984 <HAL_InitTick+0xa4>)
 8000936:	fba2 2303 	umull	r2, r3, r2, r3
 800093a:	0c9b      	lsrs	r3, r3, #18
 800093c:	3b01      	subs	r3, #1
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <HAL_InitTick+0xa8>)
 8000942:	4a12      	ldr	r2, [pc, #72]	; (800098c <HAL_InitTick+0xac>)
 8000944:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000946:	4b10      	ldr	r3, [pc, #64]	; (8000988 <HAL_InitTick+0xa8>)
 8000948:	f240 32e7 	movw	r2, #999	; 0x3e7
 800094c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800094e:	4a0e      	ldr	r2, [pc, #56]	; (8000988 <HAL_InitTick+0xa8>)
 8000950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000952:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <HAL_InitTick+0xa8>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <HAL_InitTick+0xa8>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000960:	4809      	ldr	r0, [pc, #36]	; (8000988 <HAL_InitTick+0xa8>)
 8000962:	f001 fd8f 	bl	8002484 <HAL_TIM_Base_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d104      	bne.n	8000976 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800096c:	4806      	ldr	r0, [pc, #24]	; (8000988 <HAL_InitTick+0xa8>)
 800096e:	f001 fdbe 	bl	80024ee <HAL_TIM_Base_Start_IT>
 8000972:	4603      	mov	r3, r0
 8000974:	e000      	b.n	8000978 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
}
 8000978:	4618      	mov	r0, r3
 800097a:	3730      	adds	r7, #48	; 0x30
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40023800 	.word	0x40023800
 8000984:	431bde83 	.word	0x431bde83
 8000988:	20008d88 	.word	0x20008d88
 800098c:	40010000 	.word	0x40010000

08000990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <HardFault_Handler+0x4>

080009a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <MemManage_Handler+0x4>

080009aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <BusFault_Handler+0x4>

080009b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <UsageFault_Handler+0x4>

080009b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009c8:	4802      	ldr	r0, [pc, #8]	; (80009d4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009ca:	f001 fdb4 	bl	8002536 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20008d88 	.word	0x20008d88

080009d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009dc:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <SystemInit+0x60>)
 80009de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009e2:	4a15      	ldr	r2, [pc, #84]	; (8000a38 <SystemInit+0x60>)
 80009e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80009ec:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <SystemInit+0x64>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a12      	ldr	r2, [pc, #72]	; (8000a3c <SystemInit+0x64>)
 80009f2:	f043 0301 	orr.w	r3, r3, #1
 80009f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009f8:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <SystemInit+0x64>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80009fe:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <SystemInit+0x64>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a0e      	ldr	r2, [pc, #56]	; (8000a3c <SystemInit+0x64>)
 8000a04:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a0c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <SystemInit+0x64>)
 8000a10:	4a0b      	ldr	r2, [pc, #44]	; (8000a40 <SystemInit+0x68>)
 8000a12:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <SystemInit+0x64>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a08      	ldr	r2, [pc, #32]	; (8000a3c <SystemInit+0x64>)
 8000a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a1e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <SystemInit+0x64>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a26:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <SystemInit+0x60>)
 8000a28:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a2c:	609a      	str	r2, [r3, #8]
#endif
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	e000ed00 	.word	0xe000ed00
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	24003010 	.word	0x24003010

08000a44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a4a:	e003      	b.n	8000a54 <LoopCopyDataInit>

08000a4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a52:	3104      	adds	r1, #4

08000a54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a54:	480b      	ldr	r0, [pc, #44]	; (8000a84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a5c:	d3f6      	bcc.n	8000a4c <CopyDataInit>
  ldr  r2, =_sbss
 8000a5e:	4a0b      	ldr	r2, [pc, #44]	; (8000a8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a60:	e002      	b.n	8000a68 <LoopFillZerobss>

08000a62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a64:	f842 3b04 	str.w	r3, [r2], #4

08000a68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a6c:	d3f9      	bcc.n	8000a62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a6e:	f7ff ffb3 	bl	80009d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a72:	f004 fc2b 	bl	80052cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a76:	f7ff fd33 	bl	80004e0 <main>
  bx  lr    
 8000a7a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a7c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a80:	080053a0 	.word	0x080053a0
  ldr  r0, =_sdata
 8000a84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a88:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000a8c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000a90:	20008e0c 	.word	0x20008e0c

08000a94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC_IRQHandler>
	...

08000a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <HAL_Init+0x40>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <HAL_Init+0x40>)
 8000aa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <HAL_Init+0x40>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <HAL_Init+0x40>)
 8000aae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ab2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <HAL_Init+0x40>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <HAL_Init+0x40>)
 8000aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000abe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	f000 f8d8 	bl	8000c76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f7ff ff0a 	bl	80008e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000acc:	f7ff fe94 	bl	80007f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023c00 	.word	0x40023c00

08000adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_IncTick+0x20>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_IncTick+0x24>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4413      	add	r3, r2
 8000aec:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <HAL_IncTick+0x24>)
 8000aee:	6013      	str	r3, [r2, #0]
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000004 	.word	0x20000004
 8000b00:	20008dc8 	.word	0x20008dc8

08000b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return uwTick;
 8000b08:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <HAL_GetTick+0x14>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	20008dc8 	.word	0x20008dc8

08000b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b38:	4013      	ands	r3, r2
 8000b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b4e:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <__NVIC_SetPriorityGrouping+0x44>)
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	60d3      	str	r3, [r2, #12]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <__NVIC_GetPriorityGrouping+0x18>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	0a1b      	lsrs	r3, r3, #8
 8000b6e:	f003 0307 	and.w	r3, r3, #7
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	db0b      	blt.n	8000baa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	f003 021f 	and.w	r2, r3, #31
 8000b98:	4907      	ldr	r1, [pc, #28]	; (8000bb8 <__NVIC_EnableIRQ+0x38>)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	095b      	lsrs	r3, r3, #5
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000e100 	.word	0xe000e100

08000bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	db0a      	blt.n	8000be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	490c      	ldr	r1, [pc, #48]	; (8000c08 <__NVIC_SetPriority+0x4c>)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	0112      	lsls	r2, r2, #4
 8000bdc:	b2d2      	uxtb	r2, r2
 8000bde:	440b      	add	r3, r1
 8000be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be4:	e00a      	b.n	8000bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4908      	ldr	r1, [pc, #32]	; (8000c0c <__NVIC_SetPriority+0x50>)
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	f003 030f 	and.w	r3, r3, #15
 8000bf2:	3b04      	subs	r3, #4
 8000bf4:	0112      	lsls	r2, r2, #4
 8000bf6:	b2d2      	uxtb	r2, r2
 8000bf8:	440b      	add	r3, r1
 8000bfa:	761a      	strb	r2, [r3, #24]
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000e100 	.word	0xe000e100
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b089      	sub	sp, #36	; 0x24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	f1c3 0307 	rsb	r3, r3, #7
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	bf28      	it	cs
 8000c2e:	2304      	movcs	r3, #4
 8000c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3304      	adds	r3, #4
 8000c36:	2b06      	cmp	r3, #6
 8000c38:	d902      	bls.n	8000c40 <NVIC_EncodePriority+0x30>
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3b03      	subs	r3, #3
 8000c3e:	e000      	b.n	8000c42 <NVIC_EncodePriority+0x32>
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	f04f 32ff 	mov.w	r2, #4294967295
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43da      	mvns	r2, r3
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	401a      	ands	r2, r3
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c58:	f04f 31ff 	mov.w	r1, #4294967295
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c62:	43d9      	mvns	r1, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	4313      	orrs	r3, r2
         );
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3724      	adds	r7, #36	; 0x24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff ff4c 	bl	8000b1c <__NVIC_SetPriorityGrouping>
}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
 8000c98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c9e:	f7ff ff61 	bl	8000b64 <__NVIC_GetPriorityGrouping>
 8000ca2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca4:	687a      	ldr	r2, [r7, #4]
 8000ca6:	68b9      	ldr	r1, [r7, #8]
 8000ca8:	6978      	ldr	r0, [r7, #20]
 8000caa:	f7ff ffb1 	bl	8000c10 <NVIC_EncodePriority>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb4:	4611      	mov	r1, r2
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff ff80 	bl	8000bbc <__NVIC_SetPriority>
}
 8000cbc:	bf00      	nop
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff54 	bl	8000b80 <__NVIC_EnableIRQ>
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b089      	sub	sp, #36	; 0x24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
 8000cfa:	e159      	b.n	8000fb0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	697a      	ldr	r2, [r7, #20]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	f040 8148 	bne.w	8000faa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d003      	beq.n	8000d2a <HAL_GPIO_Init+0x4a>
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2b12      	cmp	r3, #18
 8000d28:	d123      	bne.n	8000d72 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	08da      	lsrs	r2, r3, #3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	3208      	adds	r2, #8
 8000d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	220f      	movs	r2, #15
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	691a      	ldr	r2, [r3, #16]
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	f003 0307 	and.w	r3, r3, #7
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	08da      	lsrs	r2, r3, #3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3208      	adds	r2, #8
 8000d6c:	69b9      	ldr	r1, [r7, #24]
 8000d6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43db      	mvns	r3, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4013      	ands	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f003 0203 	and.w	r2, r3, #3
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d00b      	beq.n	8000dc6 <HAL_GPIO_Init+0xe6>
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d007      	beq.n	8000dc6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dba:	2b11      	cmp	r3, #17
 8000dbc:	d003      	beq.n	8000dc6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	2b12      	cmp	r3, #18
 8000dc4:	d130      	bne.n	8000e28 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	68da      	ldr	r2, [r3, #12]
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	091b      	lsrs	r3, r3, #4
 8000e12:	f003 0201 	and.w	r2, r3, #1
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	2203      	movs	r2, #3
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	689a      	ldr	r2, [r3, #8]
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f000 80a2 	beq.w	8000faa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	4b56      	ldr	r3, [pc, #344]	; (8000fc4 <HAL_GPIO_Init+0x2e4>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	4a55      	ldr	r2, [pc, #340]	; (8000fc4 <HAL_GPIO_Init+0x2e4>)
 8000e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e74:	6453      	str	r3, [r2, #68]	; 0x44
 8000e76:	4b53      	ldr	r3, [pc, #332]	; (8000fc4 <HAL_GPIO_Init+0x2e4>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e82:	4a51      	ldr	r2, [pc, #324]	; (8000fc8 <HAL_GPIO_Init+0x2e8>)
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	089b      	lsrs	r3, r3, #2
 8000e88:	3302      	adds	r3, #2
 8000e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f003 0303 	and.w	r3, r3, #3
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	220f      	movs	r2, #15
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a48      	ldr	r2, [pc, #288]	; (8000fcc <HAL_GPIO_Init+0x2ec>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d019      	beq.n	8000ee2 <HAL_GPIO_Init+0x202>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a47      	ldr	r2, [pc, #284]	; (8000fd0 <HAL_GPIO_Init+0x2f0>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d013      	beq.n	8000ede <HAL_GPIO_Init+0x1fe>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a46      	ldr	r2, [pc, #280]	; (8000fd4 <HAL_GPIO_Init+0x2f4>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d00d      	beq.n	8000eda <HAL_GPIO_Init+0x1fa>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a45      	ldr	r2, [pc, #276]	; (8000fd8 <HAL_GPIO_Init+0x2f8>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d007      	beq.n	8000ed6 <HAL_GPIO_Init+0x1f6>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a44      	ldr	r2, [pc, #272]	; (8000fdc <HAL_GPIO_Init+0x2fc>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d101      	bne.n	8000ed2 <HAL_GPIO_Init+0x1f2>
 8000ece:	2304      	movs	r3, #4
 8000ed0:	e008      	b.n	8000ee4 <HAL_GPIO_Init+0x204>
 8000ed2:	2307      	movs	r3, #7
 8000ed4:	e006      	b.n	8000ee4 <HAL_GPIO_Init+0x204>
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e004      	b.n	8000ee4 <HAL_GPIO_Init+0x204>
 8000eda:	2302      	movs	r3, #2
 8000edc:	e002      	b.n	8000ee4 <HAL_GPIO_Init+0x204>
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e000      	b.n	8000ee4 <HAL_GPIO_Init+0x204>
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	69fa      	ldr	r2, [r7, #28]
 8000ee6:	f002 0203 	and.w	r2, r2, #3
 8000eea:	0092      	lsls	r2, r2, #2
 8000eec:	4093      	lsls	r3, r2
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ef4:	4934      	ldr	r1, [pc, #208]	; (8000fc8 <HAL_GPIO_Init+0x2e8>)
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	089b      	lsrs	r3, r3, #2
 8000efa:	3302      	adds	r3, #2
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f02:	4b37      	ldr	r3, [pc, #220]	; (8000fe0 <HAL_GPIO_Init+0x300>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f26:	4a2e      	ldr	r2, [pc, #184]	; (8000fe0 <HAL_GPIO_Init+0x300>)
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f2c:	4b2c      	ldr	r3, [pc, #176]	; (8000fe0 <HAL_GPIO_Init+0x300>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f50:	4a23      	ldr	r2, [pc, #140]	; (8000fe0 <HAL_GPIO_Init+0x300>)
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f56:	4b22      	ldr	r3, [pc, #136]	; (8000fe0 <HAL_GPIO_Init+0x300>)
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f7a:	4a19      	ldr	r2, [pc, #100]	; (8000fe0 <HAL_GPIO_Init+0x300>)
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f80:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <HAL_GPIO_Init+0x300>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fa4:	4a0e      	ldr	r2, [pc, #56]	; (8000fe0 <HAL_GPIO_Init+0x300>)
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3301      	adds	r3, #1
 8000fae:	61fb      	str	r3, [r7, #28]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	2b0f      	cmp	r3, #15
 8000fb4:	f67f aea2 	bls.w	8000cfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fb8:	bf00      	nop
 8000fba:	3724      	adds	r7, #36	; 0x24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40013800 	.word	0x40013800
 8000fcc:	40020000 	.word	0x40020000
 8000fd0:	40020400 	.word	0x40020400
 8000fd4:	40020800 	.word	0x40020800
 8000fd8:	40020c00 	.word	0x40020c00
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40013c00 	.word	0x40013c00

08000fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	807b      	strh	r3, [r7, #2]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ff4:	787b      	ldrb	r3, [r7, #1]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ffa:	887a      	ldrh	r2, [r7, #2]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001000:	e003      	b.n	800100a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001002:	887b      	ldrh	r3, [r7, #2]
 8001004:	041a      	lsls	r2, r3, #16
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	619a      	str	r2, [r3, #24]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
 800101e:	460b      	mov	r3, r1
 8001020:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	695a      	ldr	r2, [r3, #20]
 8001026:	887b      	ldrh	r3, [r7, #2]
 8001028:	401a      	ands	r2, r3
 800102a:	887b      	ldrh	r3, [r7, #2]
 800102c:	429a      	cmp	r2, r3
 800102e:	d104      	bne.n	800103a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001030:	887b      	ldrh	r3, [r7, #2]
 8001032:	041a      	lsls	r2, r3, #16
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001038:	e002      	b.n	8001040 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800103a:	887a      	ldrh	r2, [r7, #2]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	619a      	str	r2, [r3, #24]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e10f      	b.n	800127e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d106      	bne.n	8001078 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff fbec 	bl	8000850 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2224      	movs	r2, #36	; 0x24
 800107c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f022 0201 	bic.w	r2, r2, #1
 800108e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001090:	f001 f99e 	bl	80023d0 <HAL_RCC_GetPCLK1Freq>
 8001094:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	4a7b      	ldr	r2, [pc, #492]	; (8001288 <HAL_I2C_Init+0x23c>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d807      	bhi.n	80010b0 <HAL_I2C_Init+0x64>
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4a7a      	ldr	r2, [pc, #488]	; (800128c <HAL_I2C_Init+0x240>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	bf94      	ite	ls
 80010a8:	2301      	movls	r3, #1
 80010aa:	2300      	movhi	r3, #0
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	e006      	b.n	80010be <HAL_I2C_Init+0x72>
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4a77      	ldr	r2, [pc, #476]	; (8001290 <HAL_I2C_Init+0x244>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	bf94      	ite	ls
 80010b8:	2301      	movls	r3, #1
 80010ba:	2300      	movhi	r3, #0
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e0db      	b.n	800127e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4a72      	ldr	r2, [pc, #456]	; (8001294 <HAL_I2C_Init+0x248>)
 80010ca:	fba2 2303 	umull	r2, r3, r2, r3
 80010ce:	0c9b      	lsrs	r3, r3, #18
 80010d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	68ba      	ldr	r2, [r7, #8]
 80010e2:	430a      	orrs	r2, r1
 80010e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	4a64      	ldr	r2, [pc, #400]	; (8001288 <HAL_I2C_Init+0x23c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d802      	bhi.n	8001100 <HAL_I2C_Init+0xb4>
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	3301      	adds	r3, #1
 80010fe:	e009      	b.n	8001114 <HAL_I2C_Init+0xc8>
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001106:	fb02 f303 	mul.w	r3, r2, r3
 800110a:	4a63      	ldr	r2, [pc, #396]	; (8001298 <HAL_I2C_Init+0x24c>)
 800110c:	fba2 2303 	umull	r2, r3, r2, r3
 8001110:	099b      	lsrs	r3, r3, #6
 8001112:	3301      	adds	r3, #1
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	6812      	ldr	r2, [r2, #0]
 8001118:	430b      	orrs	r3, r1
 800111a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001126:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	4956      	ldr	r1, [pc, #344]	; (8001288 <HAL_I2C_Init+0x23c>)
 8001130:	428b      	cmp	r3, r1
 8001132:	d80d      	bhi.n	8001150 <HAL_I2C_Init+0x104>
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	1e59      	subs	r1, r3, #1
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001142:	3301      	adds	r3, #1
 8001144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001148:	2b04      	cmp	r3, #4
 800114a:	bf38      	it	cc
 800114c:	2304      	movcc	r3, #4
 800114e:	e04f      	b.n	80011f0 <HAL_I2C_Init+0x1a4>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d111      	bne.n	800117c <HAL_I2C_Init+0x130>
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	1e58      	subs	r0, r3, #1
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6859      	ldr	r1, [r3, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	440b      	add	r3, r1
 8001166:	fbb0 f3f3 	udiv	r3, r0, r3
 800116a:	3301      	adds	r3, #1
 800116c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001170:	2b00      	cmp	r3, #0
 8001172:	bf0c      	ite	eq
 8001174:	2301      	moveq	r3, #1
 8001176:	2300      	movne	r3, #0
 8001178:	b2db      	uxtb	r3, r3
 800117a:	e012      	b.n	80011a2 <HAL_I2C_Init+0x156>
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	1e58      	subs	r0, r3, #1
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6859      	ldr	r1, [r3, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	440b      	add	r3, r1
 800118a:	0099      	lsls	r1, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001192:	3301      	adds	r3, #1
 8001194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001198:	2b00      	cmp	r3, #0
 800119a:	bf0c      	ite	eq
 800119c:	2301      	moveq	r3, #1
 800119e:	2300      	movne	r3, #0
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_I2C_Init+0x15e>
 80011a6:	2301      	movs	r3, #1
 80011a8:	e022      	b.n	80011f0 <HAL_I2C_Init+0x1a4>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d10e      	bne.n	80011d0 <HAL_I2C_Init+0x184>
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	1e58      	subs	r0, r3, #1
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6859      	ldr	r1, [r3, #4]
 80011ba:	460b      	mov	r3, r1
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	440b      	add	r3, r1
 80011c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80011c4:	3301      	adds	r3, #1
 80011c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011ce:	e00f      	b.n	80011f0 <HAL_I2C_Init+0x1a4>
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	1e58      	subs	r0, r3, #1
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6859      	ldr	r1, [r3, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	440b      	add	r3, r1
 80011de:	0099      	lsls	r1, r3, #2
 80011e0:	440b      	add	r3, r1
 80011e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80011e6:	3301      	adds	r3, #1
 80011e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011f0:	6879      	ldr	r1, [r7, #4]
 80011f2:	6809      	ldr	r1, [r1, #0]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69da      	ldr	r2, [r3, #28]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a1b      	ldr	r3, [r3, #32]
 800120a:	431a      	orrs	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	430a      	orrs	r2, r1
 8001212:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800121e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	6911      	ldr	r1, [r2, #16]
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	68d2      	ldr	r2, [r2, #12]
 800122a:	4311      	orrs	r1, r2
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	6812      	ldr	r2, [r2, #0]
 8001230:	430b      	orrs	r3, r1
 8001232:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	695a      	ldr	r2, [r3, #20]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	431a      	orrs	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	430a      	orrs	r2, r1
 800124e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0201 	orr.w	r2, r2, #1
 800125e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2220      	movs	r2, #32
 800126a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	000186a0 	.word	0x000186a0
 800128c:	001e847f 	.word	0x001e847f
 8001290:	003d08ff 	.word	0x003d08ff
 8001294:	431bde83 	.word	0x431bde83
 8001298:	10624dd3 	.word	0x10624dd3

0800129c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08c      	sub	sp, #48	; 0x30
 80012a0:	af02      	add	r7, sp, #8
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	4608      	mov	r0, r1
 80012a6:	4611      	mov	r1, r2
 80012a8:	461a      	mov	r2, r3
 80012aa:	4603      	mov	r3, r0
 80012ac:	817b      	strh	r3, [r7, #10]
 80012ae:	460b      	mov	r3, r1
 80012b0:	813b      	strh	r3, [r7, #8]
 80012b2:	4613      	mov	r3, r2
 80012b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80012b6:	f7ff fc25 	bl	8000b04 <HAL_GetTick>
 80012ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2b20      	cmp	r3, #32
 80012c6:	f040 8208 	bne.w	80016da <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2319      	movs	r3, #25
 80012d0:	2201      	movs	r2, #1
 80012d2:	497b      	ldr	r1, [pc, #492]	; (80014c0 <HAL_I2C_Mem_Read+0x224>)
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	f000 fad7 	bl	8001888 <I2C_WaitOnFlagUntilTimeout>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80012e0:	2302      	movs	r3, #2
 80012e2:	e1fb      	b.n	80016dc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d101      	bne.n	80012f2 <HAL_I2C_Mem_Read+0x56>
 80012ee:	2302      	movs	r3, #2
 80012f0:	e1f4      	b.n	80016dc <HAL_I2C_Mem_Read+0x440>
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2201      	movs	r2, #1
 80012f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	2b01      	cmp	r3, #1
 8001306:	d007      	beq.n	8001318 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f042 0201 	orr.w	r2, r2, #1
 8001316:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001326:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2222      	movs	r2, #34	; 0x22
 800132c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2240      	movs	r2, #64	; 0x40
 8001334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2200      	movs	r2, #0
 800133c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001342:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001348:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800134e:	b29a      	uxth	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4a5b      	ldr	r2, [pc, #364]	; (80014c4 <HAL_I2C_Mem_Read+0x228>)
 8001358:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800135a:	88f8      	ldrh	r0, [r7, #6]
 800135c:	893a      	ldrh	r2, [r7, #8]
 800135e:	8979      	ldrh	r1, [r7, #10]
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	4603      	mov	r3, r0
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f000 f9bc 	bl	80016e8 <I2C_RequestMemoryRead>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e1b0      	b.n	80016dc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800137e:	2b00      	cmp	r3, #0
 8001380:	d113      	bne.n	80013aa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001382:	2300      	movs	r3, #0
 8001384:	623b      	str	r3, [r7, #32]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	623b      	str	r3, [r7, #32]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	623b      	str	r3, [r7, #32]
 8001396:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	e184      	b.n	80016b4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d11b      	bne.n	80013ea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	61fb      	str	r3, [r7, #28]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	61fb      	str	r3, [r7, #28]
 80013d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	e164      	b.n	80016b4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d11b      	bne.n	800142a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001400:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001410:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001412:	2300      	movs	r3, #0
 8001414:	61bb      	str	r3, [r7, #24]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	61bb      	str	r3, [r7, #24]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	61bb      	str	r3, [r7, #24]
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	e144      	b.n	80016b4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	617b      	str	r3, [r7, #20]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001440:	e138      	b.n	80016b4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001446:	2b03      	cmp	r3, #3
 8001448:	f200 80f1 	bhi.w	800162e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001450:	2b01      	cmp	r3, #1
 8001452:	d123      	bne.n	800149c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001456:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f000 fb2c 	bl	8001ab6 <I2C_WaitOnRXNEFlagUntilTimeout>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e139      	b.n	80016dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	691a      	ldr	r2, [r3, #16]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147a:	1c5a      	adds	r2, r3, #1
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001484:	3b01      	subs	r3, #1
 8001486:	b29a      	uxth	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001490:	b29b      	uxth	r3, r3
 8001492:	3b01      	subs	r3, #1
 8001494:	b29a      	uxth	r2, r3
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	855a      	strh	r2, [r3, #42]	; 0x2a
 800149a:	e10b      	b.n	80016b4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d14e      	bne.n	8001542 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014aa:	2200      	movs	r2, #0
 80014ac:	4906      	ldr	r1, [pc, #24]	; (80014c8 <HAL_I2C_Mem_Read+0x22c>)
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	f000 f9ea 	bl	8001888 <I2C_WaitOnFlagUntilTimeout>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d008      	beq.n	80014cc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e10e      	b.n	80016dc <HAL_I2C_Mem_Read+0x440>
 80014be:	bf00      	nop
 80014c0:	00100002 	.word	0x00100002
 80014c4:	ffff0000 	.word	0xffff0000
 80014c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	691a      	ldr	r2, [r3, #16]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ee:	1c5a      	adds	r2, r3, #1
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014f8:	3b01      	subs	r3, #1
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001504:	b29b      	uxth	r3, r3
 8001506:	3b01      	subs	r3, #1
 8001508:	b29a      	uxth	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	691a      	ldr	r2, [r3, #16]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001520:	1c5a      	adds	r2, r3, #1
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800152a:	3b01      	subs	r3, #1
 800152c:	b29a      	uxth	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001536:	b29b      	uxth	r3, r3
 8001538:	3b01      	subs	r3, #1
 800153a:	b29a      	uxth	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001540:	e0b8      	b.n	80016b4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001548:	2200      	movs	r2, #0
 800154a:	4966      	ldr	r1, [pc, #408]	; (80016e4 <HAL_I2C_Mem_Read+0x448>)
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f000 f99b 	bl	8001888 <I2C_WaitOnFlagUntilTimeout>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e0bf      	b.n	80016dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800156a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	691a      	ldr	r2, [r3, #16]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001588:	3b01      	subs	r3, #1
 800158a:	b29a      	uxth	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001594:	b29b      	uxth	r3, r3
 8001596:	3b01      	subs	r3, #1
 8001598:	b29a      	uxth	r2, r3
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015a4:	2200      	movs	r2, #0
 80015a6:	494f      	ldr	r1, [pc, #316]	; (80016e4 <HAL_I2C_Mem_Read+0x448>)
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f000 f96d 	bl	8001888 <I2C_WaitOnFlagUntilTimeout>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e091      	b.n	80016dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	691a      	ldr	r2, [r3, #16]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	1c5a      	adds	r2, r3, #1
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015e4:	3b01      	subs	r3, #1
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	3b01      	subs	r3, #1
 80015f4:	b29a      	uxth	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	691a      	ldr	r2, [r3, #16]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160c:	1c5a      	adds	r2, r3, #1
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001616:	3b01      	subs	r3, #1
 8001618:	b29a      	uxth	r2, r3
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001622:	b29b      	uxth	r3, r3
 8001624:	3b01      	subs	r3, #1
 8001626:	b29a      	uxth	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800162c:	e042      	b.n	80016b4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800162e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001630:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f000 fa3f 	bl	8001ab6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e04c      	b.n	80016dc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	691a      	ldr	r2, [r3, #16]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001654:	1c5a      	adds	r2, r3, #1
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800165e:	3b01      	subs	r3, #1
 8001660:	b29a      	uxth	r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800166a:	b29b      	uxth	r3, r3
 800166c:	3b01      	subs	r3, #1
 800166e:	b29a      	uxth	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	f003 0304 	and.w	r3, r3, #4
 800167e:	2b04      	cmp	r3, #4
 8001680:	d118      	bne.n	80016b4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	691a      	ldr	r2, [r3, #16]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	1c5a      	adds	r2, r3, #1
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800169e:	3b01      	subs	r3, #1
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	3b01      	subs	r3, #1
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f47f aec2 	bne.w	8001442 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2220      	movs	r2, #32
 80016c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	e000      	b.n	80016dc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80016da:	2302      	movs	r3, #2
  }
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3728      	adds	r7, #40	; 0x28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	00010004 	.word	0x00010004

080016e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af02      	add	r7, sp, #8
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	4608      	mov	r0, r1
 80016f2:	4611      	mov	r1, r2
 80016f4:	461a      	mov	r2, r3
 80016f6:	4603      	mov	r3, r0
 80016f8:	817b      	strh	r3, [r7, #10]
 80016fa:	460b      	mov	r3, r1
 80016fc:	813b      	strh	r3, [r7, #8]
 80016fe:	4613      	mov	r3, r2
 8001700:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001710:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001720:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	6a3b      	ldr	r3, [r7, #32]
 8001728:	2200      	movs	r2, #0
 800172a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f000 f8aa 	bl	8001888 <I2C_WaitOnFlagUntilTimeout>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e09e      	b.n	800187c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800173e:	897b      	ldrh	r3, [r7, #10]
 8001740:	b2db      	uxtb	r3, r3
 8001742:	461a      	mov	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800174c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	6a3a      	ldr	r2, [r7, #32]
 8001752:	494c      	ldr	r1, [pc, #304]	; (8001884 <I2C_RequestMemoryRead+0x19c>)
 8001754:	68f8      	ldr	r0, [r7, #12]
 8001756:	f000 f8ee 	bl	8001936 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e08b      	b.n	800187c <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800177a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800177c:	6a39      	ldr	r1, [r7, #32]
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f000 f958 	bl	8001a34 <I2C_WaitOnTXEFlagUntilTimeout>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00d      	beq.n	80017a6 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	2b04      	cmp	r3, #4
 8001790:	d107      	bne.n	80017a2 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e06a      	b.n	800187c <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80017a6:	88fb      	ldrh	r3, [r7, #6]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d105      	bne.n	80017b8 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80017ac:	893b      	ldrh	r3, [r7, #8]
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	611a      	str	r2, [r3, #16]
 80017b6:	e021      	b.n	80017fc <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80017b8:	893b      	ldrh	r3, [r7, #8]
 80017ba:	0a1b      	lsrs	r3, r3, #8
 80017bc:	b29b      	uxth	r3, r3
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c8:	6a39      	ldr	r1, [r7, #32]
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f000 f932 	bl	8001a34 <I2C_WaitOnTXEFlagUntilTimeout>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00d      	beq.n	80017f2 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	2b04      	cmp	r3, #4
 80017dc:	d107      	bne.n	80017ee <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e044      	b.n	800187c <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80017f2:	893b      	ldrh	r3, [r7, #8]
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017fe:	6a39      	ldr	r1, [r7, #32]
 8001800:	68f8      	ldr	r0, [r7, #12]
 8001802:	f000 f917 	bl	8001a34 <I2C_WaitOnTXEFlagUntilTimeout>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00d      	beq.n	8001828 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	2b04      	cmp	r3, #4
 8001812:	d107      	bne.n	8001824 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001822:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e029      	b.n	800187c <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001836:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	6a3b      	ldr	r3, [r7, #32]
 800183e:	2200      	movs	r2, #0
 8001840:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	f000 f81f 	bl	8001888 <I2C_WaitOnFlagUntilTimeout>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e013      	b.n	800187c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001854:	897b      	ldrh	r3, [r7, #10]
 8001856:	b2db      	uxtb	r3, r3
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	b2da      	uxtb	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	6a3a      	ldr	r2, [r7, #32]
 8001868:	4906      	ldr	r1, [pc, #24]	; (8001884 <I2C_RequestMemoryRead+0x19c>)
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f000 f863 	bl	8001936 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	00010002 	.word	0x00010002

08001888 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	4613      	mov	r3, r2
 8001896:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001898:	e025      	b.n	80018e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a0:	d021      	beq.n	80018e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018a2:	f7ff f92f 	bl	8000b04 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d302      	bcc.n	80018b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d116      	bne.n	80018e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2200      	movs	r2, #0
 80018bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2220      	movs	r2, #32
 80018c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	f043 0220 	orr.w	r2, r3, #32
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e023      	b.n	800192e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	0c1b      	lsrs	r3, r3, #16
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d10d      	bne.n	800190c <I2C_WaitOnFlagUntilTimeout+0x84>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	43da      	mvns	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	4013      	ands	r3, r2
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	bf0c      	ite	eq
 8001902:	2301      	moveq	r3, #1
 8001904:	2300      	movne	r3, #0
 8001906:	b2db      	uxtb	r3, r3
 8001908:	461a      	mov	r2, r3
 800190a:	e00c      	b.n	8001926 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	43da      	mvns	r2, r3
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	4013      	ands	r3, r2
 8001918:	b29b      	uxth	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	bf0c      	ite	eq
 800191e:	2301      	moveq	r3, #1
 8001920:	2300      	movne	r3, #0
 8001922:	b2db      	uxtb	r3, r3
 8001924:	461a      	mov	r2, r3
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	429a      	cmp	r2, r3
 800192a:	d0b6      	beq.n	800189a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b084      	sub	sp, #16
 800193a:	af00      	add	r7, sp, #0
 800193c:	60f8      	str	r0, [r7, #12]
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
 8001942:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001944:	e051      	b.n	80019ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001954:	d123      	bne.n	800199e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001964:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800196e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2200      	movs	r2, #0
 8001974:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2220      	movs	r2, #32
 800197a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f043 0204 	orr.w	r2, r3, #4
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e046      	b.n	8001a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a4:	d021      	beq.n	80019ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019a6:	f7ff f8ad 	bl	8000b04 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d302      	bcc.n	80019bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d116      	bne.n	80019ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2200      	movs	r2, #0
 80019c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2220      	movs	r2, #32
 80019c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f043 0220 	orr.w	r2, r3, #32
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e020      	b.n	8001a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	0c1b      	lsrs	r3, r3, #16
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d10c      	bne.n	8001a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	43da      	mvns	r2, r3
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	4013      	ands	r3, r2
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	bf14      	ite	ne
 8001a06:	2301      	movne	r3, #1
 8001a08:	2300      	moveq	r3, #0
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	e00b      	b.n	8001a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	43da      	mvns	r2, r3
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	bf14      	ite	ne
 8001a20:	2301      	movne	r3, #1
 8001a22:	2300      	moveq	r3, #0
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d18d      	bne.n	8001946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a40:	e02d      	b.n	8001a9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	f000 f88d 	bl	8001b62 <I2C_IsAcknowledgeFailed>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e02d      	b.n	8001aae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a58:	d021      	beq.n	8001a9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a5a:	f7ff f853 	bl	8000b04 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	68ba      	ldr	r2, [r7, #8]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d302      	bcc.n	8001a70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d116      	bne.n	8001a9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2220      	movs	r2, #32
 8001a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f043 0220 	orr.w	r2, r3, #32
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e007      	b.n	8001aae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aa8:	2b80      	cmp	r3, #128	; 0x80
 8001aaa:	d1ca      	bne.n	8001a42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b084      	sub	sp, #16
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	60f8      	str	r0, [r7, #12]
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ac2:	e042      	b.n	8001b4a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f003 0310 	and.w	r3, r3, #16
 8001ace:	2b10      	cmp	r3, #16
 8001ad0:	d119      	bne.n	8001b06 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f06f 0210 	mvn.w	r2, #16
 8001ada:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e029      	b.n	8001b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b06:	f7fe fffd 	bl	8000b04 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	68ba      	ldr	r2, [r7, #8]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d302      	bcc.n	8001b1c <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d116      	bne.n	8001b4a <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2220      	movs	r2, #32
 8001b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	f043 0220 	orr.w	r2, r3, #32
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e007      	b.n	8001b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b54:	2b40      	cmp	r3, #64	; 0x40
 8001b56:	d1b5      	bne.n	8001ac4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b78:	d11b      	bne.n	8001bb2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b82:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f043 0204 	orr.w	r2, r3, #4
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e22d      	b.n	800202e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d075      	beq.n	8001cca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bde:	4ba3      	ldr	r3, [pc, #652]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 030c 	and.w	r3, r3, #12
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	d00c      	beq.n	8001c04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bea:	4ba0      	ldr	r3, [pc, #640]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bf2:	2b08      	cmp	r3, #8
 8001bf4:	d112      	bne.n	8001c1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bf6:	4b9d      	ldr	r3, [pc, #628]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c02:	d10b      	bne.n	8001c1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c04:	4b99      	ldr	r3, [pc, #612]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d05b      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x108>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d157      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e208      	b.n	800202e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c24:	d106      	bne.n	8001c34 <HAL_RCC_OscConfig+0x74>
 8001c26:	4b91      	ldr	r3, [pc, #580]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a90      	ldr	r2, [pc, #576]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	e01d      	b.n	8001c70 <HAL_RCC_OscConfig+0xb0>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c3c:	d10c      	bne.n	8001c58 <HAL_RCC_OscConfig+0x98>
 8001c3e:	4b8b      	ldr	r3, [pc, #556]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a8a      	ldr	r2, [pc, #552]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	4b88      	ldr	r3, [pc, #544]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a87      	ldr	r2, [pc, #540]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e00b      	b.n	8001c70 <HAL_RCC_OscConfig+0xb0>
 8001c58:	4b84      	ldr	r3, [pc, #528]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a83      	ldr	r2, [pc, #524]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	4b81      	ldr	r3, [pc, #516]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a80      	ldr	r2, [pc, #512]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d013      	beq.n	8001ca0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c78:	f7fe ff44 	bl	8000b04 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c80:	f7fe ff40 	bl	8000b04 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	; 0x64
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e1cd      	b.n	800202e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c92:	4b76      	ldr	r3, [pc, #472]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0xc0>
 8001c9e:	e014      	b.n	8001cca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca0:	f7fe ff30 	bl	8000b04 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ca8:	f7fe ff2c 	bl	8000b04 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	; 0x64
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e1b9      	b.n	800202e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cba:	4b6c      	ldr	r3, [pc, #432]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0xe8>
 8001cc6:	e000      	b.n	8001cca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d063      	beq.n	8001d9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cd6:	4b65      	ldr	r3, [pc, #404]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00b      	beq.n	8001cfa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ce2:	4b62      	ldr	r3, [pc, #392]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cea:	2b08      	cmp	r3, #8
 8001cec:	d11c      	bne.n	8001d28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cee:	4b5f      	ldr	r3, [pc, #380]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d116      	bne.n	8001d28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfa:	4b5c      	ldr	r3, [pc, #368]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d005      	beq.n	8001d12 <HAL_RCC_OscConfig+0x152>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d001      	beq.n	8001d12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e18d      	b.n	800202e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d12:	4b56      	ldr	r3, [pc, #344]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4952      	ldr	r1, [pc, #328]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d26:	e03a      	b.n	8001d9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d020      	beq.n	8001d72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d30:	4b4f      	ldr	r3, [pc, #316]	; (8001e70 <HAL_RCC_OscConfig+0x2b0>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d36:	f7fe fee5 	bl	8000b04 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d3e:	f7fe fee1 	bl	8000b04 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e16e      	b.n	800202e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d50:	4b46      	ldr	r3, [pc, #280]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0f0      	beq.n	8001d3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5c:	4b43      	ldr	r3, [pc, #268]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4940      	ldr	r1, [pc, #256]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	600b      	str	r3, [r1, #0]
 8001d70:	e015      	b.n	8001d9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d72:	4b3f      	ldr	r3, [pc, #252]	; (8001e70 <HAL_RCC_OscConfig+0x2b0>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d78:	f7fe fec4 	bl	8000b04 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d80:	f7fe fec0 	bl	8000b04 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e14d      	b.n	800202e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d92:	4b36      	ldr	r3, [pc, #216]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d030      	beq.n	8001e0c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d016      	beq.n	8001de0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db2:	4b30      	ldr	r3, [pc, #192]	; (8001e74 <HAL_RCC_OscConfig+0x2b4>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db8:	f7fe fea4 	bl	8000b04 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dc0:	f7fe fea0 	bl	8000b04 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e12d      	b.n	800202e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd2:	4b26      	ldr	r3, [pc, #152]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x200>
 8001dde:	e015      	b.n	8001e0c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de0:	4b24      	ldr	r3, [pc, #144]	; (8001e74 <HAL_RCC_OscConfig+0x2b4>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de6:	f7fe fe8d 	bl	8000b04 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dee:	f7fe fe89 	bl	8000b04 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e116      	b.n	800202e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e00:	4b1a      	ldr	r3, [pc, #104]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1f0      	bne.n	8001dee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 80a0 	beq.w	8001f5a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e1e:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10f      	bne.n	8001e4a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	4a0e      	ldr	r2, [pc, #56]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e38:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3a:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <HAL_RCC_OscConfig+0x2ac>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e46:	2301      	movs	r3, #1
 8001e48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4a:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <HAL_RCC_OscConfig+0x2b8>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d121      	bne.n	8001e9a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e56:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <HAL_RCC_OscConfig+0x2b8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a07      	ldr	r2, [pc, #28]	; (8001e78 <HAL_RCC_OscConfig+0x2b8>)
 8001e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e62:	f7fe fe4f 	bl	8000b04 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e68:	e011      	b.n	8001e8e <HAL_RCC_OscConfig+0x2ce>
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	42470000 	.word	0x42470000
 8001e74:	42470e80 	.word	0x42470e80
 8001e78:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e7c:	f7fe fe42 	bl	8000b04 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e0cf      	b.n	800202e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8e:	4b6a      	ldr	r3, [pc, #424]	; (8002038 <HAL_RCC_OscConfig+0x478>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d106      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x2f0>
 8001ea2:	4b66      	ldr	r3, [pc, #408]	; (800203c <HAL_RCC_OscConfig+0x47c>)
 8001ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea6:	4a65      	ldr	r2, [pc, #404]	; (800203c <HAL_RCC_OscConfig+0x47c>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	6713      	str	r3, [r2, #112]	; 0x70
 8001eae:	e01c      	b.n	8001eea <HAL_RCC_OscConfig+0x32a>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2b05      	cmp	r3, #5
 8001eb6:	d10c      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x312>
 8001eb8:	4b60      	ldr	r3, [pc, #384]	; (800203c <HAL_RCC_OscConfig+0x47c>)
 8001eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ebc:	4a5f      	ldr	r2, [pc, #380]	; (800203c <HAL_RCC_OscConfig+0x47c>)
 8001ebe:	f043 0304 	orr.w	r3, r3, #4
 8001ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ec4:	4b5d      	ldr	r3, [pc, #372]	; (800203c <HAL_RCC_OscConfig+0x47c>)
 8001ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec8:	4a5c      	ldr	r2, [pc, #368]	; (800203c <HAL_RCC_OscConfig+0x47c>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6713      	str	r3, [r2, #112]	; 0x70
 8001ed0:	e00b      	b.n	8001eea <HAL_RCC_OscConfig+0x32a>
 8001ed2:	4b5a      	ldr	r3, [pc, #360]	; (800203c <HAL_RCC_OscConfig+0x47c>)
 8001ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed6:	4a59      	ldr	r2, [pc, #356]	; (800203c <HAL_RCC_OscConfig+0x47c>)
 8001ed8:	f023 0301 	bic.w	r3, r3, #1
 8001edc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ede:	4b57      	ldr	r3, [pc, #348]	; (800203c <HAL_RCC_OscConfig+0x47c>)
 8001ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee2:	4a56      	ldr	r2, [pc, #344]	; (800203c <HAL_RCC_OscConfig+0x47c>)
 8001ee4:	f023 0304 	bic.w	r3, r3, #4
 8001ee8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d015      	beq.n	8001f1e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef2:	f7fe fe07 	bl	8000b04 <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef8:	e00a      	b.n	8001f10 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001efa:	f7fe fe03 	bl	8000b04 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e08e      	b.n	800202e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f10:	4b4a      	ldr	r3, [pc, #296]	; (800203c <HAL_RCC_OscConfig+0x47c>)
 8001f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0ee      	beq.n	8001efa <HAL_RCC_OscConfig+0x33a>
 8001f1c:	e014      	b.n	8001f48 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1e:	f7fe fdf1 	bl	8000b04 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f24:	e00a      	b.n	8001f3c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f26:	f7fe fded 	bl	8000b04 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e078      	b.n	800202e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f3c:	4b3f      	ldr	r3, [pc, #252]	; (800203c <HAL_RCC_OscConfig+0x47c>)
 8001f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1ee      	bne.n	8001f26 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f48:	7dfb      	ldrb	r3, [r7, #23]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d105      	bne.n	8001f5a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f4e:	4b3b      	ldr	r3, [pc, #236]	; (800203c <HAL_RCC_OscConfig+0x47c>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	4a3a      	ldr	r2, [pc, #232]	; (800203c <HAL_RCC_OscConfig+0x47c>)
 8001f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d064      	beq.n	800202c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f62:	4b36      	ldr	r3, [pc, #216]	; (800203c <HAL_RCC_OscConfig+0x47c>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	d05c      	beq.n	8002028 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d141      	bne.n	8001ffa <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f76:	4b32      	ldr	r3, [pc, #200]	; (8002040 <HAL_RCC_OscConfig+0x480>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7c:	f7fe fdc2 	bl	8000b04 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f84:	f7fe fdbe 	bl	8000b04 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e04b      	b.n	800202e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f96:	4b29      	ldr	r3, [pc, #164]	; (800203c <HAL_RCC_OscConfig+0x47c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69da      	ldr	r2, [r3, #28]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	019b      	lsls	r3, r3, #6
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb8:	085b      	lsrs	r3, r3, #1
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	041b      	lsls	r3, r3, #16
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc4:	061b      	lsls	r3, r3, #24
 8001fc6:	491d      	ldr	r1, [pc, #116]	; (800203c <HAL_RCC_OscConfig+0x47c>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fcc:	4b1c      	ldr	r3, [pc, #112]	; (8002040 <HAL_RCC_OscConfig+0x480>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd2:	f7fe fd97 	bl	8000b04 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fda:	f7fe fd93 	bl	8000b04 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e020      	b.n	800202e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fec:	4b13      	ldr	r3, [pc, #76]	; (800203c <HAL_RCC_OscConfig+0x47c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0f0      	beq.n	8001fda <HAL_RCC_OscConfig+0x41a>
 8001ff8:	e018      	b.n	800202c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ffa:	4b11      	ldr	r3, [pc, #68]	; (8002040 <HAL_RCC_OscConfig+0x480>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002000:	f7fe fd80 	bl	8000b04 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002008:	f7fe fd7c 	bl	8000b04 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e009      	b.n	800202e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800201a:	4b08      	ldr	r3, [pc, #32]	; (800203c <HAL_RCC_OscConfig+0x47c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x448>
 8002026:	e001      	b.n	800202c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e000      	b.n	800202e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40007000 	.word	0x40007000
 800203c:	40023800 	.word	0x40023800
 8002040:	42470060 	.word	0x42470060

08002044 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e0ca      	b.n	80021ee <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002058:	4b67      	ldr	r3, [pc, #412]	; (80021f8 <HAL_RCC_ClockConfig+0x1b4>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 030f 	and.w	r3, r3, #15
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d90c      	bls.n	8002080 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002066:	4b64      	ldr	r3, [pc, #400]	; (80021f8 <HAL_RCC_ClockConfig+0x1b4>)
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800206e:	4b62      	ldr	r3, [pc, #392]	; (80021f8 <HAL_RCC_ClockConfig+0x1b4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	429a      	cmp	r2, r3
 800207a:	d001      	beq.n	8002080 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0b6      	b.n	80021ee <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d020      	beq.n	80020ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002098:	4b58      	ldr	r3, [pc, #352]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	4a57      	ldr	r2, [pc, #348]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 800209e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020b0:	4b52      	ldr	r3, [pc, #328]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	4a51      	ldr	r2, [pc, #324]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 80020b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020bc:	4b4f      	ldr	r3, [pc, #316]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	494c      	ldr	r1, [pc, #304]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d044      	beq.n	8002164 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d107      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e2:	4b46      	ldr	r3, [pc, #280]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d119      	bne.n	8002122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e07d      	b.n	80021ee <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d003      	beq.n	8002102 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020fe:	2b03      	cmp	r3, #3
 8002100:	d107      	bne.n	8002112 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002102:	4b3e      	ldr	r3, [pc, #248]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d109      	bne.n	8002122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e06d      	b.n	80021ee <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002112:	4b3a      	ldr	r3, [pc, #232]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e065      	b.n	80021ee <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002122:	4b36      	ldr	r3, [pc, #216]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f023 0203 	bic.w	r2, r3, #3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	4933      	ldr	r1, [pc, #204]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 8002130:	4313      	orrs	r3, r2
 8002132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002134:	f7fe fce6 	bl	8000b04 <HAL_GetTick>
 8002138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213a:	e00a      	b.n	8002152 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800213c:	f7fe fce2 	bl	8000b04 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	f241 3288 	movw	r2, #5000	; 0x1388
 800214a:	4293      	cmp	r3, r2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e04d      	b.n	80021ee <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002152:	4b2a      	ldr	r3, [pc, #168]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 020c 	and.w	r2, r3, #12
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	429a      	cmp	r2, r3
 8002162:	d1eb      	bne.n	800213c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002164:	4b24      	ldr	r3, [pc, #144]	; (80021f8 <HAL_RCC_ClockConfig+0x1b4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 030f 	and.w	r3, r3, #15
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d20c      	bcs.n	800218c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002172:	4b21      	ldr	r3, [pc, #132]	; (80021f8 <HAL_RCC_ClockConfig+0x1b4>)
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800217a:	4b1f      	ldr	r3, [pc, #124]	; (80021f8 <HAL_RCC_ClockConfig+0x1b4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d001      	beq.n	800218c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e030      	b.n	80021ee <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	d008      	beq.n	80021aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002198:	4b18      	ldr	r3, [pc, #96]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	4915      	ldr	r1, [pc, #84]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d009      	beq.n	80021ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021b6:	4b11      	ldr	r3, [pc, #68]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	490d      	ldr	r1, [pc, #52]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021ca:	f000 f81d 	bl	8002208 <HAL_RCC_GetSysClockFreq>
 80021ce:	4601      	mov	r1, r0
 80021d0:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <HAL_RCC_ClockConfig+0x1b8>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	091b      	lsrs	r3, r3, #4
 80021d6:	f003 030f 	and.w	r3, r3, #15
 80021da:	4a09      	ldr	r2, [pc, #36]	; (8002200 <HAL_RCC_ClockConfig+0x1bc>)
 80021dc:	5cd3      	ldrb	r3, [r2, r3]
 80021de:	fa21 f303 	lsr.w	r3, r1, r3
 80021e2:	4a08      	ldr	r2, [pc, #32]	; (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 80021e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80021e6:	2000      	movs	r0, #0
 80021e8:	f7fe fb7a 	bl	80008e0 <HAL_InitTick>

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40023c00 	.word	0x40023c00
 80021fc:	40023800 	.word	0x40023800
 8002200:	08005378 	.word	0x08005378
 8002204:	20000000 	.word	0x20000000

08002208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	607b      	str	r3, [r7, #4]
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	2300      	movs	r3, #0
 8002218:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800221e:	4b63      	ldr	r3, [pc, #396]	; (80023ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b04      	cmp	r3, #4
 8002228:	d007      	beq.n	800223a <HAL_RCC_GetSysClockFreq+0x32>
 800222a:	2b08      	cmp	r3, #8
 800222c:	d008      	beq.n	8002240 <HAL_RCC_GetSysClockFreq+0x38>
 800222e:	2b00      	cmp	r3, #0
 8002230:	f040 80b4 	bne.w	800239c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002234:	4b5e      	ldr	r3, [pc, #376]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002236:	60bb      	str	r3, [r7, #8]
       break;
 8002238:	e0b3      	b.n	80023a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800223a:	4b5e      	ldr	r3, [pc, #376]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800223c:	60bb      	str	r3, [r7, #8]
      break;
 800223e:	e0b0      	b.n	80023a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002240:	4b5a      	ldr	r3, [pc, #360]	; (80023ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002248:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800224a:	4b58      	ldr	r3, [pc, #352]	; (80023ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d04a      	beq.n	80022ec <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002256:	4b55      	ldr	r3, [pc, #340]	; (80023ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	099b      	lsrs	r3, r3, #6
 800225c:	f04f 0400 	mov.w	r4, #0
 8002260:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002264:	f04f 0200 	mov.w	r2, #0
 8002268:	ea03 0501 	and.w	r5, r3, r1
 800226c:	ea04 0602 	and.w	r6, r4, r2
 8002270:	4629      	mov	r1, r5
 8002272:	4632      	mov	r2, r6
 8002274:	f04f 0300 	mov.w	r3, #0
 8002278:	f04f 0400 	mov.w	r4, #0
 800227c:	0154      	lsls	r4, r2, #5
 800227e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002282:	014b      	lsls	r3, r1, #5
 8002284:	4619      	mov	r1, r3
 8002286:	4622      	mov	r2, r4
 8002288:	1b49      	subs	r1, r1, r5
 800228a:	eb62 0206 	sbc.w	r2, r2, r6
 800228e:	f04f 0300 	mov.w	r3, #0
 8002292:	f04f 0400 	mov.w	r4, #0
 8002296:	0194      	lsls	r4, r2, #6
 8002298:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800229c:	018b      	lsls	r3, r1, #6
 800229e:	1a5b      	subs	r3, r3, r1
 80022a0:	eb64 0402 	sbc.w	r4, r4, r2
 80022a4:	f04f 0100 	mov.w	r1, #0
 80022a8:	f04f 0200 	mov.w	r2, #0
 80022ac:	00e2      	lsls	r2, r4, #3
 80022ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80022b2:	00d9      	lsls	r1, r3, #3
 80022b4:	460b      	mov	r3, r1
 80022b6:	4614      	mov	r4, r2
 80022b8:	195b      	adds	r3, r3, r5
 80022ba:	eb44 0406 	adc.w	r4, r4, r6
 80022be:	f04f 0100 	mov.w	r1, #0
 80022c2:	f04f 0200 	mov.w	r2, #0
 80022c6:	0262      	lsls	r2, r4, #9
 80022c8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80022cc:	0259      	lsls	r1, r3, #9
 80022ce:	460b      	mov	r3, r1
 80022d0:	4614      	mov	r4, r2
 80022d2:	4618      	mov	r0, r3
 80022d4:	4621      	mov	r1, r4
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f04f 0400 	mov.w	r4, #0
 80022dc:	461a      	mov	r2, r3
 80022de:	4623      	mov	r3, r4
 80022e0:	f7fd ff7e 	bl	80001e0 <__aeabi_uldivmod>
 80022e4:	4603      	mov	r3, r0
 80022e6:	460c      	mov	r4, r1
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	e049      	b.n	8002380 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ec:	4b2f      	ldr	r3, [pc, #188]	; (80023ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	099b      	lsrs	r3, r3, #6
 80022f2:	f04f 0400 	mov.w	r4, #0
 80022f6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	ea03 0501 	and.w	r5, r3, r1
 8002302:	ea04 0602 	and.w	r6, r4, r2
 8002306:	4629      	mov	r1, r5
 8002308:	4632      	mov	r2, r6
 800230a:	f04f 0300 	mov.w	r3, #0
 800230e:	f04f 0400 	mov.w	r4, #0
 8002312:	0154      	lsls	r4, r2, #5
 8002314:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002318:	014b      	lsls	r3, r1, #5
 800231a:	4619      	mov	r1, r3
 800231c:	4622      	mov	r2, r4
 800231e:	1b49      	subs	r1, r1, r5
 8002320:	eb62 0206 	sbc.w	r2, r2, r6
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	f04f 0400 	mov.w	r4, #0
 800232c:	0194      	lsls	r4, r2, #6
 800232e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002332:	018b      	lsls	r3, r1, #6
 8002334:	1a5b      	subs	r3, r3, r1
 8002336:	eb64 0402 	sbc.w	r4, r4, r2
 800233a:	f04f 0100 	mov.w	r1, #0
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	00e2      	lsls	r2, r4, #3
 8002344:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002348:	00d9      	lsls	r1, r3, #3
 800234a:	460b      	mov	r3, r1
 800234c:	4614      	mov	r4, r2
 800234e:	195b      	adds	r3, r3, r5
 8002350:	eb44 0406 	adc.w	r4, r4, r6
 8002354:	f04f 0100 	mov.w	r1, #0
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	02a2      	lsls	r2, r4, #10
 800235e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002362:	0299      	lsls	r1, r3, #10
 8002364:	460b      	mov	r3, r1
 8002366:	4614      	mov	r4, r2
 8002368:	4618      	mov	r0, r3
 800236a:	4621      	mov	r1, r4
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f04f 0400 	mov.w	r4, #0
 8002372:	461a      	mov	r2, r3
 8002374:	4623      	mov	r3, r4
 8002376:	f7fd ff33 	bl	80001e0 <__aeabi_uldivmod>
 800237a:	4603      	mov	r3, r0
 800237c:	460c      	mov	r4, r1
 800237e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002380:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	0c1b      	lsrs	r3, r3, #16
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	3301      	adds	r3, #1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	60bb      	str	r3, [r7, #8]
      break;
 800239a:	e002      	b.n	80023a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800239c:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800239e:	60bb      	str	r3, [r7, #8]
      break;
 80023a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023a2:	68bb      	ldr	r3, [r7, #8]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ac:	40023800 	.word	0x40023800
 80023b0:	00f42400 	.word	0x00f42400
 80023b4:	007a1200 	.word	0x007a1200

080023b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023bc:	4b03      	ldr	r3, [pc, #12]	; (80023cc <HAL_RCC_GetHCLKFreq+0x14>)
 80023be:	681b      	ldr	r3, [r3, #0]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	20000000 	.word	0x20000000

080023d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80023d4:	f7ff fff0 	bl	80023b8 <HAL_RCC_GetHCLKFreq>
 80023d8:	4601      	mov	r1, r0
 80023da:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	0a9b      	lsrs	r3, r3, #10
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	4a03      	ldr	r2, [pc, #12]	; (80023f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023e6:	5cd3      	ldrb	r3, [r2, r3]
 80023e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40023800 	.word	0x40023800
 80023f4:	08005388 	.word	0x08005388

080023f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023fc:	f7ff ffdc 	bl	80023b8 <HAL_RCC_GetHCLKFreq>
 8002400:	4601      	mov	r1, r0
 8002402:	4b05      	ldr	r3, [pc, #20]	; (8002418 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	0b5b      	lsrs	r3, r3, #13
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	4a03      	ldr	r2, [pc, #12]	; (800241c <HAL_RCC_GetPCLK2Freq+0x24>)
 800240e:	5cd3      	ldrb	r3, [r2, r3]
 8002410:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002414:	4618      	mov	r0, r3
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40023800 	.word	0x40023800
 800241c:	08005388 	.word	0x08005388

08002420 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	220f      	movs	r2, #15
 800242e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002430:	4b12      	ldr	r3, [pc, #72]	; (800247c <HAL_RCC_GetClockConfig+0x5c>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 0203 	and.w	r2, r3, #3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800243c:	4b0f      	ldr	r3, [pc, #60]	; (800247c <HAL_RCC_GetClockConfig+0x5c>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002448:	4b0c      	ldr	r3, [pc, #48]	; (800247c <HAL_RCC_GetClockConfig+0x5c>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002454:	4b09      	ldr	r3, [pc, #36]	; (800247c <HAL_RCC_GetClockConfig+0x5c>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	08db      	lsrs	r3, r3, #3
 800245a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002462:	4b07      	ldr	r3, [pc, #28]	; (8002480 <HAL_RCC_GetClockConfig+0x60>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 020f 	and.w	r2, r3, #15
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	601a      	str	r2, [r3, #0]
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	40023800 	.word	0x40023800
 8002480:	40023c00 	.word	0x40023c00

08002484 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e01d      	b.n	80024d2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d106      	bne.n	80024b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f815 	bl	80024da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2202      	movs	r2, #2
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3304      	adds	r3, #4
 80024c0:	4619      	mov	r1, r3
 80024c2:	4610      	mov	r0, r2
 80024c4:	f000 f968 	bl	8002798 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b085      	sub	sp, #20
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f042 0201 	orr.w	r2, r2, #1
 8002504:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2b06      	cmp	r3, #6
 8002516:	d007      	beq.n	8002528 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0201 	orr.w	r2, r2, #1
 8002526:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b02      	cmp	r3, #2
 800254a:	d122      	bne.n	8002592 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b02      	cmp	r3, #2
 8002558:	d11b      	bne.n	8002592 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f06f 0202 	mvn.w	r2, #2
 8002562:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 f8ee 	bl	800275a <HAL_TIM_IC_CaptureCallback>
 800257e:	e005      	b.n	800258c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f8e0 	bl	8002746 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f8f1 	bl	800276e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b04      	cmp	r3, #4
 800259e:	d122      	bne.n	80025e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f003 0304 	and.w	r3, r3, #4
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d11b      	bne.n	80025e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f06f 0204 	mvn.w	r2, #4
 80025b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2202      	movs	r2, #2
 80025bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 f8c4 	bl	800275a <HAL_TIM_IC_CaptureCallback>
 80025d2:	e005      	b.n	80025e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 f8b6 	bl	8002746 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f8c7 	bl	800276e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d122      	bne.n	800263a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d11b      	bne.n	800263a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f06f 0208 	mvn.w	r2, #8
 800260a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2204      	movs	r2, #4
 8002610:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	f003 0303 	and.w	r3, r3, #3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f89a 	bl	800275a <HAL_TIM_IC_CaptureCallback>
 8002626:	e005      	b.n	8002634 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f88c 	bl	8002746 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f89d 	bl	800276e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	f003 0310 	and.w	r3, r3, #16
 8002644:	2b10      	cmp	r3, #16
 8002646:	d122      	bne.n	800268e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	f003 0310 	and.w	r3, r3, #16
 8002652:	2b10      	cmp	r3, #16
 8002654:	d11b      	bne.n	800268e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f06f 0210 	mvn.w	r2, #16
 800265e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2208      	movs	r2, #8
 8002664:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f870 	bl	800275a <HAL_TIM_IC_CaptureCallback>
 800267a:	e005      	b.n	8002688 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f862 	bl	8002746 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f873 	bl	800276e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b01      	cmp	r3, #1
 800269a:	d10e      	bne.n	80026ba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d107      	bne.n	80026ba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f06f 0201 	mvn.w	r2, #1
 80026b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7fe f885 	bl	80007c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c4:	2b80      	cmp	r3, #128	; 0x80
 80026c6:	d10e      	bne.n	80026e6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d2:	2b80      	cmp	r3, #128	; 0x80
 80026d4:	d107      	bne.n	80026e6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 f8e3 	bl	80028ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f0:	2b40      	cmp	r3, #64	; 0x40
 80026f2:	d10e      	bne.n	8002712 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fe:	2b40      	cmp	r3, #64	; 0x40
 8002700:	d107      	bne.n	8002712 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800270a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 f838 	bl	8002782 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	f003 0320 	and.w	r3, r3, #32
 800271c:	2b20      	cmp	r3, #32
 800271e:	d10e      	bne.n	800273e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f003 0320 	and.w	r3, r3, #32
 800272a:	2b20      	cmp	r3, #32
 800272c:	d107      	bne.n	800273e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f06f 0220 	mvn.w	r2, #32
 8002736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 f8ad 	bl	8002898 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800273e:	bf00      	nop
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
	...

08002798 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a34      	ldr	r2, [pc, #208]	; (800287c <TIM_Base_SetConfig+0xe4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d00f      	beq.n	80027d0 <TIM_Base_SetConfig+0x38>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b6:	d00b      	beq.n	80027d0 <TIM_Base_SetConfig+0x38>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a31      	ldr	r2, [pc, #196]	; (8002880 <TIM_Base_SetConfig+0xe8>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d007      	beq.n	80027d0 <TIM_Base_SetConfig+0x38>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a30      	ldr	r2, [pc, #192]	; (8002884 <TIM_Base_SetConfig+0xec>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d003      	beq.n	80027d0 <TIM_Base_SetConfig+0x38>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a2f      	ldr	r2, [pc, #188]	; (8002888 <TIM_Base_SetConfig+0xf0>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d108      	bne.n	80027e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	4313      	orrs	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a25      	ldr	r2, [pc, #148]	; (800287c <TIM_Base_SetConfig+0xe4>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d01b      	beq.n	8002822 <TIM_Base_SetConfig+0x8a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f0:	d017      	beq.n	8002822 <TIM_Base_SetConfig+0x8a>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a22      	ldr	r2, [pc, #136]	; (8002880 <TIM_Base_SetConfig+0xe8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d013      	beq.n	8002822 <TIM_Base_SetConfig+0x8a>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a21      	ldr	r2, [pc, #132]	; (8002884 <TIM_Base_SetConfig+0xec>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d00f      	beq.n	8002822 <TIM_Base_SetConfig+0x8a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a20      	ldr	r2, [pc, #128]	; (8002888 <TIM_Base_SetConfig+0xf0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d00b      	beq.n	8002822 <TIM_Base_SetConfig+0x8a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a1f      	ldr	r2, [pc, #124]	; (800288c <TIM_Base_SetConfig+0xf4>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d007      	beq.n	8002822 <TIM_Base_SetConfig+0x8a>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a1e      	ldr	r2, [pc, #120]	; (8002890 <TIM_Base_SetConfig+0xf8>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d003      	beq.n	8002822 <TIM_Base_SetConfig+0x8a>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a1d      	ldr	r2, [pc, #116]	; (8002894 <TIM_Base_SetConfig+0xfc>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d108      	bne.n	8002834 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	4313      	orrs	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	4313      	orrs	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a08      	ldr	r2, [pc, #32]	; (800287c <TIM_Base_SetConfig+0xe4>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d103      	bne.n	8002868 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	691a      	ldr	r2, [r3, #16]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	615a      	str	r2, [r3, #20]
}
 800286e:	bf00      	nop
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40010000 	.word	0x40010000
 8002880:	40000400 	.word	0x40000400
 8002884:	40000800 	.word	0x40000800
 8002888:	40000c00 	.word	0x40000c00
 800288c:	40014000 	.word	0x40014000
 8002890:	40014400 	.word	0x40014400
 8002894:	40014800 	.word	0x40014800

08002898 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028c6:	f3ef 8305 	mrs	r3, IPSR
 80028ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80028cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10f      	bne.n	80028f2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028d2:	f3ef 8310 	mrs	r3, PRIMASK
 80028d6:	607b      	str	r3, [r7, #4]
  return(result);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d109      	bne.n	80028f2 <osKernelInitialize+0x32>
 80028de:	4b11      	ldr	r3, [pc, #68]	; (8002924 <osKernelInitialize+0x64>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d109      	bne.n	80028fa <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80028e6:	f3ef 8311 	mrs	r3, BASEPRI
 80028ea:	603b      	str	r3, [r7, #0]
  return(result);
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80028f2:	f06f 0305 	mvn.w	r3, #5
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	e00c      	b.n	8002914 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80028fa:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <osKernelInitialize+0x64>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d105      	bne.n	800290e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002902:	4b08      	ldr	r3, [pc, #32]	; (8002924 <osKernelInitialize+0x64>)
 8002904:	2201      	movs	r2, #1
 8002906:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002908:	2300      	movs	r3, #0
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	e002      	b.n	8002914 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800290e:	f04f 33ff 	mov.w	r3, #4294967295
 8002912:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002914:	68fb      	ldr	r3, [r7, #12]
}
 8002916:	4618      	mov	r0, r3
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	20000028 	.word	0x20000028

08002928 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800292e:	f3ef 8305 	mrs	r3, IPSR
 8002932:	60bb      	str	r3, [r7, #8]
  return(result);
 8002934:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10f      	bne.n	800295a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800293a:	f3ef 8310 	mrs	r3, PRIMASK
 800293e:	607b      	str	r3, [r7, #4]
  return(result);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d109      	bne.n	800295a <osKernelStart+0x32>
 8002946:	4b11      	ldr	r3, [pc, #68]	; (800298c <osKernelStart+0x64>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d109      	bne.n	8002962 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800294e:	f3ef 8311 	mrs	r3, BASEPRI
 8002952:	603b      	str	r3, [r7, #0]
  return(result);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <osKernelStart+0x3a>
    stat = osErrorISR;
 800295a:	f06f 0305 	mvn.w	r3, #5
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	e00e      	b.n	8002980 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002962:	4b0a      	ldr	r3, [pc, #40]	; (800298c <osKernelStart+0x64>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d107      	bne.n	800297a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800296a:	4b08      	ldr	r3, [pc, #32]	; (800298c <osKernelStart+0x64>)
 800296c:	2202      	movs	r2, #2
 800296e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002970:	f001 f86a 	bl	8003a48 <vTaskStartScheduler>
      stat = osOK;
 8002974:	2300      	movs	r3, #0
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	e002      	b.n	8002980 <osKernelStart+0x58>
    } else {
      stat = osError;
 800297a:	f04f 33ff 	mov.w	r3, #4294967295
 800297e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002980:	68fb      	ldr	r3, [r7, #12]
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20000028 	.word	0x20000028

08002990 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002990:	b580      	push	{r7, lr}
 8002992:	b092      	sub	sp, #72	; 0x48
 8002994:	af04      	add	r7, sp, #16
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029a0:	f3ef 8305 	mrs	r3, IPSR
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f040 8094 	bne.w	8002ad6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029ae:	f3ef 8310 	mrs	r3, PRIMASK
 80029b2:	623b      	str	r3, [r7, #32]
  return(result);
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f040 808d 	bne.w	8002ad6 <osThreadNew+0x146>
 80029bc:	4b48      	ldr	r3, [pc, #288]	; (8002ae0 <osThreadNew+0x150>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d106      	bne.n	80029d2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80029c4:	f3ef 8311 	mrs	r3, BASEPRI
 80029c8:	61fb      	str	r3, [r7, #28]
  return(result);
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f040 8082 	bne.w	8002ad6 <osThreadNew+0x146>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d07e      	beq.n	8002ad6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80029d8:	2380      	movs	r3, #128	; 0x80
 80029da:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80029dc:	2318      	movs	r3, #24
 80029de:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80029e0:	2300      	movs	r3, #0
 80029e2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80029e4:	f107 031b 	add.w	r3, r7, #27
 80029e8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80029ea:	f04f 33ff 	mov.w	r3, #4294967295
 80029ee:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d045      	beq.n	8002a82 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d002      	beq.n	8002a04 <osThreadNew+0x74>
        name = attr->name;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d002      	beq.n	8002a12 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <osThreadNew+0x9a>
 8002a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1a:	2b38      	cmp	r3, #56	; 0x38
 8002a1c:	d805      	bhi.n	8002a2a <osThreadNew+0x9a>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <osThreadNew+0x9e>
        return (NULL);
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	e054      	b.n	8002ad8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	089b      	lsrs	r3, r3, #2
 8002a3c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00e      	beq.n	8002a64 <osThreadNew+0xd4>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	2b5b      	cmp	r3, #91	; 0x5b
 8002a4c:	d90a      	bls.n	8002a64 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d006      	beq.n	8002a64 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <osThreadNew+0xd4>
        mem = 1;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a62:	e010      	b.n	8002a86 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10c      	bne.n	8002a86 <osThreadNew+0xf6>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d108      	bne.n	8002a86 <osThreadNew+0xf6>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d104      	bne.n	8002a86 <osThreadNew+0xf6>
          mem = 0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a80:	e001      	b.n	8002a86 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d110      	bne.n	8002aae <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002a94:	9202      	str	r2, [sp, #8]
 8002a96:	9301      	str	r3, [sp, #4]
 8002a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aa0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 fe08 	bl	80036b8 <xTaskCreateStatic>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	e013      	b.n	8002ad6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d110      	bne.n	8002ad6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	f107 0314 	add.w	r3, r7, #20
 8002abc:	9301      	str	r3, [sp, #4]
 8002abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 fe4f 	bl	800376a <xTaskCreate>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d001      	beq.n	8002ad6 <osThreadNew+0x146>
          hTask = NULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002ad6:	697b      	ldr	r3, [r7, #20]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3738      	adds	r7, #56	; 0x38
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	20000028 	.word	0x20000028

08002ae4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002aec:	f3ef 8305 	mrs	r3, IPSR
 8002af0:	613b      	str	r3, [r7, #16]
  return(result);
 8002af2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10f      	bne.n	8002b18 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002af8:	f3ef 8310 	mrs	r3, PRIMASK
 8002afc:	60fb      	str	r3, [r7, #12]
  return(result);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d109      	bne.n	8002b18 <osDelay+0x34>
 8002b04:	4b0d      	ldr	r3, [pc, #52]	; (8002b3c <osDelay+0x58>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d109      	bne.n	8002b20 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002b0c:	f3ef 8311 	mrs	r3, BASEPRI
 8002b10:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <osDelay+0x3c>
    stat = osErrorISR;
 8002b18:	f06f 0305 	mvn.w	r3, #5
 8002b1c:	617b      	str	r3, [r7, #20]
 8002b1e:	e007      	b.n	8002b30 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d002      	beq.n	8002b30 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 ff58 	bl	80039e0 <vTaskDelay>
    }
  }

  return (stat);
 8002b30:	697b      	ldr	r3, [r7, #20]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20000028 	.word	0x20000028

08002b40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4a07      	ldr	r2, [pc, #28]	; (8002b6c <vApplicationGetIdleTaskMemory+0x2c>)
 8002b50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	4a06      	ldr	r2, [pc, #24]	; (8002b70 <vApplicationGetIdleTaskMemory+0x30>)
 8002b56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2280      	movs	r2, #128	; 0x80
 8002b5c:	601a      	str	r2, [r3, #0]
}
 8002b5e:	bf00      	nop
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	2000002c 	.word	0x2000002c
 8002b70:	20000088 	.word	0x20000088

08002b74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4a07      	ldr	r2, [pc, #28]	; (8002ba0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002b84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	4a06      	ldr	r2, [pc, #24]	; (8002ba4 <vApplicationGetTimerTaskMemory+0x30>)
 8002b8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b92:	601a      	str	r2, [r3, #0]
}
 8002b94:	bf00      	nop
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	20000288 	.word	0x20000288
 8002ba4:	200002e4 	.word	0x200002e4

08002ba8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f103 0208 	add.w	r2, r3, #8
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f103 0208 	add.w	r2, r3, #8
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f103 0208 	add.w	r2, r3, #8
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c02:	b480      	push	{r7}
 8002c04:	b085      	sub	sp, #20
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	601a      	str	r2, [r3, #0]
}
 8002c3e:	bf00      	nop
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b085      	sub	sp, #20
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
 8002c52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c60:	d103      	bne.n	8002c6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	e00c      	b.n	8002c84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3308      	adds	r3, #8
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	e002      	b.n	8002c78 <vListInsert+0x2e>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d2f6      	bcs.n	8002c72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	601a      	str	r2, [r3, #0]
}
 8002cb0:	bf00      	nop
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6892      	ldr	r2, [r2, #8]
 8002cd2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6852      	ldr	r2, [r2, #4]
 8002cdc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d103      	bne.n	8002cf0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	1e5a      	subs	r2, r3, #1
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d109      	bne.n	8002d38 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d28:	f383 8811 	msr	BASEPRI, r3
 8002d2c:	f3bf 8f6f 	isb	sy
 8002d30:	f3bf 8f4f 	dsb	sy
 8002d34:	60bb      	str	r3, [r7, #8]
 8002d36:	e7fe      	b.n	8002d36 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002d38:	f001 ffd8 	bl	8004cec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d44:	68f9      	ldr	r1, [r7, #12]
 8002d46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d48:	fb01 f303 	mul.w	r3, r1, r3
 8002d4c:	441a      	add	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	68f9      	ldr	r1, [r7, #12]
 8002d6c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002d6e:	fb01 f303 	mul.w	r3, r1, r3
 8002d72:	441a      	add	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	22ff      	movs	r2, #255	; 0xff
 8002d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	22ff      	movs	r2, #255	; 0xff
 8002d84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d114      	bne.n	8002db8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d01a      	beq.n	8002dcc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	3310      	adds	r3, #16
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f001 f8da 	bl	8003f54 <xTaskRemoveFromEventList>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d012      	beq.n	8002dcc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002da6:	4b0d      	ldr	r3, [pc, #52]	; (8002ddc <xQueueGenericReset+0xcc>)
 8002da8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	f3bf 8f4f 	dsb	sy
 8002db2:	f3bf 8f6f 	isb	sy
 8002db6:	e009      	b.n	8002dcc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	3310      	adds	r3, #16
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff fef3 	bl	8002ba8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	3324      	adds	r3, #36	; 0x24
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff feee 	bl	8002ba8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002dcc:	f001 ffbc 	bl	8004d48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002dd0:	2301      	movs	r3, #1
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	e000ed04 	.word	0xe000ed04

08002de0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08e      	sub	sp, #56	; 0x38
 8002de4:	af02      	add	r7, sp, #8
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
 8002dec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d109      	bne.n	8002e08 <xQueueGenericCreateStatic+0x28>
 8002df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df8:	f383 8811 	msr	BASEPRI, r3
 8002dfc:	f3bf 8f6f 	isb	sy
 8002e00:	f3bf 8f4f 	dsb	sy
 8002e04:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e06:	e7fe      	b.n	8002e06 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d109      	bne.n	8002e22 <xQueueGenericCreateStatic+0x42>
 8002e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e12:	f383 8811 	msr	BASEPRI, r3
 8002e16:	f3bf 8f6f 	isb	sy
 8002e1a:	f3bf 8f4f 	dsb	sy
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e20:	e7fe      	b.n	8002e20 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d002      	beq.n	8002e2e <xQueueGenericCreateStatic+0x4e>
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <xQueueGenericCreateStatic+0x52>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <xQueueGenericCreateStatic+0x54>
 8002e32:	2300      	movs	r3, #0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d109      	bne.n	8002e4c <xQueueGenericCreateStatic+0x6c>
 8002e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3c:	f383 8811 	msr	BASEPRI, r3
 8002e40:	f3bf 8f6f 	isb	sy
 8002e44:	f3bf 8f4f 	dsb	sy
 8002e48:	623b      	str	r3, [r7, #32]
 8002e4a:	e7fe      	b.n	8002e4a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d102      	bne.n	8002e58 <xQueueGenericCreateStatic+0x78>
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <xQueueGenericCreateStatic+0x7c>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e000      	b.n	8002e5e <xQueueGenericCreateStatic+0x7e>
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d109      	bne.n	8002e76 <xQueueGenericCreateStatic+0x96>
 8002e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e66:	f383 8811 	msr	BASEPRI, r3
 8002e6a:	f3bf 8f6f 	isb	sy
 8002e6e:	f3bf 8f4f 	dsb	sy
 8002e72:	61fb      	str	r3, [r7, #28]
 8002e74:	e7fe      	b.n	8002e74 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002e76:	2350      	movs	r3, #80	; 0x50
 8002e78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2b50      	cmp	r3, #80	; 0x50
 8002e7e:	d009      	beq.n	8002e94 <xQueueGenericCreateStatic+0xb4>
 8002e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e84:	f383 8811 	msr	BASEPRI, r3
 8002e88:	f3bf 8f6f 	isb	sy
 8002e8c:	f3bf 8f4f 	dsb	sy
 8002e90:	61bb      	str	r3, [r7, #24]
 8002e92:	e7fe      	b.n	8002e92 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00d      	beq.n	8002eba <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ea6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eac:	9300      	str	r3, [sp, #0]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	68b9      	ldr	r1, [r7, #8]
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 f805 	bl	8002ec4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3730      	adds	r7, #48	; 0x30
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
 8002ed0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d103      	bne.n	8002ee0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	e002      	b.n	8002ee6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	69b8      	ldr	r0, [r7, #24]
 8002ef6:	f7ff ff0b 	bl	8002d10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	78fa      	ldrb	r2, [r7, #3]
 8002efe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002f02:	bf00      	nop
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08e      	sub	sp, #56	; 0x38
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d109      	bne.n	8002f3c <xQueueGenericSend+0x30>
 8002f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2c:	f383 8811 	msr	BASEPRI, r3
 8002f30:	f3bf 8f6f 	isb	sy
 8002f34:	f3bf 8f4f 	dsb	sy
 8002f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f3a:	e7fe      	b.n	8002f3a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d103      	bne.n	8002f4a <xQueueGenericSend+0x3e>
 8002f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <xQueueGenericSend+0x42>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <xQueueGenericSend+0x44>
 8002f4e:	2300      	movs	r3, #0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d109      	bne.n	8002f68 <xQueueGenericSend+0x5c>
 8002f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f58:	f383 8811 	msr	BASEPRI, r3
 8002f5c:	f3bf 8f6f 	isb	sy
 8002f60:	f3bf 8f4f 	dsb	sy
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
 8002f66:	e7fe      	b.n	8002f66 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d103      	bne.n	8002f76 <xQueueGenericSend+0x6a>
 8002f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d101      	bne.n	8002f7a <xQueueGenericSend+0x6e>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <xQueueGenericSend+0x70>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d109      	bne.n	8002f94 <xQueueGenericSend+0x88>
 8002f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	623b      	str	r3, [r7, #32]
 8002f92:	e7fe      	b.n	8002f92 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f94:	f001 f99a 	bl	80042cc <xTaskGetSchedulerState>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d102      	bne.n	8002fa4 <xQueueGenericSend+0x98>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <xQueueGenericSend+0x9c>
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e000      	b.n	8002faa <xQueueGenericSend+0x9e>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d109      	bne.n	8002fc2 <xQueueGenericSend+0xb6>
 8002fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb2:	f383 8811 	msr	BASEPRI, r3
 8002fb6:	f3bf 8f6f 	isb	sy
 8002fba:	f3bf 8f4f 	dsb	sy
 8002fbe:	61fb      	str	r3, [r7, #28]
 8002fc0:	e7fe      	b.n	8002fc0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fc2:	f001 fe93 	bl	8004cec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d302      	bcc.n	8002fd8 <xQueueGenericSend+0xcc>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d129      	bne.n	800302c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	68b9      	ldr	r1, [r7, #8]
 8002fdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fde:	f000 f9ff 	bl	80033e0 <prvCopyDataToQueue>
 8002fe2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d010      	beq.n	800300e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fee:	3324      	adds	r3, #36	; 0x24
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 ffaf 	bl	8003f54 <xTaskRemoveFromEventList>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d013      	beq.n	8003024 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ffc:	4b3f      	ldr	r3, [pc, #252]	; (80030fc <xQueueGenericSend+0x1f0>)
 8002ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	f3bf 8f4f 	dsb	sy
 8003008:	f3bf 8f6f 	isb	sy
 800300c:	e00a      	b.n	8003024 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800300e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003010:	2b00      	cmp	r3, #0
 8003012:	d007      	beq.n	8003024 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003014:	4b39      	ldr	r3, [pc, #228]	; (80030fc <xQueueGenericSend+0x1f0>)
 8003016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	f3bf 8f4f 	dsb	sy
 8003020:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003024:	f001 fe90 	bl	8004d48 <vPortExitCritical>
				return pdPASS;
 8003028:	2301      	movs	r3, #1
 800302a:	e063      	b.n	80030f4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d103      	bne.n	800303a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003032:	f001 fe89 	bl	8004d48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003036:	2300      	movs	r3, #0
 8003038:	e05c      	b.n	80030f4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800303a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800303c:	2b00      	cmp	r3, #0
 800303e:	d106      	bne.n	800304e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003040:	f107 0314 	add.w	r3, r7, #20
 8003044:	4618      	mov	r0, r3
 8003046:	f000 ffe7 	bl	8004018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800304a:	2301      	movs	r3, #1
 800304c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800304e:	f001 fe7b 	bl	8004d48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003052:	f000 fd5d 	bl	8003b10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003056:	f001 fe49 	bl	8004cec <vPortEnterCritical>
 800305a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003060:	b25b      	sxtb	r3, r3
 8003062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003066:	d103      	bne.n	8003070 <xQueueGenericSend+0x164>
 8003068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003072:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003076:	b25b      	sxtb	r3, r3
 8003078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307c:	d103      	bne.n	8003086 <xQueueGenericSend+0x17a>
 800307e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003086:	f001 fe5f 	bl	8004d48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800308a:	1d3a      	adds	r2, r7, #4
 800308c:	f107 0314 	add.w	r3, r7, #20
 8003090:	4611      	mov	r1, r2
 8003092:	4618      	mov	r0, r3
 8003094:	f000 ffd6 	bl	8004044 <xTaskCheckForTimeOut>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d124      	bne.n	80030e8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800309e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030a0:	f000 fa96 	bl	80035d0 <prvIsQueueFull>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d018      	beq.n	80030dc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80030aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ac:	3310      	adds	r3, #16
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	4611      	mov	r1, r2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 ff00 	bl	8003eb8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80030b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030ba:	f000 fa21 	bl	8003500 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80030be:	f000 fd35 	bl	8003b2c <xTaskResumeAll>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f47f af7c 	bne.w	8002fc2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80030ca:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <xQueueGenericSend+0x1f0>)
 80030cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	f3bf 8f4f 	dsb	sy
 80030d6:	f3bf 8f6f 	isb	sy
 80030da:	e772      	b.n	8002fc2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80030dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030de:	f000 fa0f 	bl	8003500 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030e2:	f000 fd23 	bl	8003b2c <xTaskResumeAll>
 80030e6:	e76c      	b.n	8002fc2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80030e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030ea:	f000 fa09 	bl	8003500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030ee:	f000 fd1d 	bl	8003b2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80030f2:	2300      	movs	r3, #0
		}
	}
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3738      	adds	r7, #56	; 0x38
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	e000ed04 	.word	0xe000ed04

08003100 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b08e      	sub	sp, #56	; 0x38
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
 800310c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003114:	2b00      	cmp	r3, #0
 8003116:	d109      	bne.n	800312c <xQueueGenericSendFromISR+0x2c>
 8003118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311c:	f383 8811 	msr	BASEPRI, r3
 8003120:	f3bf 8f6f 	isb	sy
 8003124:	f3bf 8f4f 	dsb	sy
 8003128:	627b      	str	r3, [r7, #36]	; 0x24
 800312a:	e7fe      	b.n	800312a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d103      	bne.n	800313a <xQueueGenericSendFromISR+0x3a>
 8003132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <xQueueGenericSendFromISR+0x3e>
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <xQueueGenericSendFromISR+0x40>
 800313e:	2300      	movs	r3, #0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d109      	bne.n	8003158 <xQueueGenericSendFromISR+0x58>
 8003144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003148:	f383 8811 	msr	BASEPRI, r3
 800314c:	f3bf 8f6f 	isb	sy
 8003150:	f3bf 8f4f 	dsb	sy
 8003154:	623b      	str	r3, [r7, #32]
 8003156:	e7fe      	b.n	8003156 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	2b02      	cmp	r3, #2
 800315c:	d103      	bne.n	8003166 <xQueueGenericSendFromISR+0x66>
 800315e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003162:	2b01      	cmp	r3, #1
 8003164:	d101      	bne.n	800316a <xQueueGenericSendFromISR+0x6a>
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <xQueueGenericSendFromISR+0x6c>
 800316a:	2300      	movs	r3, #0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d109      	bne.n	8003184 <xQueueGenericSendFromISR+0x84>
 8003170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003174:	f383 8811 	msr	BASEPRI, r3
 8003178:	f3bf 8f6f 	isb	sy
 800317c:	f3bf 8f4f 	dsb	sy
 8003180:	61fb      	str	r3, [r7, #28]
 8003182:	e7fe      	b.n	8003182 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003184:	f001 fe8e 	bl	8004ea4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003188:	f3ef 8211 	mrs	r2, BASEPRI
 800318c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003190:	f383 8811 	msr	BASEPRI, r3
 8003194:	f3bf 8f6f 	isb	sy
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	61ba      	str	r2, [r7, #24]
 800319e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80031a0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80031a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d302      	bcc.n	80031b6 <xQueueGenericSendFromISR+0xb6>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d12c      	bne.n	8003210 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80031b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	68b9      	ldr	r1, [r7, #8]
 80031c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031c6:	f000 f90b 	bl	80033e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80031ca:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80031ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d2:	d112      	bne.n	80031fa <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d016      	beq.n	800320a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031de:	3324      	adds	r3, #36	; 0x24
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 feb7 	bl	8003f54 <xTaskRemoveFromEventList>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00e      	beq.n	800320a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00b      	beq.n	800320a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	e007      	b.n	800320a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80031fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80031fe:	3301      	adds	r3, #1
 8003200:	b2db      	uxtb	r3, r3
 8003202:	b25a      	sxtb	r2, r3
 8003204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003206:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800320a:	2301      	movs	r3, #1
 800320c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800320e:	e001      	b.n	8003214 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003210:	2300      	movs	r3, #0
 8003212:	637b      	str	r3, [r7, #52]	; 0x34
 8003214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003216:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800321e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003220:	4618      	mov	r0, r3
 8003222:	3738      	adds	r7, #56	; 0x38
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08c      	sub	sp, #48	; 0x30
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003234:	2300      	movs	r3, #0
 8003236:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800323c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323e:	2b00      	cmp	r3, #0
 8003240:	d109      	bne.n	8003256 <xQueueReceive+0x2e>
	__asm volatile
 8003242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003246:	f383 8811 	msr	BASEPRI, r3
 800324a:	f3bf 8f6f 	isb	sy
 800324e:	f3bf 8f4f 	dsb	sy
 8003252:	623b      	str	r3, [r7, #32]
 8003254:	e7fe      	b.n	8003254 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d103      	bne.n	8003264 <xQueueReceive+0x3c>
 800325c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <xQueueReceive+0x40>
 8003264:	2301      	movs	r3, #1
 8003266:	e000      	b.n	800326a <xQueueReceive+0x42>
 8003268:	2300      	movs	r3, #0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d109      	bne.n	8003282 <xQueueReceive+0x5a>
 800326e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003272:	f383 8811 	msr	BASEPRI, r3
 8003276:	f3bf 8f6f 	isb	sy
 800327a:	f3bf 8f4f 	dsb	sy
 800327e:	61fb      	str	r3, [r7, #28]
 8003280:	e7fe      	b.n	8003280 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003282:	f001 f823 	bl	80042cc <xTaskGetSchedulerState>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d102      	bne.n	8003292 <xQueueReceive+0x6a>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <xQueueReceive+0x6e>
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <xQueueReceive+0x70>
 8003296:	2300      	movs	r3, #0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d109      	bne.n	80032b0 <xQueueReceive+0x88>
 800329c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a0:	f383 8811 	msr	BASEPRI, r3
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	61bb      	str	r3, [r7, #24]
 80032ae:	e7fe      	b.n	80032ae <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80032b0:	f001 fd1c 	bl	8004cec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d01f      	beq.n	8003300 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032c0:	68b9      	ldr	r1, [r7, #8]
 80032c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032c4:	f000 f8f6 	bl	80034b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	1e5a      	subs	r2, r3, #1
 80032cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ce:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00f      	beq.n	80032f8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032da:	3310      	adds	r3, #16
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 fe39 	bl	8003f54 <xTaskRemoveFromEventList>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d007      	beq.n	80032f8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80032e8:	4b3c      	ldr	r3, [pc, #240]	; (80033dc <xQueueReceive+0x1b4>)
 80032ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	f3bf 8f4f 	dsb	sy
 80032f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80032f8:	f001 fd26 	bl	8004d48 <vPortExitCritical>
				return pdPASS;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e069      	b.n	80033d4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d103      	bne.n	800330e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003306:	f001 fd1f 	bl	8004d48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800330a:	2300      	movs	r3, #0
 800330c:	e062      	b.n	80033d4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800330e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003310:	2b00      	cmp	r3, #0
 8003312:	d106      	bne.n	8003322 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003314:	f107 0310 	add.w	r3, r7, #16
 8003318:	4618      	mov	r0, r3
 800331a:	f000 fe7d 	bl	8004018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800331e:	2301      	movs	r3, #1
 8003320:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003322:	f001 fd11 	bl	8004d48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003326:	f000 fbf3 	bl	8003b10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800332a:	f001 fcdf 	bl	8004cec <vPortEnterCritical>
 800332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003330:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003334:	b25b      	sxtb	r3, r3
 8003336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333a:	d103      	bne.n	8003344 <xQueueReceive+0x11c>
 800333c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003346:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800334a:	b25b      	sxtb	r3, r3
 800334c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003350:	d103      	bne.n	800335a <xQueueReceive+0x132>
 8003352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800335a:	f001 fcf5 	bl	8004d48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800335e:	1d3a      	adds	r2, r7, #4
 8003360:	f107 0310 	add.w	r3, r7, #16
 8003364:	4611      	mov	r1, r2
 8003366:	4618      	mov	r0, r3
 8003368:	f000 fe6c 	bl	8004044 <xTaskCheckForTimeOut>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d123      	bne.n	80033ba <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003372:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003374:	f000 f916 	bl	80035a4 <prvIsQueueEmpty>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d017      	beq.n	80033ae <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800337e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003380:	3324      	adds	r3, #36	; 0x24
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	4611      	mov	r1, r2
 8003386:	4618      	mov	r0, r3
 8003388:	f000 fd96 	bl	8003eb8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800338c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800338e:	f000 f8b7 	bl	8003500 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003392:	f000 fbcb 	bl	8003b2c <xTaskResumeAll>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d189      	bne.n	80032b0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800339c:	4b0f      	ldr	r3, [pc, #60]	; (80033dc <xQueueReceive+0x1b4>)
 800339e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	f3bf 8f4f 	dsb	sy
 80033a8:	f3bf 8f6f 	isb	sy
 80033ac:	e780      	b.n	80032b0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80033ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033b0:	f000 f8a6 	bl	8003500 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033b4:	f000 fbba 	bl	8003b2c <xTaskResumeAll>
 80033b8:	e77a      	b.n	80032b0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80033ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033bc:	f000 f8a0 	bl	8003500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033c0:	f000 fbb4 	bl	8003b2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033c6:	f000 f8ed 	bl	80035a4 <prvIsQueueEmpty>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f43f af6f 	beq.w	80032b0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80033d2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3730      	adds	r7, #48	; 0x30
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	e000ed04 	.word	0xe000ed04

080033e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80033ec:	2300      	movs	r3, #0
 80033ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10d      	bne.n	800341a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d14d      	bne.n	80034a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	4618      	mov	r0, r3
 800340c:	f000 ff7c 	bl	8004308 <xTaskPriorityDisinherit>
 8003410:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	605a      	str	r2, [r3, #4]
 8003418:	e043      	b.n	80034a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d119      	bne.n	8003454 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6898      	ldr	r0, [r3, #8]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	461a      	mov	r2, r3
 800342a:	68b9      	ldr	r1, [r7, #8]
 800342c:	f001 ff72 	bl	8005314 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	441a      	add	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	689a      	ldr	r2, [r3, #8]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	429a      	cmp	r2, r3
 8003448:	d32b      	bcc.n	80034a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	609a      	str	r2, [r3, #8]
 8003452:	e026      	b.n	80034a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	68d8      	ldr	r0, [r3, #12]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	461a      	mov	r2, r3
 800345e:	68b9      	ldr	r1, [r7, #8]
 8003460:	f001 ff58 	bl	8005314 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	425b      	negs	r3, r3
 800346e:	441a      	add	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	429a      	cmp	r2, r3
 800347e:	d207      	bcs.n	8003490 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	425b      	negs	r3, r3
 800348a:	441a      	add	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b02      	cmp	r3, #2
 8003494:	d105      	bne.n	80034a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d002      	beq.n	80034a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	3b01      	subs	r3, #1
 80034a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80034aa:	697b      	ldr	r3, [r7, #20]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d018      	beq.n	80034f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	441a      	add	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d303      	bcc.n	80034e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68d9      	ldr	r1, [r3, #12]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f0:	461a      	mov	r2, r3
 80034f2:	6838      	ldr	r0, [r7, #0]
 80034f4:	f001 ff0e 	bl	8005314 <memcpy>
	}
}
 80034f8:	bf00      	nop
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003508:	f001 fbf0 	bl	8004cec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003512:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003514:	e011      	b.n	800353a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	2b00      	cmp	r3, #0
 800351c:	d012      	beq.n	8003544 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	3324      	adds	r3, #36	; 0x24
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fd16 	bl	8003f54 <xTaskRemoveFromEventList>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800352e:	f000 fde9 	bl	8004104 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003532:	7bfb      	ldrb	r3, [r7, #15]
 8003534:	3b01      	subs	r3, #1
 8003536:	b2db      	uxtb	r3, r3
 8003538:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800353a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800353e:	2b00      	cmp	r3, #0
 8003540:	dce9      	bgt.n	8003516 <prvUnlockQueue+0x16>
 8003542:	e000      	b.n	8003546 <prvUnlockQueue+0x46>
					break;
 8003544:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	22ff      	movs	r2, #255	; 0xff
 800354a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800354e:	f001 fbfb 	bl	8004d48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003552:	f001 fbcb 	bl	8004cec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800355c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800355e:	e011      	b.n	8003584 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d012      	beq.n	800358e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3310      	adds	r3, #16
 800356c:	4618      	mov	r0, r3
 800356e:	f000 fcf1 	bl	8003f54 <xTaskRemoveFromEventList>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003578:	f000 fdc4 	bl	8004104 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800357c:	7bbb      	ldrb	r3, [r7, #14]
 800357e:	3b01      	subs	r3, #1
 8003580:	b2db      	uxtb	r3, r3
 8003582:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003584:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003588:	2b00      	cmp	r3, #0
 800358a:	dce9      	bgt.n	8003560 <prvUnlockQueue+0x60>
 800358c:	e000      	b.n	8003590 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800358e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	22ff      	movs	r2, #255	; 0xff
 8003594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003598:	f001 fbd6 	bl	8004d48 <vPortExitCritical>
}
 800359c:	bf00      	nop
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035ac:	f001 fb9e 	bl	8004cec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d102      	bne.n	80035be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80035b8:	2301      	movs	r3, #1
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	e001      	b.n	80035c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80035be:	2300      	movs	r3, #0
 80035c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035c2:	f001 fbc1 	bl	8004d48 <vPortExitCritical>

	return xReturn;
 80035c6:	68fb      	ldr	r3, [r7, #12]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035d8:	f001 fb88 	bl	8004cec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d102      	bne.n	80035ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80035e8:	2301      	movs	r3, #1
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	e001      	b.n	80035f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035f2:	f001 fba9 	bl	8004d48 <vPortExitCritical>

	return xReturn;
 80035f6:	68fb      	ldr	r3, [r7, #12]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800360a:	2300      	movs	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	e014      	b.n	800363a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003610:	4a0e      	ldr	r2, [pc, #56]	; (800364c <vQueueAddToRegistry+0x4c>)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10b      	bne.n	8003634 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800361c:	490b      	ldr	r1, [pc, #44]	; (800364c <vQueueAddToRegistry+0x4c>)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003626:	4a09      	ldr	r2, [pc, #36]	; (800364c <vQueueAddToRegistry+0x4c>)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	4413      	add	r3, r2
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003632:	e005      	b.n	8003640 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	3301      	adds	r3, #1
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2b07      	cmp	r3, #7
 800363e:	d9e7      	bls.n	8003610 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003640:	bf00      	nop
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	20008dcc 	.word	0x20008dcc

08003650 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003660:	f001 fb44 	bl	8004cec <vPortEnterCritical>
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800366a:	b25b      	sxtb	r3, r3
 800366c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003670:	d103      	bne.n	800367a <vQueueWaitForMessageRestricted+0x2a>
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003680:	b25b      	sxtb	r3, r3
 8003682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003686:	d103      	bne.n	8003690 <vQueueWaitForMessageRestricted+0x40>
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003690:	f001 fb5a 	bl	8004d48 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003698:	2b00      	cmp	r3, #0
 800369a:	d106      	bne.n	80036aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	3324      	adds	r3, #36	; 0x24
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	68b9      	ldr	r1, [r7, #8]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 fc2b 	bl	8003f00 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80036aa:	6978      	ldr	r0, [r7, #20]
 80036ac:	f7ff ff28 	bl	8003500 <prvUnlockQueue>
	}
 80036b0:	bf00      	nop
 80036b2:	3718      	adds	r7, #24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08e      	sub	sp, #56	; 0x38
 80036bc:	af04      	add	r7, sp, #16
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80036c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d109      	bne.n	80036e0 <xTaskCreateStatic+0x28>
 80036cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d0:	f383 8811 	msr	BASEPRI, r3
 80036d4:	f3bf 8f6f 	isb	sy
 80036d8:	f3bf 8f4f 	dsb	sy
 80036dc:	623b      	str	r3, [r7, #32]
 80036de:	e7fe      	b.n	80036de <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80036e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d109      	bne.n	80036fa <xTaskCreateStatic+0x42>
 80036e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ea:	f383 8811 	msr	BASEPRI, r3
 80036ee:	f3bf 8f6f 	isb	sy
 80036f2:	f3bf 8f4f 	dsb	sy
 80036f6:	61fb      	str	r3, [r7, #28]
 80036f8:	e7fe      	b.n	80036f8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80036fa:	235c      	movs	r3, #92	; 0x5c
 80036fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	2b5c      	cmp	r3, #92	; 0x5c
 8003702:	d009      	beq.n	8003718 <xTaskCreateStatic+0x60>
 8003704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003708:	f383 8811 	msr	BASEPRI, r3
 800370c:	f3bf 8f6f 	isb	sy
 8003710:	f3bf 8f4f 	dsb	sy
 8003714:	61bb      	str	r3, [r7, #24]
 8003716:	e7fe      	b.n	8003716 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371a:	2b00      	cmp	r3, #0
 800371c:	d01e      	beq.n	800375c <xTaskCreateStatic+0xa4>
 800371e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003720:	2b00      	cmp	r3, #0
 8003722:	d01b      	beq.n	800375c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800372c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	2202      	movs	r2, #2
 8003732:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003736:	2300      	movs	r3, #0
 8003738:	9303      	str	r3, [sp, #12]
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	9302      	str	r3, [sp, #8]
 800373e:	f107 0314 	add.w	r3, r7, #20
 8003742:	9301      	str	r3, [sp, #4]
 8003744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	68b9      	ldr	r1, [r7, #8]
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 f850 	bl	80037f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003754:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003756:	f000 f8d3 	bl	8003900 <prvAddNewTaskToReadyList>
 800375a:	e001      	b.n	8003760 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800375c:	2300      	movs	r3, #0
 800375e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003760:	697b      	ldr	r3, [r7, #20]
	}
 8003762:	4618      	mov	r0, r3
 8003764:	3728      	adds	r7, #40	; 0x28
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800376a:	b580      	push	{r7, lr}
 800376c:	b08c      	sub	sp, #48	; 0x30
 800376e:	af04      	add	r7, sp, #16
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	603b      	str	r3, [r7, #0]
 8003776:	4613      	mov	r3, r2
 8003778:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800377a:	88fb      	ldrh	r3, [r7, #6]
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4618      	mov	r0, r3
 8003780:	f001 fbce 	bl	8004f20 <pvPortMalloc>
 8003784:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00e      	beq.n	80037aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800378c:	205c      	movs	r0, #92	; 0x5c
 800378e:	f001 fbc7 	bl	8004f20 <pvPortMalloc>
 8003792:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	631a      	str	r2, [r3, #48]	; 0x30
 80037a0:	e005      	b.n	80037ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80037a2:	6978      	ldr	r0, [r7, #20]
 80037a4:	f001 fc7e 	bl	80050a4 <vPortFree>
 80037a8:	e001      	b.n	80037ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80037aa:	2300      	movs	r3, #0
 80037ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d017      	beq.n	80037e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80037bc:	88fa      	ldrh	r2, [r7, #6]
 80037be:	2300      	movs	r3, #0
 80037c0:	9303      	str	r3, [sp, #12]
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	9302      	str	r3, [sp, #8]
 80037c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c8:	9301      	str	r3, [sp, #4]
 80037ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	68b9      	ldr	r1, [r7, #8]
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 f80e 	bl	80037f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037d8:	69f8      	ldr	r0, [r7, #28]
 80037da:	f000 f891 	bl	8003900 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80037de:	2301      	movs	r3, #1
 80037e0:	61bb      	str	r3, [r7, #24]
 80037e2:	e002      	b.n	80037ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80037e4:	f04f 33ff 	mov.w	r3, #4294967295
 80037e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80037ea:	69bb      	ldr	r3, [r7, #24]
	}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3720      	adds	r7, #32
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b088      	sub	sp, #32
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
 8003800:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003804:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	461a      	mov	r2, r3
 800380c:	21a5      	movs	r1, #165	; 0xa5
 800380e:	f001 fd8c 	bl	800532a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800381c:	3b01      	subs	r3, #1
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	f023 0307 	bic.w	r3, r3, #7
 800382a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	2b00      	cmp	r3, #0
 8003834:	d009      	beq.n	800384a <prvInitialiseNewTask+0x56>
 8003836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383a:	f383 8811 	msr	BASEPRI, r3
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	f3bf 8f4f 	dsb	sy
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	e7fe      	b.n	8003848 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800384a:	2300      	movs	r3, #0
 800384c:	61fb      	str	r3, [r7, #28]
 800384e:	e012      	b.n	8003876 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	4413      	add	r3, r2
 8003856:	7819      	ldrb	r1, [r3, #0]
 8003858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	4413      	add	r3, r2
 800385e:	3334      	adds	r3, #52	; 0x34
 8003860:	460a      	mov	r2, r1
 8003862:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	4413      	add	r3, r2
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d006      	beq.n	800387e <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	3301      	adds	r3, #1
 8003874:	61fb      	str	r3, [r7, #28]
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	2b0f      	cmp	r3, #15
 800387a:	d9e9      	bls.n	8003850 <prvInitialiseNewTask+0x5c>
 800387c:	e000      	b.n	8003880 <prvInitialiseNewTask+0x8c>
		{
			break;
 800387e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388a:	2b37      	cmp	r3, #55	; 0x37
 800388c:	d901      	bls.n	8003892 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800388e:	2337      	movs	r3, #55	; 0x37
 8003890:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003894:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003896:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800389c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a0:	2200      	movs	r2, #0
 80038a2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80038a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a6:	3304      	adds	r3, #4
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff f99d 	bl	8002be8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80038ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b0:	3318      	adds	r3, #24
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7ff f998 	bl	8002be8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80038b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038bc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80038c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80038c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038cc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80038ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d0:	2200      	movs	r2, #0
 80038d2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80038d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	68f9      	ldr	r1, [r7, #12]
 80038e0:	69b8      	ldr	r0, [r7, #24]
 80038e2:	f001 f8db 	bl	8004a9c <pxPortInitialiseStack>
 80038e6:	4602      	mov	r2, r0
 80038e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ea:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80038ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d002      	beq.n	80038f8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80038f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038f8:	bf00      	nop
 80038fa:	3720      	adds	r7, #32
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003908:	f001 f9f0 	bl	8004cec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800390c:	4b2d      	ldr	r3, [pc, #180]	; (80039c4 <prvAddNewTaskToReadyList+0xc4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	3301      	adds	r3, #1
 8003912:	4a2c      	ldr	r2, [pc, #176]	; (80039c4 <prvAddNewTaskToReadyList+0xc4>)
 8003914:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003916:	4b2c      	ldr	r3, [pc, #176]	; (80039c8 <prvAddNewTaskToReadyList+0xc8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d109      	bne.n	8003932 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800391e:	4a2a      	ldr	r2, [pc, #168]	; (80039c8 <prvAddNewTaskToReadyList+0xc8>)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003924:	4b27      	ldr	r3, [pc, #156]	; (80039c4 <prvAddNewTaskToReadyList+0xc4>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d110      	bne.n	800394e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800392c:	f000 fc0e 	bl	800414c <prvInitialiseTaskLists>
 8003930:	e00d      	b.n	800394e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003932:	4b26      	ldr	r3, [pc, #152]	; (80039cc <prvAddNewTaskToReadyList+0xcc>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d109      	bne.n	800394e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800393a:	4b23      	ldr	r3, [pc, #140]	; (80039c8 <prvAddNewTaskToReadyList+0xc8>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003944:	429a      	cmp	r2, r3
 8003946:	d802      	bhi.n	800394e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003948:	4a1f      	ldr	r2, [pc, #124]	; (80039c8 <prvAddNewTaskToReadyList+0xc8>)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800394e:	4b20      	ldr	r3, [pc, #128]	; (80039d0 <prvAddNewTaskToReadyList+0xd0>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	3301      	adds	r3, #1
 8003954:	4a1e      	ldr	r2, [pc, #120]	; (80039d0 <prvAddNewTaskToReadyList+0xd0>)
 8003956:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003958:	4b1d      	ldr	r3, [pc, #116]	; (80039d0 <prvAddNewTaskToReadyList+0xd0>)
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003964:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <prvAddNewTaskToReadyList+0xd4>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d903      	bls.n	8003974 <prvAddNewTaskToReadyList+0x74>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003970:	4a18      	ldr	r2, [pc, #96]	; (80039d4 <prvAddNewTaskToReadyList+0xd4>)
 8003972:	6013      	str	r3, [r2, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003978:	4613      	mov	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4a15      	ldr	r2, [pc, #84]	; (80039d8 <prvAddNewTaskToReadyList+0xd8>)
 8003982:	441a      	add	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3304      	adds	r3, #4
 8003988:	4619      	mov	r1, r3
 800398a:	4610      	mov	r0, r2
 800398c:	f7ff f939 	bl	8002c02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003990:	f001 f9da 	bl	8004d48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003994:	4b0d      	ldr	r3, [pc, #52]	; (80039cc <prvAddNewTaskToReadyList+0xcc>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00e      	beq.n	80039ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800399c:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <prvAddNewTaskToReadyList+0xc8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d207      	bcs.n	80039ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80039aa:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <prvAddNewTaskToReadyList+0xdc>)
 80039ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	f3bf 8f4f 	dsb	sy
 80039b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039ba:	bf00      	nop
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	20000bb8 	.word	0x20000bb8
 80039c8:	200006e4 	.word	0x200006e4
 80039cc:	20000bc4 	.word	0x20000bc4
 80039d0:	20000bd4 	.word	0x20000bd4
 80039d4:	20000bc0 	.word	0x20000bc0
 80039d8:	200006e8 	.word	0x200006e8
 80039dc:	e000ed04 	.word	0xe000ed04

080039e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80039e8:	2300      	movs	r3, #0
 80039ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d016      	beq.n	8003a20 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80039f2:	4b13      	ldr	r3, [pc, #76]	; (8003a40 <vTaskDelay+0x60>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d009      	beq.n	8003a0e <vTaskDelay+0x2e>
 80039fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fe:	f383 8811 	msr	BASEPRI, r3
 8003a02:	f3bf 8f6f 	isb	sy
 8003a06:	f3bf 8f4f 	dsb	sy
 8003a0a:	60bb      	str	r3, [r7, #8]
 8003a0c:	e7fe      	b.n	8003a0c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003a0e:	f000 f87f 	bl	8003b10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a12:	2100      	movs	r1, #0
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 fce3 	bl	80043e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003a1a:	f000 f887 	bl	8003b2c <xTaskResumeAll>
 8003a1e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d107      	bne.n	8003a36 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003a26:	4b07      	ldr	r3, [pc, #28]	; (8003a44 <vTaskDelay+0x64>)
 8003a28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	f3bf 8f4f 	dsb	sy
 8003a32:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a36:	bf00      	nop
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	20000be0 	.word	0x20000be0
 8003a44:	e000ed04 	.word	0xe000ed04

08003a48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08a      	sub	sp, #40	; 0x28
 8003a4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a56:	463a      	mov	r2, r7
 8003a58:	1d39      	adds	r1, r7, #4
 8003a5a:	f107 0308 	add.w	r3, r7, #8
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7ff f86e 	bl	8002b40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a64:	6839      	ldr	r1, [r7, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	9202      	str	r2, [sp, #8]
 8003a6c:	9301      	str	r3, [sp, #4]
 8003a6e:	2300      	movs	r3, #0
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	2300      	movs	r3, #0
 8003a74:	460a      	mov	r2, r1
 8003a76:	4920      	ldr	r1, [pc, #128]	; (8003af8 <vTaskStartScheduler+0xb0>)
 8003a78:	4820      	ldr	r0, [pc, #128]	; (8003afc <vTaskStartScheduler+0xb4>)
 8003a7a:	f7ff fe1d 	bl	80036b8 <xTaskCreateStatic>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	4b1f      	ldr	r3, [pc, #124]	; (8003b00 <vTaskStartScheduler+0xb8>)
 8003a82:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a84:	4b1e      	ldr	r3, [pc, #120]	; (8003b00 <vTaskStartScheduler+0xb8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	e001      	b.n	8003a96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d102      	bne.n	8003aa2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003a9c:	f000 fcf4 	bl	8004488 <xTimerCreateTimerTask>
 8003aa0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d115      	bne.n	8003ad4 <vTaskStartScheduler+0x8c>
 8003aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aac:	f383 8811 	msr	BASEPRI, r3
 8003ab0:	f3bf 8f6f 	isb	sy
 8003ab4:	f3bf 8f4f 	dsb	sy
 8003ab8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003aba:	4b12      	ldr	r3, [pc, #72]	; (8003b04 <vTaskStartScheduler+0xbc>)
 8003abc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ac2:	4b11      	ldr	r3, [pc, #68]	; (8003b08 <vTaskStartScheduler+0xc0>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003ac8:	4b10      	ldr	r3, [pc, #64]	; (8003b0c <vTaskStartScheduler+0xc4>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ace:	f001 f86f 	bl	8004bb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ad2:	e00d      	b.n	8003af0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ada:	d109      	bne.n	8003af0 <vTaskStartScheduler+0xa8>
 8003adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae0:	f383 8811 	msr	BASEPRI, r3
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	e7fe      	b.n	8003aee <vTaskStartScheduler+0xa6>
}
 8003af0:	bf00      	nop
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	08005360 	.word	0x08005360
 8003afc:	0800411d 	.word	0x0800411d
 8003b00:	20000bdc 	.word	0x20000bdc
 8003b04:	20000bd8 	.word	0x20000bd8
 8003b08:	20000bc4 	.word	0x20000bc4
 8003b0c:	20000bbc 	.word	0x20000bbc

08003b10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003b14:	4b04      	ldr	r3, [pc, #16]	; (8003b28 <vTaskSuspendAll+0x18>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	4a03      	ldr	r2, [pc, #12]	; (8003b28 <vTaskSuspendAll+0x18>)
 8003b1c:	6013      	str	r3, [r2, #0]
}
 8003b1e:	bf00      	nop
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	20000be0 	.word	0x20000be0

08003b2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b36:	2300      	movs	r3, #0
 8003b38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b3a:	4b41      	ldr	r3, [pc, #260]	; (8003c40 <xTaskResumeAll+0x114>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d109      	bne.n	8003b56 <xTaskResumeAll+0x2a>
 8003b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b46:	f383 8811 	msr	BASEPRI, r3
 8003b4a:	f3bf 8f6f 	isb	sy
 8003b4e:	f3bf 8f4f 	dsb	sy
 8003b52:	603b      	str	r3, [r7, #0]
 8003b54:	e7fe      	b.n	8003b54 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b56:	f001 f8c9 	bl	8004cec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b5a:	4b39      	ldr	r3, [pc, #228]	; (8003c40 <xTaskResumeAll+0x114>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	4a37      	ldr	r2, [pc, #220]	; (8003c40 <xTaskResumeAll+0x114>)
 8003b62:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b64:	4b36      	ldr	r3, [pc, #216]	; (8003c40 <xTaskResumeAll+0x114>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d162      	bne.n	8003c32 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b6c:	4b35      	ldr	r3, [pc, #212]	; (8003c44 <xTaskResumeAll+0x118>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d05e      	beq.n	8003c32 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b74:	e02f      	b.n	8003bd6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003b76:	4b34      	ldr	r3, [pc, #208]	; (8003c48 <xTaskResumeAll+0x11c>)
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	3318      	adds	r3, #24
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff f89a 	bl	8002cbc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff f895 	bl	8002cbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b96:	4b2d      	ldr	r3, [pc, #180]	; (8003c4c <xTaskResumeAll+0x120>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d903      	bls.n	8003ba6 <xTaskResumeAll+0x7a>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba2:	4a2a      	ldr	r2, [pc, #168]	; (8003c4c <xTaskResumeAll+0x120>)
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003baa:	4613      	mov	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4a27      	ldr	r2, [pc, #156]	; (8003c50 <xTaskResumeAll+0x124>)
 8003bb4:	441a      	add	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	f7ff f820 	bl	8002c02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc6:	4b23      	ldr	r3, [pc, #140]	; (8003c54 <xTaskResumeAll+0x128>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d302      	bcc.n	8003bd6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003bd0:	4b21      	ldr	r3, [pc, #132]	; (8003c58 <xTaskResumeAll+0x12c>)
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bd6:	4b1c      	ldr	r3, [pc, #112]	; (8003c48 <xTaskResumeAll+0x11c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1cb      	bne.n	8003b76 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003be4:	f000 fb4c 	bl	8004280 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003be8:	4b1c      	ldr	r3, [pc, #112]	; (8003c5c <xTaskResumeAll+0x130>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d010      	beq.n	8003c16 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003bf4:	f000 f846 	bl	8003c84 <xTaskIncrementTick>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003bfe:	4b16      	ldr	r3, [pc, #88]	; (8003c58 <xTaskResumeAll+0x12c>)
 8003c00:	2201      	movs	r2, #1
 8003c02:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1f1      	bne.n	8003bf4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003c10:	4b12      	ldr	r3, [pc, #72]	; (8003c5c <xTaskResumeAll+0x130>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003c16:	4b10      	ldr	r3, [pc, #64]	; (8003c58 <xTaskResumeAll+0x12c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d009      	beq.n	8003c32 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003c22:	4b0f      	ldr	r3, [pc, #60]	; (8003c60 <xTaskResumeAll+0x134>)
 8003c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	f3bf 8f4f 	dsb	sy
 8003c2e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c32:	f001 f889 	bl	8004d48 <vPortExitCritical>

	return xAlreadyYielded;
 8003c36:	68bb      	ldr	r3, [r7, #8]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	20000be0 	.word	0x20000be0
 8003c44:	20000bb8 	.word	0x20000bb8
 8003c48:	20000b78 	.word	0x20000b78
 8003c4c:	20000bc0 	.word	0x20000bc0
 8003c50:	200006e8 	.word	0x200006e8
 8003c54:	200006e4 	.word	0x200006e4
 8003c58:	20000bcc 	.word	0x20000bcc
 8003c5c:	20000bc8 	.word	0x20000bc8
 8003c60:	e000ed04 	.word	0xe000ed04

08003c64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003c6a:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <xTaskGetTickCount+0x1c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003c70:	687b      	ldr	r3, [r7, #4]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	20000bbc 	.word	0x20000bbc

08003c84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c8e:	4b51      	ldr	r3, [pc, #324]	; (8003dd4 <xTaskIncrementTick+0x150>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f040 808d 	bne.w	8003db2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c98:	4b4f      	ldr	r3, [pc, #316]	; (8003dd8 <xTaskIncrementTick+0x154>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003ca0:	4a4d      	ldr	r2, [pc, #308]	; (8003dd8 <xTaskIncrementTick+0x154>)
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d11f      	bne.n	8003cec <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003cac:	4b4b      	ldr	r3, [pc, #300]	; (8003ddc <xTaskIncrementTick+0x158>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d009      	beq.n	8003cca <xTaskIncrementTick+0x46>
 8003cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cba:	f383 8811 	msr	BASEPRI, r3
 8003cbe:	f3bf 8f6f 	isb	sy
 8003cc2:	f3bf 8f4f 	dsb	sy
 8003cc6:	603b      	str	r3, [r7, #0]
 8003cc8:	e7fe      	b.n	8003cc8 <xTaskIncrementTick+0x44>
 8003cca:	4b44      	ldr	r3, [pc, #272]	; (8003ddc <xTaskIncrementTick+0x158>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	4b43      	ldr	r3, [pc, #268]	; (8003de0 <xTaskIncrementTick+0x15c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a41      	ldr	r2, [pc, #260]	; (8003ddc <xTaskIncrementTick+0x158>)
 8003cd6:	6013      	str	r3, [r2, #0]
 8003cd8:	4a41      	ldr	r2, [pc, #260]	; (8003de0 <xTaskIncrementTick+0x15c>)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6013      	str	r3, [r2, #0]
 8003cde:	4b41      	ldr	r3, [pc, #260]	; (8003de4 <xTaskIncrementTick+0x160>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	4a3f      	ldr	r2, [pc, #252]	; (8003de4 <xTaskIncrementTick+0x160>)
 8003ce6:	6013      	str	r3, [r2, #0]
 8003ce8:	f000 faca 	bl	8004280 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003cec:	4b3e      	ldr	r3, [pc, #248]	; (8003de8 <xTaskIncrementTick+0x164>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d34e      	bcc.n	8003d94 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cf6:	4b39      	ldr	r3, [pc, #228]	; (8003ddc <xTaskIncrementTick+0x158>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <xTaskIncrementTick+0x80>
 8003d00:	2301      	movs	r3, #1
 8003d02:	e000      	b.n	8003d06 <xTaskIncrementTick+0x82>
 8003d04:	2300      	movs	r3, #0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d004      	beq.n	8003d14 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d0a:	4b37      	ldr	r3, [pc, #220]	; (8003de8 <xTaskIncrementTick+0x164>)
 8003d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d10:	601a      	str	r2, [r3, #0]
					break;
 8003d12:	e03f      	b.n	8003d94 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d14:	4b31      	ldr	r3, [pc, #196]	; (8003ddc <xTaskIncrementTick+0x158>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d203      	bcs.n	8003d34 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d2c:	4a2e      	ldr	r2, [pc, #184]	; (8003de8 <xTaskIncrementTick+0x164>)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6013      	str	r3, [r2, #0]
						break;
 8003d32:	e02f      	b.n	8003d94 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	3304      	adds	r3, #4
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7fe ffbf 	bl	8002cbc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d004      	beq.n	8003d50 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	3318      	adds	r3, #24
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fe ffb6 	bl	8002cbc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d54:	4b25      	ldr	r3, [pc, #148]	; (8003dec <xTaskIncrementTick+0x168>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d903      	bls.n	8003d64 <xTaskIncrementTick+0xe0>
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	4a22      	ldr	r2, [pc, #136]	; (8003dec <xTaskIncrementTick+0x168>)
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d68:	4613      	mov	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4a1f      	ldr	r2, [pc, #124]	; (8003df0 <xTaskIncrementTick+0x16c>)
 8003d72:	441a      	add	r2, r3
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	3304      	adds	r3, #4
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	f7fe ff41 	bl	8002c02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d84:	4b1b      	ldr	r3, [pc, #108]	; (8003df4 <xTaskIncrementTick+0x170>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d3b3      	bcc.n	8003cf6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d92:	e7b0      	b.n	8003cf6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d94:	4b17      	ldr	r3, [pc, #92]	; (8003df4 <xTaskIncrementTick+0x170>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d9a:	4915      	ldr	r1, [pc, #84]	; (8003df0 <xTaskIncrementTick+0x16c>)
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4413      	add	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	440b      	add	r3, r1
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d907      	bls.n	8003dbc <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003dac:	2301      	movs	r3, #1
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	e004      	b.n	8003dbc <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003db2:	4b11      	ldr	r3, [pc, #68]	; (8003df8 <xTaskIncrementTick+0x174>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	3301      	adds	r3, #1
 8003db8:	4a0f      	ldr	r2, [pc, #60]	; (8003df8 <xTaskIncrementTick+0x174>)
 8003dba:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003dbc:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <xTaskIncrementTick+0x178>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003dc8:	697b      	ldr	r3, [r7, #20]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20000be0 	.word	0x20000be0
 8003dd8:	20000bbc 	.word	0x20000bbc
 8003ddc:	20000b70 	.word	0x20000b70
 8003de0:	20000b74 	.word	0x20000b74
 8003de4:	20000bd0 	.word	0x20000bd0
 8003de8:	20000bd8 	.word	0x20000bd8
 8003dec:	20000bc0 	.word	0x20000bc0
 8003df0:	200006e8 	.word	0x200006e8
 8003df4:	200006e4 	.word	0x200006e4
 8003df8:	20000bc8 	.word	0x20000bc8
 8003dfc:	20000bcc 	.word	0x20000bcc

08003e00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e06:	4b27      	ldr	r3, [pc, #156]	; (8003ea4 <vTaskSwitchContext+0xa4>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003e0e:	4b26      	ldr	r3, [pc, #152]	; (8003ea8 <vTaskSwitchContext+0xa8>)
 8003e10:	2201      	movs	r2, #1
 8003e12:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e14:	e040      	b.n	8003e98 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003e16:	4b24      	ldr	r3, [pc, #144]	; (8003ea8 <vTaskSwitchContext+0xa8>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003e1c:	4b23      	ldr	r3, [pc, #140]	; (8003eac <vTaskSwitchContext+0xac>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	e00f      	b.n	8003e44 <vTaskSwitchContext+0x44>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d109      	bne.n	8003e3e <vTaskSwitchContext+0x3e>
 8003e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2e:	f383 8811 	msr	BASEPRI, r3
 8003e32:	f3bf 8f6f 	isb	sy
 8003e36:	f3bf 8f4f 	dsb	sy
 8003e3a:	607b      	str	r3, [r7, #4]
 8003e3c:	e7fe      	b.n	8003e3c <vTaskSwitchContext+0x3c>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	3b01      	subs	r3, #1
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	491a      	ldr	r1, [pc, #104]	; (8003eb0 <vTaskSwitchContext+0xb0>)
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	440b      	add	r3, r1
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d0e5      	beq.n	8003e24 <vTaskSwitchContext+0x24>
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4a13      	ldr	r2, [pc, #76]	; (8003eb0 <vTaskSwitchContext+0xb0>)
 8003e64:	4413      	add	r3, r2
 8003e66:	60bb      	str	r3, [r7, #8]
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	685a      	ldr	r2, [r3, #4]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	605a      	str	r2, [r3, #4]
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	3308      	adds	r3, #8
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d104      	bne.n	8003e88 <vTaskSwitchContext+0x88>
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	605a      	str	r2, [r3, #4]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	4a09      	ldr	r2, [pc, #36]	; (8003eb4 <vTaskSwitchContext+0xb4>)
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	4a06      	ldr	r2, [pc, #24]	; (8003eac <vTaskSwitchContext+0xac>)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6013      	str	r3, [r2, #0]
}
 8003e98:	bf00      	nop
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	20000be0 	.word	0x20000be0
 8003ea8:	20000bcc 	.word	0x20000bcc
 8003eac:	20000bc0 	.word	0x20000bc0
 8003eb0:	200006e8 	.word	0x200006e8
 8003eb4:	200006e4 	.word	0x200006e4

08003eb8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d109      	bne.n	8003edc <vTaskPlaceOnEventList+0x24>
 8003ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ecc:	f383 8811 	msr	BASEPRI, r3
 8003ed0:	f3bf 8f6f 	isb	sy
 8003ed4:	f3bf 8f4f 	dsb	sy
 8003ed8:	60fb      	str	r3, [r7, #12]
 8003eda:	e7fe      	b.n	8003eda <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003edc:	4b07      	ldr	r3, [pc, #28]	; (8003efc <vTaskPlaceOnEventList+0x44>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3318      	adds	r3, #24
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7fe feb0 	bl	8002c4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003eea:	2101      	movs	r1, #1
 8003eec:	6838      	ldr	r0, [r7, #0]
 8003eee:	f000 fa77 	bl	80043e0 <prvAddCurrentTaskToDelayedList>
}
 8003ef2:	bf00      	nop
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	200006e4 	.word	0x200006e4

08003f00 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d109      	bne.n	8003f26 <vTaskPlaceOnEventListRestricted+0x26>
 8003f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f16:	f383 8811 	msr	BASEPRI, r3
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	e7fe      	b.n	8003f24 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f26:	4b0a      	ldr	r3, [pc, #40]	; (8003f50 <vTaskPlaceOnEventListRestricted+0x50>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3318      	adds	r3, #24
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f7fe fe67 	bl	8002c02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8003f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f3e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	68b8      	ldr	r0, [r7, #8]
 8003f44:	f000 fa4c 	bl	80043e0 <prvAddCurrentTaskToDelayedList>
	}
 8003f48:	bf00      	nop
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	200006e4 	.word	0x200006e4

08003f54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d109      	bne.n	8003f7e <xTaskRemoveFromEventList+0x2a>
 8003f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6e:	f383 8811 	msr	BASEPRI, r3
 8003f72:	f3bf 8f6f 	isb	sy
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	e7fe      	b.n	8003f7c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	3318      	adds	r3, #24
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fe fe9a 	bl	8002cbc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f88:	4b1d      	ldr	r3, [pc, #116]	; (8004000 <xTaskRemoveFromEventList+0xac>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d11d      	bne.n	8003fcc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	3304      	adds	r3, #4
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7fe fe91 	bl	8002cbc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f9e:	4b19      	ldr	r3, [pc, #100]	; (8004004 <xTaskRemoveFromEventList+0xb0>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d903      	bls.n	8003fae <xTaskRemoveFromEventList+0x5a>
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003faa:	4a16      	ldr	r2, [pc, #88]	; (8004004 <xTaskRemoveFromEventList+0xb0>)
 8003fac:	6013      	str	r3, [r2, #0]
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4a13      	ldr	r2, [pc, #76]	; (8004008 <xTaskRemoveFromEventList+0xb4>)
 8003fbc:	441a      	add	r2, r3
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	4610      	mov	r0, r2
 8003fc6:	f7fe fe1c 	bl	8002c02 <vListInsertEnd>
 8003fca:	e005      	b.n	8003fd8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	3318      	adds	r3, #24
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	480e      	ldr	r0, [pc, #56]	; (800400c <xTaskRemoveFromEventList+0xb8>)
 8003fd4:	f7fe fe15 	bl	8002c02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fdc:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <xTaskRemoveFromEventList+0xbc>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d905      	bls.n	8003ff2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003fea:	4b0a      	ldr	r3, [pc, #40]	; (8004014 <xTaskRemoveFromEventList+0xc0>)
 8003fec:	2201      	movs	r2, #1
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	e001      	b.n	8003ff6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003ff6:	697b      	ldr	r3, [r7, #20]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	20000be0 	.word	0x20000be0
 8004004:	20000bc0 	.word	0x20000bc0
 8004008:	200006e8 	.word	0x200006e8
 800400c:	20000b78 	.word	0x20000b78
 8004010:	200006e4 	.word	0x200006e4
 8004014:	20000bcc 	.word	0x20000bcc

08004018 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004020:	4b06      	ldr	r3, [pc, #24]	; (800403c <vTaskInternalSetTimeOutState+0x24>)
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004028:	4b05      	ldr	r3, [pc, #20]	; (8004040 <vTaskInternalSetTimeOutState+0x28>)
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	605a      	str	r2, [r3, #4]
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr
 800403c:	20000bd0 	.word	0x20000bd0
 8004040:	20000bbc 	.word	0x20000bbc

08004044 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b088      	sub	sp, #32
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d109      	bne.n	8004068 <xTaskCheckForTimeOut+0x24>
 8004054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004058:	f383 8811 	msr	BASEPRI, r3
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	613b      	str	r3, [r7, #16]
 8004066:	e7fe      	b.n	8004066 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d109      	bne.n	8004082 <xTaskCheckForTimeOut+0x3e>
 800406e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004072:	f383 8811 	msr	BASEPRI, r3
 8004076:	f3bf 8f6f 	isb	sy
 800407a:	f3bf 8f4f 	dsb	sy
 800407e:	60fb      	str	r3, [r7, #12]
 8004080:	e7fe      	b.n	8004080 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004082:	f000 fe33 	bl	8004cec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004086:	4b1d      	ldr	r3, [pc, #116]	; (80040fc <xTaskCheckForTimeOut+0xb8>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409e:	d102      	bne.n	80040a6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80040a0:	2300      	movs	r3, #0
 80040a2:	61fb      	str	r3, [r7, #28]
 80040a4:	e023      	b.n	80040ee <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	4b15      	ldr	r3, [pc, #84]	; (8004100 <xTaskCheckForTimeOut+0xbc>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d007      	beq.n	80040c2 <xTaskCheckForTimeOut+0x7e>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d302      	bcc.n	80040c2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80040bc:	2301      	movs	r3, #1
 80040be:	61fb      	str	r3, [r7, #28]
 80040c0:	e015      	b.n	80040ee <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d20b      	bcs.n	80040e4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	1ad2      	subs	r2, r2, r3
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7ff ff9d 	bl	8004018 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80040de:	2300      	movs	r3, #0
 80040e0:	61fb      	str	r3, [r7, #28]
 80040e2:	e004      	b.n	80040ee <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80040ea:	2301      	movs	r3, #1
 80040ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80040ee:	f000 fe2b 	bl	8004d48 <vPortExitCritical>

	return xReturn;
 80040f2:	69fb      	ldr	r3, [r7, #28]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3720      	adds	r7, #32
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	20000bbc 	.word	0x20000bbc
 8004100:	20000bd0 	.word	0x20000bd0

08004104 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004108:	4b03      	ldr	r3, [pc, #12]	; (8004118 <vTaskMissedYield+0x14>)
 800410a:	2201      	movs	r2, #1
 800410c:	601a      	str	r2, [r3, #0]
}
 800410e:	bf00      	nop
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	20000bcc 	.word	0x20000bcc

0800411c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004124:	f000 f852 	bl	80041cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004128:	4b06      	ldr	r3, [pc, #24]	; (8004144 <prvIdleTask+0x28>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d9f9      	bls.n	8004124 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004130:	4b05      	ldr	r3, [pc, #20]	; (8004148 <prvIdleTask+0x2c>)
 8004132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004140:	e7f0      	b.n	8004124 <prvIdleTask+0x8>
 8004142:	bf00      	nop
 8004144:	200006e8 	.word	0x200006e8
 8004148:	e000ed04 	.word	0xe000ed04

0800414c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004152:	2300      	movs	r3, #0
 8004154:	607b      	str	r3, [r7, #4]
 8004156:	e00c      	b.n	8004172 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	4613      	mov	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4a12      	ldr	r2, [pc, #72]	; (80041ac <prvInitialiseTaskLists+0x60>)
 8004164:	4413      	add	r3, r2
 8004166:	4618      	mov	r0, r3
 8004168:	f7fe fd1e 	bl	8002ba8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3301      	adds	r3, #1
 8004170:	607b      	str	r3, [r7, #4]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b37      	cmp	r3, #55	; 0x37
 8004176:	d9ef      	bls.n	8004158 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004178:	480d      	ldr	r0, [pc, #52]	; (80041b0 <prvInitialiseTaskLists+0x64>)
 800417a:	f7fe fd15 	bl	8002ba8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800417e:	480d      	ldr	r0, [pc, #52]	; (80041b4 <prvInitialiseTaskLists+0x68>)
 8004180:	f7fe fd12 	bl	8002ba8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004184:	480c      	ldr	r0, [pc, #48]	; (80041b8 <prvInitialiseTaskLists+0x6c>)
 8004186:	f7fe fd0f 	bl	8002ba8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800418a:	480c      	ldr	r0, [pc, #48]	; (80041bc <prvInitialiseTaskLists+0x70>)
 800418c:	f7fe fd0c 	bl	8002ba8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004190:	480b      	ldr	r0, [pc, #44]	; (80041c0 <prvInitialiseTaskLists+0x74>)
 8004192:	f7fe fd09 	bl	8002ba8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004196:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <prvInitialiseTaskLists+0x78>)
 8004198:	4a05      	ldr	r2, [pc, #20]	; (80041b0 <prvInitialiseTaskLists+0x64>)
 800419a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800419c:	4b0a      	ldr	r3, [pc, #40]	; (80041c8 <prvInitialiseTaskLists+0x7c>)
 800419e:	4a05      	ldr	r2, [pc, #20]	; (80041b4 <prvInitialiseTaskLists+0x68>)
 80041a0:	601a      	str	r2, [r3, #0]
}
 80041a2:	bf00      	nop
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	200006e8 	.word	0x200006e8
 80041b0:	20000b48 	.word	0x20000b48
 80041b4:	20000b5c 	.word	0x20000b5c
 80041b8:	20000b78 	.word	0x20000b78
 80041bc:	20000b8c 	.word	0x20000b8c
 80041c0:	20000ba4 	.word	0x20000ba4
 80041c4:	20000b70 	.word	0x20000b70
 80041c8:	20000b74 	.word	0x20000b74

080041cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041d2:	e019      	b.n	8004208 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80041d4:	f000 fd8a 	bl	8004cec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80041d8:	4b0f      	ldr	r3, [pc, #60]	; (8004218 <prvCheckTasksWaitingTermination+0x4c>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3304      	adds	r3, #4
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fe fd69 	bl	8002cbc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80041ea:	4b0c      	ldr	r3, [pc, #48]	; (800421c <prvCheckTasksWaitingTermination+0x50>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	4a0a      	ldr	r2, [pc, #40]	; (800421c <prvCheckTasksWaitingTermination+0x50>)
 80041f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80041f4:	4b0a      	ldr	r3, [pc, #40]	; (8004220 <prvCheckTasksWaitingTermination+0x54>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	3b01      	subs	r3, #1
 80041fa:	4a09      	ldr	r2, [pc, #36]	; (8004220 <prvCheckTasksWaitingTermination+0x54>)
 80041fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80041fe:	f000 fda3 	bl	8004d48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f80e 	bl	8004224 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004208:	4b05      	ldr	r3, [pc, #20]	; (8004220 <prvCheckTasksWaitingTermination+0x54>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1e1      	bne.n	80041d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004210:	bf00      	nop
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	20000b8c 	.word	0x20000b8c
 800421c:	20000bb8 	.word	0x20000bb8
 8004220:	20000ba0 	.word	0x20000ba0

08004224 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004232:	2b00      	cmp	r3, #0
 8004234:	d108      	bne.n	8004248 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423a:	4618      	mov	r0, r3
 800423c:	f000 ff32 	bl	80050a4 <vPortFree>
				vPortFree( pxTCB );
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 ff2f 	bl	80050a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004246:	e017      	b.n	8004278 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800424e:	2b01      	cmp	r3, #1
 8004250:	d103      	bne.n	800425a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 ff26 	bl	80050a4 <vPortFree>
	}
 8004258:	e00e      	b.n	8004278 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004260:	2b02      	cmp	r3, #2
 8004262:	d009      	beq.n	8004278 <prvDeleteTCB+0x54>
 8004264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004268:	f383 8811 	msr	BASEPRI, r3
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	e7fe      	b.n	8004276 <prvDeleteTCB+0x52>
	}
 8004278:	bf00      	nop
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004286:	4b0f      	ldr	r3, [pc, #60]	; (80042c4 <prvResetNextTaskUnblockTime+0x44>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <prvResetNextTaskUnblockTime+0x14>
 8004290:	2301      	movs	r3, #1
 8004292:	e000      	b.n	8004296 <prvResetNextTaskUnblockTime+0x16>
 8004294:	2300      	movs	r3, #0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d004      	beq.n	80042a4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800429a:	4b0b      	ldr	r3, [pc, #44]	; (80042c8 <prvResetNextTaskUnblockTime+0x48>)
 800429c:	f04f 32ff 	mov.w	r2, #4294967295
 80042a0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80042a2:	e008      	b.n	80042b6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80042a4:	4b07      	ldr	r3, [pc, #28]	; (80042c4 <prvResetNextTaskUnblockTime+0x44>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	4a05      	ldr	r2, [pc, #20]	; (80042c8 <prvResetNextTaskUnblockTime+0x48>)
 80042b4:	6013      	str	r3, [r2, #0]
}
 80042b6:	bf00      	nop
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	20000b70 	.word	0x20000b70
 80042c8:	20000bd8 	.word	0x20000bd8

080042cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80042d2:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <xTaskGetSchedulerState+0x34>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d102      	bne.n	80042e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80042da:	2301      	movs	r3, #1
 80042dc:	607b      	str	r3, [r7, #4]
 80042de:	e008      	b.n	80042f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042e0:	4b08      	ldr	r3, [pc, #32]	; (8004304 <xTaskGetSchedulerState+0x38>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d102      	bne.n	80042ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80042e8:	2302      	movs	r3, #2
 80042ea:	607b      	str	r3, [r7, #4]
 80042ec:	e001      	b.n	80042f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80042ee:	2300      	movs	r3, #0
 80042f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80042f2:	687b      	ldr	r3, [r7, #4]
	}
 80042f4:	4618      	mov	r0, r3
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	20000bc4 	.word	0x20000bc4
 8004304:	20000be0 	.word	0x20000be0

08004308 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004314:	2300      	movs	r3, #0
 8004316:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d054      	beq.n	80043c8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800431e:	4b2d      	ldr	r3, [pc, #180]	; (80043d4 <xTaskPriorityDisinherit+0xcc>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	429a      	cmp	r2, r3
 8004326:	d009      	beq.n	800433c <xTaskPriorityDisinherit+0x34>
 8004328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432c:	f383 8811 	msr	BASEPRI, r3
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	e7fe      	b.n	800433a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004340:	2b00      	cmp	r3, #0
 8004342:	d109      	bne.n	8004358 <xTaskPriorityDisinherit+0x50>
 8004344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004348:	f383 8811 	msr	BASEPRI, r3
 800434c:	f3bf 8f6f 	isb	sy
 8004350:	f3bf 8f4f 	dsb	sy
 8004354:	60bb      	str	r3, [r7, #8]
 8004356:	e7fe      	b.n	8004356 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800435c:	1e5a      	subs	r2, r3, #1
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800436a:	429a      	cmp	r2, r3
 800436c:	d02c      	beq.n	80043c8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004372:	2b00      	cmp	r3, #0
 8004374:	d128      	bne.n	80043c8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	3304      	adds	r3, #4
 800437a:	4618      	mov	r0, r3
 800437c:	f7fe fc9e 	bl	8002cbc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004398:	4b0f      	ldr	r3, [pc, #60]	; (80043d8 <xTaskPriorityDisinherit+0xd0>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	429a      	cmp	r2, r3
 800439e:	d903      	bls.n	80043a8 <xTaskPriorityDisinherit+0xa0>
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a4:	4a0c      	ldr	r2, [pc, #48]	; (80043d8 <xTaskPriorityDisinherit+0xd0>)
 80043a6:	6013      	str	r3, [r2, #0]
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ac:	4613      	mov	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4a09      	ldr	r2, [pc, #36]	; (80043dc <xTaskPriorityDisinherit+0xd4>)
 80043b6:	441a      	add	r2, r3
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	3304      	adds	r3, #4
 80043bc:	4619      	mov	r1, r3
 80043be:	4610      	mov	r0, r2
 80043c0:	f7fe fc1f 	bl	8002c02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80043c4:	2301      	movs	r3, #1
 80043c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80043c8:	697b      	ldr	r3, [r7, #20]
	}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3718      	adds	r7, #24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	200006e4 	.word	0x200006e4
 80043d8:	20000bc0 	.word	0x20000bc0
 80043dc:	200006e8 	.word	0x200006e8

080043e0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80043ea:	4b21      	ldr	r3, [pc, #132]	; (8004470 <prvAddCurrentTaskToDelayedList+0x90>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043f0:	4b20      	ldr	r3, [pc, #128]	; (8004474 <prvAddCurrentTaskToDelayedList+0x94>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	3304      	adds	r3, #4
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fe fc60 	bl	8002cbc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004402:	d10a      	bne.n	800441a <prvAddCurrentTaskToDelayedList+0x3a>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d007      	beq.n	800441a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800440a:	4b1a      	ldr	r3, [pc, #104]	; (8004474 <prvAddCurrentTaskToDelayedList+0x94>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3304      	adds	r3, #4
 8004410:	4619      	mov	r1, r3
 8004412:	4819      	ldr	r0, [pc, #100]	; (8004478 <prvAddCurrentTaskToDelayedList+0x98>)
 8004414:	f7fe fbf5 	bl	8002c02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004418:	e026      	b.n	8004468 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4413      	add	r3, r2
 8004420:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004422:	4b14      	ldr	r3, [pc, #80]	; (8004474 <prvAddCurrentTaskToDelayedList+0x94>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	429a      	cmp	r2, r3
 8004430:	d209      	bcs.n	8004446 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004432:	4b12      	ldr	r3, [pc, #72]	; (800447c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	4b0f      	ldr	r3, [pc, #60]	; (8004474 <prvAddCurrentTaskToDelayedList+0x94>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	3304      	adds	r3, #4
 800443c:	4619      	mov	r1, r3
 800443e:	4610      	mov	r0, r2
 8004440:	f7fe fc03 	bl	8002c4a <vListInsert>
}
 8004444:	e010      	b.n	8004468 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004446:	4b0e      	ldr	r3, [pc, #56]	; (8004480 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	4b0a      	ldr	r3, [pc, #40]	; (8004474 <prvAddCurrentTaskToDelayedList+0x94>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3304      	adds	r3, #4
 8004450:	4619      	mov	r1, r3
 8004452:	4610      	mov	r0, r2
 8004454:	f7fe fbf9 	bl	8002c4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004458:	4b0a      	ldr	r3, [pc, #40]	; (8004484 <prvAddCurrentTaskToDelayedList+0xa4>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	429a      	cmp	r2, r3
 8004460:	d202      	bcs.n	8004468 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004462:	4a08      	ldr	r2, [pc, #32]	; (8004484 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	6013      	str	r3, [r2, #0]
}
 8004468:	bf00      	nop
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	20000bbc 	.word	0x20000bbc
 8004474:	200006e4 	.word	0x200006e4
 8004478:	20000ba4 	.word	0x20000ba4
 800447c:	20000b74 	.word	0x20000b74
 8004480:	20000b70 	.word	0x20000b70
 8004484:	20000bd8 	.word	0x20000bd8

08004488 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b08a      	sub	sp, #40	; 0x28
 800448c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004492:	f000 fac3 	bl	8004a1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004496:	4b1c      	ldr	r3, [pc, #112]	; (8004508 <xTimerCreateTimerTask+0x80>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d021      	beq.n	80044e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800449e:	2300      	movs	r3, #0
 80044a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80044a2:	2300      	movs	r3, #0
 80044a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80044a6:	1d3a      	adds	r2, r7, #4
 80044a8:	f107 0108 	add.w	r1, r7, #8
 80044ac:	f107 030c 	add.w	r3, r7, #12
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7fe fb5f 	bl	8002b74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80044b6:	6879      	ldr	r1, [r7, #4]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	9202      	str	r2, [sp, #8]
 80044be:	9301      	str	r3, [sp, #4]
 80044c0:	2302      	movs	r3, #2
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	2300      	movs	r3, #0
 80044c6:	460a      	mov	r2, r1
 80044c8:	4910      	ldr	r1, [pc, #64]	; (800450c <xTimerCreateTimerTask+0x84>)
 80044ca:	4811      	ldr	r0, [pc, #68]	; (8004510 <xTimerCreateTimerTask+0x88>)
 80044cc:	f7ff f8f4 	bl	80036b8 <xTaskCreateStatic>
 80044d0:	4602      	mov	r2, r0
 80044d2:	4b10      	ldr	r3, [pc, #64]	; (8004514 <xTimerCreateTimerTask+0x8c>)
 80044d4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80044d6:	4b0f      	ldr	r3, [pc, #60]	; (8004514 <xTimerCreateTimerTask+0x8c>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80044de:	2301      	movs	r3, #1
 80044e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d109      	bne.n	80044fc <xTimerCreateTimerTask+0x74>
 80044e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ec:	f383 8811 	msr	BASEPRI, r3
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	613b      	str	r3, [r7, #16]
 80044fa:	e7fe      	b.n	80044fa <xTimerCreateTimerTask+0x72>
	return xReturn;
 80044fc:	697b      	ldr	r3, [r7, #20]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	20000c14 	.word	0x20000c14
 800450c:	08005368 	.word	0x08005368
 8004510:	08004631 	.word	0x08004631
 8004514:	20000c18 	.word	0x20000c18

08004518 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b08a      	sub	sp, #40	; 0x28
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004526:	2300      	movs	r3, #0
 8004528:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d109      	bne.n	8004544 <xTimerGenericCommand+0x2c>
 8004530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	623b      	str	r3, [r7, #32]
 8004542:	e7fe      	b.n	8004542 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004544:	4b19      	ldr	r3, [pc, #100]	; (80045ac <xTimerGenericCommand+0x94>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d02a      	beq.n	80045a2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	2b05      	cmp	r3, #5
 800455c:	dc18      	bgt.n	8004590 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800455e:	f7ff feb5 	bl	80042cc <xTaskGetSchedulerState>
 8004562:	4603      	mov	r3, r0
 8004564:	2b02      	cmp	r3, #2
 8004566:	d109      	bne.n	800457c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004568:	4b10      	ldr	r3, [pc, #64]	; (80045ac <xTimerGenericCommand+0x94>)
 800456a:	6818      	ldr	r0, [r3, #0]
 800456c:	f107 0110 	add.w	r1, r7, #16
 8004570:	2300      	movs	r3, #0
 8004572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004574:	f7fe fcca 	bl	8002f0c <xQueueGenericSend>
 8004578:	6278      	str	r0, [r7, #36]	; 0x24
 800457a:	e012      	b.n	80045a2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800457c:	4b0b      	ldr	r3, [pc, #44]	; (80045ac <xTimerGenericCommand+0x94>)
 800457e:	6818      	ldr	r0, [r3, #0]
 8004580:	f107 0110 	add.w	r1, r7, #16
 8004584:	2300      	movs	r3, #0
 8004586:	2200      	movs	r2, #0
 8004588:	f7fe fcc0 	bl	8002f0c <xQueueGenericSend>
 800458c:	6278      	str	r0, [r7, #36]	; 0x24
 800458e:	e008      	b.n	80045a2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004590:	4b06      	ldr	r3, [pc, #24]	; (80045ac <xTimerGenericCommand+0x94>)
 8004592:	6818      	ldr	r0, [r3, #0]
 8004594:	f107 0110 	add.w	r1, r7, #16
 8004598:	2300      	movs	r3, #0
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	f7fe fdb0 	bl	8003100 <xQueueGenericSendFromISR>
 80045a0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3728      	adds	r7, #40	; 0x28
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	20000c14 	.word	0x20000c14

080045b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af02      	add	r7, sp, #8
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045ba:	4b1c      	ldr	r3, [pc, #112]	; (800462c <prvProcessExpiredTimer+0x7c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	3304      	adds	r3, #4
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7fe fb77 	bl	8002cbc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d121      	bne.n	800461a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	699a      	ldr	r2, [r3, #24]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	18d1      	adds	r1, r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	6978      	ldr	r0, [r7, #20]
 80045e4:	f000 f8c8 	bl	8004778 <prvInsertTimerInActiveList>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d015      	beq.n	800461a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80045ee:	2300      	movs	r3, #0
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	2300      	movs	r3, #0
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	2100      	movs	r1, #0
 80045f8:	6978      	ldr	r0, [r7, #20]
 80045fa:	f7ff ff8d 	bl	8004518 <xTimerGenericCommand>
 80045fe:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d109      	bne.n	800461a <prvProcessExpiredTimer+0x6a>
 8004606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460a:	f383 8811 	msr	BASEPRI, r3
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	e7fe      	b.n	8004618 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	6978      	ldr	r0, [r7, #20]
 8004620:	4798      	blx	r3
}
 8004622:	bf00      	nop
 8004624:	3718      	adds	r7, #24
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	20000c0c 	.word	0x20000c0c

08004630 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004638:	f107 0308 	add.w	r3, r7, #8
 800463c:	4618      	mov	r0, r3
 800463e:	f000 f857 	bl	80046f0 <prvGetNextExpireTime>
 8004642:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	4619      	mov	r1, r3
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 f803 	bl	8004654 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800464e:	f000 f8d5 	bl	80047fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004652:	e7f1      	b.n	8004638 <prvTimerTask+0x8>

08004654 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800465e:	f7ff fa57 	bl	8003b10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004662:	f107 0308 	add.w	r3, r7, #8
 8004666:	4618      	mov	r0, r3
 8004668:	f000 f866 	bl	8004738 <prvSampleTimeNow>
 800466c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d130      	bne.n	80046d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10a      	bne.n	8004690 <prvProcessTimerOrBlockTask+0x3c>
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	429a      	cmp	r2, r3
 8004680:	d806      	bhi.n	8004690 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004682:	f7ff fa53 	bl	8003b2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004686:	68f9      	ldr	r1, [r7, #12]
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7ff ff91 	bl	80045b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800468e:	e024      	b.n	80046da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d008      	beq.n	80046a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004696:	4b13      	ldr	r3, [pc, #76]	; (80046e4 <prvProcessTimerOrBlockTask+0x90>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	bf0c      	ite	eq
 80046a0:	2301      	moveq	r3, #1
 80046a2:	2300      	movne	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80046a8:	4b0f      	ldr	r3, [pc, #60]	; (80046e8 <prvProcessTimerOrBlockTask+0x94>)
 80046aa:	6818      	ldr	r0, [r3, #0]
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	4619      	mov	r1, r3
 80046b6:	f7fe ffcb 	bl	8003650 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80046ba:	f7ff fa37 	bl	8003b2c <xTaskResumeAll>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10a      	bne.n	80046da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80046c4:	4b09      	ldr	r3, [pc, #36]	; (80046ec <prvProcessTimerOrBlockTask+0x98>)
 80046c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	f3bf 8f6f 	isb	sy
}
 80046d4:	e001      	b.n	80046da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80046d6:	f7ff fa29 	bl	8003b2c <xTaskResumeAll>
}
 80046da:	bf00      	nop
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	20000c10 	.word	0x20000c10
 80046e8:	20000c14 	.word	0x20000c14
 80046ec:	e000ed04 	.word	0xe000ed04

080046f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80046f8:	4b0e      	ldr	r3, [pc, #56]	; (8004734 <prvGetNextExpireTime+0x44>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	bf0c      	ite	eq
 8004702:	2301      	moveq	r3, #1
 8004704:	2300      	movne	r3, #0
 8004706:	b2db      	uxtb	r3, r3
 8004708:	461a      	mov	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d105      	bne.n	8004722 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004716:	4b07      	ldr	r3, [pc, #28]	; (8004734 <prvGetNextExpireTime+0x44>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	e001      	b.n	8004726 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004722:	2300      	movs	r3, #0
 8004724:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004726:	68fb      	ldr	r3, [r7, #12]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3714      	adds	r7, #20
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	20000c0c 	.word	0x20000c0c

08004738 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004740:	f7ff fa90 	bl	8003c64 <xTaskGetTickCount>
 8004744:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004746:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <prvSampleTimeNow+0x3c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	429a      	cmp	r2, r3
 800474e:	d205      	bcs.n	800475c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004750:	f000 f904 	bl	800495c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	601a      	str	r2, [r3, #0]
 800475a:	e002      	b.n	8004762 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004762:	4a04      	ldr	r2, [pc, #16]	; (8004774 <prvSampleTimeNow+0x3c>)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004768:	68fb      	ldr	r3, [r7, #12]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20000c1c 	.word	0x20000c1c

08004778 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
 8004784:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004786:	2300      	movs	r3, #0
 8004788:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	429a      	cmp	r2, r3
 800479c:	d812      	bhi.n	80047c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	1ad2      	subs	r2, r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d302      	bcc.n	80047b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80047ac:	2301      	movs	r3, #1
 80047ae:	617b      	str	r3, [r7, #20]
 80047b0:	e01b      	b.n	80047ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80047b2:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <prvInsertTimerInActiveList+0x7c>)
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	3304      	adds	r3, #4
 80047ba:	4619      	mov	r1, r3
 80047bc:	4610      	mov	r0, r2
 80047be:	f7fe fa44 	bl	8002c4a <vListInsert>
 80047c2:	e012      	b.n	80047ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d206      	bcs.n	80047da <prvInsertTimerInActiveList+0x62>
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d302      	bcc.n	80047da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80047d4:	2301      	movs	r3, #1
 80047d6:	617b      	str	r3, [r7, #20]
 80047d8:	e007      	b.n	80047ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80047da:	4b07      	ldr	r3, [pc, #28]	; (80047f8 <prvInsertTimerInActiveList+0x80>)
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	3304      	adds	r3, #4
 80047e2:	4619      	mov	r1, r3
 80047e4:	4610      	mov	r0, r2
 80047e6:	f7fe fa30 	bl	8002c4a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80047ea:	697b      	ldr	r3, [r7, #20]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3718      	adds	r7, #24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	20000c10 	.word	0x20000c10
 80047f8:	20000c0c 	.word	0x20000c0c

080047fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b08e      	sub	sp, #56	; 0x38
 8004800:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004802:	e099      	b.n	8004938 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	da17      	bge.n	800483a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800480a:	1d3b      	adds	r3, r7, #4
 800480c:	3304      	adds	r3, #4
 800480e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004812:	2b00      	cmp	r3, #0
 8004814:	d109      	bne.n	800482a <prvProcessReceivedCommands+0x2e>
 8004816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481a:	f383 8811 	msr	BASEPRI, r3
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	f3bf 8f4f 	dsb	sy
 8004826:	61fb      	str	r3, [r7, #28]
 8004828:	e7fe      	b.n	8004828 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800482a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004830:	6850      	ldr	r0, [r2, #4]
 8004832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004834:	6892      	ldr	r2, [r2, #8]
 8004836:	4611      	mov	r1, r2
 8004838:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	db7a      	blt.n	8004936 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d004      	beq.n	8004856 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800484c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484e:	3304      	adds	r3, #4
 8004850:	4618      	mov	r0, r3
 8004852:	f7fe fa33 	bl	8002cbc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004856:	463b      	mov	r3, r7
 8004858:	4618      	mov	r0, r3
 800485a:	f7ff ff6d 	bl	8004738 <prvSampleTimeNow>
 800485e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b09      	cmp	r3, #9
 8004864:	d868      	bhi.n	8004938 <prvProcessReceivedCommands+0x13c>
 8004866:	a201      	add	r2, pc, #4	; (adr r2, 800486c <prvProcessReceivedCommands+0x70>)
 8004868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486c:	08004895 	.word	0x08004895
 8004870:	08004895 	.word	0x08004895
 8004874:	08004895 	.word	0x08004895
 8004878:	08004939 	.word	0x08004939
 800487c:	080048ef 	.word	0x080048ef
 8004880:	08004925 	.word	0x08004925
 8004884:	08004895 	.word	0x08004895
 8004888:	08004895 	.word	0x08004895
 800488c:	08004939 	.word	0x08004939
 8004890:	080048ef 	.word	0x080048ef
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	18d1      	adds	r1, r2, r3
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048a2:	f7ff ff69 	bl	8004778 <prvInsertTimerInActiveList>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d045      	beq.n	8004938 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048b2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80048b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d13d      	bne.n	8004938 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	441a      	add	r2, r3
 80048c4:	2300      	movs	r3, #0
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	2300      	movs	r3, #0
 80048ca:	2100      	movs	r1, #0
 80048cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048ce:	f7ff fe23 	bl	8004518 <xTimerGenericCommand>
 80048d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d12e      	bne.n	8004938 <prvProcessReceivedCommands+0x13c>
 80048da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048de:	f383 8811 	msr	BASEPRI, r3
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	61bb      	str	r3, [r7, #24]
 80048ec:	e7fe      	b.n	80048ec <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80048f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d109      	bne.n	8004910 <prvProcessReceivedCommands+0x114>
 80048fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004900:	f383 8811 	msr	BASEPRI, r3
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	f3bf 8f4f 	dsb	sy
 800490c:	617b      	str	r3, [r7, #20]
 800490e:	e7fe      	b.n	800490e <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004912:	699a      	ldr	r2, [r3, #24]
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	18d1      	adds	r1, r2, r3
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800491c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800491e:	f7ff ff2b 	bl	8004778 <prvInsertTimerInActiveList>
					break;
 8004922:	e009      	b.n	8004938 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004926:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800492a:	2b00      	cmp	r3, #0
 800492c:	d104      	bne.n	8004938 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800492e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004930:	f000 fbb8 	bl	80050a4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004934:	e000      	b.n	8004938 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004936:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004938:	4b07      	ldr	r3, [pc, #28]	; (8004958 <prvProcessReceivedCommands+0x15c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	1d39      	adds	r1, r7, #4
 800493e:	2200      	movs	r2, #0
 8004940:	4618      	mov	r0, r3
 8004942:	f7fe fc71 	bl	8003228 <xQueueReceive>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	f47f af5b 	bne.w	8004804 <prvProcessReceivedCommands+0x8>
	}
}
 800494e:	bf00      	nop
 8004950:	3730      	adds	r7, #48	; 0x30
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	20000c14 	.word	0x20000c14

0800495c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b088      	sub	sp, #32
 8004960:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004962:	e044      	b.n	80049ee <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004964:	4b2b      	ldr	r3, [pc, #172]	; (8004a14 <prvSwitchTimerLists+0xb8>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800496e:	4b29      	ldr	r3, [pc, #164]	; (8004a14 <prvSwitchTimerLists+0xb8>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	3304      	adds	r3, #4
 800497c:	4618      	mov	r0, r3
 800497e:	f7fe f99d 	bl	8002cbc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d12d      	bne.n	80049ee <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	4413      	add	r3, r2
 800499a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d90e      	bls.n	80049c2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049b0:	4b18      	ldr	r3, [pc, #96]	; (8004a14 <prvSwitchTimerLists+0xb8>)
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	3304      	adds	r3, #4
 80049b8:	4619      	mov	r1, r3
 80049ba:	4610      	mov	r0, r2
 80049bc:	f7fe f945 	bl	8002c4a <vListInsert>
 80049c0:	e015      	b.n	80049ee <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049c2:	2300      	movs	r3, #0
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	2300      	movs	r3, #0
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	2100      	movs	r1, #0
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f7ff fda3 	bl	8004518 <xTimerGenericCommand>
 80049d2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d109      	bne.n	80049ee <prvSwitchTimerLists+0x92>
 80049da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049de:	f383 8811 	msr	BASEPRI, r3
 80049e2:	f3bf 8f6f 	isb	sy
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	603b      	str	r3, [r7, #0]
 80049ec:	e7fe      	b.n	80049ec <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049ee:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <prvSwitchTimerLists+0xb8>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1b5      	bne.n	8004964 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80049f8:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <prvSwitchTimerLists+0xb8>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80049fe:	4b06      	ldr	r3, [pc, #24]	; (8004a18 <prvSwitchTimerLists+0xbc>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a04      	ldr	r2, [pc, #16]	; (8004a14 <prvSwitchTimerLists+0xb8>)
 8004a04:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004a06:	4a04      	ldr	r2, [pc, #16]	; (8004a18 <prvSwitchTimerLists+0xbc>)
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	6013      	str	r3, [r2, #0]
}
 8004a0c:	bf00      	nop
 8004a0e:	3718      	adds	r7, #24
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	20000c0c 	.word	0x20000c0c
 8004a18:	20000c10 	.word	0x20000c10

08004a1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004a22:	f000 f963 	bl	8004cec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004a26:	4b15      	ldr	r3, [pc, #84]	; (8004a7c <prvCheckForValidListAndQueue+0x60>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d120      	bne.n	8004a70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004a2e:	4814      	ldr	r0, [pc, #80]	; (8004a80 <prvCheckForValidListAndQueue+0x64>)
 8004a30:	f7fe f8ba 	bl	8002ba8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004a34:	4813      	ldr	r0, [pc, #76]	; (8004a84 <prvCheckForValidListAndQueue+0x68>)
 8004a36:	f7fe f8b7 	bl	8002ba8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004a3a:	4b13      	ldr	r3, [pc, #76]	; (8004a88 <prvCheckForValidListAndQueue+0x6c>)
 8004a3c:	4a10      	ldr	r2, [pc, #64]	; (8004a80 <prvCheckForValidListAndQueue+0x64>)
 8004a3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004a40:	4b12      	ldr	r3, [pc, #72]	; (8004a8c <prvCheckForValidListAndQueue+0x70>)
 8004a42:	4a10      	ldr	r2, [pc, #64]	; (8004a84 <prvCheckForValidListAndQueue+0x68>)
 8004a44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004a46:	2300      	movs	r3, #0
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	4b11      	ldr	r3, [pc, #68]	; (8004a90 <prvCheckForValidListAndQueue+0x74>)
 8004a4c:	4a11      	ldr	r2, [pc, #68]	; (8004a94 <prvCheckForValidListAndQueue+0x78>)
 8004a4e:	2110      	movs	r1, #16
 8004a50:	200a      	movs	r0, #10
 8004a52:	f7fe f9c5 	bl	8002de0 <xQueueGenericCreateStatic>
 8004a56:	4602      	mov	r2, r0
 8004a58:	4b08      	ldr	r3, [pc, #32]	; (8004a7c <prvCheckForValidListAndQueue+0x60>)
 8004a5a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004a5c:	4b07      	ldr	r3, [pc, #28]	; (8004a7c <prvCheckForValidListAndQueue+0x60>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d005      	beq.n	8004a70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a64:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <prvCheckForValidListAndQueue+0x60>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	490b      	ldr	r1, [pc, #44]	; (8004a98 <prvCheckForValidListAndQueue+0x7c>)
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fe fdc8 	bl	8003600 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a70:	f000 f96a 	bl	8004d48 <vPortExitCritical>
}
 8004a74:	bf00      	nop
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	20000c14 	.word	0x20000c14
 8004a80:	20000be4 	.word	0x20000be4
 8004a84:	20000bf8 	.word	0x20000bf8
 8004a88:	20000c0c 	.word	0x20000c0c
 8004a8c:	20000c10 	.word	0x20000c10
 8004a90:	20000cc0 	.word	0x20000cc0
 8004a94:	20000c20 	.word	0x20000c20
 8004a98:	08005370 	.word	0x08005370

08004a9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	3b04      	subs	r3, #4
 8004aac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ab4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	3b04      	subs	r3, #4
 8004aba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	f023 0201 	bic.w	r2, r3, #1
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	3b04      	subs	r3, #4
 8004aca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004acc:	4a0c      	ldr	r2, [pc, #48]	; (8004b00 <pxPortInitialiseStack+0x64>)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	3b14      	subs	r3, #20
 8004ad6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	3b04      	subs	r3, #4
 8004ae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f06f 0202 	mvn.w	r2, #2
 8004aea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	3b20      	subs	r3, #32
 8004af0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004af2:	68fb      	ldr	r3, [r7, #12]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	08004b05 	.word	0x08004b05

08004b04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b0e:	4b11      	ldr	r3, [pc, #68]	; (8004b54 <prvTaskExitError+0x50>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b16:	d009      	beq.n	8004b2c <prvTaskExitError+0x28>
 8004b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1c:	f383 8811 	msr	BASEPRI, r3
 8004b20:	f3bf 8f6f 	isb	sy
 8004b24:	f3bf 8f4f 	dsb	sy
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	e7fe      	b.n	8004b2a <prvTaskExitError+0x26>
 8004b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b30:	f383 8811 	msr	BASEPRI, r3
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	f3bf 8f4f 	dsb	sy
 8004b3c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b3e:	bf00      	nop
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0fc      	beq.n	8004b40 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b46:	bf00      	nop
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	20000008 	.word	0x20000008
	...

08004b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004b60:	4b07      	ldr	r3, [pc, #28]	; (8004b80 <pxCurrentTCBConst2>)
 8004b62:	6819      	ldr	r1, [r3, #0]
 8004b64:	6808      	ldr	r0, [r1, #0]
 8004b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b6a:	f380 8809 	msr	PSP, r0
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f04f 0000 	mov.w	r0, #0
 8004b76:	f380 8811 	msr	BASEPRI, r0
 8004b7a:	4770      	bx	lr
 8004b7c:	f3af 8000 	nop.w

08004b80 <pxCurrentTCBConst2>:
 8004b80:	200006e4 	.word	0x200006e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004b84:	bf00      	nop
 8004b86:	bf00      	nop

08004b88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004b88:	4808      	ldr	r0, [pc, #32]	; (8004bac <prvPortStartFirstTask+0x24>)
 8004b8a:	6800      	ldr	r0, [r0, #0]
 8004b8c:	6800      	ldr	r0, [r0, #0]
 8004b8e:	f380 8808 	msr	MSP, r0
 8004b92:	f04f 0000 	mov.w	r0, #0
 8004b96:	f380 8814 	msr	CONTROL, r0
 8004b9a:	b662      	cpsie	i
 8004b9c:	b661      	cpsie	f
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	f3bf 8f6f 	isb	sy
 8004ba6:	df00      	svc	0
 8004ba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004baa:	bf00      	nop
 8004bac:	e000ed08 	.word	0xe000ed08

08004bb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004bb6:	4b44      	ldr	r3, [pc, #272]	; (8004cc8 <xPortStartScheduler+0x118>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a44      	ldr	r2, [pc, #272]	; (8004ccc <xPortStartScheduler+0x11c>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d109      	bne.n	8004bd4 <xPortStartScheduler+0x24>
 8004bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	613b      	str	r3, [r7, #16]
 8004bd2:	e7fe      	b.n	8004bd2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004bd4:	4b3c      	ldr	r3, [pc, #240]	; (8004cc8 <xPortStartScheduler+0x118>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a3d      	ldr	r2, [pc, #244]	; (8004cd0 <xPortStartScheduler+0x120>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d109      	bne.n	8004bf2 <xPortStartScheduler+0x42>
 8004bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be2:	f383 8811 	msr	BASEPRI, r3
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	e7fe      	b.n	8004bf0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004bf2:	4b38      	ldr	r3, [pc, #224]	; (8004cd4 <xPortStartScheduler+0x124>)
 8004bf4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	22ff      	movs	r2, #255	; 0xff
 8004c02:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c0c:	78fb      	ldrb	r3, [r7, #3]
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c14:	b2da      	uxtb	r2, r3
 8004c16:	4b30      	ldr	r3, [pc, #192]	; (8004cd8 <xPortStartScheduler+0x128>)
 8004c18:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c1a:	4b30      	ldr	r3, [pc, #192]	; (8004cdc <xPortStartScheduler+0x12c>)
 8004c1c:	2207      	movs	r2, #7
 8004c1e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c20:	e009      	b.n	8004c36 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004c22:	4b2e      	ldr	r3, [pc, #184]	; (8004cdc <xPortStartScheduler+0x12c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	3b01      	subs	r3, #1
 8004c28:	4a2c      	ldr	r2, [pc, #176]	; (8004cdc <xPortStartScheduler+0x12c>)
 8004c2a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c2c:	78fb      	ldrb	r3, [r7, #3]
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	005b      	lsls	r3, r3, #1
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c36:	78fb      	ldrb	r3, [r7, #3]
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c3e:	2b80      	cmp	r3, #128	; 0x80
 8004c40:	d0ef      	beq.n	8004c22 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c42:	4b26      	ldr	r3, [pc, #152]	; (8004cdc <xPortStartScheduler+0x12c>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f1c3 0307 	rsb	r3, r3, #7
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d009      	beq.n	8004c62 <xPortStartScheduler+0xb2>
 8004c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	60bb      	str	r3, [r7, #8]
 8004c60:	e7fe      	b.n	8004c60 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c62:	4b1e      	ldr	r3, [pc, #120]	; (8004cdc <xPortStartScheduler+0x12c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	021b      	lsls	r3, r3, #8
 8004c68:	4a1c      	ldr	r2, [pc, #112]	; (8004cdc <xPortStartScheduler+0x12c>)
 8004c6a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c6c:	4b1b      	ldr	r3, [pc, #108]	; (8004cdc <xPortStartScheduler+0x12c>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c74:	4a19      	ldr	r2, [pc, #100]	; (8004cdc <xPortStartScheduler+0x12c>)
 8004c76:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	b2da      	uxtb	r2, r3
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c80:	4b17      	ldr	r3, [pc, #92]	; (8004ce0 <xPortStartScheduler+0x130>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a16      	ldr	r2, [pc, #88]	; (8004ce0 <xPortStartScheduler+0x130>)
 8004c86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004c8c:	4b14      	ldr	r3, [pc, #80]	; (8004ce0 <xPortStartScheduler+0x130>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a13      	ldr	r2, [pc, #76]	; (8004ce0 <xPortStartScheduler+0x130>)
 8004c92:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004c96:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004c98:	f000 f8d6 	bl	8004e48 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004c9c:	4b11      	ldr	r3, [pc, #68]	; (8004ce4 <xPortStartScheduler+0x134>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ca2:	f000 f8f5 	bl	8004e90 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ca6:	4b10      	ldr	r3, [pc, #64]	; (8004ce8 <xPortStartScheduler+0x138>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a0f      	ldr	r2, [pc, #60]	; (8004ce8 <xPortStartScheduler+0x138>)
 8004cac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004cb0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004cb2:	f7ff ff69 	bl	8004b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004cb6:	f7ff f8a3 	bl	8003e00 <vTaskSwitchContext>
	prvTaskExitError();
 8004cba:	f7ff ff23 	bl	8004b04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3718      	adds	r7, #24
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	e000ed00 	.word	0xe000ed00
 8004ccc:	410fc271 	.word	0x410fc271
 8004cd0:	410fc270 	.word	0x410fc270
 8004cd4:	e000e400 	.word	0xe000e400
 8004cd8:	20000d10 	.word	0x20000d10
 8004cdc:	20000d14 	.word	0x20000d14
 8004ce0:	e000ed20 	.word	0xe000ed20
 8004ce4:	20000008 	.word	0x20000008
 8004ce8:	e000ef34 	.word	0xe000ef34

08004cec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d04:	4b0e      	ldr	r3, [pc, #56]	; (8004d40 <vPortEnterCritical+0x54>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	4a0d      	ldr	r2, [pc, #52]	; (8004d40 <vPortEnterCritical+0x54>)
 8004d0c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d0e:	4b0c      	ldr	r3, [pc, #48]	; (8004d40 <vPortEnterCritical+0x54>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d10e      	bne.n	8004d34 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d16:	4b0b      	ldr	r3, [pc, #44]	; (8004d44 <vPortEnterCritical+0x58>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d009      	beq.n	8004d34 <vPortEnterCritical+0x48>
 8004d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d24:	f383 8811 	msr	BASEPRI, r3
 8004d28:	f3bf 8f6f 	isb	sy
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	603b      	str	r3, [r7, #0]
 8004d32:	e7fe      	b.n	8004d32 <vPortEnterCritical+0x46>
	}
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	20000008 	.word	0x20000008
 8004d44:	e000ed04 	.word	0xe000ed04

08004d48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d4e:	4b11      	ldr	r3, [pc, #68]	; (8004d94 <vPortExitCritical+0x4c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d109      	bne.n	8004d6a <vPortExitCritical+0x22>
 8004d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5a:	f383 8811 	msr	BASEPRI, r3
 8004d5e:	f3bf 8f6f 	isb	sy
 8004d62:	f3bf 8f4f 	dsb	sy
 8004d66:	607b      	str	r3, [r7, #4]
 8004d68:	e7fe      	b.n	8004d68 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004d6a:	4b0a      	ldr	r3, [pc, #40]	; (8004d94 <vPortExitCritical+0x4c>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	4a08      	ldr	r2, [pc, #32]	; (8004d94 <vPortExitCritical+0x4c>)
 8004d72:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d74:	4b07      	ldr	r3, [pc, #28]	; (8004d94 <vPortExitCritical+0x4c>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d104      	bne.n	8004d86 <vPortExitCritical+0x3e>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	20000008 	.word	0x20000008
	...

08004da0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004da0:	f3ef 8009 	mrs	r0, PSP
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	4b15      	ldr	r3, [pc, #84]	; (8004e00 <pxCurrentTCBConst>)
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	f01e 0f10 	tst.w	lr, #16
 8004db0:	bf08      	it	eq
 8004db2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004db6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dba:	6010      	str	r0, [r2, #0]
 8004dbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004dc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004dc4:	f380 8811 	msr	BASEPRI, r0
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f7ff f816 	bl	8003e00 <vTaskSwitchContext>
 8004dd4:	f04f 0000 	mov.w	r0, #0
 8004dd8:	f380 8811 	msr	BASEPRI, r0
 8004ddc:	bc09      	pop	{r0, r3}
 8004dde:	6819      	ldr	r1, [r3, #0]
 8004de0:	6808      	ldr	r0, [r1, #0]
 8004de2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de6:	f01e 0f10 	tst.w	lr, #16
 8004dea:	bf08      	it	eq
 8004dec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004df0:	f380 8809 	msr	PSP, r0
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	f3af 8000 	nop.w

08004e00 <pxCurrentTCBConst>:
 8004e00:	200006e4 	.word	0x200006e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e04:	bf00      	nop
 8004e06:	bf00      	nop

08004e08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e20:	f7fe ff30 	bl	8003c84 <xTaskIncrementTick>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e2a:	4b06      	ldr	r3, [pc, #24]	; (8004e44 <SysTick_Handler+0x3c>)
 8004e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e30:	601a      	str	r2, [r3, #0]
 8004e32:	2300      	movs	r3, #0
 8004e34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e3c:	bf00      	nop
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	e000ed04 	.word	0xe000ed04

08004e48 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e48:	b480      	push	{r7}
 8004e4a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e4c:	4b0b      	ldr	r3, [pc, #44]	; (8004e7c <vPortSetupTimerInterrupt+0x34>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e52:	4b0b      	ldr	r3, [pc, #44]	; (8004e80 <vPortSetupTimerInterrupt+0x38>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e58:	4b0a      	ldr	r3, [pc, #40]	; (8004e84 <vPortSetupTimerInterrupt+0x3c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a0a      	ldr	r2, [pc, #40]	; (8004e88 <vPortSetupTimerInterrupt+0x40>)
 8004e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e62:	099b      	lsrs	r3, r3, #6
 8004e64:	4a09      	ldr	r2, [pc, #36]	; (8004e8c <vPortSetupTimerInterrupt+0x44>)
 8004e66:	3b01      	subs	r3, #1
 8004e68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e6a:	4b04      	ldr	r3, [pc, #16]	; (8004e7c <vPortSetupTimerInterrupt+0x34>)
 8004e6c:	2207      	movs	r2, #7
 8004e6e:	601a      	str	r2, [r3, #0]
}
 8004e70:	bf00      	nop
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	e000e010 	.word	0xe000e010
 8004e80:	e000e018 	.word	0xe000e018
 8004e84:	20000000 	.word	0x20000000
 8004e88:	10624dd3 	.word	0x10624dd3
 8004e8c:	e000e014 	.word	0xe000e014

08004e90 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004e90:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004ea0 <vPortEnableVFP+0x10>
 8004e94:	6801      	ldr	r1, [r0, #0]
 8004e96:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004e9a:	6001      	str	r1, [r0, #0]
 8004e9c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004e9e:	bf00      	nop
 8004ea0:	e000ed88 	.word	0xe000ed88

08004ea4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004eaa:	f3ef 8305 	mrs	r3, IPSR
 8004eae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2b0f      	cmp	r3, #15
 8004eb4:	d913      	bls.n	8004ede <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004eb6:	4a16      	ldr	r2, [pc, #88]	; (8004f10 <vPortValidateInterruptPriority+0x6c>)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4413      	add	r3, r2
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ec0:	4b14      	ldr	r3, [pc, #80]	; (8004f14 <vPortValidateInterruptPriority+0x70>)
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	7afa      	ldrb	r2, [r7, #11]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d209      	bcs.n	8004ede <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ece:	f383 8811 	msr	BASEPRI, r3
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	f3bf 8f4f 	dsb	sy
 8004eda:	607b      	str	r3, [r7, #4]
 8004edc:	e7fe      	b.n	8004edc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004ede:	4b0e      	ldr	r3, [pc, #56]	; (8004f18 <vPortValidateInterruptPriority+0x74>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ee6:	4b0d      	ldr	r3, [pc, #52]	; (8004f1c <vPortValidateInterruptPriority+0x78>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d909      	bls.n	8004f02 <vPortValidateInterruptPriority+0x5e>
 8004eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	603b      	str	r3, [r7, #0]
 8004f00:	e7fe      	b.n	8004f00 <vPortValidateInterruptPriority+0x5c>
	}
 8004f02:	bf00      	nop
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	e000e3f0 	.word	0xe000e3f0
 8004f14:	20000d10 	.word	0x20000d10
 8004f18:	e000ed0c 	.word	0xe000ed0c
 8004f1c:	20000d14 	.word	0x20000d14

08004f20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08a      	sub	sp, #40	; 0x28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f2c:	f7fe fdf0 	bl	8003b10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f30:	4b57      	ldr	r3, [pc, #348]	; (8005090 <pvPortMalloc+0x170>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d101      	bne.n	8004f3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f38:	f000 f90c 	bl	8005154 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f3c:	4b55      	ldr	r3, [pc, #340]	; (8005094 <pvPortMalloc+0x174>)
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4013      	ands	r3, r2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f040 808c 	bne.w	8005062 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d01c      	beq.n	8004f8a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004f50:	2208      	movs	r2, #8
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4413      	add	r3, r2
 8004f56:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f003 0307 	and.w	r3, r3, #7
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d013      	beq.n	8004f8a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f023 0307 	bic.w	r3, r3, #7
 8004f68:	3308      	adds	r3, #8
 8004f6a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d009      	beq.n	8004f8a <pvPortMalloc+0x6a>
 8004f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7a:	f383 8811 	msr	BASEPRI, r3
 8004f7e:	f3bf 8f6f 	isb	sy
 8004f82:	f3bf 8f4f 	dsb	sy
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	e7fe      	b.n	8004f88 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d068      	beq.n	8005062 <pvPortMalloc+0x142>
 8004f90:	4b41      	ldr	r3, [pc, #260]	; (8005098 <pvPortMalloc+0x178>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d863      	bhi.n	8005062 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f9a:	4b40      	ldr	r3, [pc, #256]	; (800509c <pvPortMalloc+0x17c>)
 8004f9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f9e:	4b3f      	ldr	r3, [pc, #252]	; (800509c <pvPortMalloc+0x17c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fa4:	e004      	b.n	8004fb0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d903      	bls.n	8004fc2 <pvPortMalloc+0xa2>
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1f1      	bne.n	8004fa6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004fc2:	4b33      	ldr	r3, [pc, #204]	; (8005090 <pvPortMalloc+0x170>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d04a      	beq.n	8005062 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2208      	movs	r2, #8
 8004fd2:	4413      	add	r3, r2
 8004fd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	1ad2      	subs	r2, r2, r3
 8004fe6:	2308      	movs	r3, #8
 8004fe8:	005b      	lsls	r3, r3, #1
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d91e      	bls.n	800502c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	f003 0307 	and.w	r3, r3, #7
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d009      	beq.n	8005014 <pvPortMalloc+0xf4>
 8005000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005004:	f383 8811 	msr	BASEPRI, r3
 8005008:	f3bf 8f6f 	isb	sy
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	613b      	str	r3, [r7, #16]
 8005012:	e7fe      	b.n	8005012 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	1ad2      	subs	r2, r2, r3
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005026:	69b8      	ldr	r0, [r7, #24]
 8005028:	f000 f8f6 	bl	8005218 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800502c:	4b1a      	ldr	r3, [pc, #104]	; (8005098 <pvPortMalloc+0x178>)
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	4a18      	ldr	r2, [pc, #96]	; (8005098 <pvPortMalloc+0x178>)
 8005038:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800503a:	4b17      	ldr	r3, [pc, #92]	; (8005098 <pvPortMalloc+0x178>)
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	4b18      	ldr	r3, [pc, #96]	; (80050a0 <pvPortMalloc+0x180>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	429a      	cmp	r2, r3
 8005044:	d203      	bcs.n	800504e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005046:	4b14      	ldr	r3, [pc, #80]	; (8005098 <pvPortMalloc+0x178>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a15      	ldr	r2, [pc, #84]	; (80050a0 <pvPortMalloc+0x180>)
 800504c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	4b10      	ldr	r3, [pc, #64]	; (8005094 <pvPortMalloc+0x174>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	431a      	orrs	r2, r3
 8005058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	2200      	movs	r2, #0
 8005060:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005062:	f7fe fd63 	bl	8003b2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	f003 0307 	and.w	r3, r3, #7
 800506c:	2b00      	cmp	r3, #0
 800506e:	d009      	beq.n	8005084 <pvPortMalloc+0x164>
 8005070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005074:	f383 8811 	msr	BASEPRI, r3
 8005078:	f3bf 8f6f 	isb	sy
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	60fb      	str	r3, [r7, #12]
 8005082:	e7fe      	b.n	8005082 <pvPortMalloc+0x162>
	return pvReturn;
 8005084:	69fb      	ldr	r3, [r7, #28]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3728      	adds	r7, #40	; 0x28
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	20008d20 	.word	0x20008d20
 8005094:	20008d2c 	.word	0x20008d2c
 8005098:	20008d24 	.word	0x20008d24
 800509c:	20008d18 	.word	0x20008d18
 80050a0:	20008d28 	.word	0x20008d28

080050a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d046      	beq.n	8005144 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80050b6:	2308      	movs	r3, #8
 80050b8:	425b      	negs	r3, r3
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	4413      	add	r3, r2
 80050be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	685a      	ldr	r2, [r3, #4]
 80050c8:	4b20      	ldr	r3, [pc, #128]	; (800514c <vPortFree+0xa8>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4013      	ands	r3, r2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d109      	bne.n	80050e6 <vPortFree+0x42>
 80050d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d6:	f383 8811 	msr	BASEPRI, r3
 80050da:	f3bf 8f6f 	isb	sy
 80050de:	f3bf 8f4f 	dsb	sy
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	e7fe      	b.n	80050e4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d009      	beq.n	8005102 <vPortFree+0x5e>
 80050ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	60bb      	str	r3, [r7, #8]
 8005100:	e7fe      	b.n	8005100 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	4b11      	ldr	r3, [pc, #68]	; (800514c <vPortFree+0xa8>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4013      	ands	r3, r2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d019      	beq.n	8005144 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d115      	bne.n	8005144 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	4b0b      	ldr	r3, [pc, #44]	; (800514c <vPortFree+0xa8>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	43db      	mvns	r3, r3
 8005122:	401a      	ands	r2, r3
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005128:	f7fe fcf2 	bl	8003b10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	4b07      	ldr	r3, [pc, #28]	; (8005150 <vPortFree+0xac>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4413      	add	r3, r2
 8005136:	4a06      	ldr	r2, [pc, #24]	; (8005150 <vPortFree+0xac>)
 8005138:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800513a:	6938      	ldr	r0, [r7, #16]
 800513c:	f000 f86c 	bl	8005218 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005140:	f7fe fcf4 	bl	8003b2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005144:	bf00      	nop
 8005146:	3718      	adds	r7, #24
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	20008d2c 	.word	0x20008d2c
 8005150:	20008d24 	.word	0x20008d24

08005154 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800515a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800515e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005160:	4b27      	ldr	r3, [pc, #156]	; (8005200 <prvHeapInit+0xac>)
 8005162:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00c      	beq.n	8005188 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	3307      	adds	r3, #7
 8005172:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f023 0307 	bic.w	r3, r3, #7
 800517a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	4a1f      	ldr	r2, [pc, #124]	; (8005200 <prvHeapInit+0xac>)
 8005184:	4413      	add	r3, r2
 8005186:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800518c:	4a1d      	ldr	r2, [pc, #116]	; (8005204 <prvHeapInit+0xb0>)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005192:	4b1c      	ldr	r3, [pc, #112]	; (8005204 <prvHeapInit+0xb0>)
 8005194:	2200      	movs	r2, #0
 8005196:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	4413      	add	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80051a0:	2208      	movs	r2, #8
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	1a9b      	subs	r3, r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 0307 	bic.w	r3, r3, #7
 80051ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4a15      	ldr	r2, [pc, #84]	; (8005208 <prvHeapInit+0xb4>)
 80051b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80051b6:	4b14      	ldr	r3, [pc, #80]	; (8005208 <prvHeapInit+0xb4>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2200      	movs	r2, #0
 80051bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80051be:	4b12      	ldr	r3, [pc, #72]	; (8005208 <prvHeapInit+0xb4>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2200      	movs	r2, #0
 80051c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	1ad2      	subs	r2, r2, r3
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051d4:	4b0c      	ldr	r3, [pc, #48]	; (8005208 <prvHeapInit+0xb4>)
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	4a0a      	ldr	r2, [pc, #40]	; (800520c <prvHeapInit+0xb8>)
 80051e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	4a09      	ldr	r2, [pc, #36]	; (8005210 <prvHeapInit+0xbc>)
 80051ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051ec:	4b09      	ldr	r3, [pc, #36]	; (8005214 <prvHeapInit+0xc0>)
 80051ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80051f2:	601a      	str	r2, [r3, #0]
}
 80051f4:	bf00      	nop
 80051f6:	3714      	adds	r7, #20
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	20000d18 	.word	0x20000d18
 8005204:	20008d18 	.word	0x20008d18
 8005208:	20008d20 	.word	0x20008d20
 800520c:	20008d28 	.word	0x20008d28
 8005210:	20008d24 	.word	0x20008d24
 8005214:	20008d2c 	.word	0x20008d2c

08005218 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005220:	4b28      	ldr	r3, [pc, #160]	; (80052c4 <prvInsertBlockIntoFreeList+0xac>)
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	e002      	b.n	800522c <prvInsertBlockIntoFreeList+0x14>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	429a      	cmp	r2, r3
 8005234:	d8f7      	bhi.n	8005226 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	4413      	add	r3, r2
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	429a      	cmp	r2, r3
 8005246:	d108      	bne.n	800525a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	441a      	add	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	441a      	add	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	429a      	cmp	r2, r3
 800526c:	d118      	bne.n	80052a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	4b15      	ldr	r3, [pc, #84]	; (80052c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d00d      	beq.n	8005296 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	441a      	add	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	e008      	b.n	80052a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005296:	4b0c      	ldr	r3, [pc, #48]	; (80052c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	e003      	b.n	80052a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d002      	beq.n	80052b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052b6:	bf00      	nop
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	20008d18 	.word	0x20008d18
 80052c8:	20008d20 	.word	0x20008d20

080052cc <__libc_init_array>:
 80052cc:	b570      	push	{r4, r5, r6, lr}
 80052ce:	4e0d      	ldr	r6, [pc, #52]	; (8005304 <__libc_init_array+0x38>)
 80052d0:	4c0d      	ldr	r4, [pc, #52]	; (8005308 <__libc_init_array+0x3c>)
 80052d2:	1ba4      	subs	r4, r4, r6
 80052d4:	10a4      	asrs	r4, r4, #2
 80052d6:	2500      	movs	r5, #0
 80052d8:	42a5      	cmp	r5, r4
 80052da:	d109      	bne.n	80052f0 <__libc_init_array+0x24>
 80052dc:	4e0b      	ldr	r6, [pc, #44]	; (800530c <__libc_init_array+0x40>)
 80052de:	4c0c      	ldr	r4, [pc, #48]	; (8005310 <__libc_init_array+0x44>)
 80052e0:	f000 f82c 	bl	800533c <_init>
 80052e4:	1ba4      	subs	r4, r4, r6
 80052e6:	10a4      	asrs	r4, r4, #2
 80052e8:	2500      	movs	r5, #0
 80052ea:	42a5      	cmp	r5, r4
 80052ec:	d105      	bne.n	80052fa <__libc_init_array+0x2e>
 80052ee:	bd70      	pop	{r4, r5, r6, pc}
 80052f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052f4:	4798      	blx	r3
 80052f6:	3501      	adds	r5, #1
 80052f8:	e7ee      	b.n	80052d8 <__libc_init_array+0xc>
 80052fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052fe:	4798      	blx	r3
 8005300:	3501      	adds	r5, #1
 8005302:	e7f2      	b.n	80052ea <__libc_init_array+0x1e>
 8005304:	08005398 	.word	0x08005398
 8005308:	08005398 	.word	0x08005398
 800530c:	08005398 	.word	0x08005398
 8005310:	0800539c 	.word	0x0800539c

08005314 <memcpy>:
 8005314:	b510      	push	{r4, lr}
 8005316:	1e43      	subs	r3, r0, #1
 8005318:	440a      	add	r2, r1
 800531a:	4291      	cmp	r1, r2
 800531c:	d100      	bne.n	8005320 <memcpy+0xc>
 800531e:	bd10      	pop	{r4, pc}
 8005320:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005324:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005328:	e7f7      	b.n	800531a <memcpy+0x6>

0800532a <memset>:
 800532a:	4402      	add	r2, r0
 800532c:	4603      	mov	r3, r0
 800532e:	4293      	cmp	r3, r2
 8005330:	d100      	bne.n	8005334 <memset+0xa>
 8005332:	4770      	bx	lr
 8005334:	f803 1b01 	strb.w	r1, [r3], #1
 8005338:	e7f9      	b.n	800532e <memset+0x4>
	...

0800533c <_init>:
 800533c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800533e:	bf00      	nop
 8005340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005342:	bc08      	pop	{r3}
 8005344:	469e      	mov	lr, r3
 8005346:	4770      	bx	lr

08005348 <_fini>:
 8005348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534a:	bf00      	nop
 800534c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800534e:	bc08      	pop	{r3}
 8005350:	469e      	mov	lr, r3
 8005352:	4770      	bx	lr
